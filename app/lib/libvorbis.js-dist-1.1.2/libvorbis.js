/// <reference path="../typings/webrtc/MediaStream.d.ts" />
/// <reference path="../typings/webaudioapi/waa.d.ts" />
/// <reference path="../typings/es6-promise/es6-promise.d.ts" />
/// <reference path="MediaRecorder.d.ts" />
/// <reference path="vorbis_encoder.d.ts" />
var window;
if (window && !window.BlobEvent) {
    window.BlobEvent = function BlobEvent(type, init) {
        this.type = type;
        this.data = init.data;
    };
}
// END BlobEvent shim
var VorbisWorkerScript = (function () {
    function VorbisWorkerScript() {
    }
    VorbisWorkerScript.createWorker = function () {
        return new Worker(VorbisWorkerScript.getCurrentScriptURL());
    };
    // NOTE `self` should be type `WorkerGlobalScope`
    // see https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope
    VorbisWorkerScript.main = function (self) {
        var Module = makeVorbisEncoderModule({
            onRuntimeInitialized: function () {
                self.postMessage({ type: 'load' });
            }
        });
        var handle;
        function flush() {
            var dataLength = Module._encoder_get_data_len(handle);
            if (dataLength === 0)
                return;
            var dataPointer = Module._encoder_get_data(handle);
            var chunk = Module.HEAPU8.subarray(dataPointer, dataPointer + dataLength);
            var data = new Uint8Array(chunk); // copy
            var buffer = data.buffer;
            Module._encoder_clear_data(handle);
            self.postMessage({ type: 'data', buffer: buffer }, [buffer]);
        }
        self.addEventListener('message', function (ev) {
            var data = ev.data;
            switch (data.type) {
                case 'start':
                    handle = Module._encoder_create_vbr(data.channels, data.sampleRate, data.quality);
                    Module._encoder_write_headers(handle);
                    flush();
                    break;
                case 'data':
                    Module._encoder_prepare_analysis_buffers(handle, data.samples);
                    for (var ch = 0; ch < data.channels; ++ch) {
                        var bufferPtr = Module._encoder_get_analysis_buffer(handle, ch);
                        var array = new Float32Array(data.buffers[ch]);
                        Module.HEAPF32.set(array, bufferPtr >> 2);
                    }
                    Module._encoder_encode(handle);
                    flush();
                    break;
                case 'finish':
                    Module._encoder_finish(handle);
                    flush();
                    Module._encoder_destroy(handle);
                    self.postMessage({ type: 'finish' });
                    break;
            }
        });
    };
    VorbisWorkerScript.getCurrentScriptURL = (function () {
        if (!this.document) {
            return null;
        }
        var script = document.currentScript;
        var scriptSrc = script.getAttribute('src');
        var absoluteRegex = /^(blob\:|http\:|https\:)/;
        var url;
        if (absoluteRegex.test(scriptSrc)) {
            url = scriptSrc;
        }
        else {
            var dirname = location.pathname.split('/').slice(0, -1).join('/');
            url = location.protocol + "//" + location.host;
            if (scriptSrc[0] === '/') {
                url += scriptSrc;
            }
            else {
                url += dirname + '/' + scriptSrc;
            }
        }
        return function () { return url; };
    })();
    return VorbisWorkerScript;
}());
function noop() { }
var VorbisEncoder = (function () {
    // ---
    function VorbisEncoder() {
        this._worker = VorbisWorkerScript.createWorker();
        // ---
        this._ondata = noop;
        this._onfinish = noop;
        // ---
        this._worker.onmessage = this.handleEncoderMessage.bind(this);
    }
    Object.defineProperty(VorbisEncoder.prototype, "ondata", {
        get: function () {
            return this._ondata;
        },
        set: function (value) {
            this._ondata = value || noop;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VorbisEncoder.prototype, "onfinish", {
        get: function () {
            return this._onfinish;
        },
        set: function (value) {
            this._onfinish = value || noop;
        },
        enumerable: true,
        configurable: true
    });
    VorbisEncoder.prototype.init = function (channels, sampleRate, quality) {
        this._worker.postMessage({
            type: 'start',
            sampleRate: sampleRate,
            channels: channels,
            quality: quality
        });
    };
    VorbisEncoder.prototype.encode = function (buffers, samples, channels) {
        this._worker.postMessage({
            type: 'data',
            samples: samples,
            channels: channels,
            buffers: buffers
        }, buffers);
    };
    VorbisEncoder.prototype.finish = function () {
        this._worker.postMessage({ type: 'finish' });
    };
    VorbisEncoder.prototype.handleEncoderMessage = function (ev) {
        var data = ev.data;
        switch (data.type) {
            case 'load':
                // TODO
                break;
            case 'data':
                this._ondata(data.buffer);
                break;
            case 'finish':
                this._onfinish(new Event('finish'));
                break;
        }
    };
    return VorbisEncoder;
}());
var RecordingState;
(function (RecordingState) {
    RecordingState[RecordingState["inactive"] = 0] = "inactive";
    RecordingState[RecordingState["recording"] = 1] = "recording";
    RecordingState[RecordingState["paused"] = 2] = "paused";
})(RecordingState || (RecordingState = {}));
function makeBlobEvent(type, blob) {
    return new BlobEvent(type, { data: blob, blob: blob });
}
var VorbisMediaRecorder = (function () {
    // ---
    function VorbisMediaRecorder(stream, options) {
        this._state = RecordingState.inactive;
        this._stream = stream;
        this._encoder = new VorbisEncoder();
        this._chunks = [];
        this._ctx = new AudioContext();
        this._sourceNode = this._ctx.createMediaStreamSource(stream);
        this._procNode = this._ctx.createScriptProcessor(4096);
        this._onstart = noop;
        this._ondataavailable = noop;
        this._onstop = noop;
        // ---
        this._encoder.ondata = this.handleEncoderData.bind(this);
        this._encoder.onfinish = this.handleEncoderFinish.bind(this);
        this._procNode.onaudioprocess = this.handleAudioProcess.bind(this);
    }
    Object.defineProperty(VorbisMediaRecorder.prototype, "stream", {
        get: function () {
            return this._stream;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VorbisMediaRecorder.prototype, "mimeType", {
        get: function () {
            return 'audio/ogg';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VorbisMediaRecorder.prototype, "state", {
        get: function () {
            return RecordingState[this._state];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VorbisMediaRecorder.prototype, "onstart", {
        get: function () {
            return this._onstart;
        },
        set: function (value) {
            this._onstart = value || noop;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VorbisMediaRecorder.prototype, "ondataavailable", {
        get: function () {
            return this._ondataavailable;
        },
        set: function (value) {
            this._ondataavailable = value || noop;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VorbisMediaRecorder.prototype, "onstop", {
        get: function () {
            return this._onstop;
        },
        set: function (value) {
            this._onstop = value || noop;
        },
        enumerable: true,
        configurable: true
    });
    VorbisMediaRecorder.prototype.start = function (timeslice) {
        var _this = this;
        if (timeslice !== undefined) {
            throw new Error('not implemented');
        }
        if (this._state !== RecordingState.inactive) {
            throw new Error('invalid state');
        }
        setTimeout(function () {
            _this._state = RecordingState.recording;
            _this._chunks = [];
            _this._sourceNode.connect(_this._procNode);
            _this._procNode.connect(_this._ctx.destination);
            var channels = _this._sourceNode.channelCount;
            var sampleRate = _this._ctx.sampleRate;
            _this._encoder.init(channels, sampleRate, 0.4);
            _this.onStart();
        });
    };
    VorbisMediaRecorder.prototype.stop = function () {
        var _this = this;
        if (this._state === RecordingState.inactive) {
            throw new Error('invalid state');
        }
        setTimeout(function () {
            _this._state = RecordingState.inactive;
            _this._sourceNode.disconnect(_this._procNode);
            _this._procNode.disconnect(_this._ctx.destination);
            _this._encoder.finish();
        });
    };
    VorbisMediaRecorder.prototype.onStart = function () {
        this._onstart(new Event('start'));
    };
    VorbisMediaRecorder.prototype.onDataAvailable = function (data) {
        this._ondataavailable(makeBlobEvent('dataavailable', data));
    };
    VorbisMediaRecorder.prototype.onStop = function () {
        this._onstop(new Event('stop'));
    };
    VorbisMediaRecorder.prototype.handleEncoderData = function (data) {
        this._chunks.push(data);
    };
    VorbisMediaRecorder.prototype.handleEncoderFinish = function () {
        var blob = new Blob(this._chunks, { type: this.mimeType });
        this.onDataAvailable(blob);
        this.onStop();
    };
    VorbisMediaRecorder.prototype.handleAudioProcess = function (ev) {
        var buffers = [];
        var audioBuffer = ev.inputBuffer;
        var samples = audioBuffer.length;
        var channels = audioBuffer.numberOfChannels;
        for (var ch = 0; ch < channels; ++ch) {
            // make a copy
            var array = audioBuffer.getChannelData(ch).slice();
            buffers.push(array.buffer);
        }
        this._encoder.encode(buffers, samples, channels);
    };
    return VorbisMediaRecorder;
}());
function makeVorbisEncoderModule(Module, module) {
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module["UTF16ToString"] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module["UTF32ToString"] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  buffer = new ArrayBuffer(TOTAL_MEMORY);
}
updateGlobalBufferViews();


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 546448;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,248,63,0,0,0,0,0,0,4,64,0,0,0,0,0,0,18,64,0,0,0,0,0,0,33,64,0,0,0,0,0,128,48,64,0,0,0,4,107,244,52,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,248,63,0,0,0,0,0,0,0,64,0,0,0,0,0,0,4,64,0,0,0,0,0,0,18,64,0,0,0,0,0,0,33,64,0,0,0,4,107,244,52,66,255,255,255,255,0,0,12,195,0,0,12,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,194,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,128,0,0,0,63,0,0,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,66,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,249,213,64,0,0,0,0,0,64,223,64,0,0,0,0,0,136,227,64,0,0,0,0,0,112,231,64,0,0,0,0,0,88,235,64,0,0,0,0,0,64,239,64,0,0,0,0,0,136,243,64,0,0,0,0,0,112,247,64,0,0,0,0,0,88,251,64,0,0,0,0,0,64,255,64,0,0,0,0,0,136,3,65,0,0,0,0,136,132,14,65,154,153,153,153,153,153,185,191,0,0,0,0,0,0,0,0,154,153,153,153,153,153,185,63,154,153,153,153,153,153,201,63,51,51,51,51,51,51,211,63,154,153,153,153,153,153,217,63,0,0,0,0,0,0,224,63,51,51,51,51,51,51,227,63,102,102,102,102,102,102,230,63,154,153,153,153,153,153,233,63,205,204,204,204,204,204,236,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,224,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,205,204,204,204,204,204,244,63,154,153,153,153,153,153,249,63,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,12,64,0,0,0,0,0,0,16,64,0,0,0,0,0,0,16,64,51,51,51,51,51,51,17,64,102,102,102,102,102,102,18,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,20,64,0,0,0,0,0,0,20,64,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,63,154,153,153,153,153,153,201,63,154,153,153,153,153,153,217,63,51,51,51,51,51,51,227,63,0,0,0,0,128,135,195,64,0,0,0,0,128,135,195,64,0,0,0,0,128,135,195,64,0,0,0,0,128,135,195,64,0,0,0,0,128,135,195,64,0,0,0,0,128,135,195,64,205,204,204,204,204,204,43,64,51,51,51,51,51,51,46,64,154,153,153,153,153,153,47,64,0,0,0,0,0,128,48,64,51,51,51,51,51,51,49,64,102,102,102,102,102,230,50,64,154,153,153,153,153,25,52,64,0,0,0,0,0,0,72,64,0,0,0,0,0,56,143,64,0,0,0,0,0,56,143,64,0,0,0,0,0,56,143,64,0,0,0,0,0,56,143,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,248,63,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,64,0,0,0,0,0,0,4,64,154,153,153,153,153,153,5,64,0,0,0,0,0,0,8,64,154,153,153,153,153,153,13,64,0,0,0,0,0,0,16,64,0,0,0,0,0,0,16,64,0,0,0,0,0,88,203,64,0,0,0,0,0,136,211,64,0,0,0,0,0,88,219,64,0,0,0,0,0,142,226,64,0,0,0,0,0,118,230,64,0,0,0,0,0,94,234,64,0,0,0,0,128,79,242,64,0,0,0,0,0,112,247,64,0,0,0,0,0,76,253,64,0,0,0,0,0,23,1,65,0,0,0,0,0,249,5,65,0,0,0,0,8,76,13,65,0,0,0,0,0,64,223,64,0,0,0,0,0,112,231,64,0,0,0,0,0,76,237,64,0,0,0,0,0,23,241,64,0,0,0,0,0,136,243,64,0,0,0,0,0,255,244,64,0,0,0,0,0,112,247,64,0,0,0,0,0,219,250,64,0,0,0,0,0,76,253,64,0,0,0,0,0,23,1,65,0,0,0,0,0,136,3,65,0,0,0,0,8,76,13,65,0,0,0,0,0,148,209,64,0,0,0,0,0,88,219,64,0,0,0,0,0,23,225,64,0,0,0,0,0,249,229,64,0,0,0,0,0,88,235,64,0,0,0,0,0,76,237,64,0,0,0,0,128,79,242,64,0,0,0,0,0,249,245,64,0,0,0,0,0,106,248,64,0,0,0,0,128,19,252,64,0,0,0,0,128,79,2,65,0,0,0,0,128,49,7,65,154,153,153,153,153,153,40,64,0,0,0,0,0,0,42,64,0,0,0,0,0,0,42,64,0,0,0,0,0,0,44,64,0,0,0,0,0,0,46,64,0,0,0,0,0,192,88,64,0,0,0,0,0,192,88,64,0,0,0,0,0,192,88,64,0,0,0,0,0,192,88,64,0,0,0,0,0,192,88,64,0,0,0,0,0,192,88,64,0,0,0,0,0,192,88,64,0,0,0,0,0,76,221,64,0,0,0,0,0,130,228,64,0,0,0,0,0,100,233,64,0,0,0,0,0,64,239,64,0,0,0,0,0,148,241,64,0,0,0,0,0,11,243,64,0,0,0,0,0,255,244,64,0,0,0,0,0,118,246,64,0,0,0,0,0,219,250,64,0,0,0,0,0,76,253,64,0,0,0,0,0,23,1,65,0,0,0,0,128,49,7,65,0,0,0,0,0,76,205,64,0,0,0,0,0,136,211,64,0,0,0,0,0,124,229,64,0,0,0,0,0,255,244,64,154,153,153,153,153,153,185,191,154,153,153,153,153,153,169,63,0,0,0,0,0,0,224,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,154,153,153,153,153,153,233,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,51,51,51,51,51,51,211,63,0,0,0,0,0,0,224,63,0,0,0,0,0,0,224,63,0,0,0,0,0,0,224,63,0,0,0,0,0,0,35,64,0,0,0,0,0,0,38,64,0,0,0,0,0,0,62,64,0,0,0,0,0,192,88,64,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,64,0,0,0,0,0,0,8,64,0,0,0,0,0,0,16,64,0,0,0,0,0,64,207,64,0,0,0,0,0,88,219,64,0,0,0,0,0,106,232,64,0,0,0,0,0,249,245,64,0,0,0,0,0,112,199,64,0,0,0,0,0,136,211,64,0,0,0,0,0,124,229,64,0,0,0,0,0,255,244,64,0,0,0,0,0,0,26,64,0,0,0,0,0,0,32,64,0,0,0,0,0,0,62,64,0,0,0,0,0,192,88,64,0,0,0,0,0,64,207,64,0,0,0,0,0,88,219,64,0,0,0,0,0,64,239,64,0,0,0,0,0,106,248,64,0,0,0,0,0,64,191,64,0,0,0,0,0,100,201,64,0,0,0,0,0,124,229,64,154,153,153,153,153,153,185,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,51,51,51,51,51,51,211,63,0,0,0,0,0,0,224,63,0,0,0,0,0,0,224,63,0,0,0,0,0,0,18,64,0,0,0,0,0,0,22,64,0,0,0,0,0,0,62,64,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,64,0,0,0,0,0,0,8,64,0,0,0,0,0,112,199,64,0,0,0,0,0,136,211,64,0,0,0,0,0,106,232,64,0,0,0,0,0,112,183,64,0,0,0,0,0,148,193,64,0,0,0,0,0,64,223,64,154,153,153,153,153,153,185,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,224,63,0,0,0,0,0,0,224,63,0,0,0,0,0,0,8,64,0,0,0,0,0,0,16,64,0,0,0,0,0,0,16,64,0,0,0,0,0,64,191,64,0,0,0,0,0,88,203,64,0,0,0,0,0,130,228,64,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,191,0,0,0,0,0,0,240,191,0,0,0,0,183,29,193,4,110,59,130,9,217,38,67,13,220,118,4,19,107,107,197,23,178,77,134,26,5,80,71,30,184,237,8,38,15,240,201,34,214,214,138,47,97,203,75,43,100,155,12,53,211,134,205,49,10,160,142,60,189,189,79,56,112,219,17,76,199,198,208,72,30,224,147,69,169,253,82,65,172,173,21,95,27,176,212,91,194,150,151,86,117,139,86,82,200,54,25,106,127,43,216,110,166,13,155,99,17,16,90,103,20,64,29,121,163,93,220,125,122,123,159,112,205,102,94,116,224,182,35,152,87,171,226,156,142,141,161,145,57,144,96,149,60,192,39,139,139,221,230,143,82,251,165,130,229,230,100,134,88,91,43,190,239,70,234,186,54,96,169,183,129,125,104,179,132,45,47,173,51,48,238,169,234,22,173,164,93,11,108,160,144,109,50,212,39,112,243,208,254,86,176,221,73,75,113,217,76,27,54,199,251,6,247,195,34,32,180,206,149,61,117,202,40,128,58,242,159,157,251,246,70,187,184,251,241,166,121,255,244,246,62,225,67,235,255,229,154,205,188,232,45,208,125,236,119,112,134,52,192,109,71,48,25,75,4,61,174,86,197,57,171,6,130,39,28,27,67,35,197,61,0,46,114,32,193,42,207,157,142,18,120,128,79,22,161,166,12,27,22,187,205,31,19,235,138,1,164,246,75,5,125,208,8,8,202,205,201,12,7,171,151,120,176,182,86,124,105,144,21,113,222,141,212,117,219,221,147,107,108,192,82,111,181,230,17,98,2,251,208,102,191,70,159,94,8,91,94,90,209,125,29,87,102,96,220,83,99,48,155,77,212,45,90,73,13,11,25,68,186,22,216,64,151,198,165,172,32,219,100,168,249,253,39,165,78,224,230,161,75,176,161,191,252,173,96,187,37,139,35,182,146,150,226,178,47,43,173,138,152,54,108,142,65,16,47,131,246,13,238,135,243,93,169,153,68,64,104,157,157,102,43,144,42,123,234,148,231,29,180,224,80,0,117,228,137,38,54,233,62,59,247,237,59,107,176,243,140,118,113,247,85,80,50,250,226,77,243,254,95,240,188,198,232,237,125,194,49,203,62,207,134,214,255,203,131,134,184,213,52,155,121,209,237,189,58,220,90,160,251,216,238,224,12,105,89,253,205,109,128,219,142,96,55,198,79,100,50,150,8,122,133,139,201,126,92,173,138,115,235,176,75,119,86,13,4,79,225,16,197,75,56,54,134,70,143,43,71,66,138,123,0,92,61,102,193,88,228,64,130,85,83,93,67,81,158,59,29,37,41,38,220,33,240,0,159,44,71,29,94,40,66,77,25,54,245,80,216,50,44,118,155,63,155,107,90,59,38,214,21,3,145,203,212,7,72,237,151,10,255,240,86,14,250,160,17,16,77,189,208,20,148,155,147,25,35,134,82,29,14,86,47,241,185,75,238,245,96,109,173,248,215,112,108,252,210,32,43,226,101,61,234,230,188,27,169,235,11,6,104,239,182,187,39,215,1,166,230,211,216,128,165,222,111,157,100,218,106,205,35,196,221,208,226,192,4,246,161,205,179,235,96,201,126,141,62,189,201,144,255,185,16,182,188,180,167,171,125,176,162,251,58,174,21,230,251,170,204,192,184,167,123,221,121,163,198,96,54,155,113,125,247,159,168,91,180,146,31,70,117,150,26,22,50,136,173,11,243,140,116,45,176,129,195,48,113,133,153,144,138,93,46,141,75,89,247,171,8,84,64,182,201,80,69,230,142,78,242,251,79,74,43,221,12,71,156,192,205,67,33,125,130,123,150,96,67,127,79,70,0,114,248,91,193,118,253,11,134,104,74,22,71,108,147,48,4,97,36,45,197,101,233,75,155,17,94,86,90,21,135,112,25,24,48,109,216,28,53,61,159,2,130,32,94,6,91,6,29,11,236,27,220,15,81,166,147,55,230,187,82,51,63,157,17,62,136,128,208,58,141,208,151,36,58,205,86,32,227,235,21,45,84,246,212,41,121,38,169,197,206,59,104,193,23,29,43,204,160,0,234,200,165,80,173,214,18,77,108,210,203,107,47,223,124,118,238,219,193,203,161,227,118,214,96,231,175,240,35,234,24,237,226,238,29,189,165,240,170,160,100,244,115,134,39,249,196,155,230,253,9,253,184,137,190,224,121,141,103,198,58,128,208,219,251,132,213,139,188,154,98,150,125,158,187,176,62,147,12,173,255,151,177,16,176,175,6,13,113,171,223,43,50,166,104,54,243,162,109,102,180,188,218,123,117,184,3,93,54,181,180,64,247,177,0,0,0,0,1,0,0,0,3,0,0,0,7,0,0,0,15,0,0,0,31,0,0,0,63,0,0,0,127,0,0,0,255,0,0,0,255,1,0,0,255,3,0,0,255,7,0,0,255,15,0,0,255,31,0,0,255,63,0,0,255,127,0,0,255,255,0,0,255,255,1,0,255,255,3,0,255,255,7,0,255,255,15,0,255,255,31,0,255,255,63,0,255,255,127,0,255,255,255,0,255,255,255,1,255,255,255,3,255,255,255,7,255,255,255,15,255,255,255,31,255,255,255,63,255,255,255,127,255,255,255,255,116,14,0,0,244,14,0,0,244,15,0,0,244,17,0,0,244,21,0,0,244,29,0,0,244,45,0,0,244,77,0,0,24,0,120,58,76,70,11,60,242,204,192,60,116,252,59,61,86,73,154,61,241,93,228,61,248,163,29,62,180,231,78,62,54,157,130,62,78,220,159,62,193,174,190,62,65,132,222,62,173,194,254,62,186,101,15,63,248,0,31,63,29,233,45,63,249,219,59,63,45,162,72,63,160,17,84,63,38,15,94,63,46,143,102,63,112,149,109,63,174,51,115,63,159,135,119,63,66,184,122,63,196,242,124,63,75,103,126,63,196,69,127,63,241,186,127,63,217,237,127,63,162,253,127,63,248,255,127,63,168,9,120,57,17,119,11,59,135,139,193,59,74,113,61,60,148,82,156,60,94,8,233,60,42,83,34,61,74,118,87,61,138,227,137,61,7,140,171,61,34,154,208,61,108,239,248,61,164,52,18,62,100,112,41,62,65,21,66,62,67,11,92,62,47,56,119,62,197,191,137,62,92,97,152,62,135,112,167,62,4,220,182,62,188,145,198,62,231,126,214,62,48,144,230,62,227,177,246,62,13,104,3,63,121,107,11,63,98,89,19,63,42,40,27,63,137,206,34,63,166,67,42,63,49,127,49,63,126,121,56,63,153,43,63,63,92,143,69,63,127,159,75,63,165,87,81,63,104,180,86,63,89,179,91,63,8,83,96,63,252,146,100,63,177,115,104,63,138,246,107,63,198,29,111,63,109,236,113,63,62,102,116,63,154,143,118,63,104,109,120,63,3,5,122,63,26,92,123,63,153,120,124,63,143,96,125,63,17,26,126,63,39,171,126,63,176,25,127,63,74,107,127,63,68,165,127,63,132,204,127,63,123,229,127,63,17,244,127,63,158,251,127,63,219,254,127,63,218,255,127,63,0,0,128,63,5,12,120,56,50,131,11,58,118,186,193,58,226,203,61,59,38,207,156,59,139,32,234,59,245,102,35,60,63,100,89,60,184,127,139,60,59,23,174,60,239,114,212,60,96,140,254,60,45,46,22,61,114,237,46,61,155,127,73,61,220,223,101,61,123,4,130,61,159,250,145,61,71,207,162,61,38,127,180,61,173,6,199,61,16,98,218,61,63,141,238,61,244,193,1,62,185,160,12,62,128,224,23,62,182,126,35,62,166,120,47,62,116,203,59,62,34,116,72,62,141,111,85,62,107,186,98,62,83,81,112,62,180,48,126,62,110,42,134,62,252,92,141,62,9,174,148,62,138,27,156,62,100,163,163,62,112,67,171,62,119,249,178,62,54,195,186,62,93,158,194,62,147,136,202,62,118,127,210,62,154,128,218,62,142,137,226,62,217,151,234,62,2,169,242,62,139,186,250,62,251,100,1,63,99,106,5,63,65,108,9,63,89,105,13,63,116,96,17,63,94,80,21,63,231,55,25,63,231,21,29,63,58,233,32,63,197,176,36,63,116,107,40,63,62,24,44,63,35,182,47,63,43,68,51,63,109,193,54,63,10,45,58,63,48,134,61,63,26,204,64,63,17,254,67,63,107,27,71,63,142,35,74,63,238,21,77,63,15,242,79,63,132,183,82,63,239,101,85,63,3,253,87,63,129,124,90,63,60,228,92,63,21,52,95,63,254,107,97,63,246,139,99,63,14,148,101,63,98,132,103,63,33,93,105,63,133,30,107,63,213,200,108,63,103,92,110,63,155,217,111,63,224,64,113,63,172,146,114,63,131,207,115,63,241,247,116,63,139,12,118,63,239,13,119,63,193,252,119,63,172,217,120,63,99,165,121,63,155,96,122,63,15,12,123,63,124,168,123,63,163,54,124,63,71,183,124,63,41,43,125,63,13,147,125,63,183,239,125,63,229,65,126,63,89,138,126,63,205,201,126,63,251,0,127,63,150,48,127,63,78,89,127,63,205,123,127,63,182,152,127,63,167,176,127,63,53,196,127,63,239,211,127,63,91,224,127,63,245,233,127,63,51,241,127,63,127,246,127,63,59,250,127,63,190,252,127,63,84,254,127,63,64,255,127,63,186,255,127,63,238,255,127,63,254,255,127,63,0,0,128,63,169,12,120,55,54,134,11,57,38,198,193,57,94,226,61,58,234,237,156,58,85,101,234,58,56,170,35,59,207,219,89,59,169,226,139,59,42,178,174,59,13,91,213,59,204,219,255,59,91,25,23,60,250,46,48,60,194,45,75,60,156,20,104,60,46,113,131,60,225,202,147,60,185,22,165,60,1,84,183,60,245,129,202,60,198,159,222,60,155,172,243,60,199,211,4,61,213,71,16,61,250,49,28,61,174,145,40,61,101,102,53,61,141,175,66,61,140,108,80,61,193,156,94,61,133,63,109,61,41,84,124,61,252,236,133,61,26,232,141,61,13,27,150,61,110,133,158,61,212,38,167,61,210,254,175,61,245,12,185,61,200,80,194,61,209,201,203,61,146,119,213,61,139,89,223,61,51,111,233,61,2,184,243,61,105,51,254,61,106,112,4,62,214,223,9,62,171,103,15,62,153,7,21,62,77,191,26,62,116,142,32,62,181,116,38,62,184,113,44,62,34,133,50,62,149,174,56,62,178,237,62,62,21,66,69,62,92,171,75,62,30,41,82,62,243,186,88,62,112,96,95,62,40,25,102,62,170,228,108,62,132,194,115,62,68,178,122,62,185,217,128,62,203,98,132,62,26,244,135,62,105,141,139,62,120,46,143,62,6,215,146,62,211,134,150,62,156,61,154,62,29,251,157,62,19,191,161,62,57,137,165,62,71,89,169,62,249,46,173,62,5,10,177,62,36,234,180,62,13,207,184,62,117,184,188,62,18,166,192,62,153,151,196,62,190,140,200,62,52,133,204,62,175,128,208,62,225,126,212,62,125,127,216,62,52,130,220,62,184,134,224,62,185,140,228,62,233,147,232,62,248,155,236,62,150,164,240,62,117,173,244,62,67,182,248,62,178,190,252,62,57,99,0,63,153,102,2,63,82,105,4,63,60,107,6,63,48,108,8,63,6,108,10,63,151,106,12,63,188,103,14,63,78,99,16,63,39,93,18,63,33,85,20,63,21,75,22,63,222,62,24,63,87,48,26,63,92,31,28,63,199,11,30,63,117,245,31,63,66,220,33,63,12,192,35,63,176,160,37,63,12,126,39,63,254,87,41,63,104,46,43,63,39,1,45,63,29,208,46,63,43,155,48,63,51,98,50,63,23,37,52,63,188,227,53,63,4,158,55,63,214,83,57,63,23,5,59,63,173,177,60,63,128,89,62,63,120,252,63,63,126,154,65,63,124,51,67,63,93,199,68,63,12,86,70,63,119,223,71,63,138,99,73,63,54,226,74,63,104,91,76,63,17,207,77,63,35,61,79,63,145,165,80,63,76,8,82,63,75,101,83,63,130,188,84,63,231,13,86,63,114,89,87,63,26,159,88,63,218,222,89,63,172,24,91,63,138,76,92,63,113,122,93,63,93,162,94,63,78,196,95,63,67,224,96,63,58,246,97,63,54,6,99,63,56,16,100,63,67,20,101,63,92,18,102,63,133,10,103,63,198,252,103,63,37,233,104,63,168,207,105,63,89,176,106,63,64,139,107,63,102,96,108,63,216,47,109,63,159,249,109,63,201,189,110,63,97,124,111,63,118,53,112,63,23,233,112,63,81,151,113,63,53,64,114,63,212,227,114,63,61,130,115,63,131,27,116,63,184,175,116,63,238,62,117,63,56,201,117,63,171,78,118,63,90,207,118,63,90,75,119,63,192,194,119,63,162,53,120,63,21,164,120,63,48,14,121,63,8,116,121,63,182,213,121,63,79,51,122,63,235,140,122,63,162,226,122,63,139,52,123,63,191,130,123,63,85,205,123,63,102,20,124,63,9,88,124,63,88,152,124,63,106,213,124,63,88,15,125,63,58,70,125,63,41,122,125,63,62,171,125,63,143,217,125,63,54,5,126,63,75,46,126,63,228,84,126,63,27,121,126,63,7,155,126,63,190,186,126,63,88,216,126,63,236,243,126,63,144,13,127,63,91,37,127,63,99,59,127,63,188,79,127,63,125,98,127,63,185,115,127,63,135,131,127,63,249,145,127,63,36,159,127,63,26,171,127,63,238,181,127,63,179,191,127,63,122,200,127,63,85,208,127,63,84,215,127,63,136,221,127,63,0,227,127,63,204,231,127,63,249,235,127,63,150,239,127,63,177,242,127,63,85,245,127,63,144,247,127,63,109,249,127,63,246,250,127,63,54,252,127,63,55,253,127,63,1,254,127,63,156,254,127,63,18,255,127,63,103,255,127,63,163,255,127,63,204,255,127,63,229,255,127,63,244,255,127,63,252,255,127,63,255,255,127,63,0,0,128,63,0,0,128,63,60,12,120,54,253,134,11,56,19,201,193,56,248,231,61,57,148,245,156,57,115,118,234,57,238,186,35,58,113,249,89,58,32,251,139,58,96,216,174,58,34,148,213,58,3,23,0,59,209,82,23,59,65,125,48,59,21,150,75,59,8,157,104,59,233,200,131,59,20,58,148,59,218,161,165,59,16,0,184,59,136,84,203,59,16,159,223,59,118,223,244,59,194,138,5,60,128,32,17,60,217,48,29,60,172,187,41,60,219,192,54,60,67,64,68,60,194,57,82,60,52,173,96,60,115,154,111,60,88,1,127,60,222,112,135,60,186,157,143,60,42,7,152,60,25,173,160,60,112,143,169,60,23,174,178,60,246,8,188,60,243,159,197,60,245,114,207,60,225,129,217,60,156,204,227,60,10,83,238,60,14,21,249,60,70,9,2,61,177,165,7,61,187,95,13,61,81,55,19,61,102,44,25,61,230,62,31,61,195,110,37,61,233,187,43,61,71,38,50,61,202,173,56,61,97,82,63,61,247,19,70,61,121,242,76,61,210,237,83,61,240,5,91,61,187,58,98,61,32,140,105,61,8,250,112,61,93,132,120,61,132,21,128,61,249,246,131,61,130,230,135,61,19,228,139,61,159,239,143,61,26,9,148,61,119,48,152,61,169,101,156,61,163,168,160,61,88,249,164,61,186,87,169,61,186,195,173,61,76,61,178,61,95,196,182,61,230,88,187,61,209,250,191,61,18,170,196,61,152,102,201,61,85,48,206,61,56,7,211,61,48,235,215,61,47,220,220,61,34,218,225,61,248,228,230,61,161,252,235,61,11,33,241,61,35,82,246,61,217,143,251,61,13,109,0,62,105,24,3,62,247,201,5,62,174,129,8,62,133,63,11,62,113,3,14,62,104,205,16,62,96,157,19,62,79,115,22,62,42,79,25,62,232,48,28,62,124,24,31,62,221,5,34,62,255,248,36,62,215,241,39,62,90,240,42,62,125,244,45,62,51,254,48,62,114,13,52,62,45,34,55,62,88,60,58,62,232,91,61,62,208,128,64,62,3,171,67,62,118,218,70,62,26,15,74,62,229,72,77,62,199,135,80,62,181,203,83,62,162,20,87,62,127,98,90,62,63,181,93,62,213,12,97,62,50,105,100,62,73,202,103,62,12,48,107,62,108,154,110,62,92,9,114,62,203,124,117,62,173,244,120,62,241,112,124,62,138,241,127,62,52,187,129,62,190,127,131,62,91,70,133,62,4,15,135,62,176,217,136,62,89,166,138,62,245,116,140,62,126,69,142,62,234,23,144,62,50,236,145,62,78,194,147,62,54,154,149,62,224,115,151,62,70,79,153,62,93,44,155,62,31,11,157,62,130,235,158,62,127,205,160,62,11,177,162,62,31,150,164,62,177,124,166,62,186,100,168,62,47,78,170,62,9,57,172,62,62,37,174,62,198,18,176,62,150,1,178,62,167,241,179,62,238,226,181,62,100,213,183,62,254,200,185,62,179,189,187,62,122,179,189,62,74,170,191,62,25,162,193,62,221,154,195,62,142,148,197,62,34,143,199,62,142,138,201,62,203,134,203,62,205,131,205,62,140,129,207,62,253,127,209,62,24,127,211,62,210,126,213,62,33,127,215,62,252,127,217,62,88,129,219,62,45,131,221,62,112,133,223,62,23,136,225,62,25,139,227,62,108,142,229,62,5,146,231,62,219,149,233,62,228,153,235,62,21,158,237,62,102,162,239,62,203,166,241,62,59,171,243,62,173,175,245,62,21,180,247,62,107,184,249,62,164,188,251,62,181,192,253,62,150,196,255,62,30,228,0,63,207,229,1,63,88,231,2,63,182,232,3,63,226,233,4,63,215,234,5,63,146,235,6,63,12,236,7,63,66,236,8,63,45,236,9,63,202,235,10,63,19,235,11,63,4,234,12,63,151,232,13,63,200,230,14,63,145,228,15,63,239,225,16,63,220,222,17,63,84,219,18,63,81,215,19,63,208,210,20,63,202,205,21,63,61,200,22,63,34,194,23,63,117,187,24,63,50,180,25,63,85,172,26,63,215,163,27,63,182,154,28,63,236,144,29,63,117,134,30,63,77,123,31,63,110,111,32,63,214,98,33,63,126,85,34,63,100,71,35,63,130,56,36,63,212,40,37,63,87,24,38,63,5,7,39,63,219,244,39,63,213,225,40,63,239,205,41,63,36,185,42,63,113,163,43,63,209,140,44,63,64,117,45,63,188,92,46,63,63,67,47,63,199,40,48,63,78,13,49,63,211,240,49,63,80,211,50,63,195,180,51,63,39,149,52,63,122,116,53,63,184,82,54,63,220,47,55,63,229,11,56,63,206,230,56,63,149,192,57,63,54,153,58,63,174,112,59,63,249,70,60,63,21,28,61,63,255,239,61,63,179,194,62,63,48,148,63,63,113,100,64,63,116,51,65,63,55,1,66,63,182,205,66,63,239,152,67,63,224,98,68,63,134,43,69,63,222,242,69,63,230,184,70,63,156,125,71,63,253,64,72,63,7,3,73,63,184,195,73,63,14,131,74,63,6,65,75,63,159,253,75,63,215,184,76,63,172,114,77,63,28,43,78,63,38,226,78,63,199,151,79,63,253,75,80,63,201,254,80,63,39,176,81,63,22,96,82,63,150,14,83,63,164,187,83,63,63,103,84,63,103,17,85,63,26,186,85,63,86,97,86,63,28,7,87,63,105,171,87,63,62,78,88,63,152,239,88,63,120,143,89,63,221,45,90,63,198,202,90,63,50,102,91,63,33,0,92,63,147,152,92,63,134,47,93,63,251,196,93,63,242,88,94,63,105,235,94,63,98,124,95,63,219,11,96,63,213,153,96,63,80,38,97,63,76,177,97,63,201,58,98,63,199,194,98,63,70,73,99,63,71,206,99,63,202,81,100,63,208,211,100,63,88,84,101,63,100,211,101,63,244,80,102,63,9,205,102,63,163,71,103,63,195,192,103,63,107,56,104,63,154,174,104,63,82,35,105,63,147,150,105,63,96,8,106,63,184,120,106,63,157,231,106,63,16,85,107,63,19,193,107,63,166,43,108,63,203,148,108,63,132,252,108,63,209,98,109,63,180,199,109,63,48,43,110,63,68,141,110,63,244,237,110,63,64,77,111,63,42,171,111,63,181,7,112,63,225,98,112,63,177,188,112,63,38,21,113,63,67,108,113,63,10,194,113,63,123,22,114,63,155,105,114,63,106,187,114,63,234,11,115,63,31,91,115,63,9,169,115,63,172,245,115,63,9,65,116,63,35,139,116,63,252,211,116,63,151,27,117,63,245,97,117,63,26,167,117,63,8,235,117,63,193,45,118,63,72,111,118,63,159,175,118,63,202,238,118,63,201,44,119,63,161,105,119,63,84,165,119,63,228,223,119,63,85,25,120,63,168,81,120,63,226,136,120,63,3,191,120,63,16,244,120,63,11,40,121,63,247,90,121,63,215,140,121,63,173,189,121,63,125,237,121,63,73,28,122,63,20,74,122,63,226,118,122,63,181,162,122,63,144,205,122,63,118,247,122,63,107,32,123,63,112,72,123,63,138,111,123,63,186,149,123,63,5,187,123,63,109,223,123,63,245,2,124,63,160,37,124,63,113,71,124,63,108,104,124,63,147,136,124,63,233,167,124,63,114,198,124,63,48,228,124,63,38,1,125,63,89,29,125,63,201,56,125,63,124,83,125,63,115,109,125,63,178,134,125,63,60,159,125,63,19,183,125,63,60,206,125,63,184,228,125,63,139,250,125,63,184,15,126,63,66,36,126,63,44,56,126,63,120,75,126,63,43,94,126,63,70,112,126,63,204,129,126,63,194,146,126,63,41,163,126,63,4,179,126,63,86,194,126,63,35,209,126,63,109,223,126,63,55,237,126,63,131,250,126,63,85,7,127,63,175,19,127,63,148,31,127,63,7,43,127,63,10,54,127,63,160,64,127,63,205,74,127,63,146,84,127,63,242,93,127,63,239,102,127,63,141,111,127,63,206,119,127,63,181,127,127,63,67,135,127,63,124,142,127,63,98,149,127,63,247,155,127,63,61,162,127,63,56,168,127,63,233,173,127,63,83,179,127,63,120,184,127,63,90,189,127,63,252,193,127,63,95,198,127,63,134,202,127,63,116,206,127,63,41,210,127,63,168,213,127,63,244,216,127,63,13,220,127,63,247,222,127,63,179,225,127,63,67,228,127,63,168,230,127,63,229,232,127,63,252,234,127,63,237,236,127,63,188,238,127,63,105,240,127,63,246,241,127,63,101,243,127,63,183,244,127,63,238,245,127,63,11,247,127,63,16,248,127,63,254,248,127,63,214,249,127,63,155,250,127,63,76,251,127,63,236,251,127,63,124,252,127,63,252,252,127,63,110,253,127,63,211,253,127,63,44,254,127,63,121,254,127,63,189,254,127,63,247,254,127,63,42,255,127,63,84,255,127,63,120,255,127,63,150,255,127,63,175,255,127,63,195,255,127,63,211,255,127,63,224,255,127,63,234,255,127,63,241,255,127,63,246,255,127,63,250,255,127,63,253,255,127,63,254,255,127,63,255,255,127,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,171,15,120,53,24,135,11,55,225,201,193,55,107,233,61,56,128,247,156,56,187,122,234,56,24,191,35,57,213,0,90,57,56,1,140,57,229,225,174,57,88,162,213,57,60,33,0,58,24,97,23,58,175,144,48,58,243,175,75,58,212,190,104,58,159,222,131,58,143,85,148,58,48,196,165,58,119,42,184,58,90,136,203,58,204,221,223,58,191,42,245,58,148,183,5,59,124,85,17,59,16,111,29,59,73,4,42,59,31,21,55,59,138,161,68,59,129,169,82,59,252,44,97,59,241,43,112,59,88,166,127,59,19,206,135,59,169,6,144,59,233,124,152,59,204,48,161,59,79,34,170,59,106,81,179,59,26,190,188,59,86,104,198,59,26,80,208,59,95,117,218,59,31,216,228,59,83,120,239,59,244,85,250,59,126,184,2,60,177,100,8,60,145,47,14,60,25,25,20,60,70,33,26,60,19,72,32,60,126,141,38,60,129,241,44,60,25,116,51,60,65,21,58,60,246,212,64,60,50,179,71,60,243,175,78,60,50,203,85,60,235,4,93,60,26,93,100,60,186,211,107,60,198,104,115,60,58,28,123,60,7,119,129,60,33,111,133,60,102,118,137,60,212,140,141,60,105,178,145,60,33,231,149,60,251,42,154,60,243,125,158,60,6,224,162,60,50,81,167,60,115,209,171,60,199,96,176,60,43,255,180,60,154,172,185,60,19,105,190,60,146,52,195,60,20,15,200,60,149,248,204,60,19,241,209,60,137,248,214,60,245,14,220,60,83,52,225,60,160,104,230,60,215,171,235,60,246,253,240,60,249,94,246,60,220,206,251,60,205,166,0,61,153,109,3,61,207,59,6,61,109,17,9,61,114,238,11,61,220,210,14,61,167,190,17,61,211,177,20,61,94,172,23,61,68,174,26,61,133,183,29,61,30,200,32,61,12,224,35,61,78,255,38,61,225,37,42,61,196,83,45,61,243,136,48,61,109,197,51,61,47,9,55,61,55,84,58,61,130,166,61,61,15,0,65,61,218,96,68,61,226,200,71,61,35,56,75,61,156,174,78,61,73,44,82,61,40,177,85,61,55,61,89,61,115,208,92,61,217,106,96,61,103,12,100,61,25,181,103,61,238,100,107,61,227,27,111,61,244,217,114,61,30,159,118,61,96,107,122,61,182,62,126,61,143,12,129,61,73,253,130,61,138,241,132,61,79,233,134,61,150,228,136,61,94,227,138,61,167,229,140,61,109,235,142,61,175,244,144,61,109,1,147,61,164,17,149,61,83,37,151,61,120,60,153,61,17,87,155,61,30,117,157,61,155,150,159,61,136,187,161,61,226,227,163,61,169,15,166,61,218,62,168,61,116,113,170,61,116,167,172,61,218,224,174,61,162,29,177,61,205,93,179,61,87,161,181,61,62,232,183,61,130,50,186,61,32,128,188,61,22,209,190,61,98,37,193,61,2,125,195,61,245,215,197,61,57,54,200,61,203,151,202,61,169,252,204,61,211,100,207,61,68,208,209,61,252,62,212,61,249,176,214,61,56,38,217,61,184,158,219,61,117,26,222,61,111,153,224,61,163,27,227,61,14,161,229,61,175,41,232,61,132,181,234,61,138,68,237,61,191,214,239,61,33,108,242,61,174,4,245,61,99,160,247,61,62,63,250,61,61,225,252,61,93,134,255,61,78,23,1,62,252,108,2,62,56,196,3,62,255,28,5,62,81,119,6,62,45,211,7,62,145,48,9,62,125,143,10,62,238,239,11,62,228,81,13,62,94,181,14,62,89,26,16,62,214,128,17,62,210,232,18,62,77,82,20,62,69,189,21,62,184,41,23,62,166,151,24,62,13,7,26,62,236,119,27,62,65,234,28,62,11,94,30,62,73,211,31,62,250,73,33,62,28,194,34,62,173,59,36,62,172,182,37,62,24,51,39,62,240,176,40,62,50,48,42,62,220,176,43,62,238,50,45,62,101,182,46,62,64,59,48,62,126,193,49,62,30,73,51,62,29,210,52,62,123,92,54,62,54,232,55,62,76,117,57,62,187,3,59,62,131,147,60,62,162,36,62,62,22,183,63,62,222,74,65,62,248,223,66,62,98,118,68,62,28,14,70,62,35,167,71,62,117,65,73,62,18,221,74,62,247,121,76,62,35,24,78,62,149,183,79,62,74,88,81,62,66,250,82,62,121,157,84,62,240,65,86,62,163,231,87,62,146,142,89,62,186,54,91,62,26,224,92,62,177,138,94,62,124,54,96,62,122,227,97,62,169,145,99,62,7,65,101,62,147,241,102,62,75,163,104,62,44,86,106,62,54,10,108,62,102,191,109,62,187,117,111,62,51,45,113,62,204,229,114,62,132,159,116,62,90,90,118,62,75,22,120,62,85,211,121,62,120,145,123,62,176,80,125,62,253,16,127,62,46,105,128,62,101,74,129,62,36,44,130,62,105,14,131,62,52,241,131,62,130,212,132,62,84,184,133,62,169,156,134,62,127,129,135,62,213,102,136,62,171,76,137,62,255,50,138,62,209,25,139,62,32,1,140,62,233,232,140,62,46,209,141,62,236,185,142,62,34,163,143,62,208,140,144,62,244,118,145,62,142,97,146,62,156,76,147,62,29,56,148,62,17,36,149,62,118,16,150,62,76,253,150,62,144,234,151,62,67,216,152,62,99,198,153,62,239,180,154,62,230,163,155,62,71,147,156,62,17,131,157,62,67,115,158,62,219,99,159,62,218,84,160,62,60,70,161,62,3,56,162,62,43,42,163,62,181,28,164,62,160,15,165,62,233,2,166,62,145,246,166,62,149,234,167,62,245,222,168,62,176,211,169,62,197,200,170,62,50,190,171,62,246,179,172,62,17,170,173,62,129,160,174,62,69,151,175,62,91,142,176,62,196,133,177,62,125,125,178,62,133,117,179,62,220,109,180,62,128,102,181,62,112,95,182,62,171,88,183,62,47,82,184,62,252,75,185,62,17,70,186,62,108,64,187,62,11,59,188,62,239,53,189,62,22,49,190,62,126,44,191,62,38,40,192,62,13,36,193,62,51,32,194,62,150,28,195,62,52,25,196,62,12,22,197,62,30,19,198,62,104,16,199,62,233,13,200,62,159,11,201,62,138,9,202,62,169,7,203,62,249,5,204,62,123,4,205,62,44,3,206,62,11,2,207,62,24,1,208,62,81,0,209,62,181,255,209,62,66,255,210,62,248,254,211,62,213,254,212,62,216,254,213,62,255,254,214,62,75,255,215,62,184,255,216,62,71,0,218,62,245,0,219,62,195,1,220,62,173,2,221,62,180,3,222,62,214,4,223,62,17,6,224,62,101,7,225,62,208,8,226,62,81,10,227,62,231,11,228,62,144,13,229,62,76,15,230,62,25,17,231,62,245,18,232,62,224,20,233,62,217,22,234,62,221,24,235,62,236,26,236,62,5,29,237,62,39,31,238,62,79,33,239,62,125,35,240,62,176,37,241,62,230,39,242,62,31,42,243,62,88,44,244,62,145,46,245,62,200,48,246,62,253,50,247,62,45,53,248,62,88,55,249,62,124,57,250,62,153,59,251,62,172,61,252,62,181,63,253,62,179,65,254,62,163,67,255,62,195,34,0,63,173,163,0,63,142,36,1,63,102,165,1,63,53,38,2,63,250,166,2,63,180,39,3,63,99,168,3,63,5,41,4,63,155,169,4,63,36,42,5,63,159,170,5,63,12,43,6,63,105,171,6,63,183,43,7,63,244,171,7,63,32,44,8,63,59,172,8,63,68,44,9,63,58,172,9,63,28,44,10,63,235,171,10,63,164,43,11,63,73,171,11,63,216,42,12,63,80,170,12,63,177,41,13,63,251,168,13,63,44,40,14,63,69,167,14,63,68,38,15,63,41,165,15,63,243,35,16,63,162,162,16,63,53,33,17,63,172,159,17,63,5,30,18,63,65,156,18,63,95,26,19,63,94,152,19,63,61,22,20,63,252,147,20,63,155,17,21,63,24,143,21,63,116,12,22,63,173,137,22,63,195,6,23,63,182,131,23,63,133,0,24,63,46,125,24,63,179,249,24,63,18,118,25,63,74,242,25,63,91,110,26,63,69,234,26,63,6,102,27,63,159,225,27,63,14,93,28,63,84,216,28,63,111,83,29,63,95,206,29,63,36,73,30,63,188,195,30,63,40,62,31,63,102,184,31,63,119,50,32,63,90,172,32,63,14,38,33,63,146,159,33,63,230,24,34,63,10,146,34,63,253,10,35,63,190,131,35,63,77,252,35,63,169,116,36,63,211,236,36,63,200,100,37,63,138,220,37,63,22,84,38,63,110,203,38,63,143,66,39,63,122,185,39,63,47,48,40,63,172,166,40,63,241,28,41,63,254,146,41,63,210,8,42,63,108,126,42,63,205,243,42,63,243,104,43,63,223,221,43,63,143,82,44,63,3,199,44,63,59,59,45,63,54,175,45,63,244,34,46,63,116,150,46,63,182,9,47,63,185,124,47,63,125,239,47,63,1,98,48,63,69,212,48,63,72,70,49,63,10,184,49,63,139,41,50,63,202,154,50,63,198,11,51,63,127,124,51,63,246,236,51,63,40,93,52,63,22,205,52,63,191,60,53,63,36,172,53,63,66,27,54,63,27,138,54,63,174,248,54,63,249,102,55,63,254,212,55,63,187,66,56,63,47,176,56,63,91,29,57,63,63,138,57,63,217,246,57,63,41,99,58,63,48,207,58,63,236,58,59,63,93,166,59,63,130,17,60,63,93,124,60,63,235,230,60,63,44,81,61,63,33,187,61,63,201,36,62,63,35,142,62,63,48,247,62,63,238,95,63,63,94,200,63,63,126,48,64,63,80,152,64,63,209,255,64,63,3,103,65,63,228,205,65,63,117,52,66,63,181,154,66,63,163,0,67,63,64,102,67,63,139,203,67,63,131,48,68,63,41,149,68,63,124,249,68,63,123,93,69,63,39,193,69,63,127,36,70,63,132,135,70,63,51,234,70,63,142,76,71,63,148,174,71,63,68,16,72,63,159,113,72,63,164,210,72,63,83,51,73,63,172,147,73,63,174,243,73,63,89,83,74,63,173,178,74,63,169,17,75,63,77,112,75,63,154,206,75,63,143,44,76,63,43,138,76,63,110,231,76,63,89,68,77,63,234,160,77,63,34,253,77,63,0,89,78,63,133,180,78,63,176,15,79,63,128,106,79,63,246,196,79,63,18,31,80,63,210,120,80,63,56,210,80,63,66,43,81,63,242,131,81,63,69,220,81,63,61,52,82,63,217,139,82,63,24,227,82,63,252,57,83,63,131,144,83,63,174,230,83,63,123,60,84,63,236,145,84,63,0,231,84,63,183,59,85,63,16,144,85,63,12,228,85,63,170,55,86,63,235,138,86,63,206,221,86,63,83,48,87,63,121,130,87,63,66,212,87,63,172,37,88,63,184,118,88,63,101,199,88,63,180,23,89,63,164,103,89,63,53,183,89,63,104,6,90,63,59,85,90,63,175,163,90,63,197,241,90,63,123,63,91,63,210,140,91,63,201,217,91,63,97,38,92,63,154,114,92,63,115,190,92,63,237,9,93,63,7,85,93,63,194,159,93,63,29,234,93,63,24,52,94,63,179,125,94,63,239,198,94,63,203,15,95,63,72,88,95,63,100,160,95,63,33,232,95,63,126,47,96,63,123,118,96,63,24,189,96,63,85,3,97,63,51,73,97,63,177,142,97,63,207,211,97,63,141,24,98,63,236,92,98,63,235,160,98,63,138,228,98,63,202,39,99,63,170,106,99,63,42,173,99,63], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([75,239,99,63,13,49,100,63,111,114,100,63,114,179,100,63,21,244,100,63,90,52,101,63,63,116,101,63,197,179,101,63,236,242,101,63,180,49,102,63,29,112,102,63,39,174,102,63,211,235,102,63,32,41,103,63,15,102,103,63,159,162,103,63,209,222,103,63,164,26,104,63,26,86,104,63,49,145,104,63,235,203,104,63,71,6,105,63,69,64,105,63,230,121,105,63,42,179,105,63,16,236,105,63,153,36,106,63,197,92,106,63,148,148,106,63,7,204,106,63,29,3,107,63,214,57,107,63,52,112,107,63,53,166,107,63,218,219,107,63,36,17,108,63,18,70,108,63,164,122,108,63,220,174,108,63,184,226,108,63,57,22,109,63,96,73,109,63,44,124,109,63,157,174,109,63,181,224,109,63,115,18,110,63,214,67,110,63,225,116,110,63,146,165,110,63,233,213,110,63,232,5,111,63,142,53,111,63,219,100,111,63,209,147,111,63,110,194,111,63,179,240,111,63,160,30,112,63,54,76,112,63,117,121,112,63,93,166,112,63,239,210,112,63,41,255,112,63,14,43,113,63,156,86,113,63,213,129,113,63,184,172,113,63,70,215,113,63,127,1,114,63,99,43,114,63,243,84,114,63,46,126,114,63,21,167,114,63,169,207,114,63,233,247,114,63,214,31,115,63,113,71,115,63,184,110,115,63,173,149,115,63,80,188,115,63,162,226,115,63,161,8,116,63,80,46,116,63,174,83,116,63,187,120,116,63,119,157,116,63,228,193,116,63,1,230,116,63,206,9,117,63,76,45,117,63,123,80,117,63,92,115,117,63,238,149,117,63,51,184,117,63,42,218,117,63,211,251,117,63,48,29,118,63,64,62,118,63,3,95,118,63,122,127,118,63,166,159,118,63,134,191,118,63,27,223,118,63,101,254,118,63,101,29,119,63,27,60,119,63,135,90,119,63,169,120,119,63,131,150,119,63,19,180,119,63,91,209,119,63,91,238,119,63,20,11,120,63,132,39,120,63,174,67,120,63,145,95,120,63,46,123,120,63,132,150,120,63,149,177,120,63,96,204,120,63,231,230,120,63,41,1,121,63,38,27,121,63,223,52,121,63,85,78,121,63,136,103,121,63,120,128,121,63,37,153,121,63,144,177,121,63,185,201,121,63,161,225,121,63,72,249,121,63,174,16,122,63,212,39,122,63,185,62,122,63,96,85,122,63,198,107,122,63,238,129,122,63,216,151,122,63,131,173,122,63,241,194,122,63,33,216,122,63,20,237,122,63,202,1,123,63,68,22,123,63,130,42,123,63,133,62,123,63,77,82,123,63,217,101,123,63,43,121,123,63,68,140,123,63,34,159,123,63,200,177,123,63,52,196,123,63,104,214,123,63,99,232,123,63,39,250,123,63,180,11,124,63,9,29,124,63,40,46,124,63,17,63,124,63,196,79,124,63,65,96,124,63,137,112,124,63,156,128,124,63,124,144,124,63,39,160,124,63,158,175,124,63,226,190,124,63,244,205,124,63,211,220,124,63,128,235,124,63,251,249,124,63,69,8,125,63,94,22,125,63,71,36,125,63,255,49,125,63,136,63,125,63,225,76,125,63,11,90,125,63,7,103,125,63,212,115,125,63,115,128,125,63,229,140,125,63,42,153,125,63,66,165,125,63,46,177,125,63,238,188,125,63,130,200,125,63,235,211,125,63,41,223,125,63,61,234,125,63,38,245,125,63,230,255,125,63,124,10,126,63,234,20,126,63,47,31,126,63,75,41,126,63,64,51,126,63,13,61,126,63,180,70,126,63,51,80,126,63,140,89,126,63,191,98,126,63,205,107,126,63,181,116,126,63,120,125,126,63,23,134,126,63,146,142,126,63,233,150,126,63,28,159,126,63,44,167,126,63,26,175,126,63,229,182,126,63,142,190,126,63,22,198,126,63,124,205,126,63,194,212,126,63,231,219,126,63,235,226,126,63,208,233,126,63,149,240,126,63,59,247,126,63,195,253,126,63,44,4,127,63,118,10,127,63,163,16,127,63,179,22,127,63,165,28,127,63,123,34,127,63,52,40,127,63,210,45,127,63,83,51,127,63,186,56,127,63,5,62,127,63,53,67,127,63,75,72,127,63,72,77,127,63,42,82,127,63,243,86,127,63,163,91,127,63,58,96,127,63,185,100,127,63,32,105,127,63,111,109,127,63,166,113,127,63,199,117,127,63,208,121,127,63,196,125,127,63,161,129,127,63,104,133,127,63,25,137,127,63,182,140,127,63,61,144,127,63,176,147,127,63,14,151,127,63,89,154,127,63,143,157,127,63,179,160,127,63,195,163,127,63,192,166,127,63,171,169,127,63,132,172,127,63,74,175,127,63,255,177,127,63,163,180,127,63,53,183,127,63,183,185,127,63,40,188,127,63,137,190,127,63,217,192,127,63,26,195,127,63,76,197,127,63,111,199,127,63,130,201,127,63,135,203,127,63,126,205,127,63,102,207,127,63,65,209,127,63,14,211,127,63,205,212,127,63,128,214,127,63,38,216,127,63,191,217,127,63,76,219,127,63,204,220,127,63,65,222,127,63,170,223,127,63,8,225,127,63,91,226,127,63,163,227,127,63,224,228,127,63,19,230,127,63,59,231,127,63,90,232,127,63,110,233,127,63,122,234,127,63,124,235,127,63,116,236,127,63,100,237,127,63,75,238,127,63,42,239,127,63,1,240,127,63,207,240,127,63,149,241,127,63,84,242,127,63,12,243,127,63,188,243,127,63,101,244,127,63,7,245,127,63,162,245,127,63,55,246,127,63,198,246,127,63,78,247,127,63,209,247,127,63,77,248,127,63,196,248,127,63,54,249,127,63,162,249,127,63,9,250,127,63,108,250,127,63,201,250,127,63,34,251,127,63,118,251,127,63,198,251,127,63,18,252,127,63,89,252,127,63,157,252,127,63,221,252,127,63,26,253,127,63,83,253,127,63,136,253,127,63,187,253,127,63,234,253,127,63,22,254,127,63,64,254,127,63,103,254,127,63,139,254,127,63,173,254,127,63,204,254,127,63,234,254,127,63,5,255,127,63,30,255,127,63,53,255,127,63,74,255,127,63,94,255,127,63,112,255,127,63,128,255,127,63,143,255,127,63,157,255,127,63,169,255,127,63,180,255,127,63,191,255,127,63,200,255,127,63,208,255,127,63,215,255,127,63,221,255,127,63,227,255,127,63,232,255,127,63,236,255,127,63,239,255,127,63,243,255,127,63,245,255,127,63,248,255,127,63,249,255,127,63,251,255,127,63,252,255,127,63,253,255,127,63,254,255,127,63,255,255,127,63,255,255,127,63,255,255,127,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,204,8,120,52,171,134,11,54,79,202,193,54,190,233,61,55,238,247,156,55,192,123,234,55,43,192,35,56,161,2,90,56,189,2,140,56,76,228,174,56,227,165,213,56,199,35,0,57,168,100,23,57,134,149,48,57,104,182,75,57,64,199,104,57,7,228,131,57,105,92,148,57,191,204,165,57,6,53,184,57,65,149,203,57,105,237,223,57,120,61,245,57,184,194,5,58,166,98,17,58,134,126,29,58,81,22,42,58,9,42,55,58,172,185,68,58,54,197,82,58,165,76,97,58,250,79,112,58,47,207,127,58,34,229,135,58,154,32,144,58,255,153,152,58,80,81,161,58,139,70,170,58,174,121,179,58,186,234,188,58,171,153,198,58,129,134,208,58,58,177,218,58,212,25,229,58,79,192,239,58,167,164,250,58,109,227,2,59,117,147,8,59,105,98,14,59,73,80,20,59,19,93,26,59,199,136,32,59,100,211,38,59,232,60,45,59,83,197,51,59,164,108,58,59,218,50,65,59,243,23,72,59,239,27,79,59,204,62,86,59,138,128,93,59,38,225,100,59,161,96,108,59,249,254,115,59,45,188,123,59,29,204,129,59,145,201,133,59,113,214,137,59,188,242,141,59,113,30,146,59,145,89,150,59,26,164,154,59,12,254,158,59,102,103,163,59,40,224,167,59,80,104,172,59,222,255,176,59,209,166,181,59,40,93,186,59,228,34,191,59,2,248,195,59,131,220,200,59,101,208,205,59,168,211,210,59,74,230,215,59,76,8,221,59,172,57,226,59,105,122,231,59,131,202,236,59,249,41,242,59,202,152,247,59,245,22,253,59,60,82,1,60,170,32,4,60,196,246,6,60,137,212,9,60,249,185,12,60,19,167,15,60,216,155,18,60,69,152,21,60,92,156,24,60,26,168,27,60,129,187,30,60,143,214,33,60,69,249,36,60,160,35,40,60,162,85,43,60,73,143,46,60,149,208,49,60,133,25,53,60,26,106,56,60,81,194,59,60,44,34,63,60,168,137,66,60,199,248,69,60,134,111,73,60,230,237,76,60,231,115,80,60,134,1,84,60,197,150,87,60,162,51,91,60,28,216,94,60,52,132,98,60,232,55,102,60,56,243,105,60,35,182,109,60,170,128,113,60,202,82,117,60,131,44,121,60,214,13,125,60,96,123,128,60,161,115,130,60,174,111,132,60,134,111,134,60,40,115,136,60,149,122,138,60,205,133,140,60,206,148,142,60,152,167,144,60,44,190,146,60,136,216,148,60,173,246,150,60,154,24,153,60,78,62,155,60,202,103,157,60,13,149,159,60,23,198,161,60,231,250,163,60,125,51,166,60,217,111,168,60,249,175,170,60,223,243,172,60,137,59,175,60,247,134,177,60,40,214,179,60,29,41,182,60,213,127,184,60,80,218,186,60,140,56,189,60,138,154,191,60,74,0,194,60,202,105,196,60,11,215,198,60,12,72,201,60,205,188,203,60,77,53,206,60,140,177,208,60,137,49,211,60,69,181,213,60,189,60,216,60,243,199,218,60,230,86,221,60,149,233,223,60,0,128,226,60,39,26,229,60,8,184,231,60,164,89,234,60,250,254,236,60,9,168,239,60,210,84,242,60,83,5,245,60,141,185,247,60,126,113,250,60,39,45,253,60,134,236,255,60,206,87,1,61,52,187,2,61,117,32,4,61,144,135,5,61,133,240,6,61,84,91,8,61,253,199,9,61,128,54,11,61,219,166,12,61,16,25,14,61,29,141,15,61,3,3,17,61,193,122,18,61,87,244,19,61,197,111,21,61,10,237,22,61,39,108,24,61,26,237,25,61,228,111,27,61,132,244,28,61,251,122,30,61,71,3,32,61,105,141,33,61,96,25,35,61,45,167,36,61,206,54,38,61,67,200,39,61,141,91,41,61,171,240,42,61,156,135,44,61,96,32,46,61,248,186,47,61,99,87,49,61,160,245,50,61,175,149,52,61,144,55,54,61,67,219,55,61,199,128,57,61,28,40,59,61,65,209,60,61,56,124,62,61,254,40,64,61,148,215,65,61,250,135,67,61,47,58,69,61,51,238,70,61,5,164,72,61,166,91,74,61,20,21,76,61,80,208,77,61,90,141,79,61,49,76,81,61,212,12,83,61,68,207,84,61,128,147,86,61,135,89,88,61,90,33,90,61,248,234,91,61,97,182,93,61,148,131,95,61,145,82,97,61,88,35,99,61,232,245,100,61,65,202,102,61,100,160,104,61,78,120,106,61,1,82,108,61,123,45,110,61,188,10,112,61,197,233,113,61,148,202,115,61,41,173,117,61,133,145,119,61,166,119,121,61,140,95,123,61,55,73,125,61,166,52,127,61,237,144,128,61,105,136,129,61,198,128,130,61,5,122,131,61,37,116,132,61,39,111,133,61,9,107,134,61,204,103,135,61,112,101,136,61,244,99,137,61,88,99,138,61,157,99,139,61,193,100,140,61,196,102,141,61,167,105,142,61,106,109,143,61,11,114,144,61,139,119,145,61,234,125,146,61,40,133,147,61,67,141,148,61,61,150,149,61,20,160,150,61,201,170,151,61,92,182,152,61,203,194,153,61,24,208,154,61,66,222,155,61,72,237,156,61,42,253,157,61,233,13,159,61,132,31,160,61,250,49,161,61,76,69,162,61,122,89,163,61,130,110,164,61,101,132,165,61,35,155,166,61,188,178,167,61,47,203,168,61,124,228,169,61,162,254,170,61,163,25,172,61,124,53,173,61,47,82,174,61,187,111,175,61,31,142,176,61,92,173,177,61,113,205,178,61,94,238,179,61,35,16,181,61,192,50,182,61,52,86,183,61,127,122,184,61,160,159,185,61,153,197,186,61,104,236,187,61,13,20,189,61,136,60,190,61,217,101,191,61,255,143,192,61,250,186,193,61,202,230,194,61,111,19,196,61,233,64,197,61,55,111,198,61,89,158,199,61,78,206,200,61,23,255,201,61,179,48,203,61,35,99,204,61,101,150,205,61,121,202,206,61,96,255,207,61,25,53,209,61,164,107,210,61,0,163,211,61,45,219,212,61,44,20,214,61,251,77,215,61,154,136,216,61,10,196,217,61,74,0,219,61,89,61,220,61,56,123,221,61,230,185,222,61,99,249,223,61,174,57,225,61,200,122,226,61,176,188,227,61,102,255,228,61,233,66,230,61,58,135,231,61,88,204,232,61,66,18,234,61,249,88,235,61,124,160,236,61,203,232,237,61,230,49,239,61,204,123,240,61,125,198,241,61,249,17,243,61,63,94,244,61,79,171,245,61,42,249,246,61,206,71,248,61,60,151,249,61,114,231,250,61,114,56,252,61,58,138,253,61,202,220,254,61,17,24,0,62,33,194,0,62,149,108,1,62,108,23,2,62,166,194,2,62,68,110,3,62,69,26,4,62,168,198,4,62,111,115,5,62,152,32,6,62,35,206,6,62,17,124,7,62,98,42,8,62,20,217,8,62,40,136,9,62,157,55,10,62,117,231,10,62,173,151,11,62,71,72,12,62,66,249,12,62,158,170,13,62,91,92,14,62,120,14,15,62,246,192,15,62,213,115,16,62,19,39,17,62,177,218,17,62,175,142,18,62,13,67,19,62,202,247,19,62,231,172,20,62,99,98,21,62,62,24,22,62,120,206,22,62,16,133,23,62,7,60,24,62,92,243,24,62,16,171,25,62,33,99,26,62,145,27,27,62,94,212,27,62,137,141,28,62,17,71,29,62,246,0,30,62,56,187,30,62,215,117,31,62,211,48,32,62,43,236,32,62,224,167,33,62,241,99,34,62,93,32,35,62,38,221,35,62,74,154,36,62,202,87,37,62,165,21,38,62,219,211,38,62,108,146,39,62,88,81,40,62,159,16,41,62,64,208,41,62,59,144,42,62,144,80,43,62,63,17,44,62,72,210,44,62,170,147,45,62,102,85,46,62,122,23,47,62,232,217,47,62,175,156,48,62,206,95,49,62,69,35,50,62,21,231,50,62,61,171,51,62,189,111,52,62,148,52,53,62,195,249,53,62,73,191,54,62,38,133,55,62,91,75,56,62,230,17,57,62,199,216,57,62,255,159,58,62,141,103,59,62,113,47,60,62,171,247,60,62,59,192,61,62,31,137,62,62,89,82,63,62,232,27,64,62,204,229,64,62,5,176,65,62,146,122,66,62,115,69,67,62,168,16,68,62,49,220,68,62,14,168,69,62,62,116,70,62,194,64,71,62,152,13,72,62,193,218,72,62,61,168,73,62,12,118,74,62,44,68,75,62,159,18,76,62,100,225,76,62,122,176,77,62,225,127,78,62,154,79,79,62,164,31,80,62,255,239,80,62,170,192,81,62,166,145,82,62,242,98,83,62,141,52,84,62,121,6,85,62,180,216,85,62,63,171,86,62,25,126,87,62,65,81,88,62,185,36,89,62,126,248,89,62,147,204,90,62,245,160,91,62,165,117,92,62,163,74,93,62,238,31,94,62,135,245,94,62,109,203,95,62,159,161,96,62,30,120,97,62,233,78,98,62,1,38,99,62,100,253,99,62,19,213,100,62,14,173,101,62,84,133,102,62,229,93,103,62,193,54,104,62,231,15,105,62,88,233,105,62,19,195,106,62,24,157,107,62,103,119,108,62,255,81,109,62,224,44,110,62,11,8,111,62,126,227,111,62,58,191,112,62,62,155,113,62,139,119,114,62,31,84,115,62,251,48,116,62,31,14,117,62,138,235,117,62,59,201,118,62,52,167,119,62,115,133,120,62,248,99,121,62,196,66,122,62,213,33,123,62,44,1,124,62,200,224,124,62,170,192,125,62,208,160,126,62,59,129,127,62,245,48,128,62,111,161,128,62,11,18,129,62,201,130,129,62,168,243,129,62,169,100,130,62,204,213,130,62,15,71,131,62,117,184,131,62,251,41,132,62,162,155,132,62,107,13,133,62,84,127,133,62,93,241,133,62,136,99,134,62,210,213,134,62,61,72,135,62,200,186,135,62,116,45,136,62,63,160,136,62,42,19,137,62,52,134,137,62,94,249,137,62,168,108,138,62,17,224,138,62,153,83,139,62,64,199,139,62,6,59,140,62,235,174,140,62,239,34,141,62,17,151,141,62,82,11,142,62,177,127,142,62,46,244,142,62,201,104,143,62,130,221,143,62,89,82,144,62,78,199,144,62,96,60,145,62,143,177,145,62,220,38,146,62,70,156,146,62,205,17,147,62,113,135,147,62,50,253,147,62,16,115,148,62,9,233,148,62,32,95,149,62,82,213,149,62,161,75,150,62,12,194,150,62,146,56,151,62,53,175,151,62,243,37,152,62,204,156,152,62,193,19,153,62,209,138,153,62,252,1,154,62,66,121,154,62,163,240,154,62,31,104,155,62,181,223,155,62,101,87,156,62,48,207,156,62,21,71,157,62,20,191,157,62,45,55,158,62,96,175,158,62,172,39,159,62,18,160,159,62,145,24,160,62,41,145,160,62,218,9,161,62,165,130,161,62,136,251,161,62,132,116,162,62,152,237,162,62,197,102,163,62,10,224,163,62,103,89,164,62,220,210,164,62,105,76,165,62,14,198,165,62,202,63,166,62,158,185,166,62,137,51,167,62,139,173,167,62,164,39,168,62,213,161,168,62,27,28,169,62,121,150,169,62,237,16,170,62,119,139,170,62,24,6,171,62,206,128,171,62,155,251,171,62,125,118,172,62,117,241,172,62,130,108,173,62,165,231,173,62,221,98,174,62,42,222,174,62,140,89,175,62,2,213,175,62,142,80,176,62,46,204,176,62,226,71,177,62,170,195,177,62,135,63,178,62,119,187,178,62,124,55,179,62,148,179,179,62,191,47,180,62,254,171,180,62,80,40,181,62,181,164,181,62,45,33,182,62,184,157,182,62,85,26,183,62,5,151,183,62,199,19,184,62,156,144,184,62,130,13,185,62,123,138,185,62,133,7,186,62,161,132,186,62,206,1,187,62,13,127,187,62,93,252,187,62,190,121,188,62,48,247,188,62,178,116,189,62,70,242,189,62,233,111,190,62,157,237,190,62,98,107,191,62,54,233,191,62,26,103,192,62,14,229,192,62,17,99,193,62,36,225,193,62,70,95,194,62,119,221,194,62,184,91,195,62,7,218,195,62,100,88,196,62,209,214,196,62,75,85,197,62,212,211,197,62,107,82,198,62,16,209,198,62,195,79,199,62,132,206,199,62,82,77,200,62,45,204,200,62,21,75,201,62,11,202,201,62,13,73,202,62,29,200,202,62,56,71,203,62,97,198,203,62,149,69,204,62,214,196,204,62,34,68,205,62,123,195,205,62,223,66,206,62,79,194,206,62,202,65,207,62,81,193,207,62,226,64,208,62,127,192,208,62,38,64,209,62,216,191,209,62,148,63,210,62,91,191,210,62,44,63,211,62,7,191,211,62,235,62,212,62,218,190,212,62,210,62,213,62,211,190,213,62,222,62,214,62,242,190,214,62,15,63,215,62,53,191,215,62,99,63,216,62,154,191,216,62,217,63,217,62,32,192,217,62,112,64,218,62,199,192,218,62,38,65,219,62,140,193,219,62,250,65,220,62,112,194,220,62,236,66,221,62,112,195,221,62,250,67,222,62,139,196,222,62,34,69,223,62,192,197,223,62,100,70,224,62,14,199,224,62,189,71,225,62,115,200,225,62,46,73,226,62,239,201,226,62,181,74,227,62,127,203,227,62,79,76,228,62,36,205,228,62,253,77,229,62,219,206,229,62,190,79,230,62,164,208,230,62,142,81,231,62,125,210,231,62,111,83,232,62,100,212,232,62,93,85,233,62,89,214,233,62,89,87,234,62,91,216,234,62,96,89,235,62,104,218,235,62,114,91,236,62,126,220,236,62,141,93,237,62,158,222,237,62,176,95,238,62,196,224,238,62,218,97,239,62,241,226,239,62,10,100,240,62,35,229,240,62,62,102,241,62,89,231,241,62,116,104,242,62,145,233,242,62,173,106,243,62,202,235,243,62,230,108,244,62,3,238,244,62,31,111,245,62,59,240,245,62,86,113,246,62,112,242,246,62,137,115,247,62,161,244,247,62,184,117,248,62,206,246,248,62,226,119,249,62,244,248,249,62,4,122,250,62,18,251,250,62,30,124,251,62,40,253,251,62,47,126,252,62,52,255,252,62,54,128,253,62,52,1,254,62,48,130,254,62,40,3,255,62,29,132,255,62,135,2,0,63,254,66,0,63,115,131,0,63,230,195,0,63,86,4,1,63,197,68,1,63,49,133,1,63,155,197,1,63,3,6,2,63,103,70,2,63,202,134,2,63,42,199,2,63,135,7,3,63,225,71,3,63,56,136,3,63,141,200,3,63,222,8,4,63,44,73,4,63,119,137,4,63,191,201,4,63,3,10,5,63,68,74,5,63,130,138,5,63,188,202,5,63,242,10,6,63,36,75,6,63,83,139,6,63,126,203,6,63,165,11,7,63,199,75,7,63,230,139,7,63,1,204,7,63,23,12,8,63,41,76,8,63,54,140,8,63,63,204,8,63,67,12,9,63,67,76,9,63,62,140,9,63,52,204,9,63,37,12,10,63,18,76,10,63,249,139,10,63,219,203,10,63,184,11,11,63,144,75,11,63,98,139,11,63,47,203,11,63,246,10,12,63,184,74,12,63,116,138,12,63,43,202,12,63,219,9,13,63,134,73,13,63,43,137,13,63,202,200,13,63,98,8,14,63,245,71,14,63,129,135,14,63,7,199,14,63,135,6,15,63,0,70,15,63,114,133,15,63,222,196,15,63,67,4,16,63,161,67,16,63,249,130,16,63,73,194,16,63,147,1,17,63,213,64,17,63,17,128,17,63,69,191,17,63,114,254,17,63,151,61,18,63,181,124,18,63,203,187,18,63,218,250,18,63,225,57,19,63,225,120,19,63,216,183,19,63,200,246,19,63,176,53,20,63,143,116,20,63,103,179,20,63,54,242,20,63,253,48,21,63,188,111,21,63,114,174,21,63,32,237,21,63,197,43,22,63,98,106,22,63,246,168,22,63,129,231,22,63,3,38,23,63,125,100,23,63,237,162,23,63,84,225,23,63,178,31,24,63,7,94,24,63,83,156,24,63,149,218,24,63,206,24,25,63,253,86,25,63,35,149,25,63,63,211,25,63,82,17,26,63,90,79,26,63,89,141,26,63,78,203,26,63,57,9,27,63,25,71,27,63,240,132,27,63,188,194,27,63,126,0,28,63,54,62,28,63,227,123,28,63,134,185,28,63,30,247,28,63,172,52,29,63,47,114,29,63,167,175,29,63,20,237,29,63,118,42,30,63,206,103,30,63,26,165,30,63,91,226,30,63,145,31,31,63,188,92,31,63,219,153,31,63,239,214,31,63,247,19,32,63,244,80,32,63,230,141,32,63,203,202,32,63,165,7,33,63,115,68,33,63,53,129,33,63,235,189,33,63,150,250,33,63,52,55,34,63,198,115,34,63,75,176,34,63,197,236,34,63,50,41,35,63,146,101,35,63,230,161,35,63,46,222,35,63,105,26,36,63,151,86,36,63,185,146,36,63,205,206,36,63,213,10,37,63,208,70,37,63,190,130,37,63,158,190,37,63,114,250,37,63,56,54,38,63,241,113,38,63,157,173,38,63,59,233,38,63,204,36,39,63,79,96,39,63,197,155,39,63,45,215,39,63,135,18,40,63,211,77,40,63,18,137,40,63,66,196,40,63,101,255,40,63,121,58,41,63,128,117,41,63,120,176,41,63,98,235,41,63,62,38,42,63,11,97,42,63,202,155,42,63,122,214,42,63,28,17,43,63,175,75,43,63,52,134,43,63,170,192,43,63,16,251,43,63,105,53,44,63,178,111,44,63,236,169,44,63,23,228,44,63,51,30,45,63,64,88,45,63,61,146,45,63,43,204,45,63,10,6,46,63,218,63,46,63,154,121,46,63,74,179,46,63,235,236,46,63,124,38,47,63,254,95,47,63,112,153,47,63,210,210,47,63,36,12,48,63,102,69,48,63,152,126,48,63,186,183,48,63,204,240,48,63,205,41,49,63,191,98,49,63,160,155,49,63,113,212,49,63,49,13,50,63,225,69,50,63,128,126,50,63,15,183,50,63,141,239,50,63,251,39,51,63,87,96,51,63,163,152,51,63,222,208,51,63,8,9,52,63,34,65,52,63,42,121,52,63,33,177,52,63,7,233,52,63,219,32,53,63,159,88,53,63,81,144,53,63,242,199,53,63,129,255,53,63,255,54,54,63,108,110,54,63,198,165,54,63,16,221,54,63,71,20,55,63,109,75,55,63,129,130,55,63,131,185,55,63,116,240,55,63,82,39,56,63,30,94,56,63,217,148,56,63,129,203,56,63,23,2,57,63,155,56,57,63,13,111,57,63,108,165,57,63,185,219,57,63,244,17,58,63,28,72,58,63,50,126,58,63,53,180,58,63,38,234,58,63,4,32,59,63,207,85,59,63,135,139,59,63,45,193,59,63,192,246,59,63,64,44,60,63,173,97,60,63,7,151,60,63,78,204,60,63,130,1,61,63,163,54,61,63,177,107,61,63,171,160,61,63,146,213,61,63,102,10,62,63,39,63,62,63,212,115,62,63,110,168,62,63,244,220,62,63,103,17,63,63,198,69,63,63,17,122,63,63,73,174,63,63,109,226,63,63,126,22,64,63,122,74,64,63,99,126,64,63,56,178,64,63,248,229,64,63,165,25,65,63,62,77,65,63,195,128,65,63,52,180,65,63,144,231,65,63,216,26,66,63,13,78,66,63,44,129,66,63,56,180,66,63,47,231,66,63,18,26,67,63,224,76,67,63,154,127,67,63,64,178,67,63,208,228,67,63,77,23,68,63,180,73,68,63,7,124,68,63,69,174,68,63,111,224,68,63,131,18,69,63,131,68,69,63,110,118,69,63,68,168,69,63,5,218,69,63,177,11,70,63,72,61,70,63,202,110,70,63,55,160,70,63,143,209,70,63,210,2,71,63,255,51,71,63,23,101,71,63,26,150,71,63,8,199,71,63,224,247,71,63,163,40,72,63,81,89,72,63,233,137,72,63,107,186,72,63,216,234,72,63,48,27,73,63,114,75,73,63,158,123,73,63,181,171,73,63,181,219,73,63,161,11,74,63,118,59,74,63,54,107,74,63,224,154,74,63,116,202,74,63,242,249,74,63,90,41,75,63,173,88,75,63,233,135,75,63,15,183,75,63,32,230,75,63,26,21,76,63,254,67,76,63,204,114,76,63,132,161,76,63,38,208,76,63,177,254,76,63,38,45,77,63,133,91,77,63,206,137,77,63,0,184,77,63,28,230,77,63,34,20,78,63,17,66,78,63,234,111,78,63,172,157,78,63,88,203,78,63,238,248,78,63,108,38,79,63,213,83,79,63,38,129,79,63,97,174,79,63,134,219,79,63,147,8,80,63,138,53,80,63,107,98,80,63,52,143,80,63,231,187,80,63,131,232,80,63,8,21,81,63,119,65,81,63,206,109,81,63,15,154,81,63,57,198,81,63,76,242,81,63,71,30,82,63,44,74,82,63,250,117,82,63,177,161,82,63,81,205,82,63,218,248,82,63,76,36,83,63,166,79,83,63,234,122,83,63,22,166,83,63,44,209,83,63,42,252,83,63,17,39,84,63,224,81,84,63,153,124,84,63,58,167,84,63,196,209,84,63,54,252,84,63,146,38,85,63,214,80,85,63,2,123,85,63,24,165,85,63,22,207,85,63,252,248,85,63,204,34,86,63,131,76,86,63,36,118,86,63,172,159,86,63,30,201,86,63,120,242,86,63,186,27,87,63,229,68,87,63,248,109,87,63,244,150,87,63,216,191,87,63,165,232,87,63,90,17,88,63,248,57,88,63,126,98,88,63,236,138,88,63,67,179,88,63,130,219,88,63,169,3,89,63,185,43,89,63,177,83,89,63,145,123,89,63,90,163,89,63,11,203,89,63,164,242,89,63,37,26,90,63,143,65,90,63,225,104,90,63,27,144,90,63,62,183,90,63,72,222,90,63,59,5,91,63,22,44,91,63,217,82,91,63,133,121,91,63,24,160,91,63,148,198,91,63,248,236,91,63,68,19,92,63,120,57,92,63,149,95,92,63,153,133,92,63,134,171,92,63,91,209,92,63,24,247,92,63,189,28,93,63,74,66,93,63,191,103,93,63,28,141,93,63,98,178,93,63,143,215,93,63,165,252,93,63,162,33,94,63,136,70,94,63,86,107,94,63,11,144,94,63,169,180,94,63,47,217,94,63,157,253,94,63,243,33,95,63,49,70,95,63,88,106,95,63,102,142,95,63,92,178,95,63,59,214,95,63,1,250,95,63,175,29,96,63,70,65,96,63,196,100,96,63,43,136,96,63,122,171,96,63,176,206,96,63,207,241,96,63,214,20,97,63,197,55,97,63,155,90,97,63,90,125,97,63,1,160,97,63,144,194,97,63,8,229,97,63,103,7,98,63,174,41,98,63,221,75,98,63,245,109,98,63,244,143,98,63,220,177,98,63,171,211,98,63,99,245,98,63,3,23,99,63,139,56,99,63,251,89,99,63,83,123,99,63,147,156,99,63,188,189,99,63,204,222,99,63,197,255,99,63,166,32,100,63,110,65,100,63,32,98,100,63,185,130,100,63,58,163,100,63,164,195,100,63,245,227,100,63,47,4,101,63,82,36,101,63,92,68,101,63,78,100,101,63,41,132,101,63,236,163,101,63,151,195,101,63,43,227,101,63,167,2,102,63,11,34,102,63,87,65,102,63,139,96,102,63,168,127,102,63,174,158,102,63,155,189,102,63,113,220,102,63,47,251,102,63,214,25,103,63,101,56,103,63,220,86,103,63,59,117,103,63,132,147,103,63,180,177,103,63,205,207,103,63,206,237,103,63,184,11,104,63,138,41,104,63,69,71,104,63,233,100,104,63,116,130,104,63,233,159,104,63,69,189,104,63,139,218,104,63,185,247,104,63,207,20,105,63,207,49,105,63,182,78,105,63,135,107,105,63,64,136,105,63,225,164,105,63,108,193,105,63,223,221,105,63,59,250,105,63,127,22,106,63,172,50,106,63,195,78,106,63,193,106,106,63,169,134,106,63,121,162,106,63,51,190,106,63,213,217,106,63,96,245,106,63,212,16,107,63,48,44,107,63,118,71,107,63,165,98,107,63,188,125,107,63,189,152,107,63,167,179,107,63,121,206,107,63,53,233,107,63,218,3,108,63,104,30,108,63,223,56,108,63,63,83,108,63,136,109,108,63,187,135,108,63,214,161,108,63,219,187,108,63,201,213,108,63,161,239,108,63,97,9,109,63,11,35,109,63,159,60,109,63,27,86,109,63,129,111,109,63,209,136,109,63,9,162,109,63,44,187,109,63,56,212,109,63,45,237,109,63,12,6,110,63,212,30,110,63,134,55,110,63,33,80,110,63,166,104,110,63,21,129,110,63,110,153,110,63,176,177,110,63,220,201,110,63,241,225,110,63,241,249,110,63,218,17,111,63,173,41,111,63,106,65,111,63,16,89,111,63,161,112,111,63,28,136,111,63,128,159,111,63,207,182,111,63,7,206,111,63,42,229,111,63,54,252,111,63,45,19,112,63,14,42,112,63,217,64,112,63,142,87,112,63,46,110,112,63,184,132,112,63,43,155,112,63,138,177,112,63,210,199,112,63,5,222,112,63,35,244,112,63,42,10,113,63,29,32,113,63,249,53,113,63,193,75,113,63,114,97,113,63,15,119,113,63,150,140,113,63,7,162,113,63,99,183,113,63,170,204,113,63,220,225,113,63,249,246,113,63,0,12,114,63,242,32,114,63,207,53,114,63,151,74,114,63,73,95,114,63,231,115,114,63,112,136,114,63,227,156,114,63,66,177,114,63,140,197,114,63,193,217,114,63,225,237,114,63,236,1,115,63,227,21,115,63,197,41,115,63,146,61,115,63,74,81,115,63,238,100,115,63,125,120,115,63,248,139,115,63,94,159,115,63,175,178,115,63,236,197,115,63,21,217,115,63,41,236,115,63,41,255,115,63,21,18,116,63,236,36,116,63,175,55,116,63,94,74,116,63,248,92,116,63,127,111,116,63,241,129,116,63,80,148,116,63,154,166,116,63,208,184,116,63,242,202,116,63,1,221,116,63,251,238,116,63,226,0,117,63,181,18,117,63,116,36,117,63,31,54,117,63,183,71,117,63,59,89,117,63,171,106,117,63,8,124,117,63,81,141,117,63,135,158,117,63,169,175,117,63,184,192,117,63,179,209,117,63,155,226,117,63,112,243,117,63,50,4,118,63,224,20,118,63,123,37,118,63,3,54,118,63,120,70,118,63,217,86,118,63,40,103,118,63,100,119,118,63,140,135,118,63,162,151,118,63,165,167,118,63,149,183,118,63,114,199,118,63,61,215,118,63,245,230,118,63,154,246,118,63,44,6,119,63,172,21,119,63,26,37,119,63,117,52,119,63,189,67,119,63,243,82,119,63,22,98,119,63,40,113,119,63,39,128,119,63,19,143,119,63,238,157,119,63,182,172,119,63,108,187,119,63,16,202,119,63,162,216,119,63,34,231,119,63,144,245,119,63,236,3,120,63,55,18,120,63,111,32,120,63,150,46,120,63,170,60,120,63,174,74,120,63,159,88,120,63,127,102,120,63,77,116,120,63,10,130,120,63,181,143,120,63,79,157,120,63,215,170,120,63,78,184,120,63,180,197,120,63,8,211,120,63,76,224,120,63,126,237,120,63,158,250,120,63,174,7,121,63,173,20,121,63,155,33,121,63,119,46,121,63,67,59,121,63,254,71,121,63,168,84,121,63,66,97,121,63,202,109,121,63,66,122,121,63,169,134,121,63,0,147,121,63,70,159,121,63,124,171,121,63,161,183,121,63,181,195,121,63,186,207,121,63,173,219,121,63,145,231,121,63,100,243,121,63,40,255,121,63,219,10,122,63,126,22,122,63,16,34,122,63,147,45,122,63,6,57,122,63,105,68,122,63,188,79,122,63,255,90,122,63,51,102,122,63,86,113,122,63,106,124,122,63,111,135,122,63,99,146,122,63,72,157,122,63,30,168,122,63,228,178,122,63,155,189,122,63,66,200,122,63,218,210,122,63,99,221,122,63,221,231,122,63,71,242,122,63,162,252,122,63,238,6,123,63,43,17,123,63,89,27,123,63,120,37,123,63,137,47,123,63,138,57,123,63,124,67,123,63,96,77,123,63,53,87,123,63,252,96,123,63,179,106,123,63,92,116,123,63,247,125,123,63,131,135,123,63,1,145,123,63,112,154,123,63,209,163,123,63,36,173,123,63,104,182,123,63,158,191,123,63,198,200,123,63,224,209,123,63,236,218,123,63,234,227,123,63,218,236,123,63,188,245,123,63,144,254,123,63,86,7,124,63,14,16,124,63,185,24,124,63,86,33,124,63,230,41,124,63,104,50,124,63,220,58,124,63,67,67,124,63,156,75,124,63,232,83,124,63,39,92,124,63,88,100,124,63,124,108,124,63,147,116,124,63,157,124,124,63,153,132,124,63,137,140,124,63,107,148,124,63,65,156,124,63,9,164,124,63,197,171,124,63,116,179,124,63,22,187,124,63,172,194,124,63,52,202,124,63,176,209,124,63,32,217,124,63,131,224,124,63,217,231,124,63,35,239,124,63,97,246,124,63,146,253,124,63,183,4,125,63,208,11,125,63,221,18,125,63,221,25,125,63,209,32,125,63,185,39,125,63,150,46,125,63,102,53,125,63,42,60,125,63,227,66,125,63,143,73,125,63,48,80,125,63,197,86,125,63,78,93,125,63,204,99,125,63,62,106,125,63,165,112,125,63,0,119,125,63,80,125,125,63,148,131,125,63,205,137,125,63,251,143,125,63,29,150,125,63,52,156,125,63,64,162,125,63,65,168,125,63,55,174,125,63,34,180,125,63,2,186,125,63,215,191,125,63,161,197,125,63,96,203,125,63,21,209,125,63,190,214,125,63,93,220,125,63,242,225,125,63,124,231,125,63,251,236,125,63,112,242,125,63,218,247,125,63,58,253,125,63,143,2,126,63,219,7,126,63,28,13,126,63,82,18,126,63,127,23,126,63,161,28,126,63,186,33,126,63,200,38,126,63,204,43,126,63,199,48,126,63,183,53,126,63,158,58,126,63,123,63,126,63,78,68,126,63,23,73,126,63,215,77,126,63,141,82,126,63,58,87,126,63,221,91,126,63,118,96,126,63,6,101,126,63,141,105,126,63,10,110,126,63,126,114,126,63,233,118,126,63,75,123,126,63,164,127,126,63,243,131,126,63,57,136,126,63,119,140,126,63,171,144,126,63,214,148,126,63,249,152,126,63,18,157,126,63,35,161,126,63,44,165,126,63,43,169,126,63,34,173,126,63,16,177,126,63,246,180,126,63,211,184,126,63,167,188,126,63,115,192,126,63,55,196,126,63,243,199,126,63,166,203,126,63,81,207,126,63,243,210,126,63,142,214,126,63,32,218,126,63,171,221,126,63,45,225,126,63,167,228,126,63,26,232,126,63,132,235,126,63,231,238,126,63,66,242,126,63,149,245,126,63,224,248,126,63,36,252,126,63,96,255,126,63,148,2,127,63,193,5,127,63,230,8,127,63,4,12,127,63,27,15,127,63,42,18,127,63,50,21,127,63,50,24,127,63,43,27,127,63,29,30,127,63,8,33,127,63,236,35,127,63,201,38,127,63,158,41,127,63,109,44,127,63,53,47,127,63,246,49,127,63,175,52,127,63,99,55,127,63,15,58,127,63,181,60,127,63,83,63,127,63,236,65,127,63,125,68,127,63,8,71,127,63,141,73,127,63,11,76,127,63,131,78,127,63,244,80,127,63,95,83,127,63,195,85,127,63,33,88,127,63,121,90,127,63,203,92,127,63,23,95,127,63,92,97,127,63,155,99,127,63,213,101,127,63,8,104,127,63,54,106,127,63,93,108,127,63,127,110,127,63,155,112,127,63,177,114,127,63,193,116,127,63,203,118,127,63,208,120,127,63,207,122,127,63,201,124,127,63,189,126,127,63,171,128,127,63,148,130,127,63,120,132,127,63,86,134,127,63,47,136,127,63,2,138,127,63,209,139,127,63,153,141,127,63,93,143,127,63,28,145,127,63,213,146,127,63,137,148,127,63,57,150,127,63,227,151,127,63,136,153,127,63,40,155,127,63,196,156,127,63,90,158,127,63,236,159,127,63,121,161,127,63,1,163,127,63,132,164,127,63,3,166,127,63,125,167,127,63,242,168,127,63,99,170,127,63,207,171,127,63,55,173,127,63,154,174,127,63,249,175,127,63,84,177,127,63,170,178,127,63,251,179,127,63,73,181,127,63,146,182,127,63,215,183,127,63,24,185,127,63,85,186,127,63,141,187,127,63,193,188,127,63,242,189,127,63,30,191,127,63,71,192,127,63,107,193,127,63,140,194,127,63,168,195,127,63,193,196,127,63,214,197,127,63,231,198,127,63,245,199,127,63,255,200,127,63,5,202,127,63,7,203,127,63,6,204,127,63,1,205,127,63,249,205,127,63,237,206,127,63,222,207,127,63,203,208,127,63,181,209,127,63,156,210,127,63,127,211,127,63,95,212,127,63,59,213,127,63,20,214,127,63,234,214,127,63,189,215,127,63,141,216,127,63,90,217,127,63,35,218,127,63,233,218,127,63,173,219,127,63,109,220,127,63,43,221,127,63,229,221,127,63,156,222,127,63,81,223,127,63,3,224,127,63,178,224,127,63,94,225,127,63,7,226,127,63,174,226,127,63,82,227,127,63,243,227,127,63,146,228,127,63,46,229,127,63,199,229,127,63,94,230,127,63,242,230,127,63,132,231,127,63,19,232,127,63,160,232,127,63,42,233,127,63,178,233,127,63,56,234,127,63,187,234,127,63,60,235,127,63,187,235,127,63,55,236,127,63,177,236,127,63,41,237,127,63,159,237,127,63,18,238,127,63,132,238,127,63,243,238,127,63,96,239,127,63,204,239,127,63,53,240,127,63,156,240,127,63,1,241,127,63,101,241,127,63,198,241,127,63,37,242,127,63,131,242,127,63,222,242,127,63,56,243,127,63,144,243,127,63,231,243,127,63,59,244,127,63,142,244,127,63,223,244,127,63,46,245,127,63,124,245,127,63,200,245,127,63,19,246,127,63,91,246,127,63,163,246,127,63,233,246,127,63,45,247,127,63,111,247,127,63,177,247,127,63,240,247,127,63,47,248,127,63,108,248,127,63,167,248,127,63,225,248,127,63,26,249,127,63,82,249,127,63,136,249,127,63,188,249,127,63,240,249,127,63,34,250,127,63,83,250,127,63,131,250,127,63,178,250,127,63,224,250,127,63,12,251,127,63,55,251,127,63,97,251,127,63,138,251,127,63,178,251,127,63,217,251,127,63,255,251,127,63,36,252,127,63,72,252,127,63,107,252,127,63,141,252,127,63,173,252,127,63,205,252,127,63,237,252,127,63,11,253,127,63,40,253,127,63,69,253,127,63,96,253,127,63,123,253,127,63,149,253,127,63,174,253,127,63,199,253,127,63,222,253,127,63,245,253,127,63,12,254,127,63,33,254,127,63,54,254,127,63,74,254,127,63,93,254,127,63,112,254,127,63,130,254,127,63,148,254,127,63,165,254,127,63,181,254,127,63,197,254,127,63,212,254,127,63,227,254,127,63,241,254,127,63,254,254,127,63,11,255,127,63,24,255,127,63,36,255,127,63,47,255,127,63,59,255,127,63,69,255,127,63,79,255,127,63,89,255,127,63,99,255,127,63,108,255,127,63,116,255,127,63,124,255,127,63,132,255,127,63,140,255,127,63,147,255,127,63,154,255,127,63,160,255,127,63,166,255,127,63,172,255,127,63,178,255,127,63,183,255,127,63,188,255,127,63,193,255,127,63,197,255,127,63,202,255,127,63,206,255,127,63,209,255,127,63,213,255,127,63,216,255,127,63,220,255,127,63,223,255,127,63,225,255,127,63,228,255,127,63,230,255,127,63,233,255,127,63,235,255,127,63,237,255,127,63,239,255,127,63,240,255,127,63,242,255,127,63,243,255,127,63,245,255,127,63,246,255,127,63,247,255,127,63,248,255,127,63,249,255,127,63,250,255,127,63,251,255,127,63,251,255,127,63,252,255,127,63,252,255,127,63,253,255,127,63,253,255,127,63,254,255,127,63,254,255,127,63,254,255,127,63,255,255,127,63,255,255,127,63,255,255,127,63,255,255,127,63,255,255,127,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,198,63,120,51,98,136,11,53,151,200,193,53,80,233,61,54,183,247,156,54,46,124,234,54,153,192,35,55,244,2,90,55,56,3,140,55,227,228,174,55,177,166,213,55,108,36,0,56,146,101,23,56,201,150,48,56,18,184,75,56,81,201,104,56,94,229,131,56,29,94,148,56,229,206,165,56,167,55,184,56,128,152,203,56,85,241,223,56,36,66,245,56,126,197,5,57,238,101,17,57,99,130,29,57,207,26,42,57,63,47,55,57,179,191,68,57,30,204,82,57,141,84,97,57,243,88,112,57,94,217,127,57,227,234,135,57,18,39,144,57,64,161,152,57,105,89,161,57,146,79,170,57,181,131,179,57,215,245,188,57,245,165,198,57,14,148,208,57,34,192,218,57,46,42,229,57,57,210,239,57,60,184,250,57,27,238,2,58,22,159,8,58,13,111,14,58,0,94,20,58,239,107,26,58,218,152,32,58,192,228,38,58,161,79,45,58,124,217,51,58,83,130,58,58,37,74,65,58,240,48,72,58,182,54,79,58,116,91,86,58,45,159,93,58,222,1,101,58,136,131,108,58,42,36,116,58,196,227,123,58,44,225,129,58,241,223,133,58,49,238,137,58,238,11,142,58,37,57,146,58,215,117,150,58,5,194,154,58,174,29,159,58,209,136,163,58,110,3,168,58,134,141,172,58,24,39,177,58,36,208,181,58,169,136,186,58,169,80,191,58,33,40,196,58,19,15,201,58,126,5,206,58,98,11,211,58,191,32,216,58,148,69,221,58,225,121,226,58,166,189,231,58,227,16,237,58,152,115,242,58,196,229,247,58,103,103,253,58,65,124,1,59,137,76,4,59,141,36,7,59,76,4,10,59,198,235,12,59,251,218,15,59,235,209,18,59,149,208,21,59,251,214,24,59,26,229,27,59,244,250,30,59,136,24,34,59,215,61,37,59,223,106,40,59,161,159,43,59,29,220,46,59,83,32,50,59,66,108,53,59,234,191,56,59,76,27,60,59,103,126,63,59,59,233,66,59,199,91,70,59,12,214,73,59,10,88,77,59,193,225,80,59,48,115,84,59,86,12,88,59,53,173,91,59,204,85,95,59,26,6,99,59,32,190,102,59,222,125,106,59,82,69,110,59,127,20,114,59,97,235,117,59,251,201,121,59,76,176,125,59,41,207,128,59,8,202,130,59,194,200,132,59], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([87,203,134,59,198,209,136,59,17,220,138,59,55,234,140,59,55,252,142,59,18,18,145,59,199,43,147,59,87,73,149,59,194,106,151,59,6,144,153,59,37,185,155,59,30,230,157,59,241,22,160,59,158,75,162,59,37,132,164,59,134,192,166,59,192,0,169,59,212,68,171,59,193,140,173,59,137,216,175,59,41,40,178,59,163,123,180,59,245,210,182,59,33,46,185,59,38,141,187,59,4,240,189,59,186,86,192,59,73,193,194,59,177,47,197,59,242,161,199,59,10,24,202,59,251,145,204,59,196,15,207,59,102,145,209,59,223,22,212,59,49,160,214,59,90,45,217,59,91,190,219,59,51,83,222,59,227,235,224,59,107,136,227,59,201,40,230,59,255,204,232,59,12,117,235,59,240,32,238,59,171,208,240,59,61,132,243,59,165,59,246,59,228,246,248,59,250,181,251,59,229,120,254,59,212,159,0,60,32,5,2,60,87,108,3,60,121,213,4,60,134,64,6,60,126,173,7,60,96,28,9,60,45,141,10,60,229,255,11,60,136,116,13,60,21,235,14,60,141,99,16,60,239,221,17,60,59,90,19,60,114,216,20,60,147,88,22,60,158,218,23,60,147,94,25,60,115,228,26,60,60,108,28,60,240,245,29,60,141,129,31,60,20,15,33,60,133,158,34,60,224,47,36,60,36,195,37,60,82,88,39,60,105,239,40,60,106,136,42,60,84,35,44,60,40,192,45,60,229,94,47,60,139,255,48,60,26,162,50,60,146,70,52,60,243,236,53,60,61,149,55,60,112,63,57,60,140,235,58,60,145,153,60,60,126,73,62,60,84,251,63,60,18,175,65,60,185,100,67,60,72,28,69,60,192,213,70,60,31,145,72,60,103,78,74,60,151,13,76,60,175,206,77,60,176,145,79,60,152,86,81,60,103,29,83,60,31,230,84,60,190,176,86,60,69,125,88,60,179,75,90,60,9,28,92,60,71,238,93,60,107,194,95,60,119,152,97,60,106,112,99,60,68,74,101,60,5,38,103,60,173,3,105,60,60,227,106,60,178,196,108,60,14,168,110,60,81,141,112,60,123,116,114,60,139,93,116,60,130,72,118,60,95,53,120,60,34,36,122,60,203,20,124,60,90,7,126,60,208,251,127,60,22,249,128,60,54,245,129,60,74,242,130,60,80,240,131,60,73,239,132,60,53,239,133,60,19,240,134,60,229,241,135,60,169,244,136,60,95,248,137,60,8,253,138,60,164,2,140,60,50,9,141,60,178,16,142,60,37,25,143,60,139,34,144,60,226,44,145,60,44,56,146,60,104,68,147,60,150,81,148,60,182,95,149,60,201,110,150,60,205,126,151,60,196,143,152,60,172,161,153,60,135,180,154,60,83,200,155,60,17,221,156,60,193,242,157,60,98,9,159,60,245,32,160,60,122,57,161,60,241,82,162,60,89,109,163,60,178,136,164,60,253,164,165,60,57,194,166,60,103,224,167,60,134,255,168,60,151,31,170,60,152,64,171,60,139,98,172,60,111,133,173,60,68,169,174,60,10,206,175,60,193,243,176,60,105,26,178,60,2,66,179,60,139,106,180,60,6,148,181,60,113,190,182,60,205,233,183,60,26,22,185,60,87,67,186,60,133,113,187,60,163,160,188,60,177,208,189,60,177,1,191,60,160,51,192,60,128,102,193,60,80,154,194,60,16,207,195,60,193,4,197,60,97,59,198,60,242,114,199,60,114,171,200,60,227,228,201,60,67,31,203,60,147,90,204,60,211,150,205,60,3,212,206,60,34,18,208,60,49,81,209,60,48,145,210,60,30,210,211,60,252,19,213,60,201,86,214,60,133,154,215,60,49,223,216,60,204,36,218,60,86,107,219,60,208,178,220,60,56,251,221,60,144,68,223,60,214,142,224,60,12,218,225,60,48,38,227,60,67,115,228,60,69,193,229,60,54,16,231,60,21,96,232,60,227,176,233,60,160,2,235,60,75,85,236,60,228,168,237,60,108,253,238,60,226,82,240,60,70,169,241,60,153,0,243,60,218,88,244,60,8,178,245,60,37,12,247,60,48,103,248,60,41,195,249,60,15,32,251,60,228,125,252,60,166,220,253,60,85,60,255,60,121,78,0,61,63,255,0,61,123,176,1,61,46,98,2,61,88,20,3,61,248,198,3,61,15,122,4,61,156,45,5,61,161,225,5,61,27,150,6,61,12,75,7,61,116,0,8,61,82,182,8,61,167,108,9,61,113,35,10,61,179,218,10,61,106,146,11,61,152,74,12,61,60,3,13,61,87,188,13,61,231,117,14,61,238,47,15,61,107,234,15,61,94,165,16,61,199,96,17,61,166,28,18,61,251,216,18,61,198,149,19,61,7,83,20,61,190,16,21,61,234,206,21,61,141,141,22,61,165,76,23,61,52,12,24,61,56,204,24,61,177,140,25,61,161,77,26,61,6,15,27,61,224,208,27,61,48,147,28,61,246,85,29,61,49,25,30,61,226,220,30,61,8,161,31,61,164,101,32,61,181,42,33,61,59,240,33,61,55,182,34,61,168,124,35,61,142,67,36,61,233,10,37,61,186,210,37,61,255,154,38,61,186,99,39,61,234,44,40,61,143,246,40,61,168,192,41,61,55,139,42,61,59,86,43,61,180,33,44,61,161,237,44,61,4,186,45,61,219,134,46,61,38,84,47,61,231,33,48,61,28,240,48,61,198,190,49,61,229,141,50,61,120,93,51,61,127,45,52,61,251,253,52,61,236,206,53,61,81,160,54,61,42,114,55,61,120,68,56,61,58,23,57,61,112,234,57,61,27,190,58,61,58,146,59,61,204,102,60,61,211,59,61,61,79,17,62,61,62,231,62,61,161,189,63,61,120,148,64,61,195,107,65,61,130,67,66,61,181,27,67,61,92,244,67,61,118,205,68,61,4,167,69,61,6,129,70,61,124,91,71,61,101,54,72,61,194,17,73,61,146,237,73,61,214,201,74,61,141,166,75,61,184,131,76,61,86,97,77,61,104,63,78,61,236,29,79,61,229,252,79,61,80,220,80,61,46,188,81,61,128,156,82,61,69,125,83,61,125,94,84,61,40,64,85,61,69,34,86,61,214,4,87,61,218,231,87,61,81,203,88,61,58,175,89,61,150,147,90,61,101,120,91,61,167,93,92,61,91,67,93,61,130,41,94,61,28,16,95,61,40,247,95,61,167,222,96,61,152,198,97,61,251,174,98,61,209,151,99,61,25,129,100,61,212,106,101,61,0,85,102,61,159,63,103,61,176,42,104,61,51,22,105,61,41,2,106,61,144,238,106,61,105,219,107,61,180,200,108,61,113,182,109,61,160,164,110,61,65,147,111,61,84,130,112,61,216,113,113,61,206,97,114,61,54,82,115,61,15,67,116,61,89,52,117,61,22,38,118,61,67,24,119,61,226,10,120,61,243,253,120,61,117,241,121,61,104,229,122,61,204,217,123,61,162,206,124,61,232,195,125,61,160,185,126,61,201,175,127,61,49,83,128,61,183,206,128,61,117,74,129,61,107,198,129,61,154,66,130,61,1,191,130,61,160,59,131,61,120,184,131,61,136,53,132,61,209,178,132,61,81,48,133,61,10,174,133,61,251,43,134,61,37,170,134,61,134,40,135,61,32,167,135,61,242,37,136,61,252,164,136,61,62,36,137,61,184,163,137,61,106,35,138,61,84,163,138,61,118,35,139,61,209,163,139,61,99,36,140,61,45,165,140,61,46,38,141,61,104,167,141,61,218,40,142,61,131,170,142,61,100,44,143,61,125,174,143,61,206,48,144,61,86,179,144,61,23,54,145,61,14,185,145,61,62,60,146,61,165,191,146,61,67,67,147,61,26,199,147,61,39,75,148,61,109,207,148,61,234,83,149,61,158,216,149,61,138,93,150,61,173,226,150,61,7,104,151,61,153,237,151,61,98,115,152,61,99,249,152,61,155,127,153,61,10,6,154,61,176,140,154,61,142,19,155,61,163,154,155,61,239,33,156,61,114,169,156,61,44,49,157,61,29,185,157,61,69,65,158,61,165,201,158,61,59,82,159,61,8,219,159,61,13,100,160,61,72,237,160,61,186,118,161,61,99,0,162,61,67,138,162,61,90,20,163,61,167,158,163,61,43,41,164,61,230,179,164,61,216,62,165,61,0,202,165,61,95,85,166,61,245,224,166,61,193,108,167,61,196,248,167,61,254,132,168,61,110,17,169,61,20,158,169,61,241,42,170,61,4,184,170,61,78,69,171,61,206,210,171,61,133,96,172,61,113,238,172,61,149,124,173,61,238,10,174,61,126,153,174,61,67,40,175,61,63,183,175,61,114,70,176,61,218,213,176,61,120,101,177,61,77,245,177,61,88,133,178,61,152,21,179,61,15,166,179,61,187,54,180,61,158,199,180,61,182,88,181,61,4,234,181,61,137,123,182,61,67,13,183,61,50,159,183,61,88,49,184,61,179,195,184,61,68,86,185,61,11,233,185,61,7,124,186,61,57,15,187,61,160,162,187,61,61,54,188,61,16,202,188,61,24,94,189,61,85,242,189,61,200,134,190,61,112,27,191,61,78,176,191,61,97,69,192,61,170,218,192,61,39,112,193,61,218,5,194,61,194,155,194,61,224,49,195,61,50,200,195,61,186,94,196,61,119,245,196,61,104,140,197,61,143,35,198,61,235,186,198,61,124,82,199,61,66,234,199,61,61,130,200,61,108,26,201,61,209,178,201,61,106,75,202,61,57,228,202,61,59,125,203,61,115,22,204,61,224,175,204,61,129,73,205,61,86,227,205,61,97,125,206,61,159,23,207,61,19,178,207,61,187,76,208,61,151,231,208,61,168,130,209,61,237,29,210,61,103,185,210,61,21,85,211,61,248,240,211,61,14,141,212,61,89,41,213,61,216,197,213,61,140,98,214,61,115,255,214,61,143,156,215,61,223,57,216,61,99,215,216,61,27,117,217,61,7,19,218,61,38,177,218,61,122,79,219,61,2,238,219,61,189,140,220,61,173,43,221,61,208,202,221,61,39,106,222,61,178,9,223,61,112,169,223,61,98,73,224,61,136,233,224,61,226,137,225,61,111,42,226,61,47,203,226,61,35,108,227,61,74,13,228,61,165,174,228,61,52,80,229,61,245,241,229,61,234,147,230,61,19,54,231,61,110,216,231,61,253,122,232,61,191,29,233,61,180,192,233,61,221,99,234,61,56,7,235,61,199,170,235,61,136,78,236,61,125,242,236,61,164,150,237,61,255,58,238,61,140,223,238,61,76,132,239,61,63,41,240,61,101,206,240,61,189,115,241,61,73,25,242,61,7,191,242,61,247,100,243,61,26,11,244,61,112,177,244,61,248,87,245,61,179,254,245,61,160,165,246,61,192,76,247,61,18,244,247,61,151,155,248,61,77,67,249,61,55,235,249,61,82,147,250,61,159,59,251,61,31,228,251,61,209,140,252,61,181,53,253,61,203,222,253,61,19,136,254,61,141,49,255,61,57,219,255,61,140,66,0,62,148,151,0,62,181,236,0,62,238,65,1,62,65,151,1,62,173,236,1,62,49,66,2,62,206,151,2,62,132,237,2,62,83,67,3,62,59,153,3,62,59,239,3,62,84,69,4,62,134,155,4,62,209,241,4,62,52,72,5,62,176,158,5,62,68,245,5,62,242,75,6,62,183,162,6,62,150,249,6,62,141,80,7,62,156,167,7,62,196,254,7,62,5,86,8,62,94,173,8,62,207,4,9,62,89,92,9,62,252,179,9,62,183,11,10,62,138,99,10,62,118,187,10,62,122,19,11,62,150,107,11,62,203,195,11,62,24,28,12,62,125,116,12,62,250,204,12,62,144,37,13,62,62,126,13,62,4,215,13,62,227,47,14,62,217,136,14,62,232,225,14,62,15,59,15,62,78,148,15,62,165,237,15,62,20,71,16,62,155,160,16,62,58,250,16,62,241,83,17,62,193,173,17,62,168,7,18,62,167,97,18,62,190,187,18,62,237,21,19,62,51,112,19,62,146,202,19,62,9,37,20,62,151,127,20,62,61,218,20,62,251,52,21,62,209,143,21,62,190,234,21,62,195,69,22,62,224,160,22,62,21,252,22,62,97,87,23,62,197,178,23,62,64,14,24,62,211,105,24,62,126,197,24,62,64,33,25,62,26,125,25,62,11,217,25,62,20,53,26,62,52,145,26,62,108,237,26,62,187,73,27,62,34,166,27,62,160,2,28,62,53,95,28,62,226,187,28,62,166,24,29,62,129,117,29,62,116,210,29,62,126,47,30,62,159,140,30,62,215,233,30,62,39,71,31,62,141,164,31,62,11,2,32,62,160,95,32,62,76,189,32,62,16,27,33,62,234,120,33,62,219,214,33,62,228,52,34,62,3,147,34,62,58,241,34,62,135,79,35,62,235,173,35,62,103,12,36,62,249,106,36,62,162,201,36,62,98,40,37,62,56,135,37,62,38,230,37,62,42,69,38,62,69,164,38,62,119,3,39,62,192,98,39,62,31,194,39,62,149,33,40,62,33,129,40,62,197,224,40,62,126,64,41,62,79,160,41,62,54,0,42,62,51,96,42,62,72,192,42,62,114,32,43,62,179,128,43,62,11,225,43,62,121,65,44,62,253,161,44,62,152,2,45,62,73,99,45,62,16,196,45,62,238,36,46,62,226,133,46,62,237,230,46,62,13,72,47,62,68,169,47,62,145,10,48,62,245,107,48,62,110,205,48,62,254,46,49,62,163,144,49,62,95,242,49,62,49,84,50,62,25,182,50,62,23,24,51,62,43,122,51,62,85,220,51,62,148,62,52,62,234,160,52,62,86,3,53,62,216,101,53,62,111,200,53,62,28,43,54,62,223,141,54,62,184,240,54,62,167,83,55,62,171,182,55,62,197,25,56,62,245,124,56,62,59,224,56,62,150,67,57,62,7,167,57,62,141,10,58,62,41,110,58,62,219,209,58,62,162,53,59,62,126,153,59,62,112,253,59,62,120,97,60,62,149,197,60,62,199,41,61,62,15,142,61,62,108,242,61,62,222,86,62,62,102,187,62,62,3,32,63,62,181,132,63,62,125,233,63,62,90,78,64,62,75,179,64,62,83,24,65,62,111,125,65,62,160,226,65,62,231,71,66,62,66,173,66,62,179,18,67,62,57,120,67,62,211,221,67,62,131,67,68,62,71,169,68,62,33,15,69,62,15,117,69,62,18,219,69,62,42,65,70,62,87,167,70,62,153,13,71,62,240,115,71,62,91,218,71,62,219,64,72,62,111,167,72,62,25,14,73,62,215,116,73,62,169,219,73,62,144,66,74,62,140,169,74,62,157,16,75,62,193,119,75,62,251,222,75,62,73,70,76,62,171,173,76,62,34,21,77,62,173,124,77,62,76,228,77,62,0,76,78,62,200,179,78,62,164,27,79,62,149,131,79,62,154,235,79,62,179,83,80,62,225,187,80,62,34,36,81,62,120,140,81,62,225,244,81,62,95,93,82,62,241,197,82,62,151,46,83,62,81,151,83,62,31,0,84,62,1,105,84,62,247,209,84,62,0,59,85,62,30,164,85,62,79,13,86,62,149,118,86,62,238,223,86,62,91,73,87,62,219,178,87,62,112,28,88,62,24,134,88,62,211,239,88,62,163,89,89,62,134,195,89,62,124,45,90,62,134,151,90,62,164,1,91,62,213,107,91,62,26,214,91,62,114,64,92,62,221,170,92,62,92,21,93,62,239,127,93,62,148,234,93,62,77,85,94,62,26,192,94,62,249,42,95,62,236,149,95,62,242,0,96,62,11,108,96,62,55,215,96,62,119,66,97,62,202,173,97,62,47,25,98,62,168,132,98,62,52,240,98,62,210,91,99,62,132,199,99,62,73,51,100,62,32,159,100,62,11,11,101,62,8,119,101,62,24,227,101,62,59,79,102,62,113,187,102,62,186,39,103,62,21,148,103,62,131,0,104,62,3,109,104,62,151,217,104,62,60,70,105,62,245,178,105,62,192,31,106,62,157,140,106,62,141,249,106,62,144,102,107,62,165,211,107,62,204,64,108,62,6,174,108,62,82,27,109,62,176,136,109,62,33,246,109,62,164,99,110,62,57,209,110,62,225,62,111,62,154,172,111,62,102,26,112,62,68,136,112,62,52,246,112,62,55,100,113,62,75,210,113,62,113,64,114,62,169,174,114,62,243,28,115,62,80,139,115,62,190,249,115,62,61,104,116,62,207,214,116,62,115,69,117,62,40,180,117,62,239,34,118,62,200,145,118,62,179,0,119,62,175,111,119,62,189,222,119,62,221,77,120,62,14,189,120,62,80,44,121,62,165,155,121,62,10,11,122,62,130,122,122,62,10,234,122,62,164,89,123,62,80,201,123,62,13,57,124,62,219,168,124,62,186,24,125,62,171,136,125,62,173,248,125,62,192,104,126,62,228,216,126,62,26,73,127,62,96,185,127,62,220,20,128,62,16,77,128,62,77,133,128,62,147,189,128,62,225,245,128,62,55,46,129,62,150,102,129,62,253,158,129,62,109,215,129,62,229,15,130,62,102,72,130,62,238,128,130,62,128,185,130,62,25,242,130,62,187,42,131,62,102,99,131,62,24,156,131,62,211,212,131,62,150,13,132,62,98,70,132,62,53,127,132,62,17,184,132,62,245,240,132,62,226,41,133,62,214,98,133,62,211,155,133,62,216,212,133,62,229,13,134,62,250,70,134,62,23,128,134,62,61,185,134,62,106,242,134,62,160,43,135,62,221,100,135,62,35,158,135,62,112,215,135,62,198,16,136,62,35,74,136,62,137,131,136,62,247,188,136,62,108,246,136,62,233,47,137,62,111,105,137,62,252,162,137,62,145,220,137,62,46,22,138,62,211,79,138,62,127,137,138,62,52,195,138,62,240,252,138,62,180,54,139,62,128,112,139,62,84,170,139,62,47,228,139,62,18,30,140,62,253,87,140,62,239,145,140,62,233,203,140,62,235,5,141,62,245,63,141,62,6,122,141,62,31,180,141,62,63,238,141,62,103,40,142,62,150,98,142,62,205,156,142,62,12,215,142,62,82,17,143,62,159,75,143,62,245,133,143,62,81,192,143,62,181,250,143,62,33,53,144,62,147,111,144,62,14,170,144,62,143,228,144,62,25,31,145,62,169,89,145,62,65,148,145,62,224,206,145,62,134,9,146,62,52,68,146,62,233,126,146,62,165,185,146,62,105,244,146,62,52,47,147,62,6,106,147,62,223,164,147,62,191,223,147,62,167,26,148,62,150,85,148,62,139,144,148,62,136,203,148,62,140,6,149,62,152,65,149,62,170,124,149,62,195,183,149,62,227,242,149,62,11,46,150,62,57,105,150,62,111,164,150,62,171,223,150,62,238,26,151,62,56,86,151,62,138,145,151,62,226,204,151,62,65,8,152,62,167,67,152,62,19,127,152,62,135,186,152,62,1,246,152,62,130,49,153,62,10,109,153,62,153,168,153,62,47,228,153,62,203,31,154,62,110,91,154,62,24,151,154,62,200,210,154,62,127,14,155,62,61,74,155,62,2,134,155,62,205,193,155,62,158,253,155,62,119,57,156,62,85,117,156,62,59,177,156,62,39,237,156,62,25,41,157,62,18,101,157,62,18,161,157,62,24,221,157,62,36,25,158,62,55,85,158,62,80,145,158,62,112,205,158,62,150,9,159,62,195,69,159,62,246,129,159,62,47,190,159,62,111,250,159,62,180,54,160,62,1,115,160,62,83,175,160,62,172,235,160,62,11,40,161,62,112,100,161,62,219,160,161,62,77,221,161,62,196,25,162,62,66,86,162,62,198,146,162,62,81,207,162,62,225,11,163,62,119,72,163,62,20,133,163,62,182,193,163,62,95,254,163,62,13,59,164,62,194,119,164,62,125,180,164,62,61,241,164,62,4,46,165,62,208,106,165,62,162,167,165,62,123,228,165,62,89,33,166,62,61,94,166,62,39,155,166,62,23,216,166,62,12,21,167,62,7,82,167,62,8,143,167,62,15,204,167,62,28,9,168,62,46,70,168,62,70,131,168,62,100,192,168,62,136,253,168,62,177,58,169,62,223,119,169,62,20,181,169,62,78,242,169,62,141,47,170,62,211,108,170,62,29,170,170,62,109,231,170,62,195,36,171,62,31,98,171,62,127,159,171,62,230,220,171,62,81,26,172,62,194,87,172,62,57,149,172,62,181,210,172,62,54,16,173,62,189,77,173,62,73,139,173,62,218,200,173,62,113,6,174,62,13,68,174,62,174,129,174,62,85,191,174,62,0,253,174,62,177,58,175,62,103,120,175,62,35,182,175,62,227,243,175,62,169,49,176,62,116,111,176,62,68,173,176,62,25,235,176,62,243,40,177,62,210,102,177,62,182,164,177,62,160,226,177,62,142,32,178,62,129,94,178,62,121,156,178,62,119,218,178,62,121,24,179,62,128,86,179,62,140,148,179,62,157,210,179,62,178,16,180,62,205,78,180,62,236,140,180,62,16,203,180,62,57,9,181,62,103,71,181,62,154,133,181,62,209,195,181,62,13,2,182,62,78,64,182,62,147,126,182,62,221,188,182,62,44,251,182,62,127,57,183,62,215,119,183,62,52,182,183,62,149,244,183,62,251,50,184,62,101,113,184,62,212,175,184,62,71,238,184,62,191,44,185,62,59,107,185,62,188,169,185,62,65,232,185,62,202,38,186,62,88,101,186,62,235,163,186,62,129,226,186,62,28,33,187,62,188,95,187,62,95,158,187,62,7,221,187,62,180,27,188,62,100,90,188,62,25,153,188,62,210,215,188,62,143,22,189,62,80,85,189,62,22,148,189,62,223,210,189,62,173,17,190,62,127,80,190,62,85,143,190,62,47,206,190,62,13,13,191,62,239,75,191,62,213,138,191,62,191,201,191,62,173,8,192,62,159,71,192,62,149,134,192,62,143,197,192,62,141,4,193,62,143,67,193,62,148,130,193,62,158,193,193,62,171,0,194,62,188,63,194,62,209,126,194,62,234,189,194,62,6,253,194,62,38,60,195,62,74,123,195,62,113,186,195,62,157,249,195,62,204,56,196,62,254,119,196,62,52,183,196,62,110,246,196,62,171,53,197,62,236,116,197,62,49,180,197,62,121,243,197,62,196,50,198,62,19,114,198,62,102,177,198,62,188,240,198,62,21,48,199,62,114,111,199,62,210,174,199,62,54,238,199,62,157,45,200,62,7,109,200,62,117,172,200,62,230,235,200,62,90,43,201,62,209,106,201,62,76,170,201,62,202,233,201,62,75,41,202,62,208,104,202,62,88,168,202,62,226,231,202,62,112,39,203,62,1,103,203,62,149,166,203,62,45,230,203,62,199,37,204,62,100,101,204,62,4,165,204,62,168,228,204,62,78,36,205,62,248,99,205,62,164,163,205,62,83,227,205,62,5,35,206,62,186,98,206,62,114,162,206,62,45,226,206,62,234,33,207,62,171,97,207,62,110,161,207,62,52,225,207,62,253,32,208,62,200,96,208,62,150,160,208,62,103,224,208,62,59,32,209,62,17,96,209,62,234,159,209,62,198,223,209,62,164,31,210,62,133,95,210,62,104,159,210,62,78,223,210,62,55,31,211,62,33,95,211,62,15,159,211,62,255,222,211,62,241,30,212,62,230,94,212,62,221,158,212,62,215,222,212,62,211,30,213,62,209,94,213,62,210,158,213,62,213,222,213,62,219,30,214,62,226,94,214,62,236,158,214,62,248,222,214,62,7,31,215,62,24,95,215,62,42,159,215,62,63,223,215,62,87,31,216,62,112,95,216,62,139,159,216,62,169,223,216,62,200,31,217,62,234,95,217,62,14,160,217,62,51,224,217,62,91,32,218,62,133,96,218,62,176,160,218,62,222,224,218,62,13,33,219,62,63,97,219,62,114,161,219,62,167,225,219,62,222,33,220,62,23,98,220,62,82,162,220,62,142,226,220,62,204,34,221,62,12,99,221,62,78,163,221,62,146,227,221,62,215,35,222,62,29,100,222,62,102,164,222,62,176,228,222,62,252,36,223,62,73,101,223,62,152,165,223,62,232,229,223,62,58,38,224,62,142,102,224,62,227,166,224,62,57,231,224,62,145,39,225,62,234,103,225,62,69,168,225,62,161,232,225,62,255,40,226,62,94,105,226,62,190,169,226,62,32,234,226,62,131,42,227,62,231,106,227,62,76,171,227,62,179,235,227,62,27,44,228,62,132,108,228,62,238,172,228,62,90,237,228,62,199,45,229,62,52,110,229,62,163,174,229,62,19,239,229,62,133,47,230,62,247,111,230,62,106,176,230,62,222,240,230,62,83,49,231,62,202,113,231,62,65,178,231,62,185,242,231,62,50,51,232,62,172,115,232,62,38,180,232,62,162,244,232,62,31,53,233,62,156,117,233,62,26,182,233,62,153,246,233,62,25,55,234,62,153,119,234,62,26,184,234,62,156,248,234,62,31,57,235,62,162,121,235,62,38,186,235,62,170,250,235,62,47,59,236,62,181,123,236,62,59,188,236,62,194,252,236,62,73,61,237,62,209,125,237,62,89,190,237,62,226,254,237,62,107,63,238,62,245,127,238,62,127,192,238,62,10,1,239,62,149,65,239,62,32,130,239,62,171,194,239,62,55,3,240,62,196,67,240,62,80,132,240,62,221,196,240,62,106,5,241,62,247,69,241,62,132,134,241,62,18,199,241,62,160,7,242,62,45,72,242,62,187,136,242,62,74,201,242,62,216,9,243,62,102,74,243,62,244,138,243,62,131,203,243,62,17,12,244,62,159,76,244,62,46,141,244,62,188,205,244,62,74,14,245,62,216,78,245,62,102,143,245,62,244,207,245,62,129,16,246,62,15,81,246,62,156,145,246,62,41,210,246,62,182,18,247,62,67,83,247,62,207,147,247,62,91,212,247,62,231,20,248,62,115,85,248,62,254,149,248,62,136,214,248,62,19,23,249,62,157,87,249,62,38,152,249,62,175,216,249,62,56,25,250,62,192,89,250,62,72,154,250,62,207,218,250,62,86,27,251,62,220,91,251,62,97,156,251,62,230,220,251,62,106,29,252,62,238,93,252,62,113,158,252,62,243,222,252,62,117,31,253,62,245,95,253,62,118,160,253,62,245,224,253,62,116,33,254,62,241,97,254,62,110,162,254,62,235,226,254,62,102,35,255,62,224,99,255,62,90,164,255,62,211,228,255,62,165,18,0,63,225,50,0,63,27,83,0,63,86,115,0,63,144,147,0,63,201,179,0,63,2,212,0,63,58,244,0,63,114,20,1,63,169,52,1,63,224,84,1,63,22,117,1,63,76,149,1,63,129,181,1,63,181,213,1,63,233,245,1,63,28,22,2,63,78,54,2,63,128,86,2,63,178,118,2,63,226,150,2,63,18,183,2,63,65,215,2,63,112,247,2,63,157,23,3,63,203,55,3,63,247,87,3,63,35,120,3,63,78,152,3,63,120,184,3,63,161,216,3,63,202,248,3,63,242,24,4,63,25,57,4,63,63,89,4,63,101,121,4,63,137,153,4,63,173,185,4,63,208,217,4,63,243,249,4,63,20,26,5,63,52,58,5,63,84,90,5,63,115,122,5,63,145,154,5,63,173,186,5,63,202,218,5,63,229,250,5,63,255,26,6,63,24,59,6,63,48,91,6,63,72,123,6,63,94,155,6,63,116,187,6,63,136,219,6,63,155,251,6,63,174,27,7,63,191,59,7,63,208,91,7,63,223,123,7,63,237,155,7,63,250,187,7,63,7,220,7,63,18,252,7,63,28,28,8,63,37,60,8,63,44,92,8,63,51,124,8,63,57,156,8,63,61,188,8,63,64,220,8,63,67,252,8,63,68,28,9,63,68,60,9,63,66,92,9,63,64,124,9,63,60,156,9,63,55,188,9,63,49,220,9,63,41,252,9,63,33,28,10,63,23,60,10,63,12,92,10,63,255,123,10,63,242,155,10,63,227,187,10,63,211,219,10,63,193,251,10,63,174,27,11,63,154,59,11,63,133,91,11,63,110,123,11,63,86,155,11,63,60,187,11,63,33,219,11,63,5,251,11,63,231,26,12,63,200,58,12,63,168,90,12,63,134,122,12,63,98,154,12,63,62,186,12,63,23,218,12,63,240,249,12,63,199,25,13,63,156,57,13,63,112,89,13,63,66,121,13,63,19,153,13,63,227,184,13,63,176,216,13,63,125,248,13,63,72,24,14,63,17,56,14,63,216,87,14,63,159,119,14,63,99,151,14,63,38,183,14,63,232,214,14,63,167,246,14,63,101,22,15,63,34,54,15,63,221,85,15,63,150,117,15,63,78,149,15,63,4,181,15,63,184,212,15,63,106,244,15,63,27,20,16,63,202,51,16,63,120,83,16,63,36,115,16,63,206,146,16,63,118,178,16,63,28,210,16,63,193,241,16,63,100,17,17,63,6,49,17,63,165,80,17,63,67,112,17,63,223,143,17,63,121,175,17,63,17,207,17,63,167,238,17,63,60,14,18,63,206,45,18,63,95,77,18,63,238,108,18,63,123,140,18,63,7,172,18,63,144,203,18,63,23,235,18,63,157,10,19,63,32,42,19,63,162,73,19,63,34,105,19,63,159,136,19,63,27,168,19,63,149,199,19,63,13,231,19,63,131,6,20,63,247,37,20,63,104,69,20,63,216,100,20,63,70,132,20,63,178,163,20,63,27,195,20,63,131,226,20,63,233,1,21,63,76,33,21,63,174,64,21,63,13,96,21,63,106,127,21,63,197,158,21,63,31,190,21,63,117,221,21,63,202,252,21,63,29,28,22,63,109,59,22,63,188,90,22,63,8,122,22,63,82,153,22,63,153,184,22,63,223,215,22,63,34,247,22,63,100,22,23,63,162,53,23,63,223,84,23,63,26,116,23,63,82,147,23,63,136,178,23,63,187,209,23,63,237,240,23,63,28,16,24,63,73,47,24,63,115,78,24,63,155,109,24,63,193,140,24,63,228,171,24,63,6,203,24,63,36,234,24,63,65,9,25,63,91,40,25,63,115,71,25,63,136,102,25,63,155,133,25,63,171,164,25,63,185,195,25,63,197,226,25,63,206,1,26,63,213,32,26,63,217,63,26,63,219,94,26,63,218,125,26,63,215,156,26,63,210,187,26,63,202,218,26,63,191,249,26,63,178,24,27,63,162,55,27,63,144,86,27,63,123,117,27,63,100,148,27,63,74,179,27,63,46,210,27,63,15,241,27,63,237,15,28,63,201,46,28,63,162,77,28,63,121,108,28,63,77,139,28,63,31,170,28,63,237,200,28,63,185,231,28,63,131,6,29,63,74,37,29,63,14,68,29,63,207,98,29,63,142,129,29,63,74,160,29,63,3,191,29,63,186,221,29,63,110,252,29,63,31,27,30,63,205,57,30,63,121,88,30,63,34,119,30,63,200,149,30,63,107,180,30,63,12,211,30,63,170,241,30,63,69,16,31,63,221,46,31,63,114,77,31,63,5,108,31,63,148,138,31,63,33,169,31,63,171,199,31,63,50,230,31,63,182,4,32,63,56,35,32,63,182,65,32,63,50,96,32,63,170,126,32,63,32,157,32,63,147,187,32,63,3,218,32,63,112,248,32,63,218,22,33,63,65,53,33,63,165,83,33,63,6,114,33,63,100,144,33,63,191,174,33,63,23,205,33,63,108,235,33,63,190,9,34,63,13,40,34,63,89,70,34,63,162,100,34,63,232,130,34,63,43,161,34,63,107,191,34,63,167,221,34,63,225,251,34,63,24,26,35,63,75,56,35,63,123,86,35,63,168,116,35,63,211,146,35,63,249,176,35,63,29,207,35,63,62,237,35,63,91,11,36,63,118,41,36,63,141,71,36,63,161,101,36,63,177,131,36,63,191,161,36,63,201,191,36,63,208,221,36,63,212,251,36,63,213,25,37,63,210,55,37,63,204,85,37,63,195,115,37,63,183,145,37,63,167,175,37,63,148,205,37,63,126,235,37,63,101,9,38,63,72,39,38,63,40,69,38,63,4,99,38,63,221,128,38,63,179,158,38,63,134,188,38,63,85,218,38,63,33,248,38,63,233,21,39,63,174,51,39,63,112,81,39,63,46,111,39,63,233,140,39,63,160,170,39,63,84,200,39,63,4,230,39,63,178,3,40,63,91,33,40,63,1,63,40,63,164,92,40,63,67,122,40,63,223,151,40,63,120,181,40,63,12,211,40,63,158,240,40,63,43,14,41,63,182,43,41,63,60,73,41,63,192,102,41,63,63,132,41,63,187,161,41,63,52,191,41,63,169,220,41,63,26,250,41,63,136,23,42,63,242,52,42,63,89,82,42,63,188,111,42,63,28,141,42,63,119,170,42,63,208,199,42,63,36,229,42,63,117,2,43,63,194,31,43,63,12,61,43,63,82,90,43,63,148,119,43,63,211,148,43,63,14,178,43,63,69,207,43,63,120,236,43,63,168,9,44,63,212,38,44,63,252,67,44,63,33,97,44,63,66,126,44,63,95,155,44,63,120,184,44,63,142,213,44,63,159,242,44,63,173,15,45,63,184,44,45,63,190,73,45,63,193,102,45,63,191,131,45,63,186,160,45,63,177,189,45,63,165,218,45,63,148,247,45,63,128,20,46,63,103,49,46,63,75,78,46,63,43,107,46,63,7,136,46,63,224,164,46,63,180,193,46,63,132,222,46,63,81,251,46,63,26,24,47,63,222,52,47,63,159,81,47,63,92,110,47,63,21,139,47,63,202,167,47,63,123,196,47,63,40,225,47,63,209,253,47,63,118,26,48,63,23,55,48,63,180,83,48,63,77,112,48,63,226,140,48,63,115,169,48,63,0,198,48,63,137,226,48,63,14,255,48,63,142,27,49,63,11,56,49,63,132,84,49,63,248,112,49,63,105,141,49,63,214,169,49,63,62,198,49,63,162,226,49,63,2,255,49,63,95,27,50,63,182,55,50,63,10,84,50,63,90,112,50,63,166,140,50,63,237,168,50,63,48,197,50,63,111,225,50,63,170,253,50,63,225,25,51,63,19,54,51,63,66,82,51,63,108,110,51,63,146,138,51,63,180,166,51,63,209,194,51,63,234,222,51,63,0,251,51,63,16,23,52,63,29,51,52,63,37,79,52,63,41,107,52,63,41,135,52,63,37,163,52,63,28,191,52,63,15,219,52,63,253,246,52,63,232,18,53,63,206,46,53,63,176,74,53,63,141,102,53,63,102,130,53,63,59,158,53,63,11,186,53,63,215,213,53,63,159,241,53,63,98,13,54,63,33,41,54,63,220,68,54,63,146,96,54,63,68,124,54,63,241,151,54,63,154,179,54,63,63,207,54,63,223,234,54,63,123,6,55,63,18,34,55,63,165,61,55,63,52,89,55,63,190,116,55,63,67,144,55,63,196,171,55,63,65,199,55,63,185,226,55,63,45,254,55,63,156,25,56,63,7,53,56,63,109,80,56,63,207,107,56,63,44,135,56,63,133,162,56,63,217,189,56,63,40,217,56,63,115,244,56,63,186,15,57,63,252,42,57,63,57,70,57,63,114,97,57,63,166,124,57,63,214,151,57,63,1,179,57,63,40,206,57,63,74,233,57,63,103,4,58,63,128,31,58,63,148,58,58,63,163,85,58,63,174,112,58,63,180,139,58,63,182,166,58,63,179,193,58,63,171,220,58,63,159,247,58,63,142,18,59,63,120,45,59,63,94,72,59,63,63,99,59,63,27,126,59,63,243,152,59,63,197,179,59,63,148,206,59,63,93,233,59,63,34,4,60,63,226,30,60,63,157,57,60,63,84,84,60,63,5,111,60,63,178,137,60,63,91,164,60,63,254,190,60,63,157,217,60,63,55,244,60,63,204,14,61,63,93,41,61,63,232,67,61,63,111,94,61,63,241,120,61,63,110,147,61,63,231,173,61,63,91,200,61,63,201,226,61,63,51,253,61,63,152,23,62,63,249,49,62,63,84,76,62,63,171,102,62,63,252,128,62,63,73,155,62,63,145,181,62,63,212,207,62,63,19,234,62,63,76,4,63,63,128,30,63,63,176,56,63,63,219,82,63,63,0,109,63,63,33,135,63,63,61,161,63,63,84,187,63,63,102,213,63,63,115,239,63,63,123,9,64,63,127,35,64,63,125,61,64,63,118,87,64,63,106,113,64,63,90,139,64,63,68,165,64,63,42,191,64,63,10,217,64,63,229,242,64,63,188,12,65,63,141,38,65,63,90,64,65,63,33,90,65,63,228,115,65,63,161,141,65,63,89,167,65,63,13,193,65,63,187,218,65,63,100,244,65,63,8,14,66,63,167,39,66,63,65,65,66,63,214,90,66,63,102,116,66,63,241,141,66,63,119,167,66,63,248,192,66,63,115,218,66,63,234,243,66,63,91,13,67,63,199,38,67,63,47,64,67,63,145,89,67,63,238,114,67,63,69,140,67,63,152,165,67,63,230,190,67,63,46,216,67,63,113,241,67,63,175,10,68,63,232,35,68,63,28,61,68,63,75,86,68,63,116,111,68,63,153,136,68,63,184,161,68,63,210,186,68,63,230,211,68,63,246,236,68,63,0,6,69,63,5,31,69,63,5,56,69,63,0,81,69,63,245,105,69,63,230,130,69,63,209,155,69,63,182,180,69,63,151,205,69,63,114,230,69,63,72,255,69,63,25,24,70,63,229,48,70,63,171,73,70,63,108,98,70,63,40,123,70,63,222,147,70,63,143,172,70,63,59,197,70,63,226,221,70,63,131,246,70,63,31,15,71,63,182,39,71,63,71,64,71,63,211,88,71,63,90,113,71,63,220,137,71,63,88,162,71,63,207,186,71,63,64,211,71,63,172,235,71,63,19,4,72,63,116,28,72,63,209,52,72,63,39,77,72,63,121,101,72,63,197,125,72,63,11,150,72,63,77,174,72,63,137,198,72,63,191,222,72,63,240,246,72,63,28,15,73,63,66,39,73,63,99,63,73,63,127,87,73,63,149,111,73,63,166,135,73,63,177,159,73,63,183,183,73,63,183,207,73,63,178,231,73,63,168,255,73,63,152,23,74,63,131,47,74,63,104,71,74,63,72,95,74,63,34,119,74,63,247,142,74,63,199,166,74,63,145,190,74,63,85,214,74,63,20,238,74,63,206,5,75,63,130,29,75,63,49,53,75,63,218,76,75,63,126,100,75,63,28,124,75,63,181,147,75,63,72,171,75,63,213,194,75,63,93,218,75,63,224,241,75,63,93,9,76,63,213,32,76,63,71,56,76,63,179,79,76,63,26,103,76,63,124,126,76,63,216,149,76,63,46,173,76,63,127,196,76,63,202,219,76,63,16,243,76,63,80,10,77,63,139,33,77,63,192,56,77,63,240,79,77,63,26,103,77,63,62,126,77,63,93,149,77,63,118,172,77,63,137,195,77,63,151,218,77,63,160,241,77,63,163,8,78,63,160,31,78,63,151,54,78,63,137,77,78,63,118,100,78,63,93,123,78,63,62,146,78,63,25,169,78,63,239,191,78,63,192,214,78,63,138,237,78,63,79,4,79,63,15,27,79,63,201,49,79,63,125,72,79,63,43,95,79,63,212,117,79,63,119,140,79,63,21,163,79,63,172,185,79,63,63,208,79,63,203,230,79,63,82,253,79,63,211,19,80,63,79,42,80,63,197,64,80,63,53,87,80,63,159,109,80,63,4,132,80,63,99,154,80,63,189,176,80,63,16,199,80,63,94,221,80,63,167,243,80,63,233,9,81,63,38,32,81,63,93,54,81,63,143,76,81,63,187,98,81,63,225,120,81,63,1,143,81,63,28,165,81,63,48,187,81,63,64,209,81,63,73,231,81,63,77,253,81,63,75,19,82,63,67,41,82,63,53,63,82,63,34,85,82,63,9,107,82,63,234,128,82,63,198,150,82,63,155,172,82,63,107,194,82,63,53,216,82,63,250,237,82,63,185,3,83,63,113,25,83,63,37,47,83,63,210,68,83,63,121,90,83,63,27,112,83,63,183,133,83,63,77,155,83,63,222,176,83,63,104,198,83,63,237,219,83,63,108,241,83,63,230,6,84,63,89,28,84,63,199,49,84,63,46,71,84,63,145,92,84,63,237,113,84,63,67,135,84,63,148,156,84,63,223,177,84,63,35,199,84,63,99,220,84,63,156,241,84,63,207,6,85,63,253,27,85,63,37,49,85,63,71,70,85,63,99,91,85,63,121,112,85,63,138,133,85,63,149,154,85,63,153,175,85,63,152,196,85,63,146,217,85,63,133,238,85,63,114,3,86,63,90,24,86,63,60,45,86,63,24,66,86,63,238,86,86,63,190,107,86,63,136,128,86,63,76,149,86,63,11,170,86,63,196,190,86,63,118,211,86,63,35,232,86,63,203,252,86,63,108,17,87,63,7,38,87,63,156,58,87,63,44,79,87,63,182,99,87,63,58,120,87,63,183,140,87,63,47,161,87,63,162,181,87,63,14,202,87,63,116,222,87,63,213,242,87,63,47,7,88,63,132,27,88,63,211,47,88,63,28,68,88,63,95,88,88,63,156,108,88,63,211,128,88,63,4,149,88,63,47,169,88,63,85,189,88,63,116,209,88,63,142,229,88,63,162,249,88,63,175,13,89,63,183,33,89,63,185,53,89,63,181,73,89,63,171,93,89,63,155,113,89,63,134,133,89,63,106,153,89,63,72,173,89,63,33,193,89,63,243,212,89,63,192,232,89,63,135,252,89,63,71,16,90,63,2,36,90,63,183,55,90,63,102,75,90,63,15,95,90,63,178,114,90,63,79,134,90,63,230,153,90,63,119,173,90,63,3,193,90,63,136,212,90,63,7,232,90,63,129,251,90,63,244,14,91,63,98,34,91,63,201,53,91,63,43,73,91,63,135,92,91,63,220,111,91,63,44,131,91,63,118,150,91,63,186,169,91,63,248,188,91,63,47,208,91,63,97,227,91,63,141,246,91,63,179,9,92,63,212,28,92,63,238,47,92,63,2,67,92,63,16,86,92,63,24,105,92,63,26,124,92,63,23,143,92,63,13,162,92,63,253,180,92,63,232,199,92,63,204,218,92,63,171,237,92,63,131,0,93,63,86,19,93,63,34,38,93,63,233,56,93,63,169,75,93,63,100,94,93,63,24,113,93,63,199,131,93,63,112,150,93,63,18,169,93,63,175,187,93,63,70,206,93,63,215,224,93,63,97,243,93,63,230,5,94,63,101,24,94,63,222,42,94,63,81,61,94,63,190,79,94,63,36,98,94,63,133,116,94,63,224,134,94,63,53,153,94,63,132,171,94,63,205,189,94,63,16,208,94,63,77,226,94,63,132,244,94,63,181,6,95,63,224,24,95,63,5,43,95,63,36,61,95,63,61,79,95,63,80,97,95,63,93,115,95,63,101,133,95,63,102,151,95,63,97,169,95,63,86,187,95,63,69,205,95,63,46,223,95,63,18,241,95,63,239,2,96,63,198,20,96,63,151,38,96,63,98,56,96,63,40,74,96,63,231,91,96,63,160,109,96,63,84,127,96,63,1,145,96,63,168,162,96,63,73,180,96,63,229,197,96,63,122,215,96,63,10,233,96,63,147,250,96,63,22,12,97,63,148,29,97,63,11,47,97,63,125,64,97,63,232,81,97,63,77,99,97,63,173,116,97,63,6,134,97,63,90,151,97,63,167,168,97,63,239,185,97,63,48,203,97,63,108,220,97,63,162,237,97,63,209,254,97,63,251,15,98,63,30,33,98,63,60,50,98,63,84,67,98,63,101,84,98,63,113,101,98,63,119,118,98,63,119,135,98,63,112,152,98,63,100,169,98,63,82,186,98,63,58,203,98,63,28,220,98,63,247,236,98,63,205,253,98,63,157,14,99,63,103,31,99,63,43,48,99,63,233,64,99,63,161,81,99,63,83,98,99,63,255,114,99,63,165,131,99,63,69,148,99,63,224,164,99,63,116,181,99,63,2,198,99,63,138,214,99,63,13,231,99,63,137,247,99,63,255,7,100,63,112,24,100,63,218,40,100,63,62,57,100,63,157,73,100,63,246,89,100,63,72,106,100,63,149,122,100,63,219,138,100,63,28,155,100,63,87,171,100,63,140,187,100,63,186,203,100,63,227,219,100,63,6,236,100,63,35,252,100,63,58,12,101,63,75,28,101,63,86,44,101,63,91,60,101,63,91,76,101,63,84,92,101,63,71,108,101,63,53,124,101,63,28,140,101,63,254,155,101,63,217,171,101,63,175,187,101,63,126,203,101,63,72,219,101,63,12,235,101,63,202,250,101,63,130,10,102,63,52,26,102,63,224,41,102,63,134,57,102,63,38,73,102,63,193,88,102,63,85,104,102,63,227,119,102,63,108,135,102,63,238,150,102,63,107,166,102,63,226,181,102,63,83,197,102,63,190,212,102,63,35,228,102,63,130,243,102,63,219,2,103,63,46,18,103,63,124,33,103,63,195,48,103,63,5,64,103,63,64,79,103,63,118,94,103,63,166,109,103,63,208,124,103,63,244,139,103,63,18,155,103,63,42,170,103,63,61,185,103,63,73,200,103,63,80,215,103,63,80,230,103,63,75,245,103,63,64,4,104,63,47,19,104,63,24,34,104,63,251,48,104,63,217,63,104,63,176,78,104,63,130,93,104,63,78,108,104,63,20,123,104,63,212,137,104,63,142,152,104,63,66,167,104,63,240,181,104,63,153,196,104,63,60,211,104,63,217,225,104,63,112,240,104,63,1,255,104,63,140,13,105,63,17,28,105,63,145,42,105,63,11,57,105,63,127,71,105,63,237,85,105,63,85,100,105,63,183,114,105,63,20,129,105,63,106,143,105,63,187,157,105,63,6,172,105,63,75,186,105,63,139,200,105,63,196,214,105,63,248,228,105,63,38,243,105,63,78,1,106,63,112,15,106,63,141,29,106,63,163,43,106,63,180,57,106,63,191,71,106,63,196,85,106,63,196,99,106,63,189,113,106,63,177,127,106,63], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);
/* memory initializer */ allocate([159,141,106,63,135,155,106,63,106,169,106,63,70,183,106,63,29,197,106,63,238,210,106,63,186,224,106,63,127,238,106,63,63,252,106,63,249,9,107,63,173,23,107,63,91,37,107,63,4,51,107,63,167,64,107,63,68,78,107,63,219,91,107,63,109,105,107,63,249,118,107,63,127,132,107,63,255,145,107,63,122,159,107,63,238,172,107,63,94,186,107,63,199,199,107,63,42,213,107,63,136,226,107,63,224,239,107,63,51,253,107,63,128,10,108,63,198,23,108,63,8,37,108,63,67,50,108,63,121,63,108,63,169,76,108,63,211,89,108,63,248,102,108,63,23,116,108,63,48,129,108,63,68,142,108,63,82,155,108,63,90,168,108,63,92,181,108,63,89,194,108,63,80,207,108,63,65,220,108,63,45,233,108,63,19,246,108,63,243,2,109,63,206,15,109,63,163,28,109,63,114,41,109,63,60,54,109,63,0,67,109,63,190,79,109,63,119,92,109,63,42,105,109,63,215,117,109,63,127,130,109,63,33,143,109,63,189,155,109,63,84,168,109,63,229,180,109,63,113,193,109,63,247,205,109,63,119,218,109,63,242,230,109,63,103,243,109,63,214,255,109,63,64,12,110,63,164,24,110,63,3,37,110,63,91,49,110,63,175,61,110,63,253,73,110,63,69,86,110,63,135,98,110,63,196,110,110,63,252,122,110,63,45,135,110,63,90,147,110,63,128,159,110,63,161,171,110,63,189,183,110,63,211,195,110,63,227,207,110,63,238,219,110,63,243,231,110,63,243,243,110,63,237,255,110,63,226,11,111,63,209,23,111,63,186,35,111,63,158,47,111,63,125,59,111,63,85,71,111,63,41,83,111,63,247,94,111,63,191,106,111,63,130,118,111,63,63,130,111,63,247,141,111,63,169,153,111,63,86,165,111,63,253,176,111,63,159,188,111,63,59,200,111,63,210,211,111,63,99,223,111,63,239,234,111,63,117,246,111,63,246,1,112,63,114,13,112,63,231,24,112,63,88,36,112,63,195,47,112,63,40,59,112,63,137,70,112,63,227,81,112,63,56,93,112,63,136,104,112,63,210,115,112,63,23,127,112,63,87,138,112,63,145,149,112,63,197,160,112,63,244,171,112,63,30,183,112,63,66,194,112,63,97,205,112,63,123,216,112,63,143,227,112,63,157,238,112,63,167,249,112,63,171,4,113,63,169,15,113,63,162,26,113,63,150,37,113,63,132,48,113,63,109,59,113,63,81,70,113,63,47,81,113,63,8,92,113,63,219,102,113,63,170,113,113,63,114,124,113,63,54,135,113,63,244,145,113,63,173,156,113,63,96,167,113,63,14,178,113,63,183,188,113,63,91,199,113,63,249,209,113,63,146,220,113,63,37,231,113,63,179,241,113,63,60,252,113,63,192,6,114,63,62,17,114,63,183,27,114,63,43,38,114,63,154,48,114,63,3,59,114,63,103,69,114,63,197,79,114,63,31,90,114,63,115,100,114,63,194,110,114,63,11,121,114,63,79,131,114,63,143,141,114,63,200,151,114,63,253,161,114,63,44,172,114,63,87,182,114,63,123,192,114,63,155,202,114,63,182,212,114,63,203,222,114,63,219,232,114,63,230,242,114,63,235,252,114,63,236,6,115,63,231,16,115,63,221,26,115,63,206,36,115,63,186,46,115,63,160,56,115,63,130,66,115,63,94,76,115,63,53,86,115,63,7,96,115,63,212,105,115,63,155,115,115,63,94,125,115,63,27,135,115,63,211,144,115,63,134,154,115,63,52,164,115,63,221,173,115,63,128,183,115,63,31,193,115,63,184,202,115,63,77,212,115,63,220,221,115,63,102,231,115,63,235,240,115,63,107,250,115,63,230,3,116,63,92,13,116,63,204,22,116,63,56,32,116,63,159,41,116,63,0,51,116,63,93,60,116,63,180,69,116,63,6,79,116,63,84,88,116,63,156,97,116,63,223,106,116,63,29,116,116,63,87,125,116,63,139,134,116,63,186,143,116,63,228,152,116,63,9,162,116,63,41,171,116,63,68,180,116,63,91,189,116,63,108,198,116,63,120,207,116,63,127,216,116,63,129,225,116,63,127,234,116,63,119,243,116,63,106,252,116,63,89,5,117,63,66,14,117,63,38,23,117,63,6,32,117,63,225,40,117,63,182,49,117,63,135,58,117,63,83,67,117,63,26,76,117,63,220,84,117,63,153,93,117,63,81,102,117,63,4,111,117,63,179,119,117,63,92,128,117,63,1,137,117,63,160,145,117,63,59,154,117,63,209,162,117,63,98,171,117,63,239,179,117,63,118,188,117,63,249,196,117,63,118,205,117,63,239,213,117,63,99,222,117,63,210,230,117,63,61,239,117,63,162,247,117,63,3,0,118,63,95,8,118,63,182,16,118,63,8,25,118,63,86,33,118,63,159,41,118,63,227,49,118,63,34,58,118,63,92,66,118,63,146,74,118,63,195,82,118,63,239,90,118,63,22,99,118,63,57,107,118,63,86,115,118,63,112,123,118,63,132,131,118,63,148,139,118,63,158,147,118,63,165,155,118,63,166,163,118,63,163,171,118,63,155,179,118,63,142,187,118,63,125,195,118,63,103,203,118,63,76,211,118,63,45,219,118,63,9,227,118,63,224,234,118,63,178,242,118,63,128,250,118,63,74,2,119,63,14,10,119,63,206,17,119,63,137,25,119,63,64,33,119,63,242,40,119,63,160,48,119,63,72,56,119,63,237,63,119,63,140,71,119,63,39,79,119,63,190,86,119,63,79,94,119,63,220,101,119,63,101,109,119,63,233,116,119,63,105,124,119,63,228,131,119,63,90,139,119,63,204,146,119,63,57,154,119,63,162,161,119,63,6,169,119,63,101,176,119,63,192,183,119,63,23,191,119,63,105,198,119,63,182,205,119,63,255,212,119,63,68,220,119,63,132,227,119,63,191,234,119,63,246,241,119,63,41,249,119,63,87,0,120,63,129,7,120,63,166,14,120,63,198,21,120,63,227,28,120,63,250,35,120,63,14,43,120,63,28,50,120,63,39,57,120,63,45,64,120,63,46,71,120,63,44,78,120,63,36,85,120,63,25,92,120,63,9,99,120,63,244,105,120,63,219,112,120,63,190,119,120,63,156,126,120,63,118,133,120,63,76,140,120,63,29,147,120,63,234,153,120,63,179,160,120,63,119,167,120,63,55,174,120,63,242,180,120,63,169,187,120,63,92,194,120,63,11,201,120,63,181,207,120,63,91,214,120,63,252,220,120,63,154,227,120,63,51,234,120,63,199,240,120,63,88,247,120,63,228,253,120,63,108,4,121,63,240,10,121,63,111,17,121,63,234,23,121,63,97,30,121,63,211,36,121,63,66,43,121,63,172,49,121,63,18,56,121,63,116,62,121,63,209,68,121,63,42,75,121,63,127,81,121,63,208,87,121,63,29,94,121,63,101,100,121,63,170,106,121,63,234,112,121,63,38,119,121,63,93,125,121,63,145,131,121,63,193,137,121,63,236,143,121,63,19,150,121,63,54,156,121,63,85,162,121,63,112,168,121,63,134,174,121,63,153,180,121,63,167,186,121,63,178,192,121,63,184,198,121,63,186,204,121,63,184,210,121,63,178,216,121,63,168,222,121,63,154,228,121,63,135,234,121,63,113,240,121,63,87,246,121,63,56,252,121,63,22,2,122,63,239,7,122,63,197,13,122,63,150,19,122,63,100,25,122,63,45,31,122,63,243,36,122,63,180,42,122,63,113,48,122,63,43,54,122,63,224,59,122,63,146,65,122,63,63,71,122,63,233,76,122,63,142,82,122,63,48,88,122,63,206,93,122,63,103,99,122,63,253,104,122,63,143,110,122,63,29,116,122,63,167,121,122,63,45,127,122,63,175,132,122,63,45,138,122,63,168,143,122,63,30,149,122,63,145,154,122,63,255,159,122,63,106,165,122,63,209,170,122,63,52,176,122,63,147,181,122,63,239,186,122,63,70,192,122,63,154,197,122,63,234,202,122,63,54,208,122,63,126,213,122,63,194,218,122,63,3,224,122,63,64,229,122,63,121,234,122,63,174,239,122,63,223,244,122,63,13,250,122,63,55,255,122,63,93,4,123,63,127,9,123,63,157,14,123,63,184,19,123,63,207,24,123,63,227,29,123,63,242,34,123,63,254,39,123,63,6,45,123,63,10,50,123,63,11,55,123,63,8,60,123,63,1,65,123,63,247,69,123,63,233,74,123,63,215,79,123,63,193,84,123,63,168,89,123,63,139,94,123,63,107,99,123,63,71,104,123,63,31,109,123,63,243,113,123,63,196,118,123,63,146,123,123,63,91,128,123,63,33,133,123,63,228,137,123,63,163,142,123,63,94,147,123,63,22,152,123,63,202,156,123,63,122,161,123,63,39,166,123,63,208,170,123,63,118,175,123,63,24,180,123,63,183,184,123,63,82,189,123,63,233,193,123,63,125,198,123,63,14,203,123,63,155,207,123,63,36,212,123,63,170,216,123,63,45,221,123,63,172,225,123,63,39,230,123,63,159,234,123,63,19,239,123,63,132,243,123,63,242,247,123,63,92,252,123,63,195,0,124,63,38,5,124,63,133,9,124,63,226,13,124,63,58,18,124,63,144,22,124,63,226,26,124,63,48,31,124,63,123,35,124,63,195,39,124,63,7,44,124,63,72,48,124,63,134,52,124,63,192,56,124,63,247,60,124,63,42,65,124,63,90,69,124,63,135,73,124,63,176,77,124,63,214,81,124,63,249,85,124,63,24,90,124,63,52,94,124,63,77,98,124,63,98,102,124,63,116,106,124,63,131,110,124,63,142,114,124,63,150,118,124,63,155,122,124,63,157,126,124,63,155,130,124,63,150,134,124,63,142,138,124,63,130,142,124,63,116,146,124,63,98,150,124,63,77,154,124,63,52,158,124,63,24,162,124,63,249,165,124,63,215,169,124,63,178,173,124,63,137,177,124,63,94,181,124,63,47,185,124,63,253,188,124,63,199,192,124,63,143,196,124,63,83,200,124,63,20,204,124,63,211,207,124,63,141,211,124,63,69,215,124,63,250,218,124,63,171,222,124,63,90,226,124,63,5,230,124,63,173,233,124,63,82,237,124,63,244,240,124,63,147,244,124,63,46,248,124,63,199,251,124,63,93,255,124,63,239,2,125,63,127,6,125,63,11,10,125,63,148,13,125,63,27,17,125,63,158,20,125,63,30,24,125,63,155,27,125,63,21,31,125,63,140,34,125,63,0,38,125,63,114,41,125,63,224,44,125,63,75,48,125,63,179,51,125,63,24,55,125,63,122,58,125,63,217,61,125,63,54,65,125,63,143,68,125,63,229,71,125,63,56,75,125,63,137,78,125,63,214,81,125,63,33,85,125,63,104,88,125,63,173,91,125,63,239,94,125,63,46,98,125,63,106,101,125,63,163,104,125,63,217,107,125,63,12,111,125,63,61,114,125,63,106,117,125,63,149,120,125,63,189,123,125,63,226,126,125,63,4,130,125,63,36,133,125,63,64,136,125,63,90,139,125,63,112,142,125,63,133,145,125,63,150,148,125,63,164,151,125,63,176,154,125,63,185,157,125,63,191,160,125,63,194,163,125,63,194,166,125,63,192,169,125,63,187,172,125,63,179,175,125,63,168,178,125,63,155,181,125,63,139,184,125,63,120,187,125,63,99,190,125,63,74,193,125,63,48,196,125,63,18,199,125,63,241,201,125,63,206,204,125,63,169,207,125,63,128,210,125,63,85,213,125,63,39,216,125,63,247,218,125,63,196,221,125,63,142,224,125,63,85,227,125,63,26,230,125,63,220,232,125,63,156,235,125,63,89,238,125,63,19,241,125,63,203,243,125,63,128,246,125,63,51,249,125,63,227,251,125,63,144,254,125,63,59,1,126,63,227,3,126,63,137,6,126,63,44,9,126,63,204,11,126,63,106,14,126,63,6,17,126,63,158,19,126,63,53,22,126,63,200,24,126,63,90,27,126,63,232,29,126,63,116,32,126,63,254,34,126,63,133,37,126,63,10,40,126,63,140,42,126,63,12,45,126,63,137,47,126,63,4,50,126,63,124,52,126,63,242,54,126,63,101,57,126,63,214,59,126,63,68,62,126,63,176,64,126,63,26,67,126,63,129,69,126,63,230,71,126,63,72,74,126,63,168,76,126,63,5,79,126,63,96,81,126,63,185,83,126,63,15,86,126,63,99,88,126,63,181,90,126,63,4,93,126,63,81,95,126,63,155,97,126,63,227,99,126,63,41,102,126,63,108,104,126,63,173,106,126,63,236,108,126,63,40,111,126,63,98,113,126,63,154,115,126,63,208,117,126,63,3,120,126,63,51,122,126,63,98,124,126,63,142,126,126,63,184,128,126,63,224,130,126,63,5,133,126,63,40,135,126,63,73,137,126,63,104,139,126,63,132,141,126,63,159,143,126,63,183,145,126,63,204,147,126,63,224,149,126,63,241,151,126,63,0,154,126,63,13,156,126,63,24,158,126,63,32,160,126,63,38,162,126,63,42,164,126,63,44,166,126,63,44,168,126,63,41,170,126,63,37,172,126,63,30,174,126,63,21,176,126,63,10,178,126,63,253,179,126,63,238,181,126,63,220,183,126,63,201,185,126,63,179,187,126,63,155,189,126,63,129,191,126,63,101,193,126,63,71,195,126,63,39,197,126,63,5,199,126,63,224,200,126,63,186,202,126,63,145,204,126,63,103,206,126,63,58,208,126,63,12,210,126,63,219,211,126,63,168,213,126,63,115,215,126,63,61,217,126,63,4,219,126,63,201,220,126,63,140,222,126,63,77,224,126,63,12,226,126,63,202,227,126,63,133,229,126,63,62,231,126,63,245,232,126,63,170,234,126,63,94,236,126,63,15,238,126,63,190,239,126,63,108,241,126,63,23,243,126,63,193,244,126,63,104,246,126,63,14,248,126,63,178,249,126,63,84,251,126,63,243,252,126,63,145,254,126,63,46,0,127,63,200,1,127,63,96,3,127,63,247,4,127,63,139,6,127,63,30,8,127,63,175,9,127,63,62,11,127,63,203,12,127,63,86,14,127,63,223,15,127,63,103,17,127,63,237,18,127,63,112,20,127,63,242,21,127,63,115,23,127,63,241,24,127,63,110,26,127,63,233,27,127,63,98,29,127,63,217,30,127,63,78,32,127,63,194,33,127,63,52,35,127,63,164,36,127,63,18,38,127,63,127,39,127,63,234,40,127,63,83,42,127,63,186,43,127,63,32,45,127,63,131,46,127,63,230,47,127,63,70,49,127,63,165,50,127,63,2,52,127,63,93,53,127,63,182,54,127,63,14,56,127,63,100,57,127,63,185,58,127,63,12,60,127,63,93,61,127,63,172,62,127,63,250,63,127,63,70,65,127,63,145,66,127,63,217,67,127,63,33,69,127,63,102,70,127,63,170,71,127,63,236,72,127,63,45,74,127,63,108,75,127,63,169,76,127,63,229,77,127,63,31,79,127,63,88,80,127,63,143,81,127,63,196,82,127,63,248,83,127,63,42,85,127,63,91,86,127,63,138,87,127,63,184,88,127,63,228,89,127,63,14,91,127,63,55,92,127,63,94,93,127,63,132,94,127,63,169,95,127,63,203,96,127,63,237,97,127,63,12,99,127,63,42,100,127,63,71,101,127,63,98,102,127,63,124,103,127,63,148,104,127,63,171,105,127,63,192,106,127,63,212,107,127,63,230,108,127,63,247,109,127,63,6,111,127,63,20,112,127,63,33,113,127,63,44,114,127,63,53,115,127,63,61,116,127,63,68,117,127,63,73,118,127,63,77,119,127,63,79,120,127,63,80,121,127,63,80,122,127,63,78,123,127,63,75,124,127,63,70,125,127,63,64,126,127,63,57,127,127,63,48,128,127,63,38,129,127,63,27,130,127,63,14,131,127,63,0,132,127,63,240,132,127,63,223,133,127,63,205,134,127,63,185,135,127,63,164,136,127,63,142,137,127,63,118,138,127,63,93,139,127,63,67,140,127,63,40,141,127,63,11,142,127,63,237,142,127,63,205,143,127,63,173,144,127,63,139,145,127,63,103,146,127,63,67,147,127,63,29,148,127,63,246,148,127,63,205,149,127,63,164,150,127,63,121,151,127,63,77,152,127,63,31,153,127,63,241,153,127,63,193,154,127,63,144,155,127,63,93,156,127,63,42,157,127,63,245,157,127,63,191,158,127,63,136,159,127,63,79,160,127,63,22,161,127,63,219,161,127,63,159,162,127,63,98,163,127,63,36,164,127,63,228,164,127,63,163,165,127,63,98,166,127,63,31,167,127,63,219,167,127,63,149,168,127,63,79,169,127,63,7,170,127,63,190,170,127,63,117,171,127,63,42,172,127,63,221,172,127,63,144,173,127,63,66,174,127,63,242,174,127,63,162,175,127,63,80,176,127,63,253,176,127,63,169,177,127,63,85,178,127,63,254,178,127,63,167,179,127,63,79,180,127,63,246,180,127,63,156,181,127,63,64,182,127,63,228,182,127,63,134,183,127,63,40,184,127,63,200,184,127,63,103,185,127,63,6,186,127,63,163,186,127,63,63,187,127,63,219,187,127,63,117,188,127,63,14,189,127,63,166,189,127,63,61,190,127,63,212,190,127,63,105,191,127,63,253,191,127,63,144,192,127,63,34,193,127,63,180,193,127,63,68,194,127,63,211,194,127,63,98,195,127,63,239,195,127,63,123,196,127,63,7,197,127,63,145,197,127,63,27,198,127,63,163,198,127,63,43,199,127,63,178,199,127,63,56,200,127,63,189,200,127,63,65,201,127,63,196,201,127,63,70,202,127,63,199,202,127,63,71,203,127,63,199,203,127,63,69,204,127,63,195,204,127,63,64,205,127,63,187,205,127,63,54,206,127,63,177,206,127,63,42,207,127,63,162,207,127,63,26,208,127,63,144,208,127,63,6,209,127,63,123,209,127,63,239,209,127,63,98,210,127,63,213,210,127,63,70,211,127,63,183,211,127,63,39,212,127,63,150,212,127,63,4,213,127,63,114,213,127,63,222,213,127,63,74,214,127,63,181,214,127,63,32,215,127,63,137,215,127,63,242,215,127,63,89,216,127,63,192,216,127,63,39,217,127,63,140,217,127,63,241,217,127,63,85,218,127,63,184,218,127,63,27,219,127,63,124,219,127,63,221,219,127,63,61,220,127,63,157,220,127,63,251,220,127,63,89,221,127,63,183,221,127,63,19,222,127,63,111,222,127,63,202,222,127,63,36,223,127,63,126,223,127,63,215,223,127,63,47,224,127,63,134,224,127,63,221,224,127,63,51,225,127,63,137,225,127,63,221,225,127,63,49,226,127,63,133,226,127,63,215,226,127,63,41,227,127,63,122,227,127,63,203,227,127,63,27,228,127,63,106,228,127,63,185,228,127,63,7,229,127,63,84,229,127,63,161,229,127,63,237,229,127,63,56,230,127,63,131,230,127,63,205,230,127,63,23,231,127,63,96,231,127,63,168,231,127,63,239,231,127,63,54,232,127,63,125,232,127,63,195,232,127,63,8,233,127,63,76,233,127,63,144,233,127,63,212,233,127,63,23,234,127,63,89,234,127,63,154,234,127,63,219,234,127,63,28,235,127,63,92,235,127,63,155,235,127,63,218,235,127,63,24,236,127,63,86,236,127,63,147,236,127,63,207,236,127,63,11,237,127,63,71,237,127,63,130,237,127,63,188,237,127,63,246,237,127,63,47,238,127,63,104,238,127,63,160,238,127,63,216,238,127,63,15,239,127,63,69,239,127,63,123,239,127,63,177,239,127,63,230,239,127,63,27,240,127,63,79,240,127,63,130,240,127,63,182,240,127,63,232,240,127,63,26,241,127,63,76,241,127,63,125,241,127,63,174,241,127,63,222,241,127,63,14,242,127,63,61,242,127,63,108,242,127,63,154,242,127,63,200,242,127,63,245,242,127,63,34,243,127,63,79,243,127,63,123,243,127,63,166,243,127,63,209,243,127,63,252,243,127,63,38,244,127,63,80,244,127,63,121,244,127,63,162,244,127,63,203,244,127,63,243,244,127,63,27,245,127,63,66,245,127,63,105,245,127,63,143,245,127,63,181,245,127,63,219,245,127,63,0,246,127,63,37,246,127,63,73,246,127,63,109,246,127,63,145,246,127,63,180,246,127,63,215,246,127,63,250,246,127,63,28,247,127,63,62,247,127,63,95,247,127,63,128,247,127,63,160,247,127,63,193,247,127,63,225,247,127,63,0,248,127,63,31,248,127,63,62,248,127,63,93,248,127,63,123,248,127,63,152,248,127,63,182,248,127,63,211,248,127,63,240,248,127,63,12,249,127,63,40,249,127,63,68,249,127,63,95,249,127,63,122,249,127,63,149,249,127,63,175,249,127,63,202,249,127,63,227,249,127,63,253,249,127,63,22,250,127,63,47,250,127,63,71,250,127,63,96,250,127,63,120,250,127,63,143,250,127,63,166,250,127,63,190,250,127,63,212,250,127,63,235,250,127,63,1,251,127,63,23,251,127,63,44,251,127,63,66,251,127,63,87,251,127,63,108,251,127,63,128,251,127,63,148,251,127,63,168,251,127,63,188,251,127,63,208,251,127,63,227,251,127,63,246,251,127,63,8,252,127,63,27,252,127,63,45,252,127,63,63,252,127,63,81,252,127,63,98,252,127,63,115,252,127,63,132,252,127,63,149,252,127,63,165,252,127,63,182,252,127,63,198,252,127,63,213,252,127,63,229,252,127,63,244,252,127,63,3,253,127,63,18,253,127,63,33,253,127,63,47,253,127,63,62,253,127,63,76,253,127,63,89,253,127,63,103,253,127,63,116,253,127,63,130,253,127,63,143,253,127,63,155,253,127,63,168,253,127,63,181,253,127,63,193,253,127,63,205,253,127,63,217,253,127,63,228,253,127,63,240,253,127,63,251,253,127,63,6,254,127,63,17,254,127,63,28,254,127,63,38,254,127,63,49,254,127,63,59,254,127,63,69,254,127,63,79,254,127,63,89,254,127,63,98,254,127,63,108,254,127,63,117,254,127,63,126,254,127,63,135,254,127,63,144,254,127,63,152,254,127,63,161,254,127,63,169,254,127,63,177,254,127,63,185,254,127,63,193,254,127,63,201,254,127,63,208,254,127,63,216,254,127,63,223,254,127,63,230,254,127,63,237,254,127,63,244,254,127,63,251,254,127,63,2,255,127,63,8,255,127,63,14,255,127,63,21,255,127,63,27,255,127,63,33,255,127,63,39,255,127,63,45,255,127,63,50,255,127,63,56,255,127,63,61,255,127,63,67,255,127,63,72,255,127,63,77,255,127,63,82,255,127,63,87,255,127,63,92,255,127,63,96,255,127,63,101,255,127,63,105,255,127,63,110,255,127,63,114,255,127,63,118,255,127,63,122,255,127,63,126,255,127,63,130,255,127,63,134,255,127,63,138,255,127,63,142,255,127,63,145,255,127,63,149,255,127,63,152,255,127,63,155,255,127,63,159,255,127,63,162,255,127,63,165,255,127,63,168,255,127,63,171,255,127,63,174,255,127,63,176,255,127,63,179,255,127,63,182,255,127,63,184,255,127,63,187,255,127,63,189,255,127,63,192,255,127,63,194,255,127,63,196,255,127,63,198,255,127,63,201,255,127,63,203,255,127,63,205,255,127,63,207,255,127,63,209,255,127,63,210,255,127,63,212,255,127,63,214,255,127,63,216,255,127,63,217,255,127,63,219,255,127,63,220,255,127,63,222,255,127,63,223,255,127,63,225,255,127,63,226,255,127,63,227,255,127,63,229,255,127,63,230,255,127,63,231,255,127,63,232,255,127,63,233,255,127,63,234,255,127,63,235,255,127,63,236,255,127,63,237,255,127,63,238,255,127,63,239,255,127,63,240,255,127,63,241,255,127,63,241,255,127,63,242,255,127,63,243,255,127,63,244,255,127,63,244,255,127,63,245,255,127,63,246,255,127,63,246,255,127,63,247,255,127,63,247,255,127,63,248,255,127,63,248,255,127,63,249,255,127,63,249,255,127,63,250,255,127,63,250,255,127,63,250,255,127,63,251,255,127,63,251,255,127,63,251,255,127,63,252,255,127,63,252,255,127,63,252,255,127,63,253,255,127,63,253,255,127,63,253,255,127,63,253,255,127,63,254,255,127,63,254,255,127,63,254,255,127,63,254,255,127,63,254,255,127,63,254,255,127,63,255,255,127,63,255,255,127,63,255,255,127,63,255,255,127,63,255,255,127,63,255,255,127,63,255,255,127,63,255,255,127,63,255,255,127,63,255,255,127,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,76,194,0,0,80,194,0,0,84,194,0,0,88,194,0,0,92,194,0,0,96,194,0,0,100,194,0,0,104,194,0,0,108,194,0,0,112,194,0,0,116,194,0,0,120,194,0,0,124,194,0,0,128,194,0,0,130,194,0,0,132,194,0,0,134,194,0,0,136,194,0,0,138,194,0,0,140,194,0,0,142,194,0,0,144,194,0,0,146,194,0,0,148,194,0,0,150,194,0,0,152,194,0,0,154,194,0,0,156,194,0,0,160,194,0,0,162,194,0,0,164,194,0,0,166,194,0,0,168,194,0,0,170,194,0,0,172,194,0,0,174,194,0,0,176,194,0,0,176,194,0,0,178,194,0,0,178,194,0,0,180,194,0,0,182,194,0,0,182,194,0,0,184,194,0,0,186,194,0,0,188,194,0,0,190,194,0,0,192,194,0,0,192,194,0,0,194,194,0,0,196,194,0,0,196,194,0,0,198,194,0,0,198,194,0,0,200,194,0,0,200,194,0,0,202,194,0,0,204,194,0,0,206,194,0,0,208,194,0,0,212,194,0,0,214,194,0,0,214,194,0,0,214,194,0,0,214,194,0,0,210,194,0,0,206,194,0,0,204,194,0,0,202,194,0,0,198,194,0,0,196,194,0,0,192,194,0,0,190,194,0,0,190,194,0,0,192,194,0,0,194,194,0,0,192,194,0,0,190,194,0,0,186,194,0,0,180,194,0,0,160,194,0,0,140,194,0,0,72,194,0,0,32,194,0,0,240,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,112,194,0,0,112,194,0,0,112,194,0,0,112,194,0,0,112,194,0,0,112,194,0,0,112,194,0,0,112,194,0,0,112,194,0,0,112,194,0,0,112,194,0,0,112,194,0,0,120,194,0,0,120,194,0,0,130,194,0,0,146,194,0,0,138,194,0,0,136,194,0,0,136,194,0,0,134,194,0,0,140,194,0,0,140,194,0,0,144,194,0,0,148,194,0,0,150,194,0,0,158,194,0,0,158,194,0,0,160,194,0,0,166,194,0,0,176,194,0,0,186,194,0,0,200,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,64,194,0,0,64,194,0,0,64,194,0,0,64,194,0,0,64,194,0,0,64,194,0,0,64,194,0,0,64,194,0,0,64,194,0,0,64,194,0,0,64,194,0,0,64,194,0,0,64,194,0,0,84,194,0,0,116,194,0,0,132,194,0,0,132,194,0,0,136,194,0,0,134,194,0,0,140,194,0,0,152,194,0,0,152,194,0,0,144,194,0,0,146,194,0,0,150,194,0,0,152,194,0,0,156,194,0,0,158,194,0,0,166,194,0,0,176,194,0,0,186,194,0,0,200,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,20,194,0,0,20,194,0,0,20,194,0,0,20,194,0,0,20,194,0,0,20,194,0,0,20,194,0,0,20,194,0,0,24,194,0,0,32,194,0,0,40,194,0,0,56,194,0,0,64,194,0,0,84,194,0,0,92,194,0,0,120,194,0,0,130,194,0,0,104,194,0,0,96,194,0,0,96,194,0,0,116,194,0,0,112,194,0,0,130,194,0,0,134,194,0,0,138,194,0,0,142,194,0,0,154,194,0,0,154,194,0,0,156,194,0,0,160,194,0,0,164,194,0,0,168,194,0,0,176,194,0,0,186,194,0,0,196,194,0,0,212,194,0,0,224,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,200,193,0,0,200,193,0,0,200,193,0,0,200,193,0,0,200,193,0,0,200,193,0,0,200,193,0,0,200,193,0,0,200,193,0,0,208,193,0,0,216,193,0,0,232,193,0,0,0,194,0,0,24,194,0,0,64,194,0,0,80,194,0,0,80,194,0,0,72,194,0,0,64,194,0,0,64,194,0,0,76,194,0,0,80,194,0,0,88,194,0,0,112,194,0,0,134,194,0,0,134,194,0,0,132,194,0,0,136,194,0,0,138,194,0,0,146,194,0,0,146,194,0,0,152,194,0,0,160,194,0,0,162,194,0,0,162,194,0,0,170,194,0,0,170,194,0,0,172,194,0,0,176,194,0,0,186,194,0,0,200,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,128,193,0,0,128,193,0,0,128,193,0,0,128,193,0,0,128,193,0,0,128,193,0,0,128,193,0,0,128,193,0,0,136,193,0,0,152,193,0,0,160,193,0,0,176,193,0,0,208,193,0,0,224,193,0,0,248,193,0,0,32,194,0,0,60,194,0,0,28,194,0,0,28,194,0,0,32,194,0,0,40,194,0,0,44,194,0,0,60,194,0,0,76,194,0,0,100,194,0,0,80,194,0,0,92,194,0,0,92,194,0,0,112,194,0,0,104,194,0,0,120,194,0,0,124,194,0,0,140,194,0,0,134,194,0,0,138,194,0,0,144,194,0,0,146,194,0,0,154,194,0,0,160,194,0,0,164,194,0,0,166,194,0,0,174,194,0,0,180,194,0,0,188,194,0,0,196,194,0,0,208,194,0,0,230,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,0,193,0,0,0,193,0,0,0,193,0,0,0,193,0,0,0,193,0,0,0,193,0,0,0,193,0,0,0,193,0,0,0,193,0,0,0,193,0,0,32,193,0,0,48,193,0,0,112,193,0,0,152,193,0,0,200,193,0,0,240,193,0,0,8,194,0,0,248,193,0,0,240,193,0,0,248,193,0,0,232,193,0,0,0,194,0,0,12,194,0,0,40,194,0,0,64,194,0,0,40,194,0,0,48,194,0,0,56,194,0,0,72,194,0,0,72,194,0,0,76,194,0,0,80,194,0,0,108,194,0,0,88,194,0,0,92,194,0,0,92,194,0,0,104,194,0,0,120,194,0,0,124,194,0,0,132,194,0,0,144,194,0,0,146,194,0,0,152,194,0,0,150,194,0,0,156,194,0,0,160,194,0,0,160,194,0,0,162,194,0,0,168,194,0,0,176,194,0,0,180,194,0,0,188,194,0,0,196,194,0,0,202,194,0,0,212,194,0,0,220,194,0,0,132,194,0,0,132,194,0,0,132,194,0,0,132,194,0,0,132,194,0,0,132,194,0,0,132,194,0,0,132,194,0,0,132,194,0,0,132,194,0,0,132,194,0,0,132,194,0,0,132,194,0,0,134,194,0,0,134,194,0,0,134,194,0,0,152,194,0,0,144,194,0,0,142,194,0,0,148,194,0,0,152,194,0,0,152,194,0,0,150,194,0,0,156,194,0,0,158,194,0,0,158,194,0,0,162,194,0,0,166,194,0,0,172,194,0,0,178,194,0,0,186,194,0,0,194,194,0,0,200,194,0,0,210,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,60,194,0,0,60,194,0,0,60,194,0,0,60,194,0,0,60,194,0,0,60,194,0,0,60,194,0,0,60,194,0,0,60,194,0,0,60,194,0,0,60,194,0,0,64,194,0,0,76,194,0,0,92,194,0,0,108,194,0,0,132,194,0,0,132,194,0,0,132,194,0,0,134,194,0,0,132,194,0,0,136,194,0,0,138,194,0,0,140,194,0,0,148,194,0,0,158,194,0,0,154,194,0,0,154,194,0,0,156,194,0,0,160,194,0,0,162,194,0,0,164,194,0,0,168,194,0,0,172,194,0,0,176,194,0,0,182,194,0,0,190,194,0,0,200,194,0,0,216,194,0,0,232,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,16,194,0,0,16,194,0,0,16,194,0,0,16,194,0,0,16,194,0,0,16,194,0,0,16,194,0,0,16,194,0,0,16,194,0,0,20,194,0,0,20,194,0,0,36,194,0,0,48,194,0,0,64,194,0,0,76,194,0,0,104,194,0,0,120,194,0,0,112,194,0,0,100,194,0,0,108,194,0,0,108,194,0,0,112,194,0,0,124,194,0,0,130,194,0,0,144,194,0,0,142,194,0,0,140,194,0,0,144,194,0,0,148,194,0,0,154,194,0,0,152,194,0,0,156,194,0,0,162,194,0,0,162,194,0,0,160,194,0,0,166,194,0,0,172,194,0,0,182,194,0,0,192,194,0,0,200,194,0,0,210,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,224,193,0,0,224,193,0,0,224,193,0,0,224,193,0,0,224,193,0,0,224,193,0,0,224,193,0,0,224,193,0,0,224,193,0,0,240,193,0,0,0,194,0,0,0,194,0,0,4,194,0,0,12,194,0,0,36,194,0,0,68,194,0,0,72,194,0,0,68,194,0,0,60,194,0,0,64,194,0,0,64,194,0,0,80,194,0,0,76,194,0,0,100,194,0,0,130,194,0,0,116,194,0,0,108,194,0,0,116,194,0,0,128,194,0,0,138,194,0,0,140,194,0,0,148,194,0,0,154,194,0,0,154,194,0,0,156,194,0,0,162,194,0,0,168,194,0,0,170,194,0,0,174,194,0,0,180,194,0,0,184,194,0,0,192,194,0,0,200,194,0,0,214,194,0,0,224,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,152,193,0,0,152,193,0,0,152,193,0,0,152,193,0,0,152,193,0,0,152,193,0,0,152,193,0,0,152,193,0,0,160,193,0,0,168,193,0,0,184,193,0,0,216,193,0,0,240,193,0,0,12,194,0,0,16,194,0,0,36,194,0,0,56,194,0,0,48,194,0,0,40,194,0,0,32,194,0,0,36,194,0,0,36,194,0,0,44,194,0,0,64,194,0,0,92,194,0,0,84,194,0,0,80,194,0,0,84,194,0,0,96,194,0,0,108,194,0,0,104,194,0,0,112,194,0,0,134,194,0,0,132,194,0,0,138,194,0,0,142,194,0,0,144,194,0,0,150,194,0,0,158,194,0,0,162,194,0,0,168,194,0,0,174,194,0,0,180,194,0,0,186,194,0,0,194,194,0,0,202,194,0,0,214,194,0,0,228,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,16,193,0,0,16,193,0,0,16,193,0,0,16,193,0,0,16,193,0,0,16,193,0,0,16,193,0,0,16,193,0,0,48,193,0,0,64,193,0,0,64,193,0,0,112,193,0,0,128,193,0,0,160,193,0,0,184,193,0,0,240,193,0,0,20,194,0,0,8,194,0,0,4,194,0,0,8,194,0,0,248,193,0,0,0,194,0,0,0,194,0,0,24,194,0,0,60,194,0,0,48,194,0,0,36,194,0,0,32,194,0,0,60,194,0,0,68,194,0,0,56,194,0,0,56,194,0,0,104,194,0,0,72,194,0,0,72,194,0,0,88,194,0,0,104,194,0,0,120,194,0,0,128,194,0,0,134,194,0,0,134,194,0,0,140,194,0,0,144,194,0,0,152,194,0,0,158,194,0,0,166,194,0,0,174,194,0,0,182,194,0,0,192,194,0,0,200,194,0,0,208,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,120,194,0,0,120,194,0,0,120,194,0,0,120,194,0,0,120,194,0,0,120,194,0,0,120,194,0,0,120,194,0,0,120,194,0,0,120,194,0,0,124,194,0,0,128,194,0,0,132,194,0,0,134,194,0,0,132,194,0,0,136,194,0,0,150,194,0,0,144,194,0,0,152,194,0,0,150,194,0,0,152,194,0,0,156,194,0,0,158,194,0,0,164,194,0,0,168,194,0,0,170,194,0,0,180,194,0,0,188,194,0,0,202,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,108,194,0,0,108,194,0,0,108,194,0,0,108,194,0,0,108,194,0,0,108,194,0,0,108,194,0,0,108,194,0,0,108,194,0,0,108,194,0,0,108,194,0,0,112,194,0,0,112,194,0,0,116,194,0,0,124,194,0,0,132,194,0,0,142,194,0,0,136,194,0,0,140,194,0,0,140,194,0,0,142,194,0,0,144,194,0,0,144,194,0,0,150,194,0,0,162,194,0,0,156,194,0,0,158,194,0,0,164,194,0,0,166,194,0,0,172,194,0,0,180,194,0,0,194,194,0,0,206,194,0,0,226,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,84,194,0,0,84,194,0,0,84,194,0,0,84,194,0,0,84,194,0,0,84,194,0,0,84,194,0,0,84,194,0,0,84,194,0,0,88,194,0,0,92,194,0,0,100,194,0,0,96,194,0,0,100,194,0,0,92,194,0,0,116,194,0,0,130,194,0,0,112,194,0,0,112,194,0,0,120,194,0,0,124,194,0,0,124,194,0,0,132,194,0,0,136,194,0,0,148,194,0,0,146,194,0,0,150,194,0,0,150,194,0,0,156,194,0,0,160,194,0,0,160,194,0,0,164,194,0,0,170,194,0,0,180,194,0,0,192,194,0,0,202,194,0,0,216,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,56,194,0,0,56,194,0,0,56,194,0,0,56,194,0,0,56,194,0,0,56,194,0,0,56,194,0,0,56,194,0,0,56,194,0,0,56,194,0,0,60,194,0,0,60,194,0,0,60,194,0,0,60,194,0,0,64,194,0,0,76,194,0,0,100,194,0,0,76,194,0,0,68,194,0,0,72,194,0,0,76,194,0,0,84,194,0,0,88,194,0,0,108,194,0,0,132,194,0,0,112,194,0,0,120,194,0,0,134,194,0,0,134,194,0,0,140,194,0,0,144,194,0,0,150,194,0,0,152,194,0,0,156,194,0,0,162,194,0,0,170,194,0,0,176,194,0,0,188,194,0,0,194,194,0,0,208,194,0,0,224,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,16,194,0,0,16,194,0,0,16,194,0,0,16,194,0,0,16,194,0,0,16,194,0,0,16,194,0,0,16,194,0,0,28,194,0,0,36,194,0,0,40,194,0,0,40,194,0,0,28,194,0,0,24,194,0,0,36,194,0,0,44,194,0,0,80,194,0,0,48,194,0,0,32,194,0,0,28,194,0,0,20,194,0,0,20,194,0,0,32,194,0,0,60,194,0,0,88,194,0,0,72,194,0,0,64,194,0,0,72,194,0,0,92,194,0,0,116,194,0,0,108,194,0,0,120,194,0,0,132,194,0,0,132,194,0,0,132,194,0,0,138,194,0,0,138,194,0,0,146,194,0,0,148,194,0,0,148,194,0,0,150,194,0,0,154,194,0,0,158,194,0,0,164,194,0,0,174,194,0,0,182,194,0,0,190,194,0,0,200,194,0,0,216,194,0,0,230,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,224,193,0,0,208,193,0,0,192,193,0,0,176,193,0,0,160,193,0,0,160,193,0,0,184,193,0,0,232,193,0,0,240,193,0,0,248,193,0,0,224,193,0,0,216,193,0,0,224,193,0,0,224,193,0,0,224,193,0,0,12,194,0,0,32,194,0,0,4,194,0,0,0,194,0,0,232,193,0,0,240,193,0,0,240,193,0,0,240,193,0,0,20,194,0,0,52,194,0,0,36,194,0,0,20,194,0,0,24,194,0,0,52,194,0,0,60,194,0,0,60,194,0,0,64,194,0,0,84,194,0,0,68,194,0,0,64,194,0,0,72,194,0,0,68,194,0,0,68,194,0,0,76,194,0,0,80,194,0,0,104,194,0,0,96,194,0,0,100,194,0,0,96,194,0,0,112,194,0,0,116,194,0,0,120,194,0,0,140,194,0,0,144,194,0,0,148,194,0,0,156,194,0,0,166,194,0,0,176,194,0,0,186,194,0,0,200,194,0,0,212,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,210,194,0,0,200,194,0,0,190,194,0,0,182,194,0,0,174,194,0,0,166,194,0,0,160,194,0,0,156,194,0,0,152,194,0,0,156,194,0,0,156,194,0,0,162,194,0,0,166,194,0,0,170,194,0,0,172,194,0,0,170,194,0,0,172,194,0,0,174,194,0,0,180,194,0,0,194,194,0,0,214,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,210,194], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+30720);
/* memory initializer */ allocate([0,0,200,194,0,0,190,194,0,0,180,194,0,0,170,194,0,0,162,194,0,0,154,194,0,0,146,194,0,0,140,194,0,0,134,194,0,0,134,194,0,0,136,194,0,0,150,194,0,0,146,194,0,0,140,194,0,0,138,194,0,0,140,194,0,0,144,194,0,0,150,194,0,0,158,194,0,0,168,194,0,0,166,194,0,0,168,194,0,0,172,194,0,0,176,194,0,0,178,194,0,0,178,194,0,0,186,194,0,0,196,194,0,0,210,194,0,0,224,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,210,194,0,0,200,194,0,0,190,194,0,0,180,194,0,0,170,194,0,0,160,194,0,0,152,194,0,0,142,194,0,0,136,194,0,0,136,194,0,0,130,194,0,0,124,194,0,0,124,194,0,0,120,194,0,0,120,194,0,0,128,194,0,0,130,194,0,0,128,194,0,0,116,194,0,0,120,194,0,0,124,194,0,0,128,194,0,0,132,194,0,0,136,194,0,0,146,194,0,0,146,194,0,0,148,194,0,0,150,194,0,0,152,194,0,0,162,194,0,0,166,194,0,0,170,194,0,0,176,194,0,0,178,194,0,0,184,194,0,0,190,194,0,0,200,194,0,0,216,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,160,194,0,0,150,194,0,0,142,194,0,0,136,194,0,0,130,194,0,0,124,194,0,0,120,194,0,0,116,194,0,0,116,194,0,0,116,194,0,0,116,194,0,0,108,194,0,0,96,194,0,0,100,194,0,0,84,194,0,0,72,194,0,0,104,194,0,0,80,194,0,0,72,194,0,0,72,194,0,0,80,194,0,0,84,194,0,0,88,194,0,0,104,194,0,0,134,194,0,0,124,194,0,0,134,194,0,0,136,194,0,0,144,194,0,0,150,194,0,0,156,194,0,0,160,194,0,0,162,194,0,0,162,194,0,0,164,194,0,0,170,194,0,0,178,194,0,0,180,194,0,0,186,194,0,0,194,194,0,0,202,194,0,0,214,194,0,0,228,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,130,194,0,0,116,194,0,0,108,194,0,0,100,194,0,0,96,194,0,0,92,194,0,0,92,194,0,0,96,194,0,0,96,194,0,0,100,194,0,0,92,194,0,0,84,194,0,0,80,194,0,0,60,194,0,0,48,194,0,0,48,194,0,0,72,194,0,0,48,194,0,0,36,194,0,0,28,194,0,0,28,194,0,0,40,194,0,0,32,194,0,0,56,194,0,0,76,194,0,0,68,194,0,0,72,194,0,0,84,194,0,0,88,194,0,0,124,194,0,0,112,194,0,0,116,194,0,0,120,194,0,0,132,194,0,0,132,194,0,0,132,194,0,0,140,194,0,0,146,194,0,0,148,194,0,0,150,194,0,0,152,194,0,0,150,194,0,0,158,194,0,0,170,194,0,0,178,194,0,0,182,194,0,0,192,194,0,0,204,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,80,194,0,0,72,194,0,0,68,194,0,0,68,194,0,0,64,194,0,0,64,194,0,0,64,194,0,0,68,194,0,0,72,194,0,0,72,194,0,0,68,194,0,0,56,194,0,0,44,194,0,0,28,194,0,0,12,194,0,0,4,194,0,0,24,194,0,0,16,194,0,0,0,194,0,0,232,193,0,0,0,194,0,0,0,194,0,0,0,194,0,0,12,194,0,0,48,194,0,0,28,194,0,0,24,194,0,0,24,194,0,0,56,194,0,0,72,194,0,0,52,194,0,0,56,194,0,0,84,194,0,0,72,194,0,0,72,194,0,0,72,194,0,0,88,194,0,0,88,194,0,0,84,194,0,0,84,194,0,0,96,194,0,0,100,194,0,0,108,194,0,0,132,194,0,0,140,194,0,0,144,194,0,0,148,194,0,0,158,194,0,0,166,194,0,0,170,194,0,0,180,194,0,0,194,194,0,0,228,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,210,194,0,0,200,194,0,0,190,194,0,0,180,194,0,0,172,194,0,0,160,194,0,0,150,194,0,0,150,194,0,0,158,194,0,0,160,194,0,0,158,194,0,0,160,194,0,0,162,194,0,0,164,194,0,0,176,194,0,0,190,194,0,0,206,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,216,194,0,0,206,194,0,0,196,194,0,0,186,194,0,0,176,194,0,0,166,194,0,0,158,194,0,0,156,194,0,0,150,194,0,0,142,194,0,0,134,194,0,0,136,194,0,0,146,194,0,0,146,194,0,0,144,194,0,0,146,194,0,0,150,194,0,0,154,194,0,0,160,194,0,0,164,194,0,0,176,194,0,0,186,194,0,0,200,194,0,0,214,194,0,0,228,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,210,194,0,0,202,194,0,0,192,194,0,0,180,194,0,0,172,194,0,0,162,194,0,0,154,194,0,0,146,194,0,0,138,194,0,0,132,194,0,0,116,194,0,0,120,194,0,0,132,194,0,0,128,194,0,0,120,194,0,0,130,194,0,0,132,194,0,0,140,194,0,0,144,194,0,0,152,194,0,0,162,194,0,0,160,194,0,0,168,194,0,0,180,194,0,0,190,194,0,0,204,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,214,194,0,0,206,194,0,0,194,194,0,0,184,194,0,0,176,194,0,0,166,194,0,0,158,194,0,0,148,194,0,0,140,194,0,0,132,194,0,0,108,194,0,0,84,194,0,0,104,194,0,0,120,194,0,0,92,194,0,0,88,194,0,0,88,194,0,0,88,194,0,0,104,194,0,0,116,194,0,0,120,194,0,0,144,194,0,0,140,194,0,0,144,194,0,0,150,194,0,0,156,194,0,0,160,194,0,0,162,194,0,0,160,194,0,0,166,194,0,0,166,194,0,0,176,194,0,0,186,194,0,0,200,194,0,0,214,194,0,0,230,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,210,194,0,0,200,194,0,0,190,194,0,0,180,194,0,0,170,194,0,0,160,194,0,0,150,194,0,0,140,194,0,0,132,194,0,0,120,194,0,0,96,194,0,0,64,194,0,0,48,194,0,0,64,194,0,0,56,194,0,0,56,194,0,0,44,194,0,0,56,194,0,0,64,194,0,0,64,194,0,0,76,194,0,0,104,194,0,0,104,194,0,0,108,194,0,0,112,194,0,0,120,194,0,0,120,194,0,0,116,194,0,0,116,194,0,0,130,194,0,0,128,194,0,0,130,194,0,0,136,194,0,0,140,194,0,0,148,194,0,0,150,194,0,0,156,194,0,0,162,194,0,0,172,194,0,0,190,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,210,194,0,0,200,194,0,0,190,194,0,0,180,194,0,0,170,194,0,0,160,194,0,0,150,194,0,0,140,194,0,0,130,194,0,0,116,194,0,0,92,194,0,0,68,194,0,0,28,194,0,0,4,194,0,0,32,194,0,0,12,194,0,0,0,194,0,0,24,194,0,0,32,194,0,0,4,194,0,0,12,194,0,0,20,194,0,0,56,194,0,0,36,194,0,0,52,194,0,0,48,194,0,0,56,194,0,0,40,194,0,0,52,194,0,0,56,194,0,0,80,194,0,0,72,194,0,0,72,194,0,0,72,194,0,0,88,194,0,0,88,194,0,0,92,194,0,0,100,194,0,0,120,194,0,0,128,194,0,0,132,194,0,0,136,194,0,0,140,194,0,0,152,194,0,0,162,194,0,0,180,194,0,0,200,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,210,194,0,0,196,194,0,0,180,194,0,0,170,194,0,0,164,194,0,0,166,194,0,0,160,194,0,0,156,194,0,0,168,194,0,0,158,194,0,0,160,194,0,0,166,194,0,0,174,194,0,0,178,194,0,0,182,194,0,0,186,194,0,0,198,194,0,0,212,194,0,0,234,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,210,194,0,0,196,194,0,0,180,194,0,0,170,194,0,0,160,194,0,0,150,194,0,0,140,194,0,0,136,194,0,0,148,194,0,0,144,194,0,0,148,194,0,0,154,194,0,0,160,194,0,0,164,194,0,0,170,194,0,0,174,194,0,0,184,194,0,0,178,194,0,0,182,194,0,0,190,194,0,0,200,194,0,0,212,194,0,0,224,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,210,194,0,0,196,194,0,0,180,194,0,0,166,194,0,0,150,194,0,0,142,194,0,0,124,194,0,0,128,194,0,0,134,194,0,0,120,194,0,0,128,194,0,0,134,194,0,0,140,194,0,0,146,194,0,0,154,194,0,0,162,194,0,0,168,194,0,0,166,194,0,0,170,194,0,0,178,194,0,0,180,194,0,0,186,194,0,0,196,194,0,0,208,194,0,0,218,194,0,0,228,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,206,194,0,0,192,194,0,0,176,194,0,0,162,194,0,0,150,194,0,0,136,194,0,0,104,194,0,0,88,194,0,0,96,194,0,0,88,194,0,0,96,194,0,0,96,194,0,0,104,194,0,0,112,194,0,0,124,194,0,0,132,194,0,0,148,194,0,0,138,194,0,0,144,194,0,0,144,194,0,0,150,194,0,0,148,194,0,0,154,194,0,0,162,194,0,0,162,194,0,0,164,194,0,0,168,194,0,0,174,194,0,0,186,194,0,0,192,194,0,0,198,194,0,0,208,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,216,194,0,0,204,194,0,0,192,194,0,0,182,194,0,0,170,194,0,0,160,194,0,0,148,194,0,0,136,194,0,0,112,194,0,0,76,194,0,0,56,194,0,0,64,194,0,0,56,194,0,0,44,194,0,0,52,194,0,0,60,194,0,0,60,194,0,0,68,194,0,0,64,194,0,0,96,194,0,0,84,194,0,0,92,194,0,0,104,194,0,0,100,194,0,0,124,194,0,0,104,194,0,0,112,194,0,0,132,194,0,0,128,194,0,0,134,194,0,0,140,194,0,0,140,194,0,0,148,194,0,0,154,194,0,0,168,194,0,0,172,194,0,0,178,194,0,0,182,194,0,0,186,194,0,0,188,194,0,0,202,194,0,0,218,194,0,0,236,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,216,194,0,0,206,194,0,0,196,194,0,0,186,194,0,0,176,194,0,0,166,194,0,0,156,194,0,0,146,194,0,0,136,194,0,0,112,194,0,0,84,194,0,0,48,194,0,0,12,194,0,0,24,194,0,0,24,194,0,0,8,194,0,0,8,194,0,0,16,194,0,0,32,194,0,0,36,194,0,0,48,194,0,0,76,194,0,0,52,194,0,0,56,194,0,0,60,194,0,0,56,194,0,0,88,194,0,0,72,194,0,0,68,194,0,0,72,194,0,0,72,194,0,0,72,194,0,0,76,194,0,0,88,194,0,0,100,194,0,0,104,194,0,0,112,194,0,0,132,194,0,0,132,194,0,0,132,194,0,0,128,194,0,0,130,194,0,0,136,194,0,0,154,194,0,0,164,194,0,0,174,194,0,0,190,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,214,194,0,0,204,194,0,0,194,194,0,0,184,194,0,0,174,194,0,0,166,194,0,0,156,194,0,0,150,194,0,0,164,194,0,0,158,194,0,0,166,194,0,0,170,194,0,0,178,194,0,0,184,194,0,0,190,194,0,0,196,194,0,0,202,194,0,0,210,194,0,0,218,194,0,0,226,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,212,194,0,0,200,194,0,0,190,194,0,0,180,194,0,0,172,194,0,0,162,194,0,0,156,194,0,0,148,194,0,0,138,194,0,0,148,194,0,0,148,194,0,0,152,194,0,0,158,194,0,0,166,194,0,0,168,194,0,0,172,194,0,0,178,194,0,0,184,194,0,0,194,194,0,0,186,194,0,0,200,194,0,0,206,194,0,0,214,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,212,194,0,0,200,194,0,0,190,194,0,0,180,194,0,0,174,194,0,0,166,194,0,0,160,194,0,0,150,194,0,0,138,194,0,0,112,194,0,0,132,194,0,0,132,194,0,0,136,194,0,0,140,194,0,0,148,194,0,0,156,194,0,0,158,194,0,0,162,194,0,0,162,194,0,0,166,194,0,0,168,194,0,0,174,194,0,0,186,194,0,0,192,194,0,0,198,194,0,0,206,194,0,0,214,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,216,194,0,0,206,194,0,0,196,194,0,0,186,194,0,0,178,194,0,0,170,194,0,0,164,194,0,0,156,194,0,0,142,194,0,0,120,194,0,0,92,194,0,0,104,194,0,0,104,194,0,0,88,194,0,0,88,194,0,0,92,194,0,0,108,194,0,0,116,194,0,0,120,194,0,0,140,194,0,0,132,194,0,0,132,194,0,0,134,194,0,0,140,194,0,0,144,194,0,0,150,194,0,0,156,194,0,0,168,194,0,0,168,194,0,0,168,194,0,0,176,194,0,0,182,194,0,0,180,194,0,0,190,194,0,0,196,194,0,0,204,194,0,0,206,194,0,0,212,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,216,194,0,0,206,194,0,0,196,194,0,0,188,194,0,0,180,194,0,0,174,194,0,0,164,194,0,0,158,194,0,0,146,194,0,0,134,194,0,0,104,194,0,0,60,194,0,0,72,194,0,0,52,194,0,0,36,194,0,0,52,194,0,0,64,194,0,0,48,194,0,0,48,194,0,0,68,194,0,0,88,194,0,0,76,194,0,0,64,194,0,0,60,194,0,0,68,194,0,0,72,194,0,0,76,194,0,0,100,194,0,0,104,194,0,0,112,194,0,0,124,194,0,0,138,194,0,0,140,194,0,0,138,194,0,0,142,194,0,0,148,194,0,0,156,194,0,0,164,194,0,0,180,194,0,0,190,194,0,0,202,194,0,0,210,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,210,194,0,0,202,194,0,0,194,194,0,0,186,194,0,0,180,194,0,0,170,194,0,0,160,194,0,0,154,194,0,0,144,194,0,0,130,194,0,0,96,194,0,0,64,194,0,0,20,194,0,0,32,194,0,0,16,194,0,0,8,194,0,0,32,194,0,0,72,194,0,0,60,194,0,0,24,194,0,0,36,194,0,0,60,194,0,0,24,194,0,0,12,194,0,0,28,194,0,0,24,194,0,0,44,194,0,0,32,194,0,0,52,194,0,0,72,194,0,0,52,194,0,0,48,194,0,0,60,194,0,0,72,194,0,0,92,194,0,0,64,194,0,0,64,194,0,0,80,194,0,0,132,194,0,0,140,194,0,0,152,194,0,0,164,194,0,0,180,194,0,0,194,194,0,0,210,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,216,194,0,0,206,194,0,0,196,194,0,0,186,194,0,0,172,194,0,0,158,194,0,0,152,194,0,0,166,194,0,0,162,194,0,0,170,194,0,0,174,194,0,0,178,194,0,0,186,194,0,0,196,194,0,0,204,194,0,0,214,194,0,0,224,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,216,194,0,0,206,194,0,0,196,194,0,0,186,194,0,0,172,194,0,0,158,194,0,0,142,194,0,0,154,194,0,0,148,194,0,0,154,194,0,0,158,194,0,0,162,194,0,0,168,194,0,0,170,194,0,0,180,194,0,0,184,194,0,0,186,194,0,0,184,194,0,0,196,194,0,0,202,194,0,0,216,194,0,0,224,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,216,194,0,0,206,194,0,0,196,194,0,0,186,194,0,0,174,194,0,0,156,194,0,0,136,194,0,0,130,194,0,0,132,194,0,0,120,194,0,0,130,194,0,0,134,194,0,0,140,194,0,0,146,194,0,0,150,194,0,0,156,194,0,0,164,194,0,0,164,194,0,0,166,194,0,0,168,194,0,0,182,194,0,0,186,194,0,0,196,194,0,0,204,194,0,0,212,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,210,194,0,0,200,194,0,0,190,194,0,0,180,194,0,0,164,194,0,0,148,194,0,0,120,194,0,0,100,194,0,0,104,194,0,0,96,194,0,0,76,194,0,0,80,194,0,0,80,194,0,0,88,194,0,0,88,194,0,0,104,194,0,0,132,194,0,0,108,194,0,0,112,194,0,0,124,194,0,0,132,194,0,0,138,194,0,0,146,194,0,0,158,194,0,0,166,194,0,0,168,194,0,0,160,194,0,0,162,194,0,0,162,194,0,0,164,194,0,0,176,194,0,0,184,194,0,0,196,194,0,0,210,194,0,0,226,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,214,194,0,0,204,194,0,0,194,194,0,0,184,194,0,0,168,194,0,0,158,194,0,0,138,194,0,0,100,194,0,0,60,194,0,0,80,194,0,0,60,194,0,0,48,194,0,0,52,194,0,0,72,194,0,0,80,194,0,0,40,194,0,0,40,194,0,0,84,194,0,0,44,194,0,0,44,194,0,0,64,194,0,0,76,194,0,0,96,194,0,0,92,194,0,0,80,194,0,0,100,194,0,0,108,194,0,0,116,194,0,0,120,194,0,0,134,194,0,0,142,194,0,0,156,194,0,0,166,194,0,0,172,194,0,0,188,194,0,0,196,194,0,0,206,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,210,194,0,0,200,194,0,0,190,194,0,0,180,194,0,0,168,194,0,0,156,194,0,0,140,194,0,0,116,194,0,0,76,194,0,0,36,194,0,0,32,194,0,0,24,194,0,0,32,194,0,0,56,194,0,0,80,194,0,0,76,194,0,0,36,194,0,0,32,194,0,0,56,194,0,0,32,194,0,0,24,194,0,0,24,194,0,0,36,194,0,0,56,194,0,0,36,194,0,0,56,194,0,0,60,194,0,0,44,194,0,0,44,194,0,0,52,194,0,0,36,194,0,0,52,194,0,0,96,194,0,0,134,194,0,0,136,194,0,0,166,194,0,0,174,194,0,0,180,194,0,0,190,194,0,0,204,194,0,0,214,194,0,0,226,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,218,194,0,0,210,194,0,0,202,194,0,0,192,194,0,0,182,194,0,0,168,194,0,0,154,194,0,0,164,194,0,0,164,194,0,0,170,194,0,0,178,194,0,0,188,194,0,0,200,194,0,0,212,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,212,194,0,0,206,194,0,0,196,194,0,0,184,194,0,0,170,194,0,0,160,194,0,0,142,194,0,0,150,194,0,0,144,194,0,0,152,194,0,0,160,194,0,0,168,194,0,0,172,194,0,0,178,194,0,0,186,194,0,0,200,194,0,0,214,194,0,0,226,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,214,194,0,0,208,194,0,0,202,194,0,0,194,194,0,0,184,194,0,0,176,194,0,0,168,194,0,0,160,194,0,0,128,194,0,0,132,194,0,0,124,194,0,0,128,194,0,0,132,194,0,0,138,194,0,0,146,194,0,0,154,194,0,0,166,194,0,0,166,194,0,0,172,194,0,0,182,194,0,0,196,194,0,0,208,194,0,0,222,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,214,194,0,0,208,194,0,0,202,194,0,0,194,194,0,0,184,194,0,0,180,194,0,0,168,194,0,0,148,194,0,0,100,194,0,0,104,194,0,0,80,194,0,0,92,194,0,0,88,194,0,0,72,194,0,0,80,194,0,0,72,194,0,0,80,194,0,0,124,194,0,0,120,194,0,0,138,194,0,0,152,194,0,0,154,194,0,0,156,194,0,0,156,194,0,0,158,194,0,0,164,194,0,0,176,194,0,0,188,194,0,0,200,194,0,0,212,194,0,0,222,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,212,194,0,0,204,194,0,0,196,194,0,0,190,194,0,0,180,194,0,0,170,194,0,0,166,194,0,0,156,194,0,0,140,194,0,0,72,194,0,0,72,194,0,0,36,194,0,0,48,194,0,0,68,194,0,0,60,194,0,0,72,194,0,0,72,194,0,0,48,194,0,0,92,194,0,0,56,194,0,0,60,194,0,0,64,194,0,0,64,194,0,0,88,194,0,0,68,194,0,0,68,194,0,0,104,194,0,0,120,194,0,0,142,194,0,0,162,194,0,0,174,194,0,0,184,194,0,0,194,194,0,0,204,194,0,0,216,194,0,0,228,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,212,194,0,0,204,194,0,0,196,194,0,0,190,194,0,0,180,194,0,0,170,194,0,0,166,194,0,0,156,194,0,0,140,194,0,0,52,194,0,0,44,194,0,0,36,194,0,0,60,194,0,0,72,194,0,0,76,194,0,0,72,194,0,0,68,194,0,0,52,194,0,0,60,194,0,0,36,194,0,0,48,194,0,0,36,194,0,0,28,194,0,0,44,194,0,0,24,194,0,0,20,194,0,0,32,194,0,0,36,194,0,0,48,194,0,0,72,194,0,0,104,194,0,0,130,194,0,0,146,194,0,0,158,194,0,0,170,194,0,0,184,194,0,0,194,194,0,0,202,194,0,0,210,194,0,0,218,194,0,0,226,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,214,194,0,0,200,194,0,0,190,194,0,0,174,194,0,0,162,194,0,0,170,194,0,0,166,194,0,0,176,194,0,0,186,194,0,0,200,194,0,0,214,194,0,0,228,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,214,194,0,0,202,194,0,0,190,194,0,0,176,194,0,0,166,194,0,0,152,194,0,0,146,194,0,0,144,194,0,0,158,194,0,0,168,194,0,0,180,194,0,0,190,194,0,0,200,194,0,0,210,194,0,0,220,194,0,0,230,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,208,194,0,0,196,194,0,0,184,194,0,0,174,194,0,0,162,194,0,0,140,194,0,0,130,194,0,0,120,194,0,0,134,194,0,0,142,194,0,0,148,194,0,0,160,194,0,0,170,194,0,0,182,194,0,0,190,194,0,0,198,194,0,0,206,194,0,0,216,194,0,0,222,194,0,0,228,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,206,194,0,0,194,194,0,0,180,194,0,0,170,194,0,0,152,194,0,0,112,194,0,0,96,194,0,0,88,194,0,0,112,194,0,0,120,194,0,0,116,194,0,0,96,194,0,0,124,194,0,0,130,194,0,0,146,194,0,0,148,194,0,0,154,194,0,0,150,194,0,0,156,194,0,0,162,194,0,0,172,194,0,0,174,194,0,0,176,194,0,0,182,194,0,0,188,194,0,0,196,194,0,0,206,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,210,194,0,0,200,194,0,0,194,194,0,0,184,194,0,0,172,194,0,0,162,194,0,0,158,194,0,0,140,194,0,0,100,194,0,0,76,194,0,0,60,194,0,0,76,194,0,0,104,194,0,0,112,194,0,0,96,194,0,0,84,194,0,0,72,194,0,0,104,194,0,0,80,194,0,0,72,194,0,0,72,194,0,0,84,194,0,0,92,194,0,0,128,194,0,0,138,194,0,0,142,194,0,0,170,194,0,0,164,194,0,0,156,194,0,0,162,194,0,0,170,194,0,0,190,194,0,0,204,194,0,0,224,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,210,194,0,0,200,194,0,0,194,194,0,0,184,194,0,0,170,194,0,0,166,194,0,0,158,194,0,0,144,194,0,0,68,194,0,0,32,194,0,0,44,194,0,0,44,194,0,0,88,194,0,0,96,194,0,0,76,194,0,0,72,194,0,0,32,194,0,0,44,194,0,0,24,194,0,0,16,194,0,0,12,194,0,0,20,194,0,0,24,194,0,0,20,194,0,0,48,194,0,0,88,194,0,0,112,194,0,0,100,194,0,0,112,194,0,0,140,194,0,0,150,194,0,0,168,194,0,0,184,194,0,0,206,194,0,0,224,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,204,194,0,0,190,194,0,0,178,194,0,0,164,194,0,0,166,194,0,0,168,194,0,0,180,194,0,0,184,194,0,0,198,194,0,0,214,194,0,0,226,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,214,194,0,0,202,194,0,0,190,194,0,0,178,194,0,0,166,194,0,0,144,194,0,0,148,194,0,0,156,194,0,0,170,194,0,0,176,194,0,0,176,194,0,0,180,194,0,0,184,194,0,0,196,194,0,0,210,194,0,0,222,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,218,194,0,0,206,194,0,0,194,194,0,0,186,194,0,0,174,194,0,0,162,194,0,0,140,194,0,0,140,194,0,0,134,194,0,0,150,194,0,0,146,194,0,0,152,194,0,0,158,194,0,0,162,194,0,0,166,194,0,0,176,194,0,0,178,194,0,0,194,194,0,0,206,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,214,194,0,0,200,194,0,0,188,194,0,0,176,194,0,0,166,194,0,0,150,194,0,0,124,194,0,0,108,194,0,0,108,194,0,0,124,194,0,0,132,194,0,0,112,194,0,0,120,194,0,0,134,194,0,0,134,194,0,0,154,194,0,0,152,194,0,0,162,194,0,0,176,194,0,0,172,194,0,0,184,194,0,0,192,194,0,0,204,194,0,0,218,194,0,0,232,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,210,194,0,0,196,194,0,0,184,194,0,0,172,194,0,0,162,194,0,0,146,194,0,0,96,194,0,0,80,194,0,0,60,194,0,0,92,194,0,0,112,194,0,0,104,194,0,0,80,194,0,0,76,194,0,0,52,194,0,0,68,194,0,0,72,194,0,0,84,194,0,0,88,194,0,0,116,194,0,0,142,194,0,0,140,194,0,0,138,194,0,0,156,194,0,0,158,194,0,0,174,194,0,0,180,194,0,0,192,194,0,0,208,194,0,0,224,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+40960);
/* memory initializer */ allocate([0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,206,194,0,0,192,194,0,0,180,194,0,0,172,194,0,0,156,194,0,0,140,194,0,0,76,194,0,0,40,194,0,0,60,194,0,0,64,194,0,0,92,194,0,0,88,194,0,0,88,194,0,0,84,194,0,0,40,194,0,0,12,194,0,0,224,193,0,0,4,194,0,0,24,194,0,0,20,194,0,0,48,194,0,0,60,194,0,0,68,194,0,0,88,194,0,0,124,194,0,0,136,194,0,0,156,194,0,0,164,194,0,0,178,194,0,0,188,194,0,0,198,194,0,0,208,194,0,0,218,194,0,0,228,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,200,194,0,0,180,194,0,0,158,194,0,0,170,194,0,0,162,194,0,0,164,194,0,0,164,194,0,0,178,194,0,0,188,194,0,0,198,194,0,0,206,194,0,0,218,194,0,0,230,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,210,194,0,0,194,194,0,0,170,194,0,0,144,194,0,0,148,194,0,0,140,194,0,0,140,194,0,0,140,194,0,0,152,194,0,0,170,194,0,0,182,194,0,0,186,194,0,0,194,194,0,0,206,194,0,0,218,194,0,0,230,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,224,194,0,0,186,194,0,0,162,194,0,0,136,194,0,0,120,194,0,0,112,194,0,0,112,194,0,0,100,194,0,0,124,194,0,0,140,194,0,0,154,194,0,0,164,194,0,0,180,194,0,0,186,194,0,0,196,194,0,0,208,194,0,0,218,194,0,0,226,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,226,194,0,0,200,194,0,0,186,194,0,0,168,194,0,0,124,194,0,0,104,194,0,0,64,194,0,0,84,194,0,0,88,194,0,0,80,194,0,0,80,194,0,0,100,194,0,0,128,194,0,0,132,194,0,0,152,194,0,0,166,194,0,0,162,194,0,0,170,194,0,0,170,194,0,0,180,194,0,0,190,194,0,0,196,194,0,0,202,194,0,0,206,194,0,0,212,194,0,0,216,194,0,0,222,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,210,194,0,0,190,194,0,0,172,194,0,0,148,194,0,0,84,194,0,0,72,194,0,0,24,194,0,0,44,194,0,0,68,194,0,0,44,194,0,0,40,194,0,0,28,194,0,0,28,194,0,0,56,194,0,0,80,194,0,0,100,194,0,0,96,194,0,0,144,194,0,0,138,194,0,0,148,194,0,0,162,194,0,0,174,194,0,0,184,194,0,0,188,194,0,0,194,194,0,0,198,194,0,0,204,194,0,0,210,194,0,0,216,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,216,194,0,0,198,194,0,0,180,194,0,0,152,194,0,0,132,194,0,0,52,194,0,0,44,194,0,0,36,194,0,0,48,194,0,0,60,194,0,0,44,194,0,0,60,194,0,0,32,194,0,0,240,193,0,0,248,193,0,0,248,193,0,0,28,194,0,0,4,194,0,0,32,194,0,0,36,194,0,0,44,194,0,0,84,194,0,0,108,194,0,0,140,194,0,0,146,194,0,0,154,194,0,0,158,194,0,0,164,194,0,0,168,194,0,0,174,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,182,194,0,0,152,194,0,0,150,194,0,0,170,194,0,0,186,194,0,0,196,194,0,0,208,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,182,194,0,0,140,194,0,0,140,194,0,0,150,194,0,0,172,194,0,0,178,194,0,0,188,194,0,0,196,194,0,0,202,194,0,0,212,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,190,194,0,0,160,194,0,0,112,194,0,0,130,194,0,0,128,194,0,0,148,194,0,0,166,194,0,0,176,194,0,0,182,194,0,0,190,194,0,0,198,194,0,0,206,194,0,0,214,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,190,194,0,0,160,194,0,0,104,194,0,0,92,194,0,0,68,194,0,0,132,194,0,0,136,194,0,0,142,194,0,0,156,194,0,0,156,194,0,0,160,194,0,0,176,194,0,0,170,194,0,0,178,194,0,0,194,194,0,0,200,194,0,0,210,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,190,194,0,0,160,194,0,0,84,194,0,0,80,194,0,0,36,194,0,0,108,194,0,0,108,194,0,0,68,194,0,0,104,194,0,0,96,194,0,0,124,194,0,0,172,194,0,0,158,194,0,0,180,194,0,0,186,194,0,0,196,194,0,0,206,194,0,0,214,194,0,0,224,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,194,194,0,0,182,194,0,0,146,194,0,0,52,194,0,0,32,194,0,0,4,194,0,0,84,194,0,0,116,194,0,0,68,194,0,0,88,194,0,0,72,194,0,0,72,194,0,0,112,194,0,0,80,194,0,0,134,194,0,0,148,194,0,0,162,194,0,0,184,194,0,0,192,194,0,0,200,194,0,0,210,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,226,194,0,0,212,194,0,0,198,194,0,0,184,194,0,0,154,194,0,0,160,194,0,0,176,194,0,0,194,194,0,0,212,194,0,0,230,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,232,194,0,0,218,194,0,0,204,194,0,0,190,194,0,0,178,194,0,0,148,194,0,0,144,194,0,0,176,194,0,0,174,194,0,0,190,194,0,0,204,194,0,0,218,194,0,0,232,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,232,194,0,0,218,194,0,0,204,194,0,0,190,194,0,0,178,194,0,0,150,194,0,0,132,194,0,0,148,194,0,0,154,194,0,0,156,194,0,0,172,194,0,0,174,194,0,0,180,194,0,0,192,194,0,0,210,194,0,0,230,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,230,194,0,0,216,194,0,0,202,194,0,0,188,194,0,0,176,194,0,0,132,194,0,0,96,194,0,0,116,194,0,0,140,194,0,0,130,194,0,0,156,194,0,0,144,194,0,0,166,194,0,0,168,194,0,0,186,194,0,0,196,194,0,0,210,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,210,194,0,0,190,194,0,0,178,194,0,0,164,194,0,0,100,194,0,0,80,194,0,0,80,194,0,0,108,194,0,0,96,194,0,0,108,194,0,0,104,194,0,0,138,194,0,0,134,194,0,0,176,194,0,0,164,194,0,0,164,194,0,0,178,194,0,0,188,194,0,0,200,194,0,0,216,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,202,194,0,0,192,194,0,0,180,194,0,0,166,194,0,0,154,194,0,0,88,194,0,0,44,194,0,0,24,194,0,0,72,194,0,0,64,194,0,0,80,194,0,0,64,194,0,0,40,194,0,0,40,194,0,0,76,194,0,0,80,194,0,0,84,194,0,0,108,194,0,0,130,194,0,0,142,194,0,0,156,194,0,0,170,194,0,0,190,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,240,194,0,0,210,194,0,0,172,194,0,0,136,194,0,0,156,194,0,0,158,194,0,0,180,194,0,0,200,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,240,194,0,0,210,194,0,0,172,194,0,0,132,194,0,0,146,194,0,0,154,194,0,0,176,194,0,0,192,194,0,0,210,194,0,0,230,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,240,194,0,0,210,194,0,0,184,194,0,0,160,194,0,0,116,194,0,0,128,194,0,0,136,194,0,0,160,194,0,0,174,194,0,0,184,194,0,0,200,194,0,0,220,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,240,194,0,0,208,194,0,0,182,194,0,0,158,194,0,0,80,194,0,0,112,194,0,0,88,194,0,0,128,194,0,0,138,194,0,0,154,194,0,0,160,194,0,0,164,194,0,0,168,194,0,0,170,194,0,0,174,194,0,0,176,194,0,0,180,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,236,194,0,0,200,194,0,0,174,194,0,0,154,194,0,0,68,194,0,0,72,194,0,0,48,194,0,0,104,194,0,0,116,194,0,0,116,194,0,0,134,194,0,0,130,194,0,0,120,194,0,0,120,194,0,0,120,194,0,0,130,194,0,0,136,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,230,194,0,0,196,194,0,0,168,194,0,0,120,194,0,0,68,194,0,0,48,194,0,0,24,194,0,0,56,194,0,0,68,194,0,0,68,194,0,0,56,194,0,0,28,194,0,0,20,194,0,0,28,194,0,0,32,194,0,0,40,194,0,0,44,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,176,194,0,0,148,194,0,0,154,194,0,0,164,194,0,0,164,194,0,0,170,194,0,0,180,194,0,0,188,194,0,0,198,194,0,0,208,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,176,194,0,0,132,194,0,0,140,194,0,0,162,194,0,0,160,194,0,0,162,194,0,0,168,194,0,0,176,194,0,0,182,194,0,0,186,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,176,194,0,0,116,194,0,0,124,194,0,0,140,194,0,0,142,194,0,0,148,194,0,0,154,194,0,0,160,194,0,0,166,194,0,0,170,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,172,194,0,0,120,194,0,0,124,194,0,0,120,194,0,0,120,194,0,0,104,194,0,0,80,194,0,0,72,194,0,0,72,194,0,0,80,194,0,0,88,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,236,194,0,0,216,194,0,0,168,194,0,0,84,194,0,0,72,194,0,0,72,194,0,0,72,194,0,0,92,194,0,0,60,194,0,0,52,194,0,0,32,194,0,0,32,194,0,0,32,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,236,194,0,0,200,194,0,0,146,194,0,0,44,194,0,0,20,194,0,0,40,194,0,0,44,194,0,0,84,194,0,0,24,194,0,0,20,194,0,0,12,194,0,0,12,194,0,0,24,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,200,194,0,0,182,194,0,0,168,194,0,0,148,194,0,0,160,194,0,0,160,194,0,0,160,194,0,0,160,194,0,0,160,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,200,194,0,0,182,194,0,0,168,194,0,0,148,194,0,0,136,194,0,0,136,194,0,0,136,194,0,0,136,194,0,0,136,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,200,194,0,0,172,194,0,0,156,194,0,0,140,194,0,0,112,194,0,0,52,194,0,0,240,193,0,0,168,193,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,200,194,0,0,174,194,0,0,156,194,0,0,134,194,0,0,64,194,0,0,24,194,0,0,232,193,0,0,168,193,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,200,194,0,0,172,194,0,0,138,194,0,0,96,194,0,0,52,194,0,0,12,194,0,0,4,194,0,0,232,193,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,0,220,194,0,0,200,194,0,0,166,194,0,0,142,194,0,0,64,194,0,0,216,193,0,0,24,194,0,0,20,194,0,0,8,194,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,0,192,121,196,212,236,0,0,184,232,0,0,240,236,0,0,16,237,0,0,48,237,0,0,4,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,62,180,228,51,9,145,243,51,139,178,1,52,60,32,10,52,35,26,19,52,96,169,28,52,167,215,38,52,75,175,49,52,80,59,61,52,112,135,73,52,35,160,86,52,184,146,100,52,85,109,115,52,136,159,129,52,252,11,138,52,147,4,147,52,105,146,156,52,50,191,166,52,63,149,177,52,147,31,189,52,228,105,201,52,173,128,214,52,54,113,228,52,166,73,243,52,136,140,1,53,192,247,9,53,6,239,18,53,118,123,28,53,192,166,38,53,55,123,49,53,218,3,61,53,94,76,73,53,59,97,86,53,185,79,100,53,252,37,115,53,138,121,129,53,134,227,137,53,124,217,146,53,133,100,156,53,82,142,166,53,51,97,177,53,37,232,188,53,220,46,201,53,206,65,214,53,65,46,228,53,87,2,243,53,143,102,1,54,79,207,9,54,245,195,18,54,152,77,28,54,232,117,38,54,50,71,49,54,116,204,60,54,94,17,73,54,101,34,86,54,206,12,100,54,184,222,114,54,151,83,129,54,28,187,137,54,114,174,146,54,175,54,156,54,129,93,166,54,53,45,177,54,199,176,188,54,228,243,200,54,1,3,214,54,96,235,227,54,30,187,242,54,162,64,1,55,235,166,9,55,241,152,18,55,201,31,28,55,30,69,38,55,61,19,49,55,30,149,60,55,111,214,72,55,162,227,85,55,247,201,99,55,137,151,114,55,175,45,129,55,190,146,137,55,116,131,146,55,230,8,156,55,190,44,166,55,71,249,176,55,121,121,188,55,254,184,200,55,71,196,213,55,146,168,227,55,248,115,242,55,192,26,1,56,147,126,9,56,249,109,18,56,6,242,27,56,98,20,38,56,86,223,48,56,216,93,60,56,146,155,72,56,242,164,85,56,51,135,99,56,110,80,114,56,211,7,129,56,107,106,137,56,130,88,146,56,42,219,155,56,9,252,165,56,104,197,176,56,59,66,188,56,41,126,200,56,160,133,213,56,217,101,227,56,232,44,242,56,233,244,0,57,70,86,9,57,14,67,18,57,81,196,27,57,181,227,37,57,127,171,48,57,162,38,60,57,197,96,72,57,83,102,85,57,131,68,99,57,104,9,114,57,1,226,128,57,36,66,137,57,157,45,146,57,123,173,155,57,99,203,165,57,153,145,176,57,13,11,188,57,102,67,200,57,11,71,213,57,50,35,227,57,237,229,241,57,29,207,0,58,5,46,9,58,48,24,18,58,169,150,27,58,21,179,37,58,183,119,48,58,124,239,59,58,10,38,72,58,199,39,85,58,230,1,99,58,120,194,113,58,59,188,128,58,233,25,137,58,198,2,146,58,219,127,155,58,203,154,165,58,216,93,176,58,239,211,187,58,179,8,200,58,136,8,213,58,159,224,226,58,7,159,241,58,92,169,0,59,208,5,9,59,94,237,17,59,15,105,27,59,132,130,37,59,253,67,48,59,103,184,59,59,97,235,71,59,77,233,84,59,93,191,98,59,156,123,113,59,127,150,128,59,186,241,136,59,249,215,145,59,71,82,155,59,65,106,165,59,39,42,176,59,226,156,187,59,18,206,199,59,23,202,212,59,32,158,226,59,53,88,241,59,166,131,0,60,167,221,8,60,152,194,17,60,130,59,27,60,1,82,37,60,84,16,48,60,97,129,59,60,200,176,71,60,229,170,84,60,232,124,98,60,212,52,113,60,207,112,128,60,150,201,136,60,58,173,145,60,192,36,155,60,197,57,165,60,133,246,175,60,229,101,187,60,130,147,199,60,185,139,212,60,180,91,226,60,121,17,241,60,251,93,0,61,137,181,8,61,223,151,17,61,2,14,27,61,141,33,37,61,185,220,47,61,109,74,59,61,64,118,71,61,145,108,84,61,133,58,98,61,34,238,112,61,42,75,128,61,127,161,136,61,136,130,145,61,72,247,154,61,88,9,165,61,242,194,175,61,248,46,187,61,3,89,199,61,109,77,212,61,92,25,226,61,209,202,240,61,91,56,0,62,119,141,8,62,51,109,17,62,144,224,26,62,39,241,36,62,46,169,47,62,135,19,59,62,202,59,71,62,77,46,84,62,55,248,97,62,132,167,112,62,143,37,128,62,115,121,136,62,226,87,145,62,220,201,154,62,249,216,164,62,109,143,175,62,27,248,186,62,149,30,199,62,51,15,212,62,23,215,225,62,61,132,240,62,198,18,0,63,114,101,8,63,147,66,17,63,43,179,26,63,206,192,36,63,177,117,47,63,178,220,58,63,101,1,71,63,29,240,83,63,251,181,97,63,251,96,112,63,0,0,128,63,0,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,19,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,19,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,184,237,0,0,208,0,2,0,12,165,2,0,164,22,3,0,64,23,3,0,220,23,3,0,232,57,3,0,148,74,3,0,48,75,3,0,204,75,3,0,144,92,3,0,0,102,3,0,28,106,3,0,184,106,3,0,84,107,3,0,240,107,3,0,140,108,3,0,0,0,0,0,11,0,0,0,160,2,0,0,0,3,0,0,2,0,0,0,64,156,0,0,80,195,0,0,84,238,0,0,128,238,0,0,172,238,0,0,156,239,0,0,204,239,0,0,252,239,0,0,44,243,0,0,252,239,0,0,92,246,0,0,140,246,0,0,28,0,1,0,172,9,1,0,60,19,1,0,204,28,1,0,252,28,1,0,96,3,0,0,192,3,0,0,188,32,1,0,232,32,1,0,20,33,1,0,64,33,1,0,32,4,0,0,108,33,1,0,156,33,1,0,120,4,0,0,204,33,1,0,216,4,0,0,104,43,1,0,168,54,1,0,128,71,1,0,2,0,0,0,160,119,1,0,48,120,1,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,16,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,35,0,0,0,21,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,20,0,0,0,8,0,0,0,0,0,0,192,0,0,160,63,25,0,0,0,12,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,9,0,0,0,253,255,255,255,0,0,0,0,0,0,0,0,20,0,0,0,9,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,20,0,0,0,9,0,0,0,252,255,255,255,0,0,0,0,0,0,0,0,20,0,0,0,6,0,0,0,250,255,255,255,0,0,0,0,0,0,0,0,20,0,0,0,3,0,0,0,246,255,255,255,0,0,0,0,0,0,0,0,18,0,0,0,1,0,0,0,242,255,255,255,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,240,255,255,255,0,0,0,0,0,0,0,0,18,0,0,0,254,255,255,255,240,255,255,255,0,0,0,0,0,0,0,0,12,0,0,0,254,255,255,255,236,255,255,255,0,0,0,0,0,0,0,0,90,0,0,0,90,0,0,0,95,0,0,0,95,0,0,0,95,0,0,0,95,0,0,0,105,0,0,0,105,0,0,0,105,0,0,0,105,0,0,0,105,0,0,0,105,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,232,255,255,255,226,255,255,255,216,255,255,255,216,255,255,255,211,255,255,255,211,255,255,255,211,255,255,255,253,255,255,255,248,255,255,255,243,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+51200);
/* memory initializer */ allocate([241,255,255,255,246,255,255,255,246,255,255,255,247,255,255,255,247,255,255,255,247,255,255,255,247,255,255,255,247,255,255,255,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,252,255,255,255,246,255,255,255,242,255,255,255,240,255,255,255,242,255,255,255,243,255,255,255,244,255,255,255,244,255,255,255,245,255,255,255,245,255,255,255,246,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,255,255,255,244,255,255,255,242,255,255,255,240,255,255,255,241,255,255,255,241,255,255,255,242,255,255,255,243,255,255,255,243,255,255,255,244,255,255,255,244,255,255,255,254,255,255,255,254,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,244,255,255,255,243,255,255,255,242,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,243,255,255,255,244,255,255,255,244,255,255,255,251,255,255,255,254,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,241,255,255,255,241,255,255,255,241,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,242,255,255,255,243,255,255,255,243,255,255,255,243,255,255,255,246,255,255,255,252,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,242,255,255,255,243,255,255,255,245,255,255,255,246,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,242,255,255,255,243,255,255,255,245,255,255,255,246,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,244,255,255,255,248,255,255,255,252,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,244,255,255,255,247,255,255,255,252,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,244,255,255,255,247,255,255,255,252,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,244,255,255,255,247,255,255,255,252,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,244,255,255,255,247,255,255,255,252,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,253,255,255,255,248,255,255,255,243,255,255,255,241,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,246,255,255,255,242,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,243,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,245,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,250,255,255,255,244,255,255,255,242,255,255,255,240,255,255,255,241,255,255,255,241,255,255,255,242,255,255,255,243,255,255,255,243,255,255,255,244,255,255,255,244,255,255,255,254,255,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,244,255,255,255,243,255,255,255,242,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,243,255,255,255,244,255,255,255,244,255,255,255,250,255,255,255,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,241,255,255,255,241,255,255,255,241,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,242,255,255,255,243,255,255,255,243,255,255,255,243,255,255,255,246,255,255,255,252,255,255,255,254,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,242,255,255,255,243,255,255,255,245,255,255,255,246,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,242,255,255,255,243,255,255,255,245,255,255,255,246,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,244,255,255,255,248,255,255,255,252,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,244,255,255,255,247,255,255,255,252,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,244,255,255,255,247,255,255,255,252,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,244,255,255,255,247,255,255,255,252,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,241,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,244,255,255,255,247,255,255,255,252,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,3,0,0,0,3,0,0,0,15,0,0,0,3,0,0,0,3,0,0,0,15,0,0,0,10,0,0,0,10,0,0,0,100,0,0,0,10,0,0,0,10,0,0,0,100,0,0,0,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,20,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,236,255,255,255,240,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,254,255,255,255,2,0,0,0,2,0,0,0,3,0,0,0,6,0,0,0,6,0,0,0,15,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,252,255,255,255,254,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,20,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,250,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,6,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,252,255,255,255,254,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,248,255,255,255,250,255,255,255,252,255,255,255,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,20,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,252,255,255,255,252,255,255,255,254,255,255,255,254,255,255,255,254,255,255,255,254,255,255,255,2,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,248,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,252,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,246,255,255,255,248,255,255,255,250,255,255,255,254,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,8,0,0,0,10,0,0,0,10,0,0,0,16,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,254,255,255,255,0,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,252,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,246,255,255,255,248,255,255,255,250,255,255,255,254,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,6,0,0,0,8,0,0,0,8,0,0,0,14,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,254,255,255,255,0,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,252,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,244,255,255,255,246,255,255,255,250,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,6,0,0,0,6,0,0,0,12,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,254,255,255,255,0,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,252,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,238,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,6,0,0,0,11,0,0,0,224,255,255,255,224,255,255,255,224,255,255,255,224,255,255,255,228,255,255,255,232,255,255,255,234,255,255,255,240,255,255,255,246,255,255,255,250,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,252,255,255,255,254,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,226,255,255,255,230,255,255,255,232,255,255,255,238,255,255,255,242,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,246,255,255,255,247,255,255,255,251,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,238,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,6,0,0,0,11,0,0,0,222,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,242,255,255,255,242,255,255,255,244,255,255,255,220,255,255,255,220,255,255,255,220,255,255,255,220,255,255,255,220,255,255,255,222,255,255,255,228,255,255,255,232,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,238,255,255,255,240,255,255,255,234,255,255,255,234,255,255,255,234,255,255,255,234,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,6,0,0,0,11,0,0,0,222,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,232,255,255,255,234,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,224,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,234,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,0,0,3,0,0,0,5,0,0,0,10,0,0,0,222,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,224,255,255,255,224,255,255,255,226,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,232,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,224,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,236,255,255,255,242,255,255,255,248,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,254,255,255,255,2,0,0,0,220,255,255,255,220,255,255,255,220,255,255,255,220,255,255,255,222,255,255,255,224,255,255,255,224,255,255,255,226,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,224,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,236,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,242,255,255,255,244,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,221,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,20,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,236,255,255,255,240,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,254,255,255,255,2,0,0,0,2,0,0,0,3,0,0,0,6,0,0,0,6,0,0,0,15,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,252,255,255,255,254,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,20,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,254,255,255,255,2,0,0,0,3,0,0,0,6,0,0,0,6,0,0,0,8,0,0,0,10,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,254,255,255,255,0,0,0,0,2,0,0,0,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,248,255,255,255,250,255,255,255,252,255,255,255,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,20,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,252,255,255,255,254,255,255,255,0,0,0,0,242,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,246,255,255,255,248,255,255,255,250,255,255,255,254,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,8,0,0,0,10,0,0,0,10,0,0,0,16,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,6,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,252,255,255,255,254,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,246,255,255,255,248,255,255,255,250,255,255,255,254,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,6,0,0,0,8,0,0,0,8,0,0,0,14,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,2,0,0,0,6,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,252,255,255,255,254,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,244,255,255,255,246,255,255,255,250,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,6,0,0,0,6,0,0,0,12,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,2,0,0,0,6,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,252,255,255,255,254,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,238,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,6,0,0,0,6,0,0,0,12,0,0,0,224,255,255,255,224,255,255,255,224,255,255,255,224,255,255,255,228,255,255,255,232,255,255,255,234,255,255,255,240,255,255,255,244,255,255,255,250,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,254,255,255,255,0,0,0,0,4,0,0,0,222,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,226,255,255,255,230,255,255,255,232,255,255,255,238,255,255,255,242,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,251,255,255,255,253,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,238,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,6,0,0,0,6,0,0,0,12,0,0,0,222,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,242,255,255,255,248,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,253,255,255,255,255,255,255,255,4,0,0,0,222,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,226,255,255,255,230,255,255,255,236,255,255,255,240,255,255,255,243,255,255,255,243,255,255,255,243,255,255,255,243,255,255,255,243,255,255,255,245,255,255,255,248,255,255,255,250,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,238,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,6,0,0,0,6,0,0,0,12,0,0,0,222,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,240,255,255,255,246,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,251,255,255,255,253,255,255,255,1,0,0,0,222,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,224,255,255,255,224,255,255,255,228,255,255,255,234,255,255,255,238,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,242,255,255,255,244,255,255,255,246,255,255,255,234,255,255,255,234,255,255,255,234,255,255,255,234,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,5,0,0,0,5,0,0,0,11,0,0,0,222,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,240,255,255,255,244,255,255,255,246,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,249,255,255,255,251,255,255,255,254,255,255,255,220,255,255,255,220,255,255,255,220,255,255,255,220,255,255,255,220,255,255,255,222,255,255,255,228,255,255,255,234,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,240,255,255,255,242,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,236,255,255,255,242,255,255,255,248,255,255,255,254,255,255,255,254,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,2,0,0,0,6,0,0,0,220,255,255,255,220,255,255,255,220,255,255,255,220,255,255,255,222,255,255,255,224,255,255,255,224,255,255,255,232,255,255,255,240,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,246,255,255,255,248,255,255,255,251,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,224,255,255,255,230,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,236,255,255,255,238,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,236,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,246,255,255,255,248,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,221,255,255,255,226,255,255,255,231,255,255,255,231,255,255,255,231,255,255,255,231,255,255,255,231,255,255,255,231,255,255,255,241,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,20,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,236,255,255,255,240,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,254,255,255,255,2,0,0,0,2,0,0,0,3,0,0,0,6,0,0,0,6,0,0,0,15,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,252,255,255,255,254,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,244,255,255,255,250,255,255,255,252,255,255,255,0,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,8,0,0,0,10,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,248,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,6,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,254,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,244,255,255,255,246,255,255,255,248,255,255,255,0,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,8,0,0,0,10,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,254,255,255,255,254,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,1,0,0,0,4,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,252,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,244,255,255,255,246,255,255,255,248,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,10,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,254,255,255,255,255,255,255,255,0,0,0,0,3,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,248,255,255,255,249,255,255,255,252,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,244,255,255,255,246,255,255,255,248,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,8,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,254,255,255,255,0,0,0,0,2,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,252,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,238,255,255,255,242,255,255,255,248,255,255,255,255,255,255,255,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,7,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,254,255,255,255,255,255,255,255,1,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,252,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,236,255,255,255,238,255,255,255,242,255,255,255,248,255,255,255,255,255,255,255,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,7,0,0,0,224,255,255,255,224,255,255,255,224,255,255,255,224,255,255,255,228,255,255,255,232,255,255,255,234,255,255,255,240,255,255,255,244,255,255,255,250,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,253,255,255,255,255,255,255,255,0,0,0,0,222,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,226,255,255,255,232,255,255,255,232,255,255,255,238,255,255,255,242,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,246,255,255,255,246,255,255,255,247,255,255,255,251,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,236,255,255,255,238,255,255,255,242,255,255,255,248,255,255,255,255,255,255,255,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,7,0,0,0,224,255,255,255,224,255,255,255,224,255,255,255,224,255,255,255,228,255,255,255,232,255,255,255,232,255,255,255,238,255,255,255,242,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,251,255,255,255,254,255,255,255,0,0,0,0,222,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,226,255,255,255,230,255,255,255,230,255,255,255,232,255,255,255,234,255,255,255,237,255,255,255,237,255,255,255,237,255,255,255,237,255,255,255,238,255,255,255,239,255,255,255,240,255,255,255,244,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,236,255,255,255,238,255,255,255,242,255,255,255,248,255,255,255,255,255,255,255,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,7,0,0,0,224,255,255,255,224,255,255,255,224,255,255,255,224,255,255,255,228,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,238,255,255,255,242,255,255,255,244,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,250,255,255,255,254,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,222,255,255,255,226,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,236,255,255,255,240,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,234,255,255,255,236,255,255,255,241,255,255,255,246,255,255,255,248,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,7,0,0,0,220,255,255,255,220,255,255,255,220,255,255,255,220,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,242,255,255,255,244,255,255,255,246,255,255,255,249,255,255,255,220,255,255,255,220,255,255,255,220,255,255,255,220,255,255,255,222,255,255,255,226,255,255,255,228,255,255,255,230,255,255,255,232,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,236,255,255,255,242,255,255,255,248,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,254,255,255,255,2,0,0,0,218,255,255,255,218,255,255,255,218,255,255,255,218,255,255,255,220,255,255,255,222,255,255,255,222,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,238,255,255,255,240,255,255,255,244,255,255,255,246,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,218,255,255,255,221,255,255,255,221,255,255,255,221,255,255,255,221,255,255,255,221,255,255,255,221,255,255,255,221,255,255,255,221,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,228,255,255,255,236,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,244,255,255,255,246,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,221,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,236,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,10,0,0,0,10,0,0,0,12,0,0,0,20,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,246,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,6,0,0,0,15,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,246,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,254,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,2,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,8,0,0,0,10,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,242,255,255,255,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,6,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,242,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,254,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,252,255,255,255,0,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,8,0,0,0,10,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,254,255,255,255,254,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,1,0,0,0,4,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,252,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,10,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,254,255,255,255,255,255,255,255,0,0,0,0,3,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,252,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,8,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,254,255,255,255,0,0,0,0,2,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,251,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,252,255,255,255,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,7,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,252,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,253,255,255,255,254,255,255,255,255,255,255,255,1,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,249,255,255,255,241,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+61440);
/* memory initializer */ allocate([241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,252,255,255,255,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,7,0,0,0,234,255,255,255,234,255,255,255,234,255,255,255,234,255,255,255,234,255,255,255,234,255,255,255,234,255,255,255,240,255,255,255,244,255,255,255,250,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,253,255,255,255,255,255,255,255,0,0,0,0,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,238,255,255,255,242,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,244,255,255,255,246,255,255,255,246,255,255,255,247,255,255,255,248,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,252,255,255,255,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,7,0,0,0,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,238,255,255,255,242,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,251,255,255,255,254,255,255,255,0,0,0,0,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,238,255,255,255,240,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,243,255,255,255,243,255,255,255,244,255,255,255,246,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,252,255,255,255,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,7,0,0,0,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,238,255,255,255,242,255,255,255,246,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,252,255,255,255,0,0,0,0,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,237,255,255,255,237,255,255,255,237,255,255,255,237,255,255,255,238,255,255,255,239,255,255,255,240,255,255,255,244,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,252,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,7,0,0,0,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,236,255,255,255,240,255,255,255,244,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,250,255,255,255,254,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,228,255,255,255,230,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,236,255,255,255,240,255,255,255,234,255,255,255,234,255,255,255,234,255,255,255,234,255,255,255,234,255,255,255,234,255,255,255,234,255,255,255,238,255,255,255,242,255,255,255,248,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,252,255,255,255,254,255,255,255,2,0,0,0,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,234,255,255,255,238,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,240,255,255,255,242,255,255,255,244,255,255,255,246,255,255,255,249,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,238,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,242,255,255,255,244,255,255,255,246,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,236,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,216,255,255,255,236,255,255,255,236,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,232,255,255,255,226,255,255,255,216,255,255,255,216,255,255,255,211,255,255,255,211,255,255,255,211,255,255,255,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,17,0,0,0,17,0,0,0,18,0,0,0,18,0,0,0,19,0,0,0,19,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,14,0,0,0,14,0,0,0,14,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,16,0,0,0,16,0,0,0,17,0,0,0,17,0,0,0,17,0,0,0,18,0,0,0,18,0,0,0,19,0,0,0,19,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,7,0,0,0,6,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,32,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,32,0,0,0,15,39,0,0,15,39,0,0,15,39,0,0,15,39,0,0,15,39,0,0,15,39,0,0,0,1,0,0,128,0,0,0,128,0,0,0,0,1,0,0,0,2,0,0,15,39,0,0,15,39,0,0,15,39,0,0,15,39,0,0,15,39,0,0,15,39,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,156,255,255,255,156,255,255,255,156,255,255,255,156,255,255,255,156,255,255,255,156,255,255,255,151,255,255,255,151,255,255,255,151,255,255,255,151,255,255,255,146,255,255,255,136,255,255,255,126,255,255,255,126,255,255,255,126,255,255,255,126,255,255,255,116,255,255,255,116,255,255,255,116,255,255,255,116,255,255,255,116,255,255,255,116,255,255,255,116,255,255,255,106,255,255,255,8,0,0,0,0,0,160,65,0,0,96,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,112,194,0,0,240,193,0,0,32,194,0,0,32,194,0,0,32,194,0,0,32,194,0,0,32,194,0,0,0,64,0,0,150,194,0,0,192,192,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,96,65,0,0,32,65,0,0,32,65,0,0,32,65,0,0,32,65,0,0,32,65,0,0,32,65,0,0,32,194,0,0,240,193,0,0,200,193,0,0,200,193,0,0,200,193,0,0,200,193,0,0,200,193,0,0,0,64,0,0,160,194,0,0,192,192,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,64,65,0,0,32,65,0,0,32,65,0,0,32,65,0,0,32,65,0,0,32,65,0,0,32,65,0,0,160,193,0,0,160,193,0,0,112,193,0,0,112,193,0,0,112,193,0,0,112,193,0,0,112,193,0,0,0,0,0,0,160,194,0,0,192,192,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,32,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,160,193,0,0,112,193,0,0,64,193,0,0,64,193,0,0,64,193,0,0,64,193,0,0,64,193,0,0,0,0,0,0,160,194,0,0,192,192,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,32,65,0,0,192,64,0,0,192,64,0,0,192,64,0,0,192,64,0,0,192,64,0,0,192,64,0,0,112,193,0,0,112,193,0,0,64,193,0,0,64,193,0,0,64,193,0,0,64,193,0,0,64,193,0,0,0,0,0,0,170,194,0,0,192,192,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,5,0,0,0,4,0,0,0,3,0,0,0,0,0,128,63,0,0,0,64,0,0,64,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,160,64,0,0,192,64,0,0,224,64,0,0,0,65,0,0,0,65,0,0,0,65,0,0,64,65,0,0,72,65,0,0,80,65,0,0,88,65,0,0,96,65,0,0,104,65,0,0,112,65,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,3,0,0,0,0,0,128,63,0,0,0,64,0,0,64,64,0,0,128,64,0,0,128,64,0,0,160,64,0,0,192,64,0,0,192,64,0,0,192,64,0,0,192,64,0,0,192,64,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,64,65,0,0,72,65,0,0,80,65,0,0,88,65,0,0,96,65,0,0,104,65,0,0,112,65,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,3,0,0,0,0,0,128,63,0,0,0,64,0,0,64,64,0,0,128,64,0,0,128,64,0,0,160,64,0,0,192,64,0,0,192,64,0,0,192,64,0,0,192,64,0,0,192,64,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,0,0,64,64,0,0,128,64,0,0,128,64,0,0,160,64,0,0,160,64,0,0,192,64,0,0,192,64,0,0,192,64,0,0,192,64,0,0,192,64,0,0,192,64,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,0,0,128,64,0,0,128,64,0,0,160,64,0,0,192,64,0,0,192,64,0,0,192,64,0,0,192,64,0,0,192,64,0,0,0,65,0,0,0,65,0,0,32,65,0,0,32,65,0,0,32,65,0,0,32,65,0,0,32,65,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,2,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,192,64,0,0,192,64,0,0,192,64,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,32,65,0,0,32,65,0,0,32,65,0,0,32,65,0,0,32,65,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,2,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,64,0,0,224,64,0,0,0,65,0,0,0,65,0,0,0,65,0,0,32,65,0,0,32,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,65,0,0,0,65,0,0,32,65,0,0,32,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,65,0,0,32,65,0,0,32,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,32,65,0,0,32,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,64,65,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,212,54,1,0,176,55,1,0,140,56,1,0,236,57,1,0,76,59,1,0,92,61,1,0,108,63,1,0,72,64,1,0,220,66,1,0,112,69,1,0,144,84,8,0,232,54,1,0,16,55,1,0,56,55,1,0,96,55,1,0,136,55,1,0,1,0,0,0,0,1,0,0,85,109,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,85,110,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,10,0,0,0,89,110,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,25,0,0,0,99,110,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,64,0,0,0,124,110,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,55,1,0,236,55,1,0,20,56,1,0,60,56,1,0,100,56,1,0,1,0,0,0,0,1,0,0,188,110,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,188,111,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,10,0,0,0,192,111,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,25,0,0,0,202,111,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,64,0,0,0,227,111,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,56,1,0,212,56,1,0,252,56,1,0,36,57,1,0,76,57,1,0,116,57,1,0,156,57,1,0,196,57,1,0,1,0,0,0,64,0,0,0,35,112,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,99,112,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,9,0,0,0,99,113,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,25,0,0,0,108,113,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,64,0,0,0,133,113,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,9,0,0,0,197,113,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,25,0,0,0,206,113,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,64,0,0,0,231,113,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,58,1,0,52,58,1,0,92,58,1,0,132,58,1,0,172,58,1,0,212,58,1,0,252,58,1,0,36,59,1,0,1,0,0,0,64,0,0,0,39,114,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,103,114,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,9,0,0,0,103,115,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,25,0,0,0,112,115,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,64,0,0,0,137,115,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,9,0,0,0,201,115,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,25,0,0,0,210,115,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,64,0,0,0,235,115,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,59,1,0,164,59,1,0,204,59,1,0,244,59,1,0,28,60,1,0,68,60,1,0,108,60,1,0,148,60,1,0,188,60,1,0,228,60,1,0,12,61,1,0,52,61,1,0,1,0,0,0,8,0,0,0,43,116,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,64,0,0,0,51,116,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,64,0,0,0,115,116,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,179,116,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,32,0,0,0,51,117,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,83,117,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,18,0,0,0,211,117,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,50,0,0,0,229,117,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,23,118,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,18,0,0,0,151,118,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,50,0,0,0,169,118,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,219,118,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,61,1,0,180,61,1,0,220,61,1,0,4,62,1,0,44,62,1,0,84,62,1,0,124,62,1,0,164,62,1,0,204,62,1,0,244,62,1,0,28,63,1,0,68,63,1,0,1,0,0,0,8,0,0,0,91,119,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,64,0,0,0,99,119,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,64,0,0,0,163,119,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,227,119,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,32,0,0,0,99,120,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,131,120,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,18,0,0,0,3,121,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,50,0,0,0,21,121,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,71,121,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,18,0,0,0,199,121,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,50,0,0,0,217,121,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,11,122,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,1,0,168,63,1,0,208,63,1,0,248,63,1,0,32,64,1,0,1,0,0,0,0,1,0,0,139,122,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,139,123,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,10,0,0,0,143,123,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,25,0,0,0,153,123,3], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+71680);
/* memory initializer */ allocate([1,0,0,0,64,0,0,0,178,123,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,64,1,0,172,64,1,0,212,64,1,0,252,64,1,0,36,65,1,0,76,65,1,0,116,65,1,0,156,65,1,0,196,65,1,0,236,65,1,0,20,66,1,0,60,66,1,0,100,66,1,0,140,66,1,0,180,66,1,0,1,0,0,0,16,0,0,0,242,123,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,2,124,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,10,124,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,64,0,0,0,10,125,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,74,125,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,32,0,0,0,202,125,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,234,125,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,32,0,0,0,106,126,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,138,126,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,18,0,0,0,10,127,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,50,0,0,0,28,127,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,78,127,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,18,0,0,0,206,127,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,50,0,0,0,224,127,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,18,128,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,67,1,0,64,67,1,0,104,67,1,0,144,67,1,0,184,67,1,0,224,67,1,0,8,68,1,0,48,68,1,0,88,68,1,0,128,68,1,0,168,68,1,0,208,68,1,0,248,68,1,0,32,69,1,0,72,69,1,0,1,0,0,0,16,0,0,0,146,128,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,162,128,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,170,128,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,64,0,0,0,170,129,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,234,129,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,32,0,0,0,106,130,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,138,130,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,32,0,0,0,10,131,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,42,131,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,18,0,0,0,170,131,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,50,0,0,0,188,131,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,238,131,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,18,0,0,0,110,132,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,50,0,0,0,128,132,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,178,132,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,69,1,0,200,69,1,0,240,69,1,0,24,70,1,0,64,70,1,0,104,70,1,0,144,70,1,0,184,70,1,0,224,70,1,0,8,71,1,0,48,71,1,0,88,71,1,0,1,0,0,0,8,0,0,0,50,133,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,64,0,0,0,58,133,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,64,0,0,0,122,133,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,186,133,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,32,0,0,0,58,134,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,90,134,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,18,0,0,0,218,134,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,50,0,0,0,236,134,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,30,135,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,18,0,0,0,158,135,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,50,0,0,0,176,135,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,226,135,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,128,0,0,0,33,0,0,0,8,0,0,0,16,0,0,0,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,66,0,0,240,65,0,0,250,67,0,0,128,63,0,0,144,65,128,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,1,0,0,66,0,0,0,16,0,0,0,32,0,0,0,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,66,0,0,240,65,0,0,250,67,0,0,128,63,0,0,144,65,0,1,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,5,0,0,0,6,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,128,0,0,0,14,0,0,0,4,0,0,0,58,0,0,0,2,0,0,0,8,0,0,0,28,0,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,66,0,0,240,65,0,0,250,67,0,0,128,63,0,0,144,65,128,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,5,0,0,0,6,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,1,0,0,28,0,0,0,8,0,0,0,116,0,0,0,4,0,0,0,16,0,0,0,56,0,0,0,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,66,0,0,240,65,0,0,250,67,0,0,128,63,0,0,144,65,0,1,0,0,4,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,6,0,0,0,7,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,128,0,0,0,8,0,0,0,33,0,0,0,4,0,0,0,16,0,0,0,70,0,0,0,2,0,0,0,6,0,0,0,12,0,0,0,23,0,0,0,46,0,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,66,0,0,240,65,0,0,250,67,0,0,128,63,0,0,144,65,128,0,0,0,6,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,6,0,0,0,7,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,128,0,0,0,12,0,0,0,46,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,23,0,0,0,33,0,0,0,70,0,0,0,2,0,0,0,6,0,0,0,10,0,0,0,14,0,0,0,19,0,0,0,28,0,0,0,39,0,0,0,58,0,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,66,0,0,240,65,0,0,250,67,0,0,128,63,0,0,144,65,128,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,1,0,0,66,0,0,0,16,0,0,0,32,0,0,0,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,66,0,0,240,65,0,0,250,67,0,0,128,63,0,0,144,65,0,1,0,0,8,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,12,0,0,0,13,0,0,0,14], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+81944);
/* memory initializer */ allocate([2,0,0,0,0,0,0,0,0,4,0,0,93,0,0,0,23,0,0,0,116,1,0,0,6,0,0,0,46,0,0,0,186,0,0,0,238,2,0,0,14,0,0,0,33,0,0,0,65,0,0,0,130,0,0,0,4,1,0,0,44,2,0,0,3,0,0,0,10,0,0,0,18,0,0,0,28,0,0,0,39,0,0,0,55,0,0,0,79,0,0,0,111,0,0,0,158,0,0,0,220,0,0,0,56,1,0,0,208,1,0,0,138,2,0,0,82,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,66,0,0,240,65,0,0,250,67,0,0,64,64,0,0,144,65,0,4,0,0,8,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,12,0,0,0,13,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,8,0,0,186,0,0,0,46,0,0,0,232,2,0,0,12,0,0,0,92,0,0,0,116,1,0,0,220,5,0,0,28,0,0,0,66,0,0,0,130,0,0,0,4,1,0,0,8,2,0,0,88,4,0,0,6,0,0,0,20,0,0,0,36,0,0,0,56,0,0,0,78,0,0,0,110,0,0,0,158,0,0,0,222,0,0,0,60,1,0,0,184,1,0,0,112,2,0,0,160,3,0,0,20,5,0,0,164,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,66,0,0,240,65,0,0,250,67,0,0,64,64,0,0,144,65,0,8,0,0,6,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,6,0,0,0,7,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,2,0,0,46,0,0,0,186,0,0,0,16,0,0,0,33,0,0,0,65,0,0,0,93,0,0,0,130,0,0,0,22,1,0,0,7,0,0,0,23,0,0,0,39,0,0,0,55,0,0,0,79,0,0,0,110,0,0,0,156,0,0,0,232,0,0,0,104,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,66,0,0,240,65,0,0,250,67,0,0,128,63,0,0,144,65,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,66,0,0,240,65,0,0,250,67,0,0,128,63,0,0,144,65,10,0,0,0,172,119,1,0,216,119,1,0,4,120,1,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,8,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,136,120,1,0,152,145,1,0,136,120,1,0,80,166,1,0,136,120,1,0,240,175,1,0,136,120,1,0,192,185,1,0,136,120,1,0,28,202,1,0,136,120,1,0,104,207,1,0,136,120,1,0,196,212,1,0,136,120,1,0,48,218,1,0,136,120,1,0,20,236,1,0,136,120,1,0,224,242,1,0,136,120,1,0,212,249,1,0,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+92504);
/* memory initializer */ allocate([1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+97540);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+98568);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+100620);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,32,0,0,0,216,145,1,0,240,156,1,0,24,157,1,0,64,157,1,0,152,161,1,0,2,0,0,0,0,0,0,0,32,0,0,0,216,145,1,0,0,166,1,0,40,166,1,0,64,157,1,0,152,161,1,0,0,0,0,0,255,255,255,255,255,255,255,255,9,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+101776);
/* memory initializer */ allocate([1,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,3,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,81,0,0,0,98,136,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,81,0,0,0,179,136,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,158,1,0,0,0,0,0,0,0,0,0,0,0,0,0,52,158,1,0,0,0,0,0,0,0,0,0,0,0,0,0,112,158,1,0,0,0,0,0,0,0,0,0,0,0,0,0,188,158,1,0,0,0,0,0,0,0,0,0,0,0,0,0,8,159,1,0,0,0,0,0,116,159,1,0,168,159,1,0,0,0,0,0,0,0,0,0,252,159,1,0,88,160,1,0,0,0,0,0,0,0,0,0,148,160,1,0,208,160,1,0,44,161,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,161,25,0,0,4,137,3,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,40,158,1,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,165,162,3,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,92,158,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,22,165,3,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,152,158,1,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,81,0,0,0,103,165,3,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,228,158,1,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,33,1,0,0,184,165,3,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,48,159,1,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,4,0,0,0,81,0,0,0,217,166,3,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,156,159,1,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,121,0,0,0,42,167,3,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,208,159,1,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,169,0,0,0,163,167,3,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,36,160,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,76,168,3,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,128,160,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,113,2,0,0,101,168,3,0,1,0,0,0,0,160,27,225,0,160,251,96,3,0,0,0,0,0,0,0,188,160,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,169,0,0,0,214,170,3,0,1,0,0,0,0,128,217,224,0,0,145,96,4,0,0,0,0,0,0,0,248,160,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,33,1,0,0,127,171,3,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,84,161,1,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,162,1,0,0,0,0,0,0,0,0,0,0,0,0,0,140,162,1,0,0,0,0,0,0,0,0,0,0,0,0,0,200,162,1,0,0,0,0,0,0,0,0,0,0,0,0,0,20,163,1,0,0,0,0,0,0,0,0,0,0,0,0,0,96,163,1,0,0,0,0,0,204,163,1,0,0,164,1,0,0,0,0,0,0,0,0,0,84,164,1,0,176,164,1,0,0,0,0,0,0,0,0,0,236,164,1,0,56,165,1,0,148,165,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,161,25,0,0,160,172,3,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,128,162,1,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,65,198,3,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,180,162,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,178,200,3,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,240,162,1,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,81,0,0,0,3,201,3,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,60,163,1,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,33,1,0,0,84,201,3,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,136,163,1,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,4,0,0,0,81,0,0,0,117,202,3,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,244,163,1,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,121,0,0,0,198,202,3,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,40,164,1,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,169,0,0,0,63,203,3,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,124,164,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,232,203,3,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,216,164,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,1,204,3,0,1,0,0,0,0,160,59,225,0,160,251,96,4,0,0,0,0,0,0,0,20,165,1,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,169,0,0,0,82,204,3,0,1,0,0,0,0,128,217,224,0,0,145,96,4,0,0,0,0,0,0,0,96,165,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,33,1,0,0,251,204,3,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,188,165,1,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,2,0,0,0,81,0,0,0,28,206,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,81,0,0,0,109,206,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,16,0,0,0,216,145,1,0,144,166,1,0,184,166,1,0,224,166,1,0,56,171,1,0,2,0,0,0,0,0,0,0,32,0,0,0,216,145,1,0,160,175,1,0,200,175,1,0,224,166,1,0,56,171,1,0,2,0,0,0,81,0,0,0,190,206,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,81,0,0,0,15,207,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,167,1,0,0,0,0,0,0,0,0,0,0,0,0,0,212,167,1,0,0,0,0,0,0,0,0,0,0,0,0,0,16,168,1,0,0,0,0,0,0,0,0,0,0,0,0,0,92,168,1,0,0,0,0,0,0,0,0,0,0,0,0,0,168,168,1,0,0,0,0,0,20,169,1,0,72,169,1,0,0,0,0,0,0,0,0,0,156,169,1,0,248,169,1,0,0,0,0,0,0,0,0,0,52,170,1,0,112,170,1,0,204,170,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,161,25,0,0,96,207,3,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,200,167,1,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,1,233,3,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,252,167,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,114,235,3,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,56,168,1,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,81,0,0,0,195,235,3,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,132,168,1,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,33,1,0,0,20,236,3,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,208,168,1,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,4,0,0,0,81,0,0,0,53,237,3,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,60,169,1,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,121,0,0,0,134,237,3,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,112,169,1,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,169,0,0,0,255,237,3,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,196,169,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,168,238,3,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,32,170,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,113,2,0,0,193,238,3,0,1,0,0,0,0,160,27,225,0,160,251,96,3,0,0,0,0,0,0,0,92,170,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,169,0,0,0,50,241,3,0,1,0,0,0,0,128,217,224,0,0,145,96,4,0,0,0,0,0,0,0,152,170,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,33,1,0,0,219,241,3,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,244,170,1,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,171,1,0,0,0,0,0,0,0,0,0,0,0,0,0,44,172,1,0,0,0,0,0,0,0,0,0,0,0,0,0,104,172,1,0,0,0,0,0,0,0,0,0,0,0,0,0,180,172,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,173,1,0,0,0,0,0,108,173,1,0,160,173,1,0,0,0,0,0,0,0,0,0,244,173,1,0,80,174,1,0,0,0,0,0,0,0,0,0,140,174,1,0,216,174,1,0,52,175,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,161,25,0,0,252,242,3,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,32,172,1,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,157,12,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,84,172,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,14,15,4,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,144,172,1,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,81,0,0,0,95,15,4,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,220,172,1,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,33,1,0,0,176,15,4,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,40,173,1,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,4,0,0,0,81,0,0,0,209,16,4,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,148,173,1,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,121,0,0,0,34,17,4,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,200,173,1,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,169,0,0,0,155,17,4,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,28,174,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,68,18,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,120,174,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,93,18,4,0,1,0,0,0,0,160,59,225,0,160,251,96,4,0,0,0,0,0,0,0,180,174,1,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,169,0,0,0,174,18,4,0,1,0,0,0,0,128,217,224,0,0,145,96,4,0,0,0,0,0,0,0,0,175,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,33,1,0,0,87,19,4,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,92,175,1,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,2,0,0,0,81,0,0,0,120,20,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,81,0,0,0,201,20,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,16,0,0,0,216,145,1,0,48,176,1,0,88,176,1,0,128,176,1,0,248,180,1,0,2,0,0,0,0,0,0,0,32,0,0,0,216,145,1,0,112,185,1,0,152,185,1,0,128,176,1,0,248,180,1,0,2,0,0,0,81,0,0,0,26,21,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,81,0,0,0,107,21,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,177,1,0,0,0,0,0,0,0,0,0,0,0,0,0,116,177,1,0,0,0,0,0,0,0,0,0,0,0,0,0,176,177,1,0,0,0,0,0,0,0,0,0,0,0,0,0,252,177,1,0,0,0,0,0,0,0,0,0,0,0,0,0,72,178,1,0,0,0,0,0,180,178,1,0,232,178,1,0,0,0,0,0,0,0,0,0,60,179,1,0,152,179,1,0,0,0,0,0,0,0,0,0,212,179,1,0,48,180,1,0,140,180,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,161,25,0,0,188,21,4,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,104,177,1,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,93,47,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,156,177,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,206,49,4,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,216,177,1,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,81,0,0,0,31,50,4,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,36,178,1,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,33,1,0,0,112,50,4,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,112,178,1,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,4,0,0,0,81,0,0,0,145,51,4,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,220,178,1,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,121,0,0,0,226,51,4,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,16,179,1,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,169,0,0,0,91,52,4,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,100,179,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,4,53,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,192,179,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,169,0,0,0,29,53,4,0,1,0,0,0,0,184,84,225,0,160,251,96,4,0,0,0,0,0,0,0,252,179,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,169,0,0,0,198,53,4,0,1,0,0,0,0,128,217,224,0,0,145,96,4,0,0,0,0,0,0,0,88,180,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,33,1,0,0,111,54,4,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,180,180,1,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,181,1,0,0,0,0,0,0,0,0,0,0,0,0,0,236,181,1,0,0,0,0,0,0,0,0,0,0,0,0,0,40,182,1,0,0,0,0,0,0,0,0,0,0,0,0,0,116,182,1,0,0,0,0,0,0,0,0,0,0,0,0,0,192,182,1,0,0,0,0,0,44,183,1,0,96,183,1,0,0,0,0,0,0,0,0,0,180,183,1,0,16,184,1,0,0,0,0,0,0,0,0,0,76,184,1,0,168,184,1,0,4,185,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,161,25,0,0,144,55,4,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,224,181,1,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,49,81,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,20,182,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,162,83,4,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,80,182,1,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,81,0,0,0,243,83,4,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,156,182,1,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,33,1,0,0,68,84,4,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,232,182,1,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,4,0,0,0,81,0,0,0,101,85,4,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,84,183,1,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,121,0,0,0,182,85,4,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,136,183,1,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,169,0,0,0,47,86,4,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,220,183,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,216,86,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,56,184,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,169,0,0,0,241,86,4,0,1,0,0,0,0,184,84,225,0,160,251,96,4,0,0,0,0,0,0,0,116,184,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,169,0,0,0,154,87,4,0,1,0,0,0,0,128,217,224,0,0,145,96,4,0,0,0,0,0,0,0,208,184,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,33,1,0,0,67,88,4,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,44,185,1,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,2,0,0,0,81,0,0,0,100,89,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,81,0,0,0,181,89,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,16,0,0,0,0,186,1,0,24,197,1,0,24,197,1,0,64,197,1,0,64,197,1,0,2,0,0,0,0,0,0,0,32,0,0,0,0,186,1,0,244,201,1,0,244,201,1,0,64,197,1,0,64,197,1,0,0,0,0,0,255,255,255,255,255,255,255,255,10,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+105196);
/* memory initializer */ allocate([1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,3,0,0,0,0,0,0,231,3,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,100,0,0,0,6,90,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,1,0,0,0,0,0,0,0,0,0,0,0,0,0,52,198,1,0,0,0,0,0,0,0,0,0,0,0,0,0,112,198,1,0,0,0,0,0,0,0,0,0,0,0,0,0,172,198,1,0,0,0,0,0,0,0,0,0,0,0,0,0,248,198,1,0,0,0,0,0,0,0,0,0,0,0,0,0,68,199,1,0,0,0,0,0,176,199,1,0,228,199,1,0,0,0,0,0,0,0,0,0,56,200,1,0,148,200,1,0,0,0,0,0,0,0,0,0,208,200,1,0,44,201,1,0,136,201,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,161,25,0,0,106,90,4,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,40,198,1,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,11,116,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,92,198,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,113,2,0,0,124,118,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,152,198,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,237,120,4,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,212,198,1,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,81,0,0,0,62,121,4,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,32,199,1,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,33,1,0,0,143,121,4,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,108,199,1,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,4,0,0,0,81,0,0,0,176,122,4,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,216,199,1,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,121,0,0,0,1,123,4,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,12,200,1,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,169,0,0,0,122,123,4,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,96,200,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,35,124,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,188,200,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,169,0,0,0,60,124,4,0,1,0,0,0,0,184,84,225,0,160,251,96,4,0,0,0,0,0,0,0,248,200,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,169,0,0,0,229,124,4,0,1,0,0,0,0,128,217,224,0,0,145,96,4,0,0,0,0,0,0,0,84,201,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,33,1,0,0,142,125,4,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,176,201,1,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,2,0,0,0,100,0,0,0,175,126,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,16,0,0,0,0,186,1,0,92,202,1,0,92,202,1,0,132,202,1,0,132,202,1,0,2,0,0,0,0,0,0,0,32,0,0,0,0,186,1,0,64,207,1,0,64,207,1,0,132,202,1,0,132,202,1,0,2,0,0,0,100,0,0,0,19,127,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,203,1,0,0,0,0,0,0,0,0,0,0,0,0,0,120,203,1,0,0,0,0,0,0,0,0,0,0,0,0,0,180,203,1,0,0,0,0,0,0,0,0,0,0,0,0,0,240,203,1,0,0,0,0,0,0,0,0,0,0,0,0,0,60,204,1,0,0,0,0,0,0,0,0,0,0,0,0,0,136,204,1,0,0,0,0,0,244,204,1,0,40,205,1,0,0,0,0,0,0,0,0,0,124,205,1,0,216,205,1,0,0,0,0,0,0,0,0,0,20,206,1,0,112,206,1,0,212,206,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,161,25,0,0,119,127,4,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,108,203,1,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,24,153,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,160,203,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,113,2,0,0,137,155,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,220,203,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,250,157,4,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,24,204,1,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,81,0,0,0,75,158,4,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,100,204,1,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,33,1,0,0,156,158,4,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,176,204,1,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,4,0,0,0,81,0,0,0,189,159,4,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,28,205,1,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,121,0,0,0,14,160,4,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,80,205,1,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,169,0,0,0,135,160,4,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,164,205,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,48,161,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,0,206,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,169,0,0,0,73,161,4,0,1,0,0,0,0,232,87,225,0,224,255,96,4,0,0,0,0,0,0,0,60,206,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,225,0,0,0,242,161,4,0,1,0,0,0,0,192,221,224,0,0,145,96,4,0,0,0,0,0,0,0,152,206,1,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,2,0,0,0,33,1,0,0,211,162,4,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,252,206,1,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,2,0,0,0,100,0,0,0,244,163,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,16,0,0,0,0,186,1,0,168,207,1,0,168,207,1,0,208,207,1,0,208,207,1,0,2,0,0,0,0,0,0,0,32,0,0,0,0,186,1,0,156,212,1,0,156,212,1,0,208,207,1,0,208,207,1,0,2,0,0,0,100,0,0,0,88,164,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,208,1,0,0,0,0,0,0,0,0,0,0,0,0,0,196,208,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,209,1,0,0,0,0,0,0,0,0,0,0,0,0,0,60,209,1,0,0,0,0,0,0,0,0,0,0,0,0,0,136,209,1,0,0,0,0,0,0,0,0,0,0,0,0,0,212,209,1,0,0,0,0,0,64,210,1,0,116,210,1,0,0,0,0,0,0,0,0,0,200,210,1,0,36,211,1,0,0,0,0,0,0,0,0,0,96,211,1,0,188,211,1,0,32,212,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,161,25,0,0,188,164,4,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,184,208,1,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,93,190,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,236,208,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,113,2,0,0,206,192,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,40,209,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,63,195,4,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,100,209,1,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,81,0,0,0,144,195,4,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,176,209,1,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,33,1,0,0,225,195,4,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,252,209,1,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,4,0,0,0,81,0,0,0,2,197,4,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,104,210,1,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,121,0,0,0,83,197,4,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,156,210,1,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,169,0,0,0,204,197,4,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,240,210,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,117,198,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,76,211,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,169,0,0,0,142,198,4,0,1,0,0,0,0,136,93,225,0,176,19,97,4,0,0,0,0,0,0,0,136,211,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,225,0,0,0,55,199,4,0,1,0,0,0,0,96,242,224,0,0,149,96,4,0,0,0,0,0,0,0,228,211,1,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,2,0,0,0,185,1,0,0,24,200,4,0,1,0,0,0,0,0,116,224,0,0,16,96,5,0,0,0,0,0,0,0,72,212,1,0,0,0,0,0,10,0,0,0,9,0,0,0,11,0,0,0,8,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,5,0,0,0,15,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,17,0,0,0,2,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,2,0,0,0,100,0,0,0,209,201,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,16,0,0,0,0,186,1,0,4,213,1,0,4,213,1,0,44,213,1,0,44,213,1,0,2,0,0,0,0,0,0,0,32,0,0,0,0,186,1,0,8,218,1,0,8,218,1,0,44,213,1,0,44,213,1,0,2,0,0,0,100,0,0,0,53,202,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,213,1,0,0,0,0,0,0,0,0,0,0,0,0,0,32,214,1,0,0,0,0,0,0,0,0,0,0,0,0,0,92,214,1,0,0,0,0,0,0,0,0,0,0,0,0,0,152,214,1,0,0,0,0,0,0,0,0,0,0,0,0,0,228,214,1,0,0,0,0,0,0,0,0,0,0,0,0,0,48,215,1,0,0,0,0,0,156,215,1,0,208,215,1,0,0,0,0,0,0,0,0,0,36,216,1,0,128,216,1,0,0,0,0,0,0,0,0,0,188,216,1,0,32,217,1,0,140,217,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,161,25,0,0,153,202,4,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,20,214,1,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,58,228,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,72,214,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,113,2,0,0,171,230,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,132,214,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,28,233,4,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,192,214,1,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,81,0,0,0,109,233,4,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,12,215,1,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,33,1,0,0,190,233,4,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,88,215,1,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,4,0,0,0,81,0,0,0,223,234,4,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,196,215,1,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,121,0,0,0,48,235,4,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,248,215,1,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,169,0,0,0,169,235,4,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,76,216,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,82,236,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,168,216,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,225,0,0,0,107,236,4,0,1,0,0,0,0,134,115,225,0,80,22,97,4,0,0,0,0,0,0,0,228,216,1,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,2,0,0,0,33,1,0,0,76,237,4,0,1,0,0,0,0,0,245,224,0,0,149,96,5,0,0,0,0,0,0,0,72,217,1,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,2,0,0,0,185,1,0,0,109,238,4,0,1,0,0,0,0,0,116,224,0,0,16,96,5,0,0,0,0,0,0,0,180,217,1,0,0,0,0,0,10,0,0,0,9,0,0,0,11,0,0,0,8,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,5,0,0,0,15,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,17,0,0,0,2,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,2,0,0,0,100,0,0,0,38,240,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,16,0,0,0,112,218,1,0,136,229,1,0,136,229,1,0,176,229,1,0,176,229,1,0,2,0,0,0,0,0,0,0,32,0,0,0,112,218,1,0,236,235,1,0,236,235,1,0,176,229,1,0,176,229,1,0,0,0,0,0,255,255,255,255,255,255,255,255,10,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+115476);
/* memory initializer */ allocate([1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,71,0,0,0,157,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,71,0,0,0,157,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,100,0,0,0,138,240,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,230,1,0,0,0,0,0,0,0,0,0,0,0,0,0,164,230,1,0,0,0,0,0,0,0,0,0,0,0,0,0,224,230,1,0,0,0,0,0,0,0,0,0,0,0,0,0,44,231,1,0,0,0,0,0,152,231,1,0,204,231,1,0,0,0,0,0,0,0,0,0,32,232,1,0,124,232,1,0,0,0,0,0,0,0,0,0,184,232,1,0,20,233,1,0,0,0,0,0,0,0,0,0,104,233,1,0,204,233,1,0,0,0,0,0,0,0,0,0,72,234,1,0,164,234,1,0,0,235,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,81,0,0,0,238,240,4,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,152,230,1,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,63,241,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,204,230,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,176,243,4,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,8,231,1,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,33,1,0,0,1,244,4,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,84,231,1,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,4,0,0,0,81,0,0,0,34,245,4,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,192,231,1,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,121,0,0,0,115,245,4,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,244,231,1,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,169,0,0,0,236,245,4,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,72,232,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,149,246,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,164,232,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,169,0,0,0,174,246,4,0,1,0,0,0,0,128,208,224,0,0,118,96,4,0,0,0,0,0,0,0,224,232,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,121,0,0,0,87,247,4,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,60,233,1,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,225,0,0,0,208,247,4,0,1,0,0,0,0,96,242,224,0,0,149,96,4,0,0,0,0,0,0,0,144,233,1,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,2,0,0,0,185,1,0,0,177,248,4,0,1,0,0,0,0,0,116,224,0,0,16,96,5,0,0,0,0,0,0,0,244,233,1,0,0,0,0,0,10,0,0,0,9,0,0,0,11,0,0,0,8,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,5,0,0,0,15,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,17,0,0,0,2,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,2,0,0,0,169,0,0,0,106,250,4,0,1,0,0,0,0,220,125,225,0,232,51,97,4,0,0,0,0,0,0,0,112,234,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,169,0,0,0,19,251,4,0,1,0,0,0,0,96,18,225,0,128,184,96,4,0,0,0,0,0,0,0,204,234,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,1,0,0,0,49,0,0,0,188,251,4,0,1,0,0,0,0,0,152,224,0,0,16,96,6,0,0,0,0,0,0,0,40,235,1,0,0,0,0,0,24,0,0,0,23,0,0,0,25,0,0,0,22,0,0,0,26,0,0,0,21,0,0,0,27,0,0,0,20,0,0,0,28,0,0,0,19,0,0,0,29,0,0,0,18,0,0,0,30,0,0,0,17,0,0,0,31,0,0,0,16,0,0,0,32,0,0,0,15,0,0,0,33,0,0,0,14,0,0,0,34,0,0,0,13,0,0,0,35,0,0,0,12,0,0,0,36,0,0,0,11,0,0,0,37,0,0,0,10,0,0,0,38,0,0,0,9,0,0,0,39,0,0,0,8,0,0,0,40,0,0,0,7,0,0,0,41,0,0,0,6,0,0,0,42,0,0,0,5,0,0,0,43,0,0,0,4,0,0,0,44,0,0,0,3,0,0,0,45,0,0,0,2,0,0,0,46,0,0,0,1,0,0,0,47,0,0,0,0,0,0,0,48,0,0,0,2,0,0,0,100,0,0,0,237,251,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,16,0,0,0,112,218,1,0,84,236,1,0,84,236,1,0,124,236,1,0,124,236,1,0,2,0,0,0,0,0,0,0,32,0,0,0,112,218,1,0,184,242,1,0,184,242,1,0,124,236,1,0,124,236,1,0,2,0,0,0,100,0,0,0,81,252,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,237,1,0,0,0,0,0,0,0,0,0,0,0,0,0,112,237,1,0,0,0,0,0,0,0,0,0,0,0,0,0,172,237,1,0,0,0,0,0,0,0,0,0,0,0,0,0,248,237,1,0,0,0,0,0,100,238,1,0,152,238,1,0,0,0,0,0,0,0,0,0,236,238,1,0,72,239,1,0,0,0,0,0,0,0,0,0,132,239,1,0,224,239,1,0,0,0,0,0,0,0,0,0,52,240,1,0,152,240,1,0,0,0,0,0,0,0,0,0,20,241,1,0,112,241,1,0,204,241,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,81,0,0,0,181,252,4,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,100,237,1,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,6,253,4,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,152,237,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,119,255,4,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,212,237,1,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,33,1,0,0,200,255,4,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,32,238,1,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,4,0,0,0,81,0,0,0,233,0,5,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,140,238,1,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,121,0,0,0,58,1,5,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,192,238,1,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,169,0,0,0,179,1,5,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,20,239,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,92,2,5,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,112,239,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,169,0,0,0,117,2,5,0,1,0,0,0,0,128,208,224,0,0,118,96,4,0,0,0,0,0,0,0,172,239,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,121,0,0,0,30,3,5,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,8,240,1,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,225,0,0,0,151,3,5,0,1,0,0,0,0,96,242,224,0,0,149,96,4,0,0,0,0,0,0,0,92,240,1,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,2,0,0,0,185,1,0,0,120,4,5,0,1,0,0,0,0,0,116,224,0,0,16,96,5,0,0,0,0,0,0,0,192,240,1,0,0,0,0,0,10,0,0,0,9,0,0,0,11,0,0,0,8,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,5,0,0,0,15,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,17,0,0,0,2,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,2,0,0,0,169,0,0,0,49,6,5,0,1,0,0,0,0,220,125,225,0,232,51,97,4,0,0,0,0,0,0,0,60,241,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,169,0,0,0,218,6,5,0,1,0,0,0,0,96,18,225,0,128,184,96,4,0,0,0,0,0,0,0,152,241,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,1,0,0,0,49,0,0,0,131,7,5,0,1,0,0,0,0,0,152,224,0,0,16,96,6,0,0,0,0,0,0,0,244,241,1,0,0,0,0,0,24,0,0,0,23,0,0,0,25,0,0,0,22,0,0,0,26,0,0,0,21,0,0,0,27,0,0,0,20,0,0,0,28,0,0,0,19,0,0,0,29,0,0,0,18,0,0,0,30,0,0,0,17,0,0,0,31,0,0,0,16,0,0,0,32,0,0,0,15,0,0,0,33,0,0,0,14,0,0,0,34,0,0,0,13,0,0,0,35,0,0,0,12,0,0,0,36,0,0,0,11,0,0,0,37,0,0,0,10,0,0,0,38,0,0,0,9,0,0,0,39,0,0,0,8,0,0,0,40,0,0,0,7,0,0,0,41,0,0,0,6,0,0,0,42,0,0,0,5,0,0,0,43,0,0,0,4,0,0,0,44,0,0,0,3,0,0,0,45,0,0,0,2,0,0,0,46,0,0,0,1,0,0,0,47,0,0,0,0,0,0,0,48,0,0,0,2,0,0,0,100,0,0,0,180,7,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,16,0,0,0,112,218,1,0,32,243,1,0,32,243,1,0,72,243,1,0,72,243,1,0,2,0,0,0,0,0,0,0,32,0,0,0,112,218,1,0,172,249,1,0,172,249,1,0,72,243,1,0,72,243,1,0,2,0,0,0,100,0,0,0,24,8,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,244,1,0,0,0,0,0,0,0,0,0,0,0,0,0,60,244,1,0,0,0,0,0,0,0,0,0,0,0,0,0,120,244,1,0,0,0,0,0,0,0,0,0,0,0,0,0,196,244,1,0,0,0,0,0,48,245,1,0,100,245,1,0,0,0,0,0,0,0,0,0,184,245,1,0,20,246,1,0,0,0,0,0,0,0,0,0,80,246,1,0,172,246,1,0,0,0,0,0,0,0,0,0,0,247,1,0,100,247,1,0,0,0,0,0,0,0,0,0,224,247,1,0,76,248,1,0,192,248,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,81,0,0,0,124,8,5,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,48,244,1,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,205,8,5,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,100,244,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,62,11,5,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,160,244,1,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,33,1,0,0,143,11,5,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,236,244,1,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,4,0,0,0,81,0,0,0,176,12,5,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,88,245,1,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,121,0,0,0,1,13,5,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,140,245,1,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,169,0,0,0,122,13,5,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,224,245,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,35,14,5,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,60,246,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,169,0,0,0,60,14,5,0,1,0,0,0,0,128,208,224,0,0,118,96,4,0,0,0,0,0,0,0,120,246,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,121,0,0,0,229,14,5,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,212,246,1,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,225,0,0,0,94,15,5,0,1,0,0,0,0,96,242,224,0,0,149,96,4,0,0,0,0,0,0,0,40,247,1,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,2,0,0,0,185,1,0,0,63,16,5,0,1,0,0,0,0,0,116,224,0,0,16,96,5,0,0,0,0,0,0,0,140,247,1,0,0,0,0,0,10,0,0,0,9,0,0,0,11,0,0,0,8,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,5,0,0,0,15,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,17,0,0,0,2,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,2,0,0,0,33,1,0,0,248,17,5,0,1,0,0,0,0,24,157,225,0,24,61,97,5,0,0,0,0,0,0,0,8,248,1,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,2,0,0,0,105,1,0,0,25,19,5,0,1,0,0,0,0,144,27,225,0,128,184,96,5,0,0,0,0,0,0,0,116,248,1,0,0,0,0,0,9,0,0,0,8,0,0,0,10,0,0,0,7,0,0,0,11,0,0,0,6,0,0,0,12,0,0,0,5,0,0,0,13,0,0,0,4,0,0,0,14,0,0,0,3,0,0,0,15,0,0,0,2,0,0,0,16,0,0,0,1,0,0,0,17,0,0,0,0,0,0,0,18,0,0,0,1,0,0,0,49,0,0,0,130,20,5,0,1,0,0,0,0,0,152,224,0,0,16,96,6,0,0,0,0,0,0,0,232,248,1,0,0,0,0,0,24,0,0,0,23,0,0,0,25,0,0,0,22,0,0,0,26,0,0,0,21,0,0,0,27,0,0,0,20,0,0,0,28,0,0,0,19,0,0,0,29,0,0,0,18,0,0,0,30,0,0,0,17,0,0,0,31,0,0,0,16,0,0,0,32,0,0,0,15,0,0,0,33,0,0,0,14,0,0,0,34,0,0,0,13,0,0,0,35,0,0,0,12,0,0,0,36,0,0,0,11,0,0,0,37,0,0,0,10,0,0,0,38,0,0,0,9,0,0,0,39,0,0,0,8,0,0,0,40,0,0,0,7,0,0,0,41,0,0,0,6,0,0,0,42,0,0,0,5,0,0,0,43,0,0,0,4,0,0,0,44,0,0,0,3,0,0,0,45,0,0,0,2,0,0,0,46,0,0,0,1,0,0,0,47,0,0,0,0,0,0,0,48,0,0,0,2,0,0,0,100,0,0,0,179,20,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,16,0,0,0,112,218,1,0,20,250,1,0,20,250,1,0,60,250,1,0,60,250,1,0,2,0,0,0,0,0,0,0,32,0,0,0,112,218,1,0,168,0,2,0,168,0,2,0,60,250,1,0,60,250,1,0,2,0,0,0,100,0,0,0,23,21,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,250,1,0,0,0,0,0,0,0,0,0,0,0,0,0,48,251,1,0,0,0,0,0,0,0,0,0,0,0,0,0,108,251,1,0,0,0,0,0,0,0,0,0,0,0,0,0,184,251,1,0,0,0,0,0,36,252,1,0,88,252,1,0,0,0,0,0,0,0,0,0,172,252,1,0,8,253,1,0,0,0,0,0,0,0,0,0,68,253,1,0,160,253,1,0,0,0,0,0,0,0,0,0,244,253,1,0,88,254,1,0,0,0,0,0,0,0,0,0,212,254,1,0,72,255,1,0,188,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,81,0,0,0,123,21,5,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,36,251,1,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,204,21,5,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,88,251,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,61,24,5,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,148,251,1,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,33,1,0,0,142,24,5,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,224,251,1,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,4,0,0,0,81,0,0,0,175,25,5,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,76,252,1,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,121,0,0,0,0,26,5,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,128,252,1,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,169,0,0,0,121,26,5,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,212,252,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,34,27,5,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,48,253,1,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,169,0,0,0,59,27,5,0,1,0,0,0,0,128,208,224,0,0,118,96,4,0,0,0,0,0,0,0,108,253,1,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,121,0,0,0,228,27,5,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,200,253,1,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,225,0,0,0,93,28,5,0,1,0,0,0,0,96,242,224,0,0,149,96,4,0,0,0,0,0,0,0,28,254,1,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,2,0,0,0,185,1,0,0,62,29,5,0,1,0,0,0,0,0,116,224,0,0,16,96,5,0,0,0,0,0,0,0,128,254,1,0,0,0,0,0,10,0,0,0,9,0,0,0,11,0,0,0,8,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,5,0,0,0,15,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,17,0,0,0,2,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,2,0,0,0,105,1,0,0,247,30,5,0,1,0,0,0,128,93,176,225,0,24,61,97,5,0,0,0,0,0,0,0,252,254,1,0,0,0,0,0,9,0,0,0,8,0,0,0,10,0,0,0,7,0,0,0,11,0,0,0,6,0,0,0,12,0,0,0,5,0,0,0,13,0,0,0,4,0,0,0,14,0,0,0,3,0,0,0,15,0,0,0,2,0,0,0,16,0,0,0,1,0,0,0,17,0,0,0,0,0,0,0,18,0,0,0,2,0,0,0,105,1,0,0,96,32,5,0,1,0,0,0,0,144,27,225,0,128,184,96,5,0,0,0,0,0,0,0,112,255,1,0,0,0,0,0,9,0,0,0,8,0,0,0,10,0,0,0,7,0,0,0,11,0,0,0,6,0,0,0,12,0,0,0,5,0,0,0,13,0,0,0,4,0,0,0,14,0,0,0,3,0,0,0,15,0,0,0,2,0,0,0,16,0,0,0,1,0,0,0,17,0,0,0,0,0,0,0,18,0,0,0,1,0,0,0,49,0,0,0,201,33,5,0,1,0,0,0,0,0,152,224,0,0,16,96,6,0,0,0,0,0,0,0,228,255,1,0,0,0,0,0,24,0,0,0,23,0,0,0,25,0,0,0,22,0,0,0,26,0,0,0,21,0,0,0,27,0,0,0,20,0,0,0,28,0,0,0,19,0,0,0,29,0,0,0,18,0,0,0,30,0,0,0,17,0,0,0,31,0,0,0,16,0,0,0,32,0,0,0,15,0,0,0,33,0,0,0,14,0,0,0,34,0,0,0,13,0,0,0,35,0,0,0,12,0,0,0,36,0,0,0,11,0,0,0,37,0,0,0,10,0,0,0,38,0,0,0,9,0,0,0,39,0,0,0,8,0,0,0,40,0,0,0,7,0,0,0,41,0,0,0,6,0,0,0,42,0,0,0,5,0,0,0,43,0,0,0,4,0,0,0,44,0,0,0,3,0,0,0,45,0,0,0,2,0,0,0,46,0,0,0,1,0,0,0,47,0,0,0,0,0,0,0,48,0,0,0,2,0,0,0,100,0,0,0,250,33,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,56,5,0,0,0,3,0,0,6,0,0,0,64,156,0,0,112,17,1,0,84,238,0,0,128,238,0,0,172,238,0,0,156,239,0,0,204,239,0,0,252,239,0,0,44,243,0,0,252,239,0,0,92,246,0,0,140,246,0,0,28,0,1,0,172,9,1,0,60,19,1,0,204,28,1,0,252,28,1,0,96,3,0,0,192,3,0,0,188,32,1,0,232,32,1,0,20,33,1,0,64,33,1,0,32,4,0,0,108,33,1,0,156,33,1,0,120,4,0,0,204,33,1,0,216,4,0,0,104,43,1,0,168,54,1,0,128,71,1,0,3,0,0,0,160,119,1,0,108,1,2,0,196,1,2,0,212,26,2,0,196,1,2,0,104,55,2,0,196,1,2,0,204,61,2,0,196,1,2,0,48,68,2,0,196,1,2,0,28,86,2,0,196,1,2,0,240,92,2,0,196,99,2,0,212,124,2,0,196,99,2,0,192,142,2,0,196,99,2,0,148,149,2,0,196,99,2,0,180,154,2,0,196,99,2,0,220,159,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,3], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+123780);
/* memory initializer */ allocate([2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,30,0,0,0,52,27,2,0,76,38,2,0,76,38,2,0,116,38,2,0,116,38,2,0,2,0,0,0,0,0,0,0,30,0,0,0,52,27,2,0,116,42,2,0,116,42,2,0,116,38,2,0,116,38,2,0,1,0,0,0,2,0,0,0,6,0,0,0,156,42,2,0,180,53,2,0,180,53,2,0,220,53,2,0,220,53,2,0,0,0,0,0,255,255,255,255,255,255,255,255,7,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+134724);
/* memory initializer */ allocate([1,0,0,0,2,0,0,0,7,0,0,0,17,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,7,0,0,0,17,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,49,0,0,0,94,34,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,39,2,0,0,0,0,0,0,0,0,0,104,39,2,0,156,39,2,0,0,0,0,0,0,0,0,0,208,39,2,0,4,40,2,0,0,0,0,0,0,0,0,0,64,40,2,0,124,40,2,0,0,0,0,0,0,0,0,0,192,40,2,0,244,40,2,0,124,40,2,0,0,0,0,0,40,41,2,0,92,41,2,0,232,41,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,243,0,0,0,143,34,5,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,92,39,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,130,35,5,0,1,0,0,0,0,0,56,224,0,0,56,96,2,0,0,0,0,0,0,0,144,39,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,117,36,5,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,196,39,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,104,37,5,0,1,0,0,0,0,0,84,224,0,0,84,96,2,0,0,0,0,0,0,0,248,39,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,53,12,0,0,91,38,5,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,44,40,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,53,12,0,0,144,50,5,0,1,0,0,0,0,0,124,224,0,0,92,96,3,0,0,0,0,0,0,0,104,40,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,7,0,0,0,197,62,5,0,1,0,0,0,0,0,56,224,0,0,16,96,3,0,0,0,0,0,0,0,164,40,2,0,0,0,0,0,3,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,243,0,0,0,204,62,5,0,1,0,0,0,0,0,149,224,0,0,149,96,2,0,0,0,0,0,0,0,232,40,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,191,63,5,0,1,0,0,0,0,0,92,224,0,0,92,96,2,0,0,0,0,0,0,0,28,41,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,178,64,5,0,1,0,0,0,0,136,51,225,0,136,51,97,2,0,0,0,0,0,0,0,80,41,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,25,0,0,0,165,65,5,0,1,0,0,0,0,192,18,225,0,0,153,96,5,0,0,0,0,0,0,0,132,41,2,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,1,0,0,0,25,0,0,0,190,65,5,0,1,0,0,0,0,0,120,224,0,0,16,96,5,0,0,0,0,0,0,0,16,42,2,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,2,0,0,0,49,0,0,0,215,65,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,2,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+140360);
/* memory initializer */ allocate([32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,8,66,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,54,2,0,248,54,2,0,0,0,0,0,0,0,0,0,52,55,2,0,92,41,2,0,232,41,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,169,0,0,0,12,66,5,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,196,54,2,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,181,66,5,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,32,55,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,9,0,0,0,206,66,5,0,1,0,0,0,0,136,51,225,0,136,51,97,2,0,0,0,0,0,0,0,92,55,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,15,0,0,0,52,27,2,0,200,55,2,0,200,55,2,0,240,55,2,0,240,55,2,0,2,0,0,0,0,0,0,0,30,0,0,0,52,27,2,0,240,59,2,0,240,59,2,0,240,55,2,0,240,55,2,0,1,0,0,0,2,0,0,0,6,0,0,0,156,42,2,0,24,60,2,0,24,60,2,0,64,60,2,0,64,60,2,0,2,0,0,0,49,0,0,0,215,66,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,56,2,0,0,0,0,0,0,0,0,0,228,56,2,0,24,57,2,0,0,0,0,0,0,0,0,0,76,57,2,0,128,57,2,0,0,0,0,0,0,0,0,0,188,57,2,0,248,57,2,0,0,0,0,0,0,0,0,0,60,58,2,0,112,58,2,0,248,57,2,0,0,0,0,0,164,58,2,0,216,58,2,0,100,59,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,243,0,0,0,8,67,5,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,216,56,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,251,67,5,0,1,0,0,0,0,0,56,224,0,0,56,96,2,0,0,0,0,0,0,0,12,57,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,238,68,5,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,64,57,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,225,69,5,0,1,0,0,0,0,0,84,224,0,0,84,96,2,0,0,0,0,0,0,0,116,57,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,53,12,0,0,212,70,5,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,168,57,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,53,12,0,0,9,83,5,0,1,0,0,0,0,0,124,224,0,0,92,96,3,0,0,0,0,0,0,0,228,57,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,7,0,0,0,62,95,5,0,1,0,0,0,0,0,56,224,0,0,16,96,3,0,0,0,0,0,0,0,32,58,2,0,0,0,0,0,3,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,243,0,0,0,69,95,5,0,1,0,0,0,0,0,149,224,0,0,149,96,2,0,0,0,0,0,0,0,100,58,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,56,96,5,0,1,0,0,0,0,0,92,224,0,0,92,96,2,0,0,0,0,0,0,0,152,58,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,43,97,5,0,1,0,0,0,0,136,51,225,0,136,51,97,2,0,0,0,0,0,0,0,204,58,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,25,0,0,0,30,98,5,0,1,0,0,0,0,192,18,225,0,0,153,96,5,0,0,0,0,0,0,0,0,59,2,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,1,0,0,0,25,0,0,0,55,98,5,0,1,0,0,0,0,0,120,224,0,0,16,96,5,0,0,0,0,0,0,0,140,59,2,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,2,0,0,0,49,0,0,0,80,98,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,129,98,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,2,0,92,61,2,0,0,0,0,0,0,0,0,0,152,61,2,0,216,58,2,0,100,59,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,169,0,0,0,133,98,5,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,40,61,2,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,46,99,5,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,132,61,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,9,0,0,0,71,99,5,0,1,0,0,0,0,136,51,225,0,136,51,97,2,0,0,0,0,0,0,0,192,61,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,15,0,0,0,52,27,2,0,44,62,2,0,44,62,2,0,84,62,2,0,84,62,2,0,2,0,0,0,0,0,0,0,30,0,0,0,52,27,2,0,84,66,2,0,84,66,2,0,84,62,2,0,84,62,2,0,1,0,0,0,2,0,0,0,6,0,0,0,156,42,2,0,124,66,2,0,124,66,2,0,164,66,2,0,164,66,2,0,2,0,0,0,49,0,0,0,80,99,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,63,2,0,0,0,0,0,0,0,0,0,72,63,2,0,124,63,2,0,0,0,0,0,0,0,0,0,176,63,2,0,228,63,2,0,0,0,0,0,0,0,0,0,32,64,2,0,92,64,2,0,0,0,0,0,0,0,0,0,160,64,2,0,212,64,2,0,92,64,2,0,0,0,0,0,8,65,2,0,60,65,2,0,200,65,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,243,0,0,0,129,99,5,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,60,63,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,116,100,5,0,1,0,0,0,0,0,56,224,0,0,56,96,2,0,0,0,0,0,0,0,112,63,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,103,101,5,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,164,63,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,90,102,5,0,1,0,0,0,0,0,84,224,0,0,84,96,2,0,0,0,0,0,0,0,216,63,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,53,12,0,0,77,103,5,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,12,64,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,53,12,0,0,130,115,5,0,1,0,0,0,0,0,124,224,0,0,92,96,3,0,0,0,0,0,0,0,72,64,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,7,0,0,0,183,127,5,0,1,0,0,0,0,0,56,224,0,0,16,96,3,0,0,0,0,0,0,0,132,64,2,0,0,0,0,0,3,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,243,0,0,0,190,127,5,0,1,0,0,0,0,0,149,224,0,0,149,96,2,0,0,0,0,0,0,0,200,64,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,177,128,5,0,1,0,0,0,0,0,92,224,0,0,92,96,2,0,0,0,0,0,0,0,252,64,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,164,129,5,0,1,0,0,0,0,136,51,225,0,136,51,97,2,0,0,0,0,0,0,0,48,65,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,25,0,0,0,151,130,5,0,1,0,0,0,0,192,18,225,0,0,153,96,5,0,0,0,0,0,0,0,100,65,2,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,1,0,0,0,25,0,0,0,176,130,5,0,1,0,0,0,0,0,120,224,0,0,16,96,5,0,0,0,0,0,0,0,240,65,2,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,2,0,0,0,49,0,0,0,201,130,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,250,130,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,67,2,0,192,67,2,0,0,0,0,0,0,0,0,0,252,67,2,0,60,65,2,0,200,65,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,169,0,0,0,254,130,5,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,140,67,2,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,167,131,5,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,232,67,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,9,0,0,0,192,131,5,0,1,0,0,0,0,136,51,225,0,136,51,97,2,0,0,0,0,0,0,0,36,68,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,15,0,0,0,144,68,2,0,168,79,2,0,168,79,2,0,208,79,2,0,208,79,2,0,2,0,0,0,0,0,0,0,30,0,0,0,144,68,2,0,64,84,2,0,64,84,2,0,208,79,2,0,208,79,2,0,1,0,0,0,2,0,0,0,6,0,0,0,156,42,2,0,104,84,2,0,104,84,2,0,144,84,2,0,144,84,2,0,0,0,0,0,255,255,255,255,255,255,255,255,8,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+144300);
/* memory initializer */ allocate([1,0,0,0,1,0,0,0,2,0,0,0,7,0,0,0,17,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,99,0,0,0,7,0,0,0,17,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,64,0,0,0,201,131,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,80,2,0,0,0,0,0,0,0,0,0,196,80,2,0,0,0,0,0,0,0,0,0,0,81,2,0,52,81,2,0,0,0,0,0,0,0,0,0,104,81,2,0,156,81,2,0,0,0,0,0,0,0,0,0,216,81,2,0,20,82,2,0,0,0,0,0,0,0,0,0,88,82,2,0,140,82,2,0,20,82,2,0,0,0,0,0,192,82,2,0,244,82,2,0,40,83,2,0,180,83,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,243,0,0,0,9,132,5,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,184,80,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,53,12,0,0,252,132,5,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,236,80,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,243,0,0,0,49,145,5,0,1,0,0,0,0,0,56,224,0,0,56,96,2,0,0,0,0,0,0,0,40,81,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,36,146,5,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,92,81,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,23,147,5,0,1,0,0,0,0,0,84,224,0,0,84,96,2,0,0,0,0,0,0,0,144,81,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,53,12,0,0,10,148,5,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,196,81,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,53,12,0,0,63,160,5,0,1,0,0,0,0,0,124,224,0,0,92,96,3,0,0,0,0,0,0,0,0,82,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,7,0,0,0,116,172,5,0,1,0,0,0,0,0,56,224,0,0,16,96,3,0,0,0,0,0,0,0,60,82,2,0,0,0,0,0,3,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,243,0,0,0,123,172,5,0,1,0,0,0,0,0,149,224,0,0,149,96,2,0,0,0,0,0,0,0,128,82,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,110,173,5,0,1,0,0,0,0,0,92,224,0,0,92,96,2,0,0,0,0,0,0,0,180,82,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,97,174,5,0,1,0,0,0,0,76,93,225,0,76,93,97,2,0,0,0,0,0,0,0,232,82,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,84,175,5,0,1,0,0,0,0,136,51,225,0,136,51,97,2,0,0,0,0,0,0,0,28,83,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,25,0,0,0,71,176,5,0,1,0,0,0,0,192,18,225,0,0,153,96,5,0,0,0,0,0,0,0,80,83,2,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,1,0,0,0,25,0,0,0,96,176,5,0,1,0,0,0,0,0,120,224,0,0,16,96,5,0,0,0,0,0,0,0,220,83,2,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,2,0,0,0,64,0,0,0,121,176,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,185,176,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,85,2,0,172,85,2,0,0,0,0,0,0,0,0,0,232,85,2,0,40,83,2,0,180,83,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,169,0,0,0,189,176,5,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,120,85,2,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,102,177,5,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,212,85,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,9,0,0,0,127,177,5,0,1,0,0,0,0,136,51,225,0,136,51,97,2,0,0,0,0,0,0,0,16,86,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,15,0,0,0,144,68,2,0,124,86,2,0,124,86,2,0,164,86,2,0,164,86,2,0,2,0,0,0,0,0,0,0,30,0,0,0,144,68,2,0,20,91,2,0,20,91,2,0,164,86,2,0,164,86,2,0,1,0,0,0,2,0,0,0,6,0,0,0,156,42,2,0,60,91,2,0,60,91,2,0,100,91,2,0,100,91,2,0,2,0,0,0,64,0,0,0,136,177,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,87,2,0,0,0,0,0,0,0,0,0,152,87,2,0,0,0,0,0,0,0,0,0,212,87,2,0,8,88,2,0,0,0,0,0,0,0,0,0,60,88,2,0,112,88,2,0,0,0,0,0,0,0,0,0,172,88,2,0,232,88,2,0,0,0,0,0,0,0,0,0,44,89,2,0,96,89,2,0,232,88,2,0,0,0,0,0,148,89,2,0,200,89,2,0,252,89,2,0,136,90,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,243,0,0,0,200,177,5,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,140,87,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,53,12,0,0,187,178,5,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,192,87,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,243,0,0,0,240,190,5,0,1,0,0,0,0,0,56,224,0,0,56,96,2,0,0,0,0,0,0,0,252,87,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,227,191,5,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,48,88,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,214,192,5,0,1,0,0,0,0,0,84,224,0,0,84,96,2,0,0,0,0,0,0,0,100,88,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,53,12,0,0,201,193,5,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,152,88,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,53,12,0,0,254,205,5,0,1,0,0,0,0,0,124,224,0,0,92,96,3,0,0,0,0,0,0,0,212,88,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,7,0,0,0,51,218,5,0,1,0,0,0,0,0,56,224,0,0,16,96,3,0,0,0,0,0,0,0,16,89,2,0,0,0,0,0,3,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,243,0,0,0,58,218,5,0,1,0,0,0,0,0,149,224,0,0,149,96,2,0,0,0,0,0,0,0,84,89,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,45,219,5,0,1,0,0,0,0,0,92,224,0,0,92,96,2,0,0,0,0,0,0,0,136,89,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,32,220,5,0,1,0,0,0,0,76,93,225,0,76,93,97,2,0,0,0,0,0,0,0,188,89,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,19,221,5,0,1,0,0,0,0,136,51,225,0,136,51,97,2,0,0,0,0,0,0,0,240,89,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,25,0,0,0,6,222,5,0,1,0,0,0,0,192,18,225,0,0,153,96,5,0,0,0,0,0,0,0,36,90,2,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,1,0,0,0,25,0,0,0,31,222,5,0,1,0,0,0,0,0,120,224,0,0,16,96,5,0,0,0,0,0,0,0,176,90,2,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,2,0,0,0,64,0,0,0,56,222,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,120,222,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,92,2,0,128,92,2,0,0,0,0,0,0,0,0,0,188,92,2,0,252,89,2,0,136,90,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,169,0,0,0,124,222,5,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,76,92,2,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,37,223,5,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,168,92,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,9,0,0,0,62,223,5,0,1,0,0,0,0,136,51,225,0,136,51,97,2,0,0,0,0,0,0,0,228,92,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,15,0,0,0,144,68,2,0,80,93,2,0,80,93,2,0,120,93,2,0,120,93,2,0,2,0,0,0,0,0,0,0,30,0,0,0,144,68,2,0,232,97,2,0,232,97,2,0,120,93,2,0,120,93,2,0,1,0,0,0,2,0,0,0,6,0,0,0,156,42,2,0,16,98,2,0,16,98,2,0,56,98,2,0,56,98,2,0,2,0,0,0,64,0,0,0,71,223,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,94,2,0,0,0,0,0,0,0,0,0,108,94,2,0,0,0,0,0,0,0,0,0,168,94,2,0,220,94,2,0,0,0,0,0,0,0,0,0,16,95,2,0,68,95,2,0,0,0,0,0,0,0,0,0,128,95,2,0,188,95,2,0,0,0,0,0,0,0,0,0,0,96,2,0,52,96,2,0,188,95,2,0,0,0,0,0,104,96,2,0,156,96,2,0,208,96,2,0,92,97,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,243,0,0,0,135,223,5,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,96,94,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,53,12,0,0,122,224,5,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,148,94,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,243,0,0,0,175,236,5,0,1,0,0,0,0,0,56,224,0,0,56,96,2,0,0,0,0,0,0,0,208,94,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,162,237,5,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,4,95,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,149,238,5,0,1,0,0,0,0,0,84,224,0,0,84,96,2,0,0,0,0,0,0,0,56,95,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,53,12,0,0,136,239,5,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,108,95,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,53,12,0,0,189,251,5,0,1,0,0,0,0,0,124,224,0,0,92,96,3,0,0,0,0,0,0,0,168,95,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,7,0,0,0,242,7,6,0,1,0,0,0,0,0,56,224,0,0,16,96,3,0,0,0,0,0,0,0,228,95,2,0,0,0,0,0,3,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,243,0,0,0,249,7,6,0,1,0,0,0,0,0,149,224,0,0,149,96,2,0,0,0,0,0,0,0,40,96,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,236,8,6,0,1,0,0,0,0,0,92,224,0,0,92,96,2,0,0,0,0,0,0,0,92,96,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,223,9,6,0,1,0,0,0,0,76,93,225,0,76,93,97,2,0,0,0,0,0,0,0,144,96,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,210,10,6,0,1,0,0,0,0,136,51,225,0,136,51,97,2,0,0,0,0,0,0,0,196,96,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,25,0,0,0,197,11,6,0,1,0,0,0,0,192,18,225,0,0,153,96,5,0,0,0,0,0,0,0,248,96,2,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,1,0,0,0,25,0,0,0,222,11,6,0,1,0,0,0,0,0,120,224,0,0,16,96,5,0,0,0,0,0,0,0,132,97,2,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,2,0,0,0,64,0,0,0,247,11,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,55,12,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,98,2,0,84,99,2,0,0,0,0,0,0,0,0,0,144,99,2,0,208,96,2,0,92,97,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,169,0,0,0,59,12,6,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,32,99,2,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,228,12,6,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,124,99,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,9,0,0,0,253,12,6,0,1,0,0,0,0,136,51,225,0,136,51,97,2,0,0,0,0,0,0,0,184,99,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+150948);
/* memory initializer */ allocate([2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+159812);
/* memory initializer */ allocate([2,0,0,0,0,0,0,0,15,0,0,0,52,125,2,0,76,136,2,0,76,136,2,0,116,136,2,0,116,136,2,0,2,0,0,0,0,0,0,0,30,0,0,0,52,125,2,0,228,140,2,0,228,140,2,0,116,136,2,0,116,136,2,0,1,0,0,0,2,0,0,0,6,0,0,0,156,42,2,0,12,141,2,0,12,141,2,0,52,141,2,0,52,141,2,0,0,0,0,0,255,255,255,255,255,255,255,255,8,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+163020);
/* memory initializer */ allocate([1,0,0,0,2,0,0,0,4,0,0,0,7,0,0,0,17,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,7,0,0,0,17,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,64,0,0,0,6,13,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,137,2,0,0,0,0,0,0,0,0,0,104,137,2,0,0,0,0,0,0,0,0,0,164,137,2,0,216,137,2,0,0,0,0,0,0,0,0,0,12,138,2,0,64,138,2,0,0,0,0,0,0,0,0,0,124,138,2,0,184,138,2,0,0,0,0,0,0,0,0,0,252,138,2,0,48,139,2,0,184,138,2,0,0,0,0,0,100,139,2,0,152,139,2,0,204,139,2,0,88,140,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,243,0,0,0,70,13,6,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,92,137,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,53,12,0,0,57,14,6,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,144,137,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,243,0,0,0,110,26,6,0,1,0,0,0,0,0,56,224,0,0,56,96,2,0,0,0,0,0,0,0,204,137,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,97,27,6,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,0,138,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,84,28,6,0,1,0,0,0,0,0,84,224,0,0,84,96,2,0,0,0,0,0,0,0,52,138,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,53,12,0,0,71,29,6,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,104,138,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,53,12,0,0,124,41,6,0,1,0,0,0,0,0,124,224,0,0,92,96,3,0,0,0,0,0,0,0,164,138,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,7,0,0,0,177,53,6,0,1,0,0,0,0,0,56,224,0,0,16,96,3,0,0,0,0,0,0,0,224,138,2,0,0,0,0,0,3,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,243,0,0,0,184,53,6,0,1,0,0,0,0,0,149,224,0,0,149,96,2,0,0,0,0,0,0,0,36,139,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,171,54,6,0,1,0,0,0,0,0,92,224,0,0,92,96,2,0,0,0,0,0,0,0,88,139,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,158,55,6,0,1,0,0,0,0,76,93,225,0,76,93,97,2,0,0,0,0,0,0,0,140,139,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,145,56,6,0,1,0,0,0,0,136,51,225,0,136,51,97,2,0,0,0,0,0,0,0,192,139,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,25,0,0,0,132,57,6,0,1,0,0,0,0,192,18,225,0,0,153,96,5,0,0,0,0,0,0,0,244,139,2,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,1,0,0,0,25,0,0,0,157,57,6,0,1,0,0,0,0,0,120,224,0,0,16,96,5,0,0,0,0,0,0,0,128,140,2,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,2,0,0,0,64,0,0,0,182,57,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,246,57,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,141,2,0,80,142,2,0,0,0,0,0,0,0,0,0,140,142,2,0,204,139,2,0,88,140,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,169,0,0,0,250,57,6,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,28,142,2,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,163,58,6,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,120,142,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,9,0,0,0,188,58,6,0,1,0,0,0,0,136,51,225,0,136,51,97,2,0,0,0,0,0,0,0,180,142,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,15,0,0,0,52,125,2,0,32,143,2,0,32,143,2,0,72,143,2,0,72,143,2,0,2,0,0,0,0,0,0,0,30,0,0,0,52,125,2,0,184,147,2,0,184,147,2,0,72,143,2,0,72,143,2,0,1,0,0,0,2,0,0,0,6,0,0,0,156,42,2,0,224,147,2,0,224,147,2,0,8,148,2,0,8,148,2,0,2,0,0,0,64,0,0,0,197,58,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,144,2,0,0,0,0,0,0,0,0,0,60,144,2,0,0,0,0,0,0,0,0,0,120,144,2,0,172,144,2,0,0,0,0,0,0,0,0,0,224,144,2,0,20,145,2,0,0,0,0,0,0,0,0,0,80,145,2,0,140,145,2,0,0,0,0,0,0,0,0,0,208,145,2,0,4,146,2,0,140,145,2,0,0,0,0,0,56,146,2,0,108,146,2,0,160,146,2,0,44,147,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,243,0,0,0,5,59,6,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,48,144,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,53,12,0,0,248,59,6,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,100,144,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,243,0,0,0,45,72,6,0,1,0,0,0,0,0,56,224,0,0,56,96,2,0,0,0,0,0,0,0,160,144,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,32,73,6,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,212,144,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,19,74,6,0,1,0,0,0,0,0,84,224,0,0,84,96,2,0,0,0,0,0,0,0,8,145,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,53,12,0,0,6,75,6,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,60,145,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,53,12,0,0,59,87,6,0,1,0,0,0,0,0,124,224,0,0,92,96,3,0,0,0,0,0,0,0,120,145,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,7,0,0,0,112,99,6,0,1,0,0,0,0,0,56,224,0,0,16,96,3,0,0,0,0,0,0,0,180,145,2,0,0,0,0,0,3,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,243,0,0,0,119,99,6,0,1,0,0,0,0,0,149,224,0,0,149,96,2,0,0,0,0,0,0,0,248,145,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,106,100,6,0,1,0,0,0,0,0,92,224,0,0,92,96,2,0,0,0,0,0,0,0,44,146,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,93,101,6,0,1,0,0,0,0,76,93,225,0,76,93,97,2,0,0,0,0,0,0,0,96,146,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,80,102,6,0,1,0,0,0,0,136,51,225,0,136,51,97,2,0,0,0,0,0,0,0,148,146,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,25,0,0,0,67,103,6,0,1,0,0,0,0,192,18,225,0,0,153,96,5,0,0,0,0,0,0,0,200,146,2,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,1,0,0,0,25,0,0,0,92,103,6,0,1,0,0,0,0,0,120,224,0,0,16,96,5,0,0,0,0,0,0,0,84,147,2,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,2,0,0,0,64,0,0,0,117,103,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,181,103,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,148,2,0,36,149,2,0,0,0,0,0,0,0,0,0,96,149,2,0,160,146,2,0,44,147,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,169,0,0,0,185,103,6,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,240,148,2,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,98,104,6,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,76,149,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,9,0,0,0,123,104,6,0,1,0,0,0,0,136,51,225,0,136,51,97,2,0,0,0,0,0,0,0,136,149,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,15,0,0,0,52,125,2,0,244,149,2,0,244,149,2,0,28,150,2,0,28,150,2,0,2,0,0,0,0,0,0,0,30,0,0,0,52,125,2,0,140,154,2,0,140,154,2,0,28,150,2,0,28,150,2,0,1,0,0,0,2,0,0,0,6,0,0,0,156,42,2,0,224,147,2,0,224,147,2,0,8,148,2,0,8,148,2,0,2,0,0,0,64,0,0,0,132,104,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,220,150,2,0,0,0,0,0,0,0,0,0,16,151,2,0,0,0,0,0,0,0,0,0,76,151,2,0,128,151,2,0,0,0,0,0,0,0,0,0,180,151,2,0,232,151,2,0,0,0,0,0,0,0,0,0,36,152,2,0,96,152,2,0,0,0,0,0,0,0,0,0,164,152,2,0,216,152,2,0,96,152,2,0,0,0,0,0,12,153,2,0,64,153,2,0,116,153,2,0,0,154,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,243,0,0,0,196,104,6,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,4,151,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,53,12,0,0,183,105,6,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,56,151,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,243,0,0,0,236,117,6,0,1,0,0,0,0,0,56,224,0,0,56,96,2,0,0,0,0,0,0,0,116,151,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,223,118,6,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,168,151,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,210,119,6,0,1,0,0,0,0,0,84,224,0,0,84,96,2,0,0,0,0,0,0,0,220,151,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,53,12,0,0,197,120,6,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,16,152,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,53,12,0,0,250,132,6,0,1,0,0,0,0,0,124,224,0,0,92,96,3,0,0,0,0,0,0,0,76,152,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,7,0,0,0,47,145,6,0,1,0,0,0,0,0,56,224,0,0,16,96,3,0,0,0,0,0,0,0,136,152,2,0,0,0,0,0,3,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,243,0,0,0,54,145,6,0,1,0,0,0,0,0,149,224,0,0,149,96,2,0,0,0,0,0,0,0,204,152,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,41,146,6,0,1,0,0,0,0,0,92,224,0,0,92,96,2,0,0,0,0,0,0,0,0,153,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,28,147,6,0,1,0,0,0,0,76,93,225,0,76,93,97,2,0,0,0,0,0,0,0,52,153,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,15,148,6,0,1,0,0,0,0,136,51,225,0,136,51,97,2,0,0,0,0,0,0,0,104,153,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,25,0,0,0,2,149,6,0,1,0,0,0,0,192,18,225,0,0,153,96,5,0,0,0,0,0,0,0,156,153,2,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,1,0,0,0,25,0,0,0,27,149,6,0,1,0,0,0,0,0,120,224,0,0,16,96,5,0,0,0,0,0,0,0,40,154,2,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,2,0,0,0,64,0,0,0,52,149,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,15,0,0,0,52,125,2,0,20,155,2,0,20,155,2,0,60,155,2,0,60,155,2,0,2,0,0,0,0,0,0,0,30,0,0,0,52,125,2,0,180,159,2,0,180,159,2,0,60,155,2,0,60,155,2,0,1,0,0,0,2,0,0,0,6,0,0,0,156,42,2,0,224,147,2,0,224,147,2,0,8,148,2,0,8,148,2,0,2,0,0,0,64,0,0,0,116,149,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,155,2,0,0,0,0,0,0,0,0,0,48,156,2,0,0,0,0,0,0,0,0,0,108,156,2,0,160,156,2,0,0,0,0,0,0,0,0,0,212,156,2,0,8,157,2,0,0,0,0,0,0,0,0,0,68,157,2,0,128,157,2,0,0,0,0,0,0,0,0,0,196,157,2,0,248,157,2,0,128,157,2,0,0,0,0,0,44,158,2,0,96,158,2,0,156,158,2,0,40,159,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,243,0,0,0,180,149,6,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,36,156,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,53,12,0,0,167,150,6,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,88,156,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,243,0,0,0,220,162,6,0,1,0,0,0,0,0,56,224,0,0,56,96,2,0,0,0,0,0,0,0,148,156,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,207,163,6,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,200,156,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,194,164,6,0,1,0,0,0,0,0,84,224,0,0,84,96,2,0,0,0,0,0,0,0,252,156,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,53,12,0,0,181,165,6,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,48,157,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,53,12,0,0,234,177,6,0,1,0,0,0,0,0,124,224,0,0,92,96,3,0,0,0,0,0,0,0,108,157,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,7,0,0,0,31,190,6,0,1,0,0,0,0,0,56,224,0,0,16,96,3,0,0,0,0,0,0,0,168,157,2,0,0,0,0,0,3,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,243,0,0,0,38,190,6,0,1,0,0,0,0,0,149,224,0,0,149,96,2,0,0,0,0,0,0,0,236,157,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,25,191,6,0,1,0,0,0,0,0,92,224,0,0,92,96,2,0,0,0,0,0,0,0,32,158,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,12,192,6,0,1,0,0,0,0,106,120,225,0,106,120,97,2,0,0,0,0,0,0,0,84,158,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,53,12,0,0,255,192,6,0,1,0,0,0,0,136,83,225,0,136,51,97,3,0,0,0,0,0,0,0,136,158,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,25,0,0,0,52,205,6,0,1,0,0,0,0,192,18,225,0,0,153,96,5,0,0,0,0,0,0,0,196,158,2,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,1,0,0,0,25,0,0,0,77,205,6,0,1,0,0,0,0,0,120,224,0,0,16,96,5,0,0,0,0,0,0,0,80,159,2,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,2,0,0,0,64,0,0,0,102,205,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,15,0,0,0,52,125,2,0,60,160,2,0,60,160,2,0,100,160,2,0,100,160,2,0,2,0,0,0,0,0,0,0,30,0,0,0,52,125,2,0,228,164,2,0,228,164,2,0,100,160,2,0,100,160,2,0,1,0,0,0,2,0,0,0,6,0,0,0,156,42,2,0,224,147,2,0,224,147,2,0,8,148,2,0,8,148,2,0,1,0,0,0,8,0,0,0,166,205,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,161,2,0,0,0,0,0,0,0,0,0,88,161,2,0,0,0,0,0,0,0,0,0,148,161,2,0,200,161,2,0,0,0,0,0,0,0,0,0,252,161,2,0,48,162,2,0,0,0,0,0,0,0,0,0,108,162,2,0,168,162,2,0,0,0,0,0,0,0,0,0,236,162,2,0,32,163,2,0,168,162,2,0,0,0,0,0,84,163,2,0,144,163,2,0,204,163,2,0,88,164,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,243,0,0,0,174,205,6,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,76,161,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,53,12,0,0,161,206,6,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,128,161,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,243,0,0,0,214,218,6,0,1,0,0,0,0,0,56,224,0,0,56,96,2,0,0,0,0,0,0,0,188,161,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,201,219,6,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,240,161,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,188,220,6,0,1,0,0,0,0,0,84,224,0,0,84,96,2,0,0,0,0,0,0,0,36,162,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,53,12,0,0,175,221,6,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,88,162,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,53,12,0,0,228,233,6,0,1,0,0,0,0,0,124,224,0,0,92,96,3,0,0,0,0,0,0,0,148,162,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,7,0,0,0,25,246,6,0,1,0,0,0,0,0,56,224,0,0,16,96,3,0,0,0,0,0,0,0,208,162,2,0,0,0,0,0,3,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,243,0,0,0,32,246,6,0,1,0,0,0,0,0,149,224,0,0,149,96,2,0,0,0,0,0,0,0,20,163,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,243,0,0,0,19,247,6,0,1,0,0,0,0,0,92,224,0,0,92,96,2,0,0,0,0,0,0,0,72,163,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,53,12,0,0,6,248,6,0,1,0,0,0,0,106,152,225,0,106,120,97,3,0,0,0,0,0,0,0,124,163,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,53,12,0,0,59,4,7,0,1,0,0,0,0,136,83,225,0,136,51,97,3,0,0,0,0,0,0,0,184,163,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,25,0,0,0,112,16,7,0,1,0,0,0,0,192,18,225,0,0,153,96,5,0,0,0,0,0,0,0,244,163,2,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,1,0,0,0,25,0,0,0,137,16,7,0,1,0,0,0,0,0,120,224,0,0,16,96,5,0,0,0,0,0,0,0,128,164,2,0,0,0,0,0,12,0,0,0,11,0,0,0,13,0,0,0,10,0,0,0,14,0,0,0,9,0,0,0,15,0,0,0,8,0,0,0,16,0,0,0,7,0,0,0,17,0,0,0,6,0,0,0,18,0,0,0,5,0,0,0,19,0,0,0,4,0,0,0,20,0,0,0,3,0,0,0,21,0,0,0,2,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,1,0,0,0,8,0,0,0,162,16,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,152,5,0,0,0,3,0,0,255,255,255,255,64,156,0,0,80,195,0,0,84,238,0,0,128,238,0,0,172,238,0,0,156,239,0,0,204,239,0,0,252,239,0,0,44,243,0,0,252,239,0,0,92,246,0,0,140,246,0,0,28,0,1,0,172,9,1,0,60,19,1,0,204,28,1,0,252,28,1,0,96,3,0,0,192,3,0,0,188,32,1,0,232,32,1,0,20,33,1,0,64,33,1,0,32,4,0,0,108,33,1,0,156,33,1,0,120,4,0,0,204,33,1,0,216,4,0,0,104,43,1,0,168,54,1,0,128,71,1,0,2,0,0,0,160,119,1,0,168,165,2,0,0,166,2,0,16,191,2,0,0,166,2,0,48,206,2,0,0,166,2,0,56,210,2,0,0,166,2,0,72,214,2,0,0,166,2,0,96,218,2,0,0,166,2,0,144,222,2,0,0,166,2,0,208,226,2,0,0,166,2,0,12,243,2,0,0,166,2,0,56,248,2,0,0,166,2,0,204,253,2,0,0,166,2,0,184,15,3,0,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+165448);
/* memory initializer */ allocate([1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+176768);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+177796);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,32,0,0,0,80,191,2,0,104,202,2,0,104,202,2,0,144,202,2,0,144,202,2,0,1,0,0,0,0,0,0,0,32,0,0,0,80,191,2,0,8,206,2,0,8,206,2,0,144,202,2,0,144,202,2,0,0,0,0,0,255,255,255,255,255,255,255,255,8,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+179976);
/* memory initializer */ allocate([1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,25,0,0,0,255,255,255,255,45,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,64,0,0,0,170,16,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,203,2,0,0,0,0,0,0,0,0,0,0,0,0,0,132,203,2,0,0,0,0,0,0,0,0,0,0,0,0,0,184,203,2,0,0,0,0,0,0,0,0,0,0,0,0,0,244,203,2,0,0,0,0,0,0,0,0,0,0,0,0,0,48,204,2,0,0,0,0,0,124,204,2,0,216,204,2,0,0,0,0,0,0,0,0,0,20,205,2,0,80,205,2,0,172,205,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,81,0,0,0,234,16,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,120,203,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,81,0,0,0,59,17,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,172,203,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,140,17,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,224,203,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,113,2,0,0,253,19,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,28,204,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,110,22,7,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,88,204,2,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,169,0,0,0,191,22,7,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,164,204,2,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,104,23,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,0,205,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,113,2,0,0,129,23,7,0,1,0,0,0,0,32,21,225,0,32,245,96,3,0,0,0,0,0,0,0,60,205,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,169,0,0,0,242,25,7,0,1,0,0,0,0,128,211,224,0,0,122,96,4,0,0,0,0,0,0,0,120,205,2,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,169,0,0,0,155,26,7,0,1,0,0,0,0,0,88,224,0,0,16,96,4,0,0,0,0,0,0,0,212,205,2,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,64,0,0,0,68,27,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,16,0,0,0,80,191,2,0,112,206,2,0,112,206,2,0,152,206,2,0,152,206,2,0,1,0,0,0,0,0,0,0,32,0,0,0,80,191,2,0,16,210,2,0,16,210,2,0,152,206,2,0,152,206,2,0,2,0,0,0,64,0,0,0,132,27,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,207,2,0,0,0,0,0,0,0,0,0,0,0,0,0,140,207,2,0,0,0,0,0,0,0,0,0,0,0,0,0,192,207,2,0,0,0,0,0,0,0,0,0,0,0,0,0,252,207,2,0,0,0,0,0,0,0,0,0,0,0,0,0,56,208,2,0,0,0,0,0,132,208,2,0,224,208,2,0,0,0,0,0,0,0,0,0,28,209,2,0,88,209,2,0,180,209,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,81,0,0,0,196,27,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,128,207,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,81,0,0,0,21,28,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,180,207,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,102,28,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,232,207,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,113,2,0,0,215,30,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,36,208,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,72,33,7,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,96,208,2,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,169,0,0,0,153,33,7,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,172,208,2,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,66,34,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,8,209,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,113,2,0,0,91,34,7,0,1,0,0,0,0,32,21,225,0,32,245,96,3,0,0,0,0,0,0,0,68,209,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,169,0,0,0,204,36,7,0,1,0,0,0,0,128,211,224,0,0,122,96,4,0,0,0,0,0,0,0,128,209,2,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,169,0,0,0,117,37,7,0,1,0,0,0,0,0,88,224,0,0,16,96,4,0,0,0,0,0,0,0,220,209,2,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,64,0,0,0,30,38,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,16,0,0,0,80,191,2,0,120,210,2,0,120,210,2,0,160,210,2,0,160,210,2,0,1,0,0,0,0,0,0,0,32,0,0,0,80,191,2,0,32,214,2,0,32,214,2,0,160,210,2,0,160,210,2,0,2,0,0,0,64,0,0,0,94,38,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,211,2,0,0,0,0,0,0,0,0,0,0,0,0,0,148,211,2,0,0,0,0,0,0,0,0,0,0,0,0,0,200,211,2,0,0,0,0,0,0,0,0,0,0,0,0,0,4,212,2,0,0,0,0,0,0,0,0,0,0,0,0,0,64,212,2,0,0,0,0,0,140,212,2,0,232,212,2,0,0,0,0,0,0,0,0,0,36,213,2,0,104,213,2,0,196,213,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,81,0,0,0,158,38,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,136,211,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,81,0,0,0,239,38,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,188,211,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,64,39,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,240,211,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,113,2,0,0,177,41,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,44,212,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,34,44,7,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,104,212,2,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,169,0,0,0,115,44,7,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,180,212,2,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,28,45,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,16,213,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,49,0,0,0,53,45,7,0,1,0,0,0,0,176,31,225,0,32,245,96,3,0,0,0,0,0,0,0,76,213,2,0,0,0,0,0,3,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,2,0,0,0,169,0,0,0,102,45,7,0,1,0,0,0,0,128,211,224,0,0,122,96,4,0,0,0,0,0,0,0,144,213,2,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,169,0,0,0,15,46,7,0,1,0,0,0,0,0,88,224,0,0,16,96,4,0,0,0,0,0,0,0,236,213,2,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,64,0,0,0,184,46,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,16,0,0,0,80,191,2,0,136,214,2,0,136,214,2,0,176,214,2,0,176,214,2,0,1,0,0,0,0,0,0,0,32,0,0,0,80,191,2,0,56,218,2,0,56,218,2,0,176,214,2,0,176,214,2,0,2,0,0,0,64,0,0,0,248,46,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,215,2,0,0,0,0,0,0,0,0,0,0,0,0,0,164,215,2,0,0,0,0,0,0,0,0,0,0,0,0,0,216,215,2,0,0,0,0,0,0,0,0,0,0,0,0,0,20,216,2,0,0,0,0,0,0,0,0,0,0,0,0,0,80,216,2,0,0,0,0,0,156,216,2,0,248,216,2,0,0,0,0,0,0,0,0,0,52,217,2,0,128,217,2,0,220,217,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,81,0,0,0,56,47,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,152,215,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,81,0,0,0,137,47,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,204,215,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,218,47,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,0,216,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,113,2,0,0,75,50,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,60,216,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,188,52,7,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,120,216,2,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,169,0,0,0,13,53,7,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,196,216,2,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,182,53,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,32,217,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,207,53,7,0,1,0,0,0,0,32,53,225,0,32,245,96,4,0,0,0,0,0,0,0,92,217,2,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,169,0,0,0,32,54,7,0,1,0,0,0,0,128,211,224,0,0,122,96,4,0,0,0,0,0,0,0,168,217,2,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,169,0,0,0,201,54,7,0,1,0,0,0,0,0,88,224,0,0,16,96,4,0,0,0,0,0,0,0,4,218,2,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,64,0,0,0,114,55,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,16,0,0,0,80,191,2,0,160,218,2,0,160,218,2,0,200,218,2,0,200,218,2,0,1,0,0,0,0,0,0,0,32,0,0,0,80,191,2,0,104,222,2,0,104,222,2,0,200,218,2,0,200,218,2,0,2,0,0,0,64,0,0,0,178,55,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,219,2,0,0,0,0,0,0,0,0,0,0,0,0,0,188,219,2,0,0,0,0,0,0,0,0,0,0,0,0,0,240,219,2,0,0,0,0,0,0,0,0,0,0,0,0,0,44,220,2,0,0,0,0,0,0,0,0,0,0,0,0,0,104,220,2,0,0,0,0,0,180,220,2,0,16,221,2,0,0,0,0,0,0,0,0,0,76,221,2,0,152,221,2,0,252,221,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,81,0,0,0,242,55,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,176,219,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,81,0,0,0,67,56,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,228,219,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,148,56,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,24,220,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,113,2,0,0,5,59,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,84,220,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,118,61,7,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,144,220,2,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,169,0,0,0,199,61,7,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,220,220,2,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,112,62,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,56,221,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,137,62,7,0,1,0,0,0,0,224,63,225,0,224,255,96,4,0,0,0,0,0,0,0,116,221,2,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,225,0,0,0,218,62,7,0,1,0,0,0,0,192,221,224,0,0,145,96,4,0,0,0,0,0,0,0,192,221,2,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,2,0,0,0,33,1,0,0,187,63,7,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,36,222,2,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,2,0,0,0,64,0,0,0,220,64,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,16,0,0,0,80,191,2,0,208,222,2,0,208,222,2,0,248,222,2,0,248,222,2,0,1,0,0,0,0,0,0,0,32,0,0,0,80,191,2,0,168,226,2,0,168,226,2,0,248,222,2,0,248,222,2,0,2,0,0,0,64,0,0,0,28,65,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,223,2,0,0,0,0,0,0,0,0,0,0,0,0,0,236,223,2,0,0,0,0,0,0,0,0,0,0,0,0,0,32,224,2,0,0,0,0,0,0,0,0,0,0,0,0,0,92,224,2,0,0,0,0,0,0,0,0,0,0,0,0,0,152,224,2,0,0,0,0,0,228,224,2,0,64,225,2,0,0,0,0,0,0,0,0,0,124,225,2,0,216,225,2,0,60,226,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,81,0,0,0,92,65,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,224,223,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,81,0,0,0,173,65,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,20,224,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,254,65,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,72,224,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,113,2,0,0,111,68,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,132,224,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,224,70,7,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,192,224,2,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,169,0,0,0,49,71,7,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,12,225,2,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,218,71,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,104,225,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,169,0,0,0,243,71,7,0,1,0,0,0,0,232,87,225,0,224,255,96,4,0,0,0,0,0,0,0,164,225,2,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,225,0,0,0,156,72,7,0,1,0,0,0,0,192,221,224,0,0,145,96,4,0,0,0,0,0,0,0,0,226,2,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,2,0,0,0,33,1,0,0,125,73,7,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,100,226,2,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,2,0,0,0,64,0,0,0,158,74,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,16,0,0,0,16,227,2,0,40,238,2,0,40,238,2,0,80,238,2,0,80,238,2,0,1,0,0,0,0,0,0,0,32,0,0,0,16,227,2,0,228,242,2,0,228,242,2,0,80,238,2,0,80,238,2,0,0,0,0,0,255,255,255,255,255,255,255,255,10,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+182372);
/* memory initializer */ allocate([1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,16,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,30,0,0,0,255,255,255,255,50,0,0,0,255,255,255,255,80,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,100,0,0,0,222,74,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,239,2,0,0,0,0,0,0,0,0,0,0,0,0,0,68,239,2,0,0,0,0,0,0,0,0,0,0,0,0,0,120,239,2,0,0,0,0,0,0,0,0,0,0,0,0,0,180,239,2,0,0,0,0,0,0,0,0,0,0,0,0,0,240,239,2,0,0,0,0,0,0,0,0,0,0,0,0,0,60,240,2,0,0,0,0,0,136,240,2,0,188,240,2,0,0,0,0,0,0,0,0,0,16,241,2,0,100,241,2,0,0,0,0,0,0,0,0,0,184,241,2,0,20,242,2,0,120,242,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,81,0,0,0,66,75,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,56,239,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,81,0,0,0,147,75,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,108,239,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,228,75,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,160,239,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,113,2,0,0,85,78,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,220,239,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,198,80,7,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,24,240,2,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,81,0,0,0,23,81,7,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,100,240,2,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,4,0,0,0,81,0,0,0,104,81,7,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,176,240,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,121,0,0,0,185,81,7,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,228,240,2,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,121,0,0,0,50,82,7,0,1,0,0,0,0,128,187,224,0,0,118,96,4,0,0,0,0,0,0,0,56,241,2,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,121,0,0,0,171,82,7,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,140,241,2,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,169,0,0,0,36,83,7,0,1,0,0,0,0,232,87,225,0,224,255,96,4,0,0,0,0,0,0,0,224,241,2,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,225,0,0,0,205,83,7,0,1,0,0,0,0,192,221,224,0,0,145,96,4,0,0,0,0,0,0,0,60,242,2,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,2,0,0,0,33,1,0,0,174,84,7,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,160,242,2,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,2,0,0,0,100,0,0,0,207,85,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,16,0,0,0,16,227,2,0,76,243,2,0,76,243,2,0,116,243,2,0,116,243,2,0,1,0,0,0,0,0,0,0,32,0,0,0,16,227,2,0,16,248,2,0,16,248,2,0,116,243,2,0,116,243,2,0,2,0,0,0,100,0,0,0,51,86,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,244,2,0,0,0,0,0,0,0,0,0,0,0,0,0,104,244,2,0,0,0,0,0,0,0,0,0,0,0,0,0,156,244,2,0,0,0,0,0,0,0,0,0,0,0,0,0,216,244,2,0,0,0,0,0,0,0,0,0,0,0,0,0,20,245,2,0,0,0,0,0,0,0,0,0,0,0,0,0,96,245,2,0,0,0,0,0,172,245,2,0,224,245,2,0,0,0,0,0,0,0,0,0,52,246,2,0,136,246,2,0,0,0,0,0,0,0,0,0,220,246,2,0,64,247,2,0,164,247,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,81,0,0,0,151,86,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,92,244,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,81,0,0,0,232,86,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,144,244,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,57,87,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,196,244,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,113,2,0,0,170,89,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,0,245,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,27,92,7,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,60,245,2,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,81,0,0,0,108,92,7,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,136,245,2,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,4,0,0,0,81,0,0,0,189,92,7,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,212,245,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,121,0,0,0,14,93,7,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,8,246,2,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,121,0,0,0,135,93,7,0,1,0,0,0,0,128,187,224,0,0,118,96,4,0,0,0,0,0,0,0,92,246,2,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,121,0,0,0,0,94,7,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,176,246,2,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,225,0,0,0,121,94,7,0,1,0,0,0,0,228,91,225,0,224,255,96,4,0,0,0,0,0,0,0,4,247,2,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,2,0,0,0,225,0,0,0,90,95,7,0,1,0,0,0,0,192,221,224,0,0,145,96,4,0,0,0,0,0,0,0,104,247,2,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,2,0,0,0,33,1,0,0,59,96,7,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,204,247,2,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,2,0,0,0,100,0,0,0,92,97,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,16,0,0,0,16,227,2,0,120,248,2,0,120,248,2,0,160,248,2,0,160,248,2,0,1,0,0,0,0,0,0,0,32,0,0,0,16,227,2,0,164,253,2,0,164,253,2,0,160,248,2,0,160,248,2,0,2,0,0,0,100,0,0,0,192,97,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,249,2,0,0,0,0,0,0,0,0,0,0,0,0,0,148,249,2,0,0,0,0,0,0,0,0,0,0,0,0,0,200,249,2,0,0,0,0,0,0,0,0,0,0,0,0,0,4,250,2,0,0,0,0,0,0,0,0,0,0,0,0,0,64,250,2,0,0,0,0,0,0,0,0,0,0,0,0,0,140,250,2,0,0,0,0,0,216,250,2,0,12,251,2,0,0,0,0,0,0,0,0,0,96,251,2,0,180,251,2,0,0,0,0,0,0,0,0,0,8,252,2,0,92,252,2,0,184,252,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,81,0,0,0,36,98,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,136,249,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,81,0,0,0,117,98,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,188,249,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,198,98,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,240,249,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,113,2,0,0,55,101,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,44,250,2,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,168,103,7,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,104,250,2,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,81,0,0,0,249,103,7,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,180,250,2,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,4,0,0,0,81,0,0,0,74,104,7,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,0,251,2,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,121,0,0,0,155,104,7,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,52,251,2,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,121,0,0,0,20,105,7,0,1,0,0,0,0,128,187,224,0,0,118,96,4,0,0,0,0,0,0,0,136,251,2,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,121,0,0,0,141,105,7,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,220,251,2,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,121,0,0,0,6,106,7,0,1,0,0,0,0,226,120,225,0,232,51,97,4,0,0,0,0,0,0,0,48,252,2,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,169,0,0,0,127,106,7,0,1,0,0,0,0,96,18,225,0,128,184,96,4,0,0,0,0,0,0,0,132,252,2,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,1,0,0,0,49,0,0,0,40,107,7,0,1,0,0,0,0,0,152,224,0,0,16,96,6,0,0,0,0,0,0,0,224,252,2,0,0,0,0,0,24,0,0,0,23,0,0,0,25,0,0,0,22,0,0,0,26,0,0,0,21,0,0,0,27,0,0,0,20,0,0,0,28,0,0,0,19,0,0,0,29,0,0,0,18,0,0,0,30,0,0,0,17,0,0,0,31,0,0,0,16,0,0,0,32,0,0,0,15,0,0,0,33,0,0,0,14,0,0,0,34,0,0,0,13,0,0,0,35,0,0,0,12,0,0,0,36,0,0,0,11,0,0,0,37,0,0,0,10,0,0,0,38,0,0,0,9,0,0,0,39,0,0,0,8,0,0,0,40,0,0,0,7,0,0,0,41,0,0,0,6,0,0,0,42,0,0,0,5,0,0,0,43,0,0,0,4,0,0,0,44,0,0,0,3,0,0,0,45,0,0,0,2,0,0,0,46,0,0,0,1,0,0,0,47,0,0,0,0,0,0,0,48,0,0,0,2,0,0,0,100,0,0,0,89,107,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,16,0,0,0,12,254,2,0,36,9,3,0,36,9,3,0,76,9,3,0,76,9,3,0,1,0,0,0,0,0,0,0,32,0,0,0,12,254,2,0,144,15,3,0,144,15,3,0,76,9,3,0,76,9,3,0,0,0,0,0,255,255,255,255,255,255,255,255,10,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+191524);
/* memory initializer */ allocate([1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,71,0,0,0,157,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,100,0,0,0,189,107,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,10,3,0,0,0,0,0,0,0,0,0,0,0,0,0,64,10,3,0,0,0,0,0,0,0,0,0,0,0,0,0,124,10,3,0,0,0,0,0,0,0,0,0,0,0,0,0,200,10,3,0,0,0,0,0,52,11,3,0,104,11,3,0,0,0,0,0,0,0,0,0,188,11,3,0,24,12,3,0,0,0,0,0,0,0,0,0,84,12,3,0,176,12,3,0,0,0,0,0,0,0,0,0,4,13,3,0,104,13,3,0,0,0,0,0,0,0,0,0,228,13,3,0,48,14,3,0,164,14,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,81,0,0,0,33,108,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,52,10,3,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,114,108,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,104,10,3,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,227,110,7,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,164,10,3,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,33,1,0,0,52,111,7,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,240,10,3,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,4,0,0,0,81,0,0,0,85,112,7,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,92,11,3,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,121,0,0,0,166,112,7,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,144,11,3,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,169,0,0,0,31,113,7,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,228,11,3,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,200,113,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,64,12,3,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,169,0,0,0,225,113,7,0,1,0,0,0,0,128,208,224,0,0,118,96,4,0,0,0,0,0,0,0,124,12,3,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,121,0,0,0,138,114,7,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,216,12,3,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,225,0,0,0,3,115,7,0,1,0,0,0,0,96,242,224,0,0,149,96,4,0,0,0,0,0,0,0,44,13,3,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,2,0,0,0,185,1,0,0,228,115,7,0,1,0,0,0,0,0,116,224,0,0,16,96,5,0,0,0,0,0,0,0,144,13,3,0,0,0,0,0,10,0,0,0,9,0,0,0,11,0,0,0,8,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,5,0,0,0,15,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,17,0,0,0,2,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,2,0,0,0,81,0,0,0,157,117,7,0,1,0,0,0,0,24,125,225,0,24,61,97,4,0,0,0,0,0,0,0,12,14,3,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,105,1,0,0,238,117,7,0,1,0,0,0,0,144,27,225,0,128,184,96,5,0,0,0,0,0,0,0,88,14,3,0,0,0,0,0,9,0,0,0,8,0,0,0,10,0,0,0,7,0,0,0,11,0,0,0,6,0,0,0,12,0,0,0,5,0,0,0,13,0,0,0,4,0,0,0,14,0,0,0,3,0,0,0,15,0,0,0,2,0,0,0,16,0,0,0,1,0,0,0,17,0,0,0,0,0,0,0,18,0,0,0,1,0,0,0,49,0,0,0,87,119,7,0,1,0,0,0,0,0,152,224,0,0,16,96,6,0,0,0,0,0,0,0,204,14,3,0,0,0,0,0,24,0,0,0,23,0,0,0,25,0,0,0,22,0,0,0,26,0,0,0,21,0,0,0,27,0,0,0,20,0,0,0,28,0,0,0,19,0,0,0,29,0,0,0,18,0,0,0,30,0,0,0,17,0,0,0,31,0,0,0,16,0,0,0,32,0,0,0,15,0,0,0,33,0,0,0,14,0,0,0,34,0,0,0,13,0,0,0,35,0,0,0,12,0,0,0,36,0,0,0,11,0,0,0,37,0,0,0,10,0,0,0,38,0,0,0,9,0,0,0,39,0,0,0,8,0,0,0,40,0,0,0,7,0,0,0,41,0,0,0,6,0,0,0,42,0,0,0,5,0,0,0,43,0,0,0,4,0,0,0,44,0,0,0,3,0,0,0,45,0,0,0,2,0,0,0,46,0,0,0,1,0,0,0,47,0,0,0,0,0,0,0,48,0,0,0,2,0,0,0,100,0,0,0,136,119,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,16,0,0,0,12,254,2,0,248,15,3,0,248,15,3,0,32,16,3,0,32,16,3,0,1,0,0,0,0,0,0,0,32,0,0,0,12,254,2,0,124,22,3,0,124,22,3,0,32,16,3,0,32,16,3,0,2,0,0,0,100,0,0,0,236,119,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,16,3,0,0,0,0,0,0,0,0,0,0,0,0,0,20,17,3,0,0,0,0,0,0,0,0,0,0,0,0,0,80,17,3,0,0,0,0,0,0,0,0,0,0,0,0,0,156,17,3,0,0,0,0,0,8,18,3,0,60,18,3,0,0,0,0,0,0,0,0,0,144,18,3,0,236,18,3,0,0,0,0,0,0,0,0,0,40,19,3,0,132,19,3,0,0,0,0,0,0,0,0,0,216,19,3,0,60,20,3,0,0,0,0,0,0,0,0,0,184,20,3,0,28,21,3,0,144,21,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,81,0,0,0,80,120,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,8,17,3,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,161,120,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,60,17,3,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,18,123,7,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,120,17,3,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,33,1,0,0,99,123,7,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,196,17,3,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,4,0,0,0,81,0,0,0,132,124,7,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,48,18,3,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,121,0,0,0,213,124,7,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,100,18,3,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,169,0,0,0,78,125,7,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,184,18,3,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,247,125,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,20,19,3,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,169,0,0,0,16,126,7,0,1,0,0,0,0,128,208,224,0,0,118,96,4,0,0,0,0,0,0,0,80,19,3,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,121,0,0,0,185,126,7,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,172,19,3,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,225,0,0,0,50,127,7,0,1,0,0,0,0,96,242,224,0,0,149,96,4,0,0,0,0,0,0,0,0,20,3,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,2,0,0,0,185,1,0,0,19,128,7,0,1,0,0,0,0,0,116,224,0,0,16,96,5,0,0,0,0,0,0,0,100,20,3,0,0,0,0,0,10,0,0,0,9,0,0,0,11,0,0,0,8,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,5,0,0,0,15,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,17,0,0,0,2,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,2,0,0,0,225,0,0,0,204,129,7,0,1,0,0,0,0,117,153,225,0,24,61,97,4,0,0,0,0,0,0,0,224,20,3,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,2,0,0,0,105,1,0,0,173,130,7,0,1,0,0,0,0,144,27,225,0,128,184,96,5,0,0,0,0,0,0,0,68,21,3,0,0,0,0,0,9,0,0,0,8,0,0,0,10,0,0,0,7,0,0,0,11,0,0,0,6,0,0,0,12,0,0,0,5,0,0,0,13,0,0,0,4,0,0,0,14,0,0,0,3,0,0,0,15,0,0,0,2,0,0,0,16,0,0,0,1,0,0,0,17,0,0,0,0,0,0,0,18,0,0,0,1,0,0,0,49,0,0,0,22,132,7,0,1,0,0,0,0,0,152,224,0,0,16,96,6,0,0,0,0,0,0,0,184,21,3,0,0,0,0,0,24,0,0,0,23,0,0,0,25,0,0,0,22,0,0,0,26,0,0,0,21,0,0,0,27,0,0,0,20,0,0,0,28,0,0,0,19,0,0,0,29,0,0,0,18,0,0,0,30,0,0,0,17,0,0,0,31,0,0,0,16,0,0,0,32,0,0,0,15,0,0,0,33,0,0,0,14,0,0,0,34,0,0,0,13,0,0,0,35,0,0,0,12,0,0,0,36,0,0,0,11,0,0,0,37,0,0,0,10,0,0,0,38,0,0,0,9,0,0,0,39,0,0,0,8,0,0,0,40,0,0,0,7,0,0,0,41,0,0,0,6,0,0,0,42,0,0,0,5,0,0,0,43,0,0,0,4,0,0,0,44,0,0,0,3,0,0,0,45,0,0,0,2,0,0,0,46,0,0,0,1,0,0,0,47,0,0,0,0,0,0,0,48,0,0,0,2,0,0,0,100,0,0,0,71,132,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,248,5,0,0,0,3,0,0,2,0,0,0,144,101,0,0,64,156,0,0,84,238,0,0,128,238,0,0,172,238,0,0,156,239,0,0,204,239,0,0,252,239,0,0,44,243,0,0,252,239,0,0,92,246,0,0,140,246,0,0,28,0,1,0,172,9,1,0,60,19,1,0,204,28,1,0,252,28,1,0,96,3,0,0,192,3,0,0,188,32,1,0,232,32,1,0,20,33,1,0,64,33,1,0,32,4,0,0,108,33,1,0,156,33,1,0,88,6,0,0,204,33,1,0,216,4,0,0,104,43,1,0,168,54,1,0,128,71,1,0,2,0,0,0,160,119,1,0,48,120,1,0,11,0,0,0,184,6,0,0,0,3,0,0,255,255,255,255,144,101,0,0,64,156,0,0,84,238,0,0,128,238,0,0,172,238,0,0,156,239,0,0,204,239,0,0,252,239,0,0,44,243,0,0,252,239,0,0,92,246,0,0,140,246,0,0,28,0,1,0,172,9,1,0,60,19,1,0,204,28,1,0,252,28,1,0,96,3,0,0,192,3,0,0,188,32,1,0,232,32,1,0,20,33,1,0,64,33,1,0,32,4,0,0,108,33,1,0,156,33,1,0,88,6,0,0,204,33,1,0,216,4,0,0,0,0,0,0,168,54,1,0,128,71,1,0,2,0,0,0,160,119,1,0,168,165,2,0,3,0,0,0,24,7,0,0,56,7,0,0,2,0,0,0,56,74,0,0,144,101,0,0,120,24,3,0,132,24,3,0,144,24,3,0,156,239,0,0,204,239,0,0,224,24,3,0,224,24,3,0,224,24,3,0,240,25,3,0,32,26,3,0,80,29,3,0,80,29,3,0,128,32,3,0,204,28,1,0,176,35,3,0,88,7,0,0,88,7,0,0,240,36,3,0,240,36,3,0,252,36,3,0,252,36,3,0,120,7,0,0,12,37,3,0,28,37,3,0,152,7,0,0,204,33,1,0,184,7,0,0,44,37,3,0,168,54,1,0,128,71,1,0,2,0,0,0,236,40,3,0,12,41,3,0,0,4,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,4,0,0,30,0,0,0,25,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,22,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,242,255,255,255,0,0,0,0,0,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,240,255,255,255,246,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,240,255,255,255,246,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,240,255,255,255,246,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,236,255,255,255,246,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,10,0,0,0,255,255,255,255,10,0,0,0,10,0,0,0,255,255,255,255,20,0,0,0,20,0,0,0,255,255,255,255,20,0,0,0,20,0,0,0,255,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,4,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,12,0,0,0,12,0,0,0,14,0,0,0,20,0,0,0,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,8,0,0,0,8,0,0,0,15,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,8,0,0,0,15,0,0,0,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,10,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,244,255,255,255,246,255,255,255,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,10,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,240,255,255,255,244,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,249,255,255,255,251,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,232,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,244,255,255,255,246,255,255,255,248,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,238,255,255,255,238,255,255,255,238,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,240,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,232,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,4,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,12,0,0,0,12,0,0,0,14,0,0,0,20,0,0,0,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,8,0,0,0,8,0,0,0,15,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,4,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,8,0,0,0,10,0,0,0,12,0,0,0,20,0,0,0,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,4,0,0,0,5,0,0,0,6,0,0,0,8,0,0,0,8,0,0,0,15,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,244,255,255,255,246,255,255,255,248,255,255,255,0,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,8,0,0,0,12,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,240,255,255,255,244,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,246,255,255,255,248,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,232,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,244,255,255,255,246,255,255,255,248,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,244,255,255,255,244,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,250,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,232,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,0,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,8,0,0,0,10,0,0,0,10,0,0,0,10,0,0,0,14,0,0,0,20,0,0,0,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,254,255,255,255,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,8,0,0,0,8,0,0,0,15,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,0,0,0,0,4,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,8,0,0,0,10,0,0,0,12,0,0,0,20,0,0,0,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,251,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,8,0,0,0,8,0,0,0,15,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,250,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,244,255,255,255,246,255,255,255,248,255,255,255,0,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,8,0,0,0,12,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,240,255,255,255,244,255,255,255,236,255,255,255,246,255,255,255,251,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,232,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,244,255,255,255,246,255,255,255,248,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,244,255,255,255,244,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,250,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,232,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,9,0,0,0,10,0,0,0,10,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,14,0,0,0,14,0,0,0,15,0,0,0,15,0,0,0,16,0,0,0,16,0,0,0,17,0,0,0,17,0,0,0,17,0,0,0,18,0,0,0,18,0,0,0,19,0,0,0,19,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,0,1,0,0,0,1,0,0,15,39,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,156,255,255,255,156,255,255,255,156,255,255,255,151,255,255,255,126,255,255,255,126,255,255,255,126,255,255,255,116,255,255,255,4,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,6,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,64,64,0,0,64,64,0,0,128,64,0,0,128,64,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,4,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,6,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,64,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,5,0,0,0,4,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,128,64,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,0,65,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,244,40,3,0,0,41,3,0,9,0,0,0,3,0,0,0,3,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,136,120,1,0,36,41,3,0,136,120,1,0,212,45,3,0,136,120,1,0,244,50,3,0,2,0,0,0,0,0,0,0,32,0,0,0,0,186,1,0,68,41,3,0,68,41,3,0,108,41,3,0,108,41,3,0,2,0,0,0,100,0,0,0,171,132,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,42,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,42,3,0,0,0,0,0,0,0,0,0,0,0,0,0,156,42,3,0,0,0,0,0,0,0,0,0,0,0,0,0,232,42,3,0,0,0,0,0,0,0,0,0,0,0,0,0,52,43,3,0,0,0,0,0,160,43,3,0,212,43,3,0,0,0,0,0,0,0,0,0,40,44,3,0,132,44,3,0,0,0,0,0,0,0,0,0,192,44,3,0,244,44,3,0,88,45,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,161,25,0,0,15,133,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,84,42,3,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,176,158,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,136,42,3,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,33,161,7,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,196,42,3,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,81,0,0,0,114,161,7,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,16,43,3,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,33,1,0,0,195,161,7,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,92,43,3,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,4,0,0,0,81,0,0,0,228,162,7,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,200,43,3,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,121,0,0,0,53,163,7,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,252,43,3,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,169,0,0,0,174,163,7,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,80,44,3,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,87,164,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,172,44,3,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,81,0,0,0,112,164,7,0,1,0,0,0,0,176,19,225,0,176,19,97,2,0,0,0,0,0,0,0,232,44,3,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,225,0,0,0,193,164,7,0,1,0,0,0,0,96,242,224,0,0,149,96,4,0,0,0,0,0,0,0,28,45,3,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,2,0,0,0,185,1,0,0,162,165,7,0,1,0,0,0,0,0,116,224,0,0,16,96,5,0,0,0,0,0,0,0,128,45,3,0,0,0,0,0,10,0,0,0,9,0,0,0,11,0,0,0,8,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,5,0,0,0,15,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,17,0,0,0,2,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,2,0,0,0,0,0,0,0,32,0,0,0,0,186,1,0,20,46,3,0,20,46,3,0,60,46,3,0,60,46,3,0,2,0,0,0,0,0,0,0,32,0,0,0,0,186,1,0,204,50,3,0,204,50,3,0,60,46,3,0,60,46,3,0,2,0,0,0,100,0,0,0,91,167,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,46,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,47,3,0,0,0,0,0,0,0,0,0,0,0,0,0,108,47,3,0,0,0,0,0,0,0,0,0,0,0,0,0,184,47,3,0,0,0,0,0,0,0,0,0,0,0,0,0,4,48,3,0,0,0,0,0,112,48,3,0,164,48,3,0,0,0,0,0,0,0,0,0,248,48,3,0,84,49,3,0,0,0,0,0,0,0,0,0,144,49,3,0,236,49,3,0,80,50,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,161,25,0,0,191,167,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,36,47,3,0,0,0,0,0,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+198432);
/* memory initializer */ allocate([2,0,0,0,4,0,0,0,113,2,0,0,96,193,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,88,47,3,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,209,195,7,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,148,47,3,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,81,0,0,0,34,196,7,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,224,47,3,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,33,1,0,0,115,196,7,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,44,48,3,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,4,0,0,0,81,0,0,0,148,197,7,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,152,48,3,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,121,0,0,0,229,197,7,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,204,48,3,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,169,0,0,0,94,198,7,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,32,49,3,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,7,199,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,124,49,3,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,169,0,0,0,32,199,7,0,1,0,0,0,0,136,93,225,0,176,19,97,4,0,0,0,0,0,0,0,184,49,3,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,225,0,0,0,201,199,7,0,1,0,0,0,0,96,242,224,0,0,149,96,4,0,0,0,0,0,0,0,20,50,3,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,2,0,0,0,185,1,0,0,170,200,7,0,1,0,0,0,0,0,116,224,0,0,16,96,5,0,0,0,0,0,0,0,120,50,3,0,0,0,0,0,10,0,0,0,9,0,0,0,11,0,0,0,8,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,5,0,0,0,15,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,17,0,0,0,2,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,2,0,0,0,100,0,0,0,99,202,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,32,0,0,0,112,218,1,0,52,51,3,0,52,51,3,0,92,51,3,0,92,51,3,0,2,0,0,0,0,0,0,0,32,0,0,0,112,218,1,0,192,57,3,0,192,57,3,0,92,51,3,0,92,51,3,0,2,0,0,0,100,0,0,0,199,202,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,52,3,0,0,0,0,0,0,0,0,0,0,0,0,0,80,52,3,0,0,0,0,0,0,0,0,0,0,0,0,0,140,52,3,0,0,0,0,0,0,0,0,0,0,0,0,0,216,52,3,0,0,0,0,0,68,53,3,0,120,53,3,0,0,0,0,0,0,0,0,0,204,53,3,0,40,54,3,0,0,0,0,0,0,0,0,0,100,54,3,0,192,54,3,0,0,0,0,0,0,0,0,0,20,55,3,0,120,55,3,0,0,0,0,0,0,0,0,0,244,55,3,0,96,56,3,0,212,56,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,81,0,0,0,43,203,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,68,52,3,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,124,203,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,120,52,3,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,237,205,7,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,180,52,3,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,33,1,0,0,62,206,7,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,0,53,3,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,4,0,0,0,81,0,0,0,95,207,7,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,108,53,3,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,121,0,0,0,176,207,7,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,160,53,3,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,169,0,0,0,41,208,7,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,244,53,3,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,210,208,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,80,54,3,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,169,0,0,0,235,208,7,0,1,0,0,0,0,128,208,224,0,0,118,96,4,0,0,0,0,0,0,0,140,54,3,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,121,0,0,0,148,209,7,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,232,54,3,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,225,0,0,0,13,210,7,0,1,0,0,0,0,96,242,224,0,0,149,96,4,0,0,0,0,0,0,0,60,55,3,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,2,0,0,0,185,1,0,0,238,210,7,0,1,0,0,0,0,0,116,224,0,0,16,96,5,0,0,0,0,0,0,0,160,55,3,0,0,0,0,0,10,0,0,0,9,0,0,0,11,0,0,0,8,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,5,0,0,0,15,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,17,0,0,0,2,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,2,0,0,0,33,1,0,0,167,212,7,0,1,0,0,0,0,24,157,225,0,24,61,97,5,0,0,0,0,0,0,0,28,56,3,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,2,0,0,0,105,1,0,0,200,213,7,0,1,0,0,0,0,144,27,225,0,128,184,96,5,0,0,0,0,0,0,0,136,56,3,0,0,0,0,0,9,0,0,0,8,0,0,0,10,0,0,0,7,0,0,0,11,0,0,0,6,0,0,0,12,0,0,0,5,0,0,0,13,0,0,0,4,0,0,0,14,0,0,0,3,0,0,0,15,0,0,0,2,0,0,0,16,0,0,0,1,0,0,0,17,0,0,0,0,0,0,0,18,0,0,0,1,0,0,0,49,0,0,0,49,215,7,0,1,0,0,0,0,0,152,224,0,0,16,96,6,0,0,0,0,0,0,0,252,56,3,0,0,0,0,0,24,0,0,0,23,0,0,0,25,0,0,0,22,0,0,0,26,0,0,0,21,0,0,0,27,0,0,0,20,0,0,0,28,0,0,0,19,0,0,0,29,0,0,0,18,0,0,0,30,0,0,0,17,0,0,0,31,0,0,0,16,0,0,0,32,0,0,0,15,0,0,0,33,0,0,0,14,0,0,0,34,0,0,0,13,0,0,0,35,0,0,0,12,0,0,0,36,0,0,0,11,0,0,0,37,0,0,0,10,0,0,0,38,0,0,0,9,0,0,0,39,0,0,0,8,0,0,0,40,0,0,0,7,0,0,0,41,0,0,0,6,0,0,0,42,0,0,0,5,0,0,0,43,0,0,0,4,0,0,0,44,0,0,0,3,0,0,0,45,0,0,0,2,0,0,0,46,0,0,0,1,0,0,0,47,0,0,0,0,0,0,0,48,0,0,0,2,0,0,0,100,0,0,0,98,215,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,216,7,0,0,56,7,0,0,255,255,255,255,56,74,0,0,144,101,0,0,120,24,3,0,132,24,3,0,144,24,3,0,156,239,0,0,204,239,0,0,224,24,3,0,224,24,3,0,224,24,3,0,240,25,3,0,32,26,3,0,80,29,3,0,80,29,3,0,128,32,3,0,204,28,1,0,176,35,3,0,88,7,0,0,88,7,0,0,240,36,3,0,240,36,3,0,252,36,3,0,252,36,3,0,120,7,0,0,12,37,3,0,28,37,3,0,152,7,0,0,204,33,1,0,184,7,0,0,44,37,3,0,168,54,1,0,128,71,1,0,2,0,0,0,236,40,3,0,132,58,3,0,0,166,2,0,156,58,3,0,0,166,2,0,124,62,3,0,0,166,2,0,168,67,3,0,1,0,0,0,0,0,0,0,32,0,0,0,80,191,2,0,188,58,3,0,188,58,3,0,228,58,3,0,228,58,3,0,2,0,0,0,64,0,0,0,198,215,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,59,3,0,0,0,0,0,0,0,0,0,0,0,0,0,216,59,3,0,0,0,0,0,0,0,0,0,0,0,0,0,12,60,3,0,0,0,0,0,0,0,0,0,0,0,0,0,72,60,3,0,0,0,0,0,0,0,0,0,0,0,0,0,132,60,3,0,0,0,0,0,208,60,3,0,44,61,3,0,0,0,0,0,0,0,0,0,104,61,3,0,156,61,3,0,0,62,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,81,0,0,0,6,216,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,204,59,3,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,81,0,0,0,87,216,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,0,60,3,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,168,216,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,52,60,3,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,113,2,0,0,25,219,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,112,60,3,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,138,221,7,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,172,60,3,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,169,0,0,0,219,221,7,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,248,60,3,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,132,222,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,84,61,3,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,81,0,0,0,157,222,7,0,1,0,0,0,0,176,19,225,0,176,19,97,2,0,0,0,0,0,0,0,144,61,3,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,225,0,0,0,238,222,7,0,1,0,0,0,0,96,242,224,0,0,149,96,4,0,0,0,0,0,0,0,196,61,3,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,2,0,0,0,185,1,0,0,207,223,7,0,1,0,0,0,0,0,116,224,0,0,16,96,5,0,0,0,0,0,0,0,40,62,3,0,0,0,0,0,10,0,0,0,9,0,0,0,11,0,0,0,8,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,5,0,0,0,15,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,17,0,0,0,2,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,1,0,0,0,0,0,0,0,32,0,0,0,16,227,2,0,188,62,3,0,188,62,3,0,228,62,3,0,228,62,3,0,1,0,0,0,0,0,0,0,32,0,0,0,16,227,2,0,128,67,3,0,128,67,3,0,228,62,3,0,228,62,3,0,2,0,0,0,100,0,0,0,136,225,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,63,3,0,0,0,0,0,0,0,0,0,0,0,0,0,216,63,3,0,0,0,0,0,0,0,0,0,0,0,0,0,12,64,3,0,0,0,0,0,0,0,0,0,0,0,0,0,72,64,3,0,0,0,0,0,0,0,0,0,0,0,0,0,132,64,3,0,0,0,0,0,0,0,0,0,0,0,0,0,208,64,3,0,0,0,0,0,28,65,3,0,80,65,3,0,0,0,0,0,0,0,0,0,164,65,3,0,248,65,3,0,0,0,0,0,0,0,0,0,76,66,3,0,176,66,3,0,20,67,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,81,0,0,0,236,225,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,204,63,3,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,81,0,0,0,61,226,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,0,64,3,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,142,226,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,52,64,3,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,113,2,0,0,255,228,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,112,64,3,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,112,231,7,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,172,64,3,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,81,0,0,0,193,231,7,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,248,64,3,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,4,0,0,0,81,0,0,0,18,232,7,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,68,65,3,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,121,0,0,0,99,232,7,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,120,65,3,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,121,0,0,0,220,232,7,0,1,0,0,0,0,128,187,224,0,0,118,96,4,0,0,0,0,0,0,0,204,65,3,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,121,0,0,0,85,233,7,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,32,66,3,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,225,0,0,0,206,233,7,0,1,0,0,0,0,228,91,225,0,224,255,96,4,0,0,0,0,0,0,0,116,66,3,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,2,0,0,0,225,0,0,0,175,234,7,0,1,0,0,0,0,192,221,224,0,0,145,96,4,0,0,0,0,0,0,0,216,66,3,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,2,0,0,0,33,1,0,0,144,235,7,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,60,67,3,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,2,0,0,0,100,0,0,0,177,236,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,32,0,0,0,12,254,2,0,232,67,3,0,232,67,3,0,16,68,3,0,16,68,3,0,1,0,0,0,0,0,0,0,32,0,0,0,12,254,2,0,108,74,3,0,108,74,3,0,16,68,3,0,16,68,3,0,2,0,0,0,100,0,0,0,21,237,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,68,3,0,0,0,0,0,0,0,0,0,0,0,0,0,4,69,3,0,0,0,0,0,0,0,0,0,0,0,0,0,64,69,3,0,0,0,0,0,0,0,0,0,0,0,0,0,140,69,3,0,0,0,0,0,248,69,3,0,44,70,3,0,0,0,0,0,0,0,0,0,128,70,3,0,220,70,3,0,0,0,0,0,0,0,0,0,24,71,3,0,116,71,3,0,0,0,0,0,0,0,0,0,200,71,3,0,44,72,3,0,0,0,0,0,0,0,0,0,168,72,3,0,12,73,3,0,128,73,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,81,0,0,0,121,237,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,248,68,3,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,202,237,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,44,69,3,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,59,240,7,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,104,69,3,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,33,1,0,0,140,240,7,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,180,69,3,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,4,0,0,0,81,0,0,0,173,241,7,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,32,70,3,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,121,0,0,0,254,241,7,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,84,70,3,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,169,0,0,0,119,242,7,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,168,70,3,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,32,243,7,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,4,71,3,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,169,0,0,0,57,243,7,0,1,0,0,0,0,128,208,224,0,0,118,96,4,0,0,0,0,0,0,0,64,71,3,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,121,0,0,0,226,243,7,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,156,71,3,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,225,0,0,0,91,244,7,0,1,0,0,0,0,96,242,224,0,0,149,96,4,0,0,0,0,0,0,0,240,71,3,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,2,0,0,0,185,1,0,0,60,245,7,0,1,0,0,0,0,0,116,224,0,0,16,96,5,0,0,0,0,0,0,0,84,72,3,0,0,0,0,0,10,0,0,0,9,0,0,0,11,0,0,0,8,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,5,0,0,0,15,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,17,0,0,0,2,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,2,0,0,0,225,0,0,0,245,246,7,0,1,0,0,0,0,117,153,225,0,24,61,97,4,0,0,0,0,0,0,0,208,72,3,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,2,0,0,0,105,1,0,0,214,247,7,0,1,0,0,0,0,144,27,225,0,128,184,96,5,0,0,0,0,0,0,0,52,73,3,0,0,0,0,0,9,0,0,0,8,0,0,0,10,0,0,0,7,0,0,0,11,0,0,0,6,0,0,0,12,0,0,0,5,0,0,0,13,0,0,0,4,0,0,0,14,0,0,0,3,0,0,0,15,0,0,0,2,0,0,0,16,0,0,0,1,0,0,0,17,0,0,0,0,0,0,0,18,0,0,0,1,0,0,0,49,0,0,0,63,249,7,0,1,0,0,0,0,0,152,224,0,0,16,96,6,0,0,0,0,0,0,0,168,73,3,0,0,0,0,0,24,0,0,0,23,0,0,0,25,0,0,0,22,0,0,0,26,0,0,0,21,0,0,0,27,0,0,0,20,0,0,0,28,0,0,0,19,0,0,0,29,0,0,0,18,0,0,0,30,0,0,0,17,0,0,0,31,0,0,0,16,0,0,0,32,0,0,0,15,0,0,0,33,0,0,0,14,0,0,0,34,0,0,0,13,0,0,0,35,0,0,0,12,0,0,0,36,0,0,0,11,0,0,0,37,0,0,0,10,0,0,0,38,0,0,0,9,0,0,0,39,0,0,0,8,0,0,0,40,0,0,0,7,0,0,0,41,0,0,0,6,0,0,0,42,0,0,0,5,0,0,0,43,0,0,0,4,0,0,0,44,0,0,0,3,0,0,0,45,0,0,0,2,0,0,0,46,0,0,0,1,0,0,0,47,0,0,0,0,0,0,0,48,0,0,0,2,0,0,0,100,0,0,0,112,249,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,248,7,0,0,56,7,0,0,2,0,0,0,152,58,0,0,56,74,0,0,120,24,3,0,132,24,3,0,144,24,3,0,156,239,0,0,204,239,0,0,224,24,3,0,224,24,3,0,224,24,3,0,240,25,3,0,32,26,3,0,80,29,3,0,80,29,3,0,128,32,3,0,204,28,1,0,176,35,3,0,88,7,0,0,88,7,0,0,240,36,3,0,240,36,3,0,252,36,3,0,252,36,3,0,120,7,0,0,12,37,3,0,28,37,3,0,24,8,0,0,204,33,1,0,184,7,0,0,44,37,3,0,168,54,1,0,128,71,1,0,2,0,0,0,236,40,3,0,12,41,3,0,3,0,0,0,56,8,0,0,56,7,0,0,255,255,255,255,152,58,0,0,56,74,0,0,120,24,3,0,132,24,3,0,144,24,3,0,156,239,0,0,204,239,0,0,224,24,3,0,224,24,3,0,224,24,3,0,240,25,3,0,32,26,3,0,80,29,3,0,80,29,3,0,128,32,3,0,204,28,1,0,176,35,3,0,88,7,0,0,88,7,0,0,240,36,3,0,240,36,3,0,252,36,3,0,252,36,3,0,120,7,0,0,12,37,3,0,28,37,3,0,24,8,0,0,204,33,1,0,184,7,0,0,44,37,3,0,168,54,1,0,128,71,1,0,2,0,0,0,236,40,3,0,132,58,3,0,2,0,0,0,88,8,0,0,112,8,0,0,2,0,0,0,40,35,0,0,152,58,0,0,104,76,3,0,104,76,3,0,112,76,3,0,156,239,0,0,204,239,0,0,172,76,3,0,0,0,0,0,172,76,3,0,120,77,3,0,144,77,3,0,144,77,3,0,0,0,0,0,0,0,0,0,204,28,1,0,176,35,3,0,136,8,0,0,0,0,0,0,244,79,3,0,244,79,3,0,252,79,3,0,252,79,3,0,160,8,0,0,4,80,3,0,16,80,3,0,184,8,0,0,204,33,1,0,208,8,0,0,28,80,3,0,168,54,1,0,128,71,1,0,1,0,0,0,236,82,3,0,248,82,3,0,0,2,0,0,0,2,0,0,30,0,0,0,25,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,25,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,242,255,255,255,0,0,0,0,0,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,240,255,255,255,246,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,0,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,240,255,255,255,246,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,236,255,255,255,240,255,255,255,246,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,10,0,0,0,10,0,0,0,255,255,255,255,10,0,0,0,10,0,0,0,255,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,0,0,0,0,4,0,0,0,10,0,0,0,10,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,10,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,99,0,0,0,99,0,0,0,99,0,0,0,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,0,0,0,0,4,0,0,0,10,0,0,0,10,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,99,0,0,0,99,0,0,0,99,0,0,0,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,244,255,255,255,246,255,255,255,248,255,255,255,0,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,244,255,255,255,244,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,99,0,0,0,99,0,0,0,99,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,232,255,255,255,99,0,0,0,99,0,0,0,99,0,0,0,64,0,0,0,64,0,0,0,8,0,0,0,8,0,0,0,156,255,255,255,156,255,255,255,151,255,255,255,126,255,255,255,126,255,255,255,116,255,255,255,4,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,6,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,4,0,0,0,4,0,0,0,4,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,6,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,0,0,198,66,240,82,3,0,6,0,0,0,6,0,0,0,136,120,1,0,8,83,3,0,136,120,1,0,184,87,3,0,2,0,0,0,0,0,0,0,32,0,0,0,0,186,1,0,40,83,3,0,40,83,3,0,80,83,3,0,80,83,3,0,2,0,0,0,100,0,0,0,212,249,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,84,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,84,3,0,0,0,0,0,0,0,0,0,0,0,0,0,128,84,3,0,0,0,0,0,0,0,0,0,0,0,0,0,204,84,3,0,0,0,0,0,0,0,0,0,0,0,0,0,24,85,3,0,0,0,0,0,132,85,3,0,184,85,3,0,0,0,0,0,0,0,0,0,12,86,3,0,104,86,3,0,0,0,0,0,0,0,0,0,164,86,3,0,216,86,3,0,60,87,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,161,25,0,0,56,250,7,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,56,84,3,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,217,19,8,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,108,84,3,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,74,22,8,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,168,84,3,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,81,0,0,0,155,22,8,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,244,84,3,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,33,1,0,0,236,22,8,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,64,85,3,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,4,0,0,0,81,0,0,0,13,24,8,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,172,85,3,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,121,0,0,0,94,24,8,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,224,85,3,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,169,0,0,0,215,24,8,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,52,86,3,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,128,25,8,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,144,86,3,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,81,0,0,0,153,25,8,0,1,0,0,0,0,176,19,225,0,176,19,97,2,0,0,0,0,0,0,0,204,86,3,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,225,0,0,0,234,25,8,0,1,0,0,0,0,96,242,224,0,0,149,96,4,0,0,0,0,0,0,0,0,87,3,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+208676);
/* memory initializer */ allocate([1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,2,0,0,0,185,1,0,0,203,26,8,0,1,0,0,0,0,0,116,224,0,0,16,96,5,0,0,0,0,0,0,0,100,87,3,0,0,0,0,0,10,0,0,0,9,0,0,0,11,0,0,0,8,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,5,0,0,0,15,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,17,0,0,0,2,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,2,0,0,0,0,0,0,0,32,0,0,0,0,186,1,0,216,87,3,0,216,87,3,0,0,88,3,0,0,88,3,0,2,0,0,0,100,0,0,0,132,28,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,88,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,88,3,0,0,0,0,0,0,0,0,0,0,0,0,0,48,89,3,0,0,0,0,0,0,0,0,0,0,0,0,0,124,89,3,0,0,0,0,0,0,0,0,0,0,0,0,0,200,89,3,0,0,0,0,0,52,90,3,0,104,90,3,0,0,0,0,0,0,0,0,0,188,90,3,0,24,91,3,0,0,0,0,0,0,0,0,0,84,91,3,0,176,91,3,0,20,92,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,161,25,0,0,232,28,8,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,232,88,3,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,137,54,8,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,28,89,3,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,250,56,8,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,88,89,3,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,81,0,0,0,75,57,8,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,164,89,3,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,33,1,0,0,156,57,8,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,240,89,3,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,4,0,0,0,81,0,0,0,189,58,8,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,92,90,3,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,121,0,0,0,14,59,8,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,144,90,3,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,169,0,0,0,135,59,8,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,228,90,3,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,48,60,8,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,64,91,3,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,169,0,0,0,73,60,8,0,1,0,0,0,0,136,93,225,0,176,19,97,4,0,0,0,0,0,0,0,124,91,3,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,225,0,0,0,242,60,8,0,1,0,0,0,0,96,242,224,0,0,149,96,4,0,0,0,0,0,0,0,216,91,3,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,2,0,0,0,185,1,0,0,211,61,8,0,1,0,0,0,0,0,116,224,0,0,16,96,5,0,0,0,0,0,0,0,60,92,3,0,0,0,0,0,10,0,0,0,9,0,0,0,11,0,0,0,8,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,5,0,0,0,15,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,17,0,0,0,2,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,2,0,0,0,232,8,0,0,112,8,0,0,255,255,255,255,40,35,0,0,152,58,0,0,104,76,3,0,104,76,3,0,112,76,3,0,156,239,0,0,204,239,0,0,172,76,3,0,0,0,0,0,172,76,3,0,120,77,3,0,144,77,3,0,144,77,3,0,0,0,0,0,0,0,0,0,204,28,1,0,176,35,3,0,136,8,0,0,0,0,0,0,244,79,3,0,244,79,3,0,252,79,3,0,252,79,3,0,160,8,0,0,4,80,3,0,16,80,3,0,184,8,0,0,204,33,1,0,208,8,0,0,28,80,3,0,168,54,1,0,128,71,1,0,1,0,0,0,236,82,3,0,44,93,3,0,0,166,2,0,60,93,3,0,0,166,2,0,28,97,3,0,1,0,0,0,0,0,0,0,32,0,0,0,80,191,2,0,92,93,3,0,92,93,3,0,132,93,3,0,132,93,3,0,2,0,0,0,64,0,0,0,140,63,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,94,3,0,0,0,0,0,0,0,0,0,0,0,0,0,120,94,3,0,0,0,0,0,0,0,0,0,0,0,0,0,172,94,3,0,0,0,0,0,0,0,0,0,0,0,0,0,232,94,3,0,0,0,0,0,0,0,0,0,0,0,0,0,36,95,3,0,0,0,0,0,112,95,3,0,204,95,3,0,0,0,0,0,0,0,0,0,8,96,3,0,60,96,3,0,160,96,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,81,0,0,0,204,63,8,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,108,94,3,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,81,0,0,0,29,64,8,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,160,94,3,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,110,64,8,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,212,94,3,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,113,2,0,0,223,66,8,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,16,95,3,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,80,69,8,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,76,95,3,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,169,0,0,0,161,69,8,0,1,0,0,0,0,0,158,224,0,0,84,96,4,0,0,0,0,0,0,0,152,95,3,0,0,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,25,0,0,0,74,70,8,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,244,95,3,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,81,0,0,0,99,70,8,0,1,0,0,0,0,176,19,225,0,176,19,97,2,0,0,0,0,0,0,0,48,96,3,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,225,0,0,0,180,70,8,0,1,0,0,0,0,96,242,224,0,0,149,96,4,0,0,0,0,0,0,0,100,96,3,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,2,0,0,0,185,1,0,0,149,71,8,0,1,0,0,0,0,0,116,224,0,0,16,96,5,0,0,0,0,0,0,0,200,96,3,0,0,0,0,0,10,0,0,0,9,0,0,0,11,0,0,0,8,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,5,0,0,0,15,0,0,0,4,0,0,0,16,0,0,0,3,0,0,0,17,0,0,0,2,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,1,0,0,0,0,0,0,0,32,0,0,0,16,227,2,0,60,97,3,0,60,97,3,0,100,97,3,0,100,97,3,0,2,0,0,0,100,0,0,0,78,73,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,98,3,0,0,0,0,0,0,0,0,0,0,0,0,0,88,98,3,0,0,0,0,0,0,0,0,0,0,0,0,0,140,98,3,0,0,0,0,0,0,0,0,0,0,0,0,0,200,98,3,0,0,0,0,0,0,0,0,0,0,0,0,0,4,99,3,0,0,0,0,0,0,0,0,0,0,0,0,0,80,99,3,0,0,0,0,0,156,99,3,0,208,99,3,0,0,0,0,0,0,0,0,0,36,100,3,0,120,100,3,0,0,0,0,0,0,0,0,0,204,100,3,0,48,101,3,0,148,101,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,81,0,0,0,178,73,8,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,76,98,3,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,81,0,0,0,3,74,8,0,1,0,0,0,0,0,16,224,0,0,16,96,2,0,0,0,0,0,0,0,128,98,3,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,113,2,0,0,84,74,8,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,180,98,3,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,113,2,0,0,197,76,8,0,1,0,0,0,0,0,48,224,0,0,16,96,3,0,0,0,0,0,0,0,240,98,3,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,81,0,0,0,54,79,8,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,44,99,3,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,81,0,0,0,135,79,8,0,1,0,0,0,0,0,80,224,0,0,16,96,4,0,0,0,0,0,0,0,120,99,3,0,0,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,4,0,0,0,81,0,0,0,216,79,8,0,1,0,0,0,0,0,118,224,0,0,118,96,2,0,0,0,0,0,0,0,196,99,3,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,121,0,0,0,41,80,8,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,248,99,3,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,121,0,0,0,162,80,8,0,1,0,0,0,0,128,187,224,0,0,118,96,4,0,0,0,0,0,0,0,76,100,3,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,121,0,0,0,27,81,8,0,1,0,0,0,0,0,84,224,0,0,16,96,4,0,0,0,0,0,0,0,160,100,3,0,0,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,225,0,0,0,148,81,8,0,1,0,0,0,0,228,91,225,0,224,255,96,4,0,0,0,0,0,0,0,244,100,3,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,2,0,0,0,225,0,0,0,117,82,8,0,1,0,0,0,0,192,221,224,0,0,145,96,4,0,0,0,0,0,0,0,88,101,3,0,0,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,4,0,0,0,10,0,0,0,3,0,0,0,11,0,0,0,2,0,0,0,12,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,2,0,0,0,33,1,0,0,86,83,8,0,1,0,0,0,0,0,112,224,0,0,16,96,5,0,0,0,0,0,0,0,188,101,3,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,2,0,0,0,0,9,0,0,24,9,0,0,2,0,0,0,64,31,0,0,40,35,0,0,156,102,3,0,156,102,3,0,164,102,3,0,156,239,0,0,204,239,0,0,224,102,3,0,0,0,0,0,224,102,3,0,120,77,3,0,172,103,3,0,172,103,3,0,0,0,0,0,0,0,0,0,204,28,1,0,176,35,3,0,136,8,0,0,0,0,0,0,244,79,3,0,244,79,3,0,252,79,3,0,252,79,3,0,48,9,0,0,4,80,3,0,16,80,3,0,64,9,0,0,204,33,1,0,208,8,0,0,28,80,3,0,168,54,1,0,128,71,1,0,1,0,0,0,16,106,3,0,248,82,3,0,0,2,0,0,0,2,0,0,32,0,0,0,25,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,25,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,242,255,255,255,0,0,0,0,0,0,0,0,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,246,255,255,255,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,246,255,255,255,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,246,255,255,255,246,255,255,255,250,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,0,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,10,0,0,0,10,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,99,0,0,0,99,0,0,0,99,0,0,0,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,0,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,10,0,0,0,10,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,251,255,255,255,251,255,255,255,251,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,232,255,255,255,236,255,255,255,242,255,255,255,246,255,255,255,250,255,255,255,248,255,255,255,248,255,255,255,250,255,255,255,250,255,255,255,99,0,0,0,99,0,0,0,99,0,0,0,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,241,255,255,255,244,255,255,255,246,255,255,255,248,255,255,255,0,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,234,255,255,255,236,255,255,255,242,255,255,255,244,255,255,255,244,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,246,255,255,255,99,0,0,0,99,0,0,0,99,0,0,0,226,255,255,255,226,255,255,255,226,255,255,255,226,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,230,255,255,255,232,255,255,255,99,0,0,0,99,0,0,0,99,0,0,0,20,106,3,0,6,0,0,0,6,0,0,0,2,0,0,0,88,9,0,0,24,9,0,0,255,255,255,255,64,31,0,0,40,35,0,0,156,102,3,0,156,102,3,0,164,102,3,0,156,239,0,0,204,239,0,0,224,102,3,0,0,0,0,0,224,102,3,0,120,77,3,0,172,103,3,0,172,103,3,0,0,0,0,0,0,0,0,0,204,28,1,0,176,35,3,0,136,8,0,0,0,0,0,0,244,79,3,0,244,79,3,0,252,79,3,0,252,79,3,0,48,9,0,0,4,80,3,0,16,80,3,0,64,9,0,0,204,33,1,0,208,8,0,0,28,80,3,0,168,54,1,0,128,71,1,0,1,0,0,0,16,106,3,0,44,93,3,0,11,0,0,0,112,9,0,0,0,3,0,0,2,0,0,0,80,195,0,0,64,13,3,0,84,238,0,0,128,238,0,0,172,238,0,0,156,239,0,0,204,239,0,0,252,239,0,0,44,243,0,0,252,239,0,0,92,246,0,0,140,246,0,0,28,0,1,0,172,9,1,0,60,19,1,0,204,28,1,0,252,28,1,0,96,3,0,0,192,3,0,0,188,32,1,0,232,32,1,0,20,33,1,0,64,33,1,0,32,4,0,0,108,33,1,0,156,33,1,0,120,4,0,0,204,33,1,0,216,4,0,0,104,43,1,0,168,54,1,0,128,71,1,0,2,0,0,0,160,119,1,0,48,120,1,0,11,0,0,0,112,9,0,0,0,3,0,0,255,255,255,255,80,195,0,0,64,13,3,0,84,238,0,0,128,238,0,0,172,238,0,0,156,239,0,0,204,239,0,0,252,239,0,0,44,243,0,0,252,239,0,0,92,246,0,0,140,246,0,0,28,0,1,0,172,9,1,0,60,19,1,0,204,28,1,0,252,28,1,0,96,3,0,0,192,3,0,0,188,32,1,0,232,32,1,0,20,33,1,0,64,33,1,0,32,4,0,0,108,33,1,0,156,33,1,0,120,4,0,0,204,33,1,0,216,4,0,0,0,0,0,0,168,54,1,0,128,71,1,0,2,0,0,0,160,119,1,0,168,165,2,0,2,0,0,0,112,9,0,0,24,9,0,0,2,0,0,0,0,0,0,0,64,31,0,0,156,102,3,0,156,102,3,0,164,102,3,0,156,239,0,0,204,239,0,0,224,102,3,0,0,0,0,0,224,102,3,0,120,77,3,0,172,103,3,0,172,103,3,0,0,0,0,0,0,0,0,0,204,28,1,0,176,35,3,0,136,8,0,0,0,0,0,0,244,79,3,0,244,79,3,0,252,79,3,0,252,79,3,0,48,9,0,0,4,80,3,0,16,80,3,0,64,9,0,0,204,33,1,0,208,8,0,0,28,80,3,0,168,54,1,0,128,71,1,0,1,0,0,0,16,106,3,0,248,82,3,0,2,0,0,0,112,9,0,0,24,9,0,0,255,255,255,255,0,0,0,0,64,31,0,0,156,102,3,0,156,102,3,0,164,102,3,0,156,239,0,0,204,239,0,0,224,102,3,0,0,0,0,0,224,102,3,0,120,77,3,0,172,103,3,0,172,103,3,0,0,0,0,0,0,0,0,0,204,28,1,0,176,35,3,0,136,8,0,0,0,0,0,0,244,79,3,0,244,79,3,0,252,79,3,0,252,79,3,0,48,9,0,0,4,80,3,0,16,80,3,0,64,9,0,0,204,33,1,0,208,8,0,0,28,80,3,0,168,54,1,0,128,71,1,0,1,0,0,0,16,106,3,0,44,93,3,0,88,105,112,104,46,79,114,103,32,108,105,98,86,111,114,98,105,115,32,73,32,50,48,49,53,48,49,48,53,32,40,226,155,132,226,155,132,226,155,132,226,155,132,41,0,7,7,7,11,6,6,7,11,7,6,6,10,12,10,10,13,7,7,8,11,7,7,7,11,7,6,7,10,11,10,10,13,10,10,9,12,9,9,9,11,8,8,8,11,13,11,10,14,15,15,14,15,15,14,13,14,15,12,12,17,17,17,17,17,7,7,6,9,6,6,6,9,7,6,6,8,11,11,10,12,7,7,7,9,7,6,6,9,7,6,6,9,13,10,10,11,10,9,8,10,9,8,8,10,8,8,7,9,13,12,10,11,17,14,14,13,15,14,12,13,17,13,12,15,17,17,14,17,7,6,6,7,6,6,5,7,6,6,6,6,11,9,9,9,7,7,6,7,7,6,6,7,6,6,6,6,10,9,8,9,10,9,8,8,9,8,7,8,8,7,6,8,11,10,9,10,17,17,12,15,15,15,12,14,14,14,10,12,15,13,12,13,11,10,8,10,11,10,8,8,10,9,7,7,10,9,9,11,11,11,9,10,11,10,8,9,10,8,6,8,10,9,9,11,14,13,10,12,12,11,10,10,8,7,8,10,10,11,11,12,17,17,15,17,17,17,17,17,17,13,12,17,17,17,14,17,2,2,2,2,0,0,0,0,3,2,3,2,3,3,0,0,0,0,0,0,0,0,0,0,3,3,4,3,4,3,4,4,5,4,5,4,6,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,3,5,3,5,3,5,4,6,5,6,5,7,6,6,7,7,9,9,11,11,16,11,14,10,11,11,13,16,15,15,15,15,15,15,15,15,15,6,7,7,12,6,6,7,12,7,6,6,10,15,12,11,13,7,7,8,13,7,7,8,12,7,7,7,11,12,12,11,13,10,9,9,11,9,9,9,10,10,8,8,12,14,12,12,14,11,11,12,14,11,12,11,15,15,12,13,15,15,15,15,15,6,6,7,10,6,6,6,11,7,6,6,9,14,12,11,13,7,7,7,10,6,6,7,9,7,7,6,10,13,12,10,12,9,9,9,11,9,9,8,9,9,8,8,10,13,12,10,12,12,12,11,13,12,12,11,12,15,13,12,15,15,15,14,14,6,6,6,8,6,6,5,6,7,7,6,5,11,10,9,8,7,6,6,7,6,6,5,6,7,7,6,6,11,10,9,8,8,8,8,9,8,8,7,8,8,8,6,7,11,10,9,9,14,11,10,14,14,11,10,15,13,11,9,11,15,12,12,11,11,9,8,8,10,9,8,9,11,10,9,8,12,11,12,11,13,10,8,9,11,10,8,9,10,9,8,9,10,8,12,12,15,11,10,10,13,11,10,10,8,8,7,12,10,9,11,12,15,12,11,15,13,11,11,15,12,14,11,13,15,15,13,13,2,2,2,2,0,0,0,0,2,2,3,3,3,3,0,0,0,0,0,0,0,0,0,0,4,3,4,3,4,3,5,3,5,4,5,4,6,4,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,3,5,3,5,3,6,4,7,4,7,5,7,6,7,6,7,8,10,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,12,12,10,7,8,13,9,6,7,11,10,8,8,12,17,17,17,17,7,5,5,9,6,4,4,8,8,5,5,8,16,14,13,16,7,5,5,7,6,3,3,5,8,5,4,7,14,12,12,15,10,7,8,9,7,5,5,6,9,6,5,5,15,12,9,10,8,13,17,17,8,11,17,17,11,13,17,17,17,17,17,17,6,10,16,17,6,10,15,17,8,10,16,17,17,17,17,17,9,13,15,17,8,11,17,17,10,12,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,6,11,15,17,7,10,15,17,8,10,17,17,17,15,17,17,4,8,13,17,4,7,13,17,6,8,15,17,16,15,17,17,6,11,15,17,6,9,13,17,8,10,17,17,15,17,17,17,16,17,17,17,12,14,15,17,13,14,15,17,17,17,17,17,5,10,14,17,5,9,14,17,7,9,15,17,15,15,17,17,3,7,12,17,3,6,11,17,5,7,13,17,12,12,17,17,5,9,14,17,3,7,11,17,5,8,13,17,13,11,16,17,12,17,17,17,9,14,15,17,10,11,14,17,16,14,17,17,8,12,17,17,8,12,17,17,10,12,17,17,17,17,17,17,5,10,17,17,5,9,15,17,7,9,17,17,13,13,17,17,7,11,17,17,6,10,15,17,7,9,15,17,12,11,17,17,12,15,17,17,11,14,17,17,11,10,15,17,17,16,17,17,0,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,3,3,3,4,4,4,4,5,4,5,4,5,4,6,4,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,5,3,5,3,5,4,5,4,5,5,5,5,6,5,6,5,6,5,6,5,6,5,7,8,9,11,13,13,13,13,13,13,13,13,13,13,13,13,0,3,3,2,3,3,4,3,4,0,0,0,0,0,0,0,0,0,3,4,3,6,3,6,3,6,3,7,3,8,4,9,4,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,7,2,7,3,8,4,9,5,9,8,10,11,11,12,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,13,13,13,13,7,5,5,9,9,6,6,9,12,8,7,8,11,8,9,15,6,3,3,7,7,4,3,6,9,6,5,6,8,6,8,15,8,5,5,9,8,5,4,6,10,7,5,5,11,8,7,15,14,15,13,13,13,13,8,11,15,10,7,6,11,9,10,15,5,6,8,15,6,9,10,15,10,11,12,15,15,15,15,15,4,6,7,15,6,7,8,15,9,8,9,15,15,15,15,15,6,8,9,15,7,7,8,15,10,9,10,15,15,15,15,15,15,13,15,15,15,10,11,15,15,13,13,15,15,15,15,15,4,6,7,15,6,8,9,15,10,10,12,15,15,15,15,15,2,5,6,15,5,6,7,15,8,6,7,15,15,15,15,15,5,6,8,15,5,6,7,15,9,6,7,15,15,15,15,15,14,12,13,15,12,10,11,15,15,15,15,15,15,15,15,15,7,8,9,15,9,10,10,15,15,14,14,15,15,15,15,15,5,6,7,15,7,8,9,15,12,9,10,15,15,15,15,15,7,7,9,15,7,7,8,15,12,8,9,15,15,15,15,15,13,13,14,15,12,11,12,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,13,13,13,15,15,15,15,15,15,15,15,15,15,15,15,15,15,12,13,15,15,12,13,15,15,14,15,15,15,15,15,15,15,15,15,15,15,15,13,15,15,15,15,15,15,15,15,15,0,2,3,3,3,3,4,3,4,0,0,0,0,0,0,0,0,0,3,4,3,4,3,5,3,6,3,6,4,6,4,7,5,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,5,2,5,3,5,3,6,3,6,4,7,6,7,8,7,9,8,9,9,9,10,9,11,13,11,13,10,10,13,13,13,13,13,13,12,12,12,12,0,3,3,3,3,2,4,3,4,0,0,0,0,0,0,0,0,0,2,3,3,4,3,4,4,5,4,6,5,6,7,6,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,4,3,6,3,7,3,8,5,8,6,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,1,6,3,7,2,4,5,7,1,6,12,16,4,12,15,16,9,15,16,16,16,16,16,16,2,5,11,16,5,11,13,16,9,13,16,16,16,16,16,16,4,8,12,16,5,9,12,16,9,13,15,16,16,16,16,16,15,16,16,16,11,14,13,16,12,15,16,16,16,16,16,15,7,6,9,17,7,6,8,17,12,9,11,16,16,16,16,16,5,4,7,16,5,3,6,14,9,6,8,15,16,16,16,16,5,4,6,13,3,2,4,11,7,4,6,13,16,11,10,14,12,12,12,16,9,7,10,15,12,9,11,16,16,15,15,16,5,5,5,5,5,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,6,6,6,7,6,7,6,7,6,7,6,7,6,7,6,8,6,8,6,8,7,8,7,8,7,8,7,9,7,9,8,9,8,9,8,10,8,10,9,10,9,10,9,11,9,11,9,10,10,11,10,11,10,11,11,11,11,11,11,12,13,14,14,14,15,15,16,16,16,17,15,16,15,16,16,17,17,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,2,5,5,5,5,5,5,4,5,5,5,5,5,5,5,5,6,5,6,5,6,5,7,6,7,6,7,6,8,6,8,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,3,5,3,6,4,6,4,7,4,7,4,7,4,8,4,8,4,9,5,9,5,9,5,9,6,10,6,10,6,11,7,10,7,10,8,11,9,11,9,11,10,11,11,12,11,11,12,15,15,12,14,11,14,12,14,11,14,13,14,12,14,11,14,11,14,12,14,11,14,11,14,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,4,5,4,5,4,5,3,5,3,5,3,5,4,4,4,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,4,4,4,4,5,4,5,4,6,5,7,5,7,6,8,6,8,6,9,7,9,7,10,7,9,8,11,8,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,8,3,8,4,8,4,8,6,8,5,8,4,8,4,8,6,8,7,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,4,4,4,4,4,4,4,4,4,4,4,4,4,5,4,5,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,3,5,4,6,4,6,4,7,4,7,4,8,4,8,4,9,4,9,4,10,4,10,5,10,5,11,5,12,6,12,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,1,6,3,7,3,8,4,8,5,8,8,8,9,7,8,8,7,7,7,8,9,10,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,1,3,4,7,2,5,6,7,1,4,10,19,3,8,13,19,7,12,19,19,19,19,19,19,2,6,11,19,8,13,19,19,9,11,19,19,19,19,19,19,6,7,13,19,9,13,19,19,10,13,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,3,6,10,17,4,8,11,20,8,10,11,20,20,20,20,20,2,4,8,18,4,6,8,17,7,8,10,20,20,17,20,20,3,5,8,17,3,4,6,17,8,8,10,17,17,12,16,20,13,13,15,20,10,10,12,20,15,14,15,20,20,20,19,19,5,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,7,5,7,5,7,5,7,5,7,5,7,5,8,5,8,5,8,5,8,5,8,6,8,6,8,6,9,6,9,6,9,6,9,6,9,7,9,7,9,7,9,7,10,7,10,8,10,8,10,8,10,8,10,8,11,8,11,8,11,8,11,8,11,9,12,9,12,9,12,9,12,9,12,10,12,10,13,11,13,11,14,12,14,13,15,14,16,14,17,15,18,16,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,2,5,5,4,5,4,5,4,5,5,5,5,5,5,6,5,6,5,6,5,7,6,7,6,7,6,8,6,9,7,9,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,3,5,3,5,3,6,3,6,4,6,4,7,4,7,5,8,5,8,6,9,7,9,7,9,8,10,9,10,9,11,10,11,11,11,11,11,11,12,12,12,13,12,13,12,14,12,15,12,14,12,16,13,17,13,17,14,17,14,16,13,17,14,17,14,17,15,17,15,15,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,16,16,16,16,16,16,16,16,16,16,0,4,5,4,6,4,8,3,9,3,9,2,9,3,8,4,9,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,3,5,3,5,4,7,5,10,7,10,7,12,10,14,10,14,9,14,11,14,14,14,13,13,13,13,13,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,4,4,4,4,4,4,4,5,3,5,3,5,4,6,4,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,3,6,3,6,4,7,4,7,4,7,4,8,4,8,4,8,4,8,4,9,4,9,5,10,5,10,7,10,8,10,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,4,3,4,4,4,5,4,7,5,8,5,11,6,10,6,12,7,12,7,12,8,12,8,12,10,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,5,6,11,5,5,6,10,7,7,6,6,14,13,9,9,6,6,6,10,6,6,6,9,8,7,7,9,14,12,8,11,8,7,7,11,8,8,7,11,9,9,7,9,13,11,9,13,19,19,18,19,15,16,16,19,11,11,10,13,10,10,9,15,5,5,6,13,6,6,6,11,8,7,6,7,14,11,10,11,6,6,6,12,7,6,6,11,8,7,7,11,13,11,9,11,9,7,6,12,8,7,6,12,9,8,8,11,13,10,7,13,19,19,17,19,17,14,14,19,12,10,8,12,13,10,9,16,7,8,7,12,7,7,7,11,8,7,7,8,12,12,11,11,8,8,7,12,8,7,6,11,8,7,7,10,10,11,10,11,9,8,8,13,9,8,7,12,10,9,7,11,9,8,7,11,18,18,15,18,18,16,17,18,15,11,10,18,11,9,9,18,16,16,13,16,12,11,10,16,12,11,9,6,15,12,11,13,16,16,14,14,13,11,12,16,12,9,9,13,13,10,10,12,17,18,17,17,14,15,14,16,14,12,14,15,12,10,11,12,18,18,18,18,18,18,18,18,18,12,13,18,16,11,9,18,1,3,2,3,0,0,0,0,2,3,2,3,3,3,0,0,0,0,0,0,0,0,0,0,3,3,3,4,3,4,4,4,4,4,5,5,5,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,2,4,3,5,4,5,5,5,5,6,6,6,6,6,6,6,7,7,8,6,9,7,12,11,16,13,16,12,15,13,15,12,14,12,15,15,15,2,10,8,14,7,12,11,14,1,5,3,7,4,9,7,13,1,4,2,6,3,7,5,7,1,5,7,21,5,8,9,21,10,9,12,20,20,16,20,20,4,8,9,20,6,8,9,20,11,11,13,20,20,15,17,20,9,11,14,20,8,10,15,20,11,13,15,20,20,20,20,20,20,20,20,20,13,20,20,20,18,18,20,20,20,20,20,20,3,6,8,20,6,7,9,20,10,9,12,20,20,20,20,20,5,7,9,20,6,6,9,20,10,9,12,20,20,20,20,20,8,10,13,20,8,9,12,20,11,10,12,20,20,20,20,20,18,20,20,20,15,17,18,20,18,17,18,20,20,20,20,20,7,10,12,20,8,9,11,20,14,13,14,20,20,20,20,20,6,9,12,20,7,8,11,20,12,11,13,20,20,20,20,20,9,11,15,20,8,10,14,20,12,11,14,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,11,16,18,20,15,15,17,20,20,17,20,20,20,20,20,20,9,14,16,20,12,12,15,20,17,15,18,20,20,20,20,20,16,19,18,20,15,16,20,20,17,17,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,2,3,7,13,4,4,7,15,8,6,9,17,21,16,15,21,2,5,7,11,5,5,7,14,9,7,10,16,17,15,16,21,4,7,10,17,7,7,9,15,11,9,11,16,21,18,15,21,18,21,21,21,15,17,17,19,21,19,18,20,21,21,21,20,5,5,5,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,7,5,7,5,7,5,7,5,8,6,8,6,8,6,9,6,9,6,10,6,10,6,11,6,11,7,11,7,12,7,12,7,12,7,12,7,12,7,12,7,12,7,12,8,13,8,12,8,12,8,13,8,13,9,13,9,13,9,13,9,12,10,12,10,13,10,14,11,14,12,14,13,14,13,14,14,15,16,15,15,15,14,15,17,21,22,22,21,22,22,22,22,22,22,21,21,21,21,21,21,21,21,21,21,2,5,5,4,5,4,5,4,5,4,6,5,6,5,6,5,6,5,7,5,7,6,8,6,8,6,8,6,9,6,9,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,5,8,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,8,4,8,4,9,5,9,5,9,5,9,5,9,6,10,6,10,7,10,8,11,9,11,11,12,13,12,14,13,15,13,15,14,16,14,17,15,17,15,15,16,16,15,16,16,16,15,18,16,15,17,17,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,1,5,5,5,5,5,5,5,6,5,6,5,6,5,6,5,6,6,7,7,7,7,8,7,8,8,9,8,10,9,10,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,3,4,3,4,4,5,4,5,4,5,5,6,5,6,5,7,5,7,6,7,6,8,7,8,7,8,7,9,8,9,9,9,9,10,10,10,11,9,12,9,12,9,15,10,14,9,13,10,13,10,12,10,12,10,13,10,12,11,13,11,14,12,13,13,14,14,13,14,15,14,16,13,13,14,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,15,0,4,5,4,5,3,5,3,5,3,5,4,4,4,4,5,5,5], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+218916);
/* memory initializer */ allocate([3,3,4,3,4,4,4,4,5,5,5,5,5,6,5,7,5,8,6,8,6,9,7,10,7,10,8,10,8,11,9,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,7,3,8,3,10,3,8,3,9,3,8,4,9,4,9,5,9,6,10,6,9,7,11,7,12,9,13,10,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,4,5,4,5,4,5,4,5,3,5,3,5,3,5,4,5,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,2,4,2,5,3,5,4,6,6,6,7,7,8,7,8,7,8,7,9,8,9,8,9,8,10,8,11,9,12,9,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,2,6,3,6,4,7,4,7,5,9,5,11,6,11,6,11,7,11,6,11,6,11,9,11,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,2,6,8,9,7,11,13,13,1,3,5,5,6,6,12,10,1,2,3,6,4,7,5,7,3,3,6,16,5,5,7,16,9,8,11,16,16,16,16,16,5,5,8,16,5,5,7,16,8,7,9,16,16,16,16,16,9,9,12,16,6,8,11,16,9,10,11,16,16,16,16,16,16,16,16,16,13,16,16,16,15,16,16,16,16,16,16,16,5,4,7,16,6,5,8,16,9,8,10,16,16,16,16,16,5,5,7,15,5,4,6,15,7,6,8,16,16,16,16,16,9,9,11,15,7,7,9,16,8,8,9,16,16,16,16,16,16,16,16,16,15,15,15,16,15,15,14,16,16,16,16,16,8,8,11,16,8,9,10,16,11,10,14,16,16,16,16,16,6,8,10,16,6,7,10,16,8,8,11,16,14,16,16,16,10,11,14,16,9,9,11,16,10,10,11,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,16,16,16,16,16,16,16,16,16,16,16,12,16,15,16,12,14,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,2,4,7,13,4,5,7,15,8,7,10,16,16,14,16,16,2,4,7,16,3,4,7,14,8,8,10,16,16,16,15,16,6,8,11,16,7,7,9,16,11,9,13,16,16,16,15,16,16,16,16,16,14,16,16,16,16,16,16,16,16,16,16,16,5,5,5,5,5,5,6,5,6,5,6,5,6,5,6,5,6,5,7,5,7,5,7,5,8,5,8,5,8,5,9,5,9,6,10,6,10,6,11,6,11,6,11,6,11,6,11,6,11,6,11,6,12,7,11,7,11,7,11,7,11,7,10,7,11,7,11,7,12,7,11,8,11,8,11,8,11,8,13,8,12,9,11,9,11,9,11,10,12,10,12,9,12,10,12,11,14,12,16,12,12,11,14,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,16,16,16,16,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,7,6,7,6,7,6,7,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,5,7,5,7,4,7,4,8,4,8,4,8,4,8,3,8,4,9,4,9,4,9,4,9,4,9,5,9,5,9,6,9,7,9,8,9,9,9,10,9,11,9,14,9,15,10,15,10,15,10,15,10,15,11,15,10,14,12,14,11,14,13,14,13,15,15,15,12,15,15,15,13,15,13,15,13,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,14,2,4,5,4,5,4,5,4,5,5,5,5,5,5,6,5,6,5,6,6,6,6,7,7,7,7,7,7,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,3,4,3,4,4,5,4,5,5,5,6,6,6,7,6,8,6,8,6,9,7,10,7,10,7,10,7,12,7,12,7,12,9,12,11,12,10,12,10,12,11,12,12,12,10,12,10,12,10,12,9,12,11,12,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,10,10,12,12,12,12,12,10,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,4,4,4,4,4,4,5,5,5,5,6,6,7,6,7,6,8,6,9,7,9,7,9,9,11,9,12,10,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,6,3,7,3,7,5,7,7,7,7,7,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,3,4,4,4,4,4,4,4,4,5,4,5,4,5,4,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,4,3,4,4,4,5,5,6,5,6,5,7,6,6,6,7,7,7,8,9,9,9,12,10,11,10,10,12,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,6,5,7,5,7,7,7,7,7,5,7,5,7,5,7,5,7,7,7,7,7,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,1,2,3,6,5,4,7,7,3,3,3,14,5,4,4,11,8,6,6,10,17,12,11,17,6,5,5,15,5,3,4,11,8,5,5,8,16,9,10,14,10,8,9,17,8,6,6,13,10,7,7,10,16,11,13,14,17,17,17,17,17,16,16,16,16,15,16,16,16,16,16,16,2,4,6,17,4,5,7,17,8,7,10,17,17,17,17,17,3,4,6,15,3,3,6,15,7,6,9,17,17,17,17,17,6,8,10,17,6,6,8,16,9,8,10,17,17,15,16,17,17,17,17,17,12,15,15,16,12,15,15,16,16,16,16,16,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,6,6,6,6,5,6,6,7,6,7,6,7,6,7,6,8,7,8,7,8,7,8,7,8,7,9,7,9,7,9,7,9,8,9,8,10,8,10,8,10,7,10,6,10,8,10,8,11,7,10,7,11,8,11,11,12,12,11,11,12,11,13,11,13,11,13,12,15,12,13,13,14,14,14,14,14,15,15,15,16,14,17,19,19,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,2,4,5,4,5,4,5,4,5,5,5,5,5,5,6,5,6,5,6,6,7,6,7,6,8,7,8,7,8,7,8,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,3,5,3,5,4,5,4,5,4,5,5,5,5,6,5,6,5,7,5,8,6,8,6,8,6,8,6,8,7,9,7,9,7,11,9,11,11,12,11,14,12,14,16,14,16,13,16,14,16,12,15,13,16,14,16,13,14,12,15,13,15,13,13,13,15,12,14,14,15,13,15,12,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,4,5,4,4,4,5,4,4,4,5,4,5,4,5,3,5,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,3,4,3,4,4,5,4,5,4,6,4,6,5,6,5,7,5,7,6,8,6,8,6,8,7,8,7,9,7,9,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,4,3,4,4,5,5,6,6,7,7,7,8,8,11,8,9,9,9,10,11,11,11,9,10,10,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,4,4,4,4,4,4,3,4,4,4,4,4,5,4,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,4,3,5,4,6,4,6,5,7,6,7,6,8,6,8,7,9,8,10,8,12,9,13,10,15,10,15,11,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,8,4,8,4,8,4,8,5,8,5,8,6,8,4,8,4,8,5,8,5,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,9,12,15,12,13,16,14,16,7,1,5,14,7,10,13,16,16,9,4,6,16,8,11,16,16,16,14,4,7,16,9,12,14,16,16,10,5,7,14,9,12,14,15,15,13,8,9,14,10,12,13,14,15,13,9,9,7,6,8,11,12,12,14,8,8,5,4,5,8,11,12,16,10,10,6,5,6,8,9,10,5,6,12,14,12,14,16,17,18,4,2,5,11,7,10,12,14,15,9,4,5,11,7,10,13,15,18,15,6,7,5,6,8,11,13,16,11,5,6,5,5,6,9,13,15,12,5,7,6,5,6,9,12,14,12,6,7,8,6,7,9,12,13,14,8,8,7,5,5,8,10,12,16,9,9,8,6,6,7,9,9,1,4,4,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,7,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,7,10,9,0,0,0,0,0,0,8,10,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,8,10,10,0,0,0,0,0,0,8,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,10,10,0,0,0,0,0,0,9,9,11,0,0,0,0,0,0,10,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,10,10,0,0,0,0,0,0,9,11,9,0,0,0,0,0,0,10,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,8,10,10,0,0,0,0,0,0,8,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,10,10,0,0,0,0,0,0,10,11,11,0,0,0,0,0,0,9,9,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,10,10,0,0,0,0,0,0,10,11,11,0,0,0,0,0,0,9,11,9], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+229158);
/* memory initializer */ allocate([1,4,4,7,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,7,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,7,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,7,7,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,9,8,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,6,6,6,6,8,8,0,0,0,6,6,7,7,9,9,0,0,0,6,6,7,7,9,9,0,0,0,7,7,8,8,10,10,0,0,0,7,7,8,8,10,10,0,0,0,9,9,9,9,10,10,0,0,0,9,9,9,9,10,10,0,0,0,10,10,10,10,11,11,0,0,0,0,0,10,10,11,11,1,4,3,6,6,7,7,8,8,8,8,9,9,10,10,10,10,0,0,0,7,7,8,8,9,9,9,9,10,10,10,10,11,11,0,0,0,7,7,8,8,9,9,9,9,10,10,10,10,11,11,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,11,12,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,11,11,0,0,0,8,8,9,9,9,9,10,10,10,10,11,11,12,12,0,0,0,8,8,9,9,9,9,10,10,10,11,11,11,12,12,0,0,0,9,9,10,9,10,10,10,10,11,11,11,11,12,12,0,0,0,0,0,9,9,10,10,10,10,11,11,12,12,12,12,0,0,0,0,0,9,9,10,10,10,11,11,11,12,12,13,13,0,0,0,0,0,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,0,0,10,10,11,10,11,11,11,12,13,12,13,13,0,0,0,0,0,0,0,11,10,11,11,12,12,12,12,13,13,0,0,0,0,0,0,0,11,11,12,12,12,12,13,13,13,14,0,0,0,0,0,0,0,11,11,12,12,12,12,13,13,13,14,0,0,0,0,0,0,0,12,12,12,13,13,13,13,13,14,14,0,0,0,0,0,0,0,0,0,12,12,13,12,13,13,14,14,1,4,4,7,6,6,7,6,6,4,6,6,10,9,9,11,9,9,4,6,6,10,9,9,10,9,9,7,10,10,11,11,11,12,11,11,7,9,9,11,11,10,11,10,10,7,9,9,11,10,11,11,10,10,7,10,10,11,11,11,12,11,11,7,9,9,11,10,10,11,10,10,7,9,9,11,10,10,11,10,10,1,4,4,6,6,7,7,8,8,8,8,10,10,10,7,6,8,8,8,8,8,8,10,10,10,7,6,7,7,8,8,8,8,10,10,10,7,7,8,8,8,8,8,8,10,10,10,7,7,8,8,8,8,8,8,10,10,10,8,8,8,8,9,9,9,9,10,10,10,8,8,8,8,9,9,9,9,10,10,10,9,9,9,9,9,9,9,9,10,10,10,10,10,9,9,9,9,9,9,10,10,10,10,10,9,9,9,9,9,9,10,10,10,10,10,9,9,9,9,9,9,1,4,4,6,6,7,7,8,8,9,9,10,10,6,5,5,7,7,8,8,8,8,9,9,11,11,7,5,5,7,7,8,8,8,8,9,10,11,11,0,8,8,8,8,9,9,9,9,10,10,11,11,0,8,8,8,8,9,9,9,9,10,10,11,11,0,12,12,9,9,9,10,10,10,11,11,11,12,0,13,13,9,9,9,9,10,10,11,11,11,12,0,0,0,10,10,10,10,11,11,12,12,12,13,0,0,0,10,10,10,10,11,11,12,12,13,12,0,0,0,14,14,11,10,11,12,12,13,13,14,0,0,0,15,15,11,11,12,11,12,12,14,13,0,0,0,0,0,12,12,12,12,13,13,14,14,0,0,0,0,0,13,13,12,12,13,13,13,14,2,3,3,5,5,6,6,6,5,5,6,6,6,5,5,6,6,6,5,5,6,6,6,5,5,1,7,7,11,11,8,11,11,11,11,4,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,7,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,1,4,4,6,6,8,8,9,10,10,11,11,11,6,5,5,7,7,8,8,9,10,9,11,11,12,5,5,5,7,7,8,9,10,10,12,12,14,13,15,7,7,8,8,9,10,11,11,10,12,10,11,15,7,8,8,8,9,9,11,11,13,12,12,13,15,10,10,8,8,10,10,12,12,11,14,10,10,15,11,11,8,8,10,10,12,13,13,14,15,13,15,15,15,10,10,10,10,12,12,13,12,13,10,15,15,15,10,10,11,10,13,11,13,13,15,13,15,15,15,13,13,10,11,11,11,12,10,14,11,15,15,14,14,13,10,10,12,11,13,13,14,14,15,15,15,15,15,11,11,11,11,12,11,15,12,15,15,15,15,15,12,12,11,11,14,12,13,14,3,4,3,6,6,7,7,8,8,9,9,9,9,9,9,9,9,10,11,11,6,6,7,7,8,8,9,9,9,9,9,9,9,9,10,10,10,6,6,7,7,8,8,9,9,9,9,9,9,9,9,10,10,10,7,7,7,8,8,8,9,9,9,9,9,9,10,9,10,11,10,7,6,7,7,8,8,9,9,9,9,9,9,9,10,10,10,11,7,7,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,7,7,8,8,8,8,9,9,9,9,9,9,9,10,11,11,11,8,8,8,8,8,8,9,9,9,9,9,9,9,9,11,10,10,11,11,8,8,8,9,9,9,9,9,9,10,9,10,10,10,10,11,11,9,9,9,9,9,9,9,9,9,9,9,9,11,11,10,11,11,9,9,9,9,9,9,9,9,9,10,10,10,10,11,10,11,11,9,9,9,9,9,9,9,9,9,9,9,9,11,10,10,11,11,11,11,9,9,9,9,9,9,9,9,10,10,10,11,11,10,11,11,11,9,10,10,9,9,9,9,9,9,9,10,11,11,11,11,11,11,9,9,9,9,9,9,9,9,9,9,11,11,11,11,11,11,11,10,10,9,9,9,9,9,9,9,9,11,11,11,10,11,11,11,11,11,9,9,9,10,9,9,9,9,1,4,5,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,7,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,7,9,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,8,10,9,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,10,9,0,0,0,0,0,0,9,9,10,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,8,10,9,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,8,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,8,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,10,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,9,10,9], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+238237);
/* memory initializer */ allocate([1,4,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,7,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,4,7,7,0,0,0,0,0,4,4,7,7,0,0,0,0,0,4,5,7,7,0,0,0,0,0,6,7,8,8,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,10,9,0,0,0,0,0,0,0,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,3,6,6,7,7,9,9,0,5,5,7,7,8,7,9,9,0,5,5,7,7,8,8,9,9,0,7,7,8,8,8,8,10,10,0,0,0,8,8,8,8,10,10,0,0,0,9,9,9,9,10,10,0,0,0,9,9,9,9,10,10,0,0,0,10,10,10,10,11,11,0,0,0,0,0,10,10,11,11,1,4,4,6,6,8,8,9,9,8,8,9,9,10,10,11,11,0,6,6,7,7,8,8,9,9,9,9,10,10,11,11,12,12,0,6,5,7,7,8,8,9,9,9,9,10,10,11,11,12,12,0,7,7,7,7,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,7,7,8,8,9,9,10,10,11,11,11,11,12,12,0,0,0,8,8,9,9,10,10,10,10,11,11,12,12,12,12,0,0,0,8,8,9,9,10,10,10,10,11,11,12,12,12,12,0,0,0,9,9,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,0,0,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,0,0,9,9,10,10,11,11,12,12,13,13,13,13,0,0,0,0,0,9,9,10,10,11,11,12,12,12,13,13,13,0,0,0,0,0,10,10,11,11,11,11,12,12,13,13,14,14,0,0,0,0,0,0,0,11,11,11,11,12,12,13,13,14,14,0,0,0,0,0,0,0,11,11,12,12,13,13,13,13,14,14,0,0,0,0,0,0,0,11,11,12,12,13,13,13,13,14,14,0,0,0,0,0,0,0,12,12,12,13,13,13,14,14,14,14,0,0,0,0,0,0,0,0,0,12,12,13,13,14,14,14,14,1,4,4,7,6,6,7,6,6,4,7,6,10,9,9,11,9,9,4,6,7,10,9,9,11,9,9,7,10,10,10,11,11,11,11,10,6,9,9,11,10,10,11,10,10,6,9,9,11,10,11,11,10,10,7,11,11,11,11,11,12,11,11,7,9,9,11,10,10,12,10,10,7,9,9,11,10,10,11,10,10,2,4,4,5,5,7,7,7,7,8,8,10,5,5,6,6,7,7,8,8,8,8,10,5,5,6,6,7,7,8,8,8,8,10,7,7,7,7,8,8,8,8,8,8,10,10,10,7,7,7,7,8,8,8,8,10,10,10,8,8,8,8,8,8,8,8,10,10,10,8,8,8,8,8,8,8,8,10,10,10,8,8,8,8,8,8,9,9,10,10,10,10,10,8,8,8,8,9,9,10,10,10,10,10,9,9,9,9,8,9,10,10,10,10,10,8,9,8,8,9,8,1,4,4,6,6,7,7,7,7,9,9,10,10,7,5,5,7,7,8,8,8,8,10,9,11,10,7,5,5,7,7,8,8,8,8,9,10,11,11,0,8,8,8,8,9,9,9,9,10,10,11,11,0,8,8,8,8,9,9,9,9,10,10,11,11,0,12,12,9,9,9,10,10,10,11,11,12,12,0,13,13,9,9,9,9,10,10,11,11,12,12,0,0,0,10,10,10,10,11,11,12,12,12,13,0,0,0,10,10,10,10,11,11,12,12,12,12,0,0,0,14,14,11,11,11,11,12,13,13,13,0,0,0,14,14,11,10,11,11,12,12,13,13,0,0,0,0,0,12,12,12,12,13,13,13,14,0,0,0,0,0,13,12,12,12,13,13,13,14,2,4,4,4,5,6,5,5,5,5,6,5,5,5,5,6,5,5,5,5,6,6,6,5,5,1,4,4,12,11,13,13,14,14,4,7,7,11,13,14,14,14,14,3,8,3,14,14,14,14,14,14,14,10,12,14,14,14,14,14,14,14,14,5,14,8,14,14,14,14,14,12,14,13,14,14,14,14,14,14,14,13,14,10,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,4,4,6,6,8,8,9,9,10,11,11,11,6,5,5,7,7,8,8,10,10,10,11,11,11,6,5,5,7,7,8,8,10,10,11,12,12,12,14,7,7,7,8,9,9,11,11,11,12,11,12,17,7,7,8,7,9,9,11,11,12,12,12,12,14,11,11,8,8,10,10,11,12,12,13,11,12,14,11,11,8,8,10,10,11,12,12,13,13,12,14,15,14,10,10,10,10,11,12,12,12,12,11,14,13,16,10,10,10,9,12,11,12,12,13,14,14,15,14,14,13,10,10,11,11,12,11,13,11,14,12,15,13,14,11,10,12,10,12,12,13,13,13,13,14,15,15,12,12,11,11,12,11,13,12,14,14,14,14,17,12,12,11,10,13,11,13,13,3,4,4,6,6,7,7,8,8,8,8,9,9,9,9,9,9,10,6,6,6,6,7,7,8,8,8,9,9,9,9,9,9,9,10,6,6,6,6,7,7,8,8,8,8,9,9,9,9,9,9,10,7,7,7,7,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,7,7,7,8,8,8,9,9,9,9,9,9,9,9,10,10,10,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,8,8,8,8,8,8,9,9,9,9,9,9,9,9,11,10,11,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,11,11,8,8,8,8,9,9,9,9,9,9,9,9,11,10,11,11,11,9,9,9,9,9,9,9,9,9,9,9,9,10,11,10,11,11,9,9,9,9,9,9,9,9,9,9,9,10,11,11,10,11,11,9,9,9,9,9,9,9,9,9,9,9,9,11,10,11,11,11,11,11,9,9,9,9,9,9,9,9,9,9,10,11,11,11,11,11,11,9,10,10,10,9,9,9,9,9,9,11,10,11,11,11,11,11,9,9,9,9,9,9,9,9,9,9,11,11,11,11,11,11,11,10,10,9,9,9,9,9,9,9,9,10,11,11,11,11,11,11,11,11,9,9,9,9,9,9,9,9,4,4,7,8,7,8,10,12,17,3,1,6,6,7,8,10,12,15,7,6,9,9,9,11,12,14,17,8,6,9,6,7,9,11,13,17,7,6,9,7,7,8,9,12,15,8,8,10,8,7,7,7,10,14,9,10,12,10,8,8,8,10,14,11,13,15,13,12,11,11,12,16,17,18,18,19,20,18,16,16,20,3,3,8,8,8,8,10,12,14,3,2,6,7,7,8,10,12,16,7,6,7,9,8,10,12,14,16,8,6,8,4,5,7,9,11,13,7,6,8,5,6,7,9,11,14,8,8,10,7,7,6,8,10,13,9,11,12,9,9,7,8,10,12,10,13,15,11,11,10,9,10,13,13,16,17,14,15,14,13,14,17,9,8,12,11,12,13,14,14,16,6,1,5,6,6,9,12,14,17,9,4,5,9,7,9,13,15,16,8,5,8,6,8,10,13,17,17,9,6,7,7,8,9,13,15,17,11,8,9,9,9,10,12,16,16,13,7,8,7,7,9,12,14,15,13,6,7,5,5,7,10,13,13,14,7,8,5,6,7,9,10,12,6,6,12,13,13,14,16,17,17,4,2,5,8,7,9,12,15,15,9,4,5,9,7,9,12,16,18,11,6,7,4,6,8,11,14,18,10,5,6,5,5,7,10,14,17,10,5,7,7,6,7,10,13,16,11,5,7,7,7,8,10,12,15,13,6,7,5,5,7,9,12,13,16,8,9,6,6,7,9,10,12,1,5,5,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,7,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,8,10,9,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,10,11,0,0,0,0,0,0,9,11,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,11,9,0,0,0,0,0,0,9,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,11,10,0,0,0,0,0,0,9,9,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,10,0,0,0,0,0,0,9,10,11,0,0,0,0,0,0,9,11,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+247353);
/* memory initializer */ allocate([1,4,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,7,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,6,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,7,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,7,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,2,8,7,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,6,6,6,6,8,8,0,0,0,7,7,7,7,9,9,0,0,0,7,7,7,7,9,9,0,0,0,7,7,7,8,9,9,0,0,0,7,7,7,7,9,9,0,0,0,9,9,8,8,10,10,0,0,0,8,9,8,8,10,10,0,0,0,10,10,9,9,10,10,0,0,0,0,0,9,9,10,10,1,4,3,6,6,8,7,8,8,8,8,9,9,10,10,11,11,0,0,0,7,7,8,8,9,9,9,9,9,10,10,10,11,11,0,0,0,7,7,8,8,9,9,9,9,10,10,10,10,11,11,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,11,11,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,11,11,0,0,0,8,8,9,9,9,9,10,10,10,10,11,11,12,12,0,0,0,8,8,9,9,9,9,10,10,10,10,11,11,12,12,0,0,0,9,9,9,9,10,10,10,10,11,11,11,12,12,12,0,0,0,0,0,9,9,10,10,10,10,11,11,11,11,12,12,0,0,0,0,0,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,0,0,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,0,0,10,10,11,11,11,11,11,12,12,12,13,13,0,0,0,0,0,0,0,11,10,11,11,11,11,12,12,13,13,0,0,0,0,0,0,0,11,11,12,11,12,12,12,12,13,13,0,0,0,0,0,0,0,11,11,11,12,12,12,12,13,13,13,0,0,0,0,0,0,0,12,12,12,12,12,13,13,13,14,14,0,0,0,0,0,0,0,0,0,12,12,12,12,13,13,14,14,1,4,4,7,6,6,7,6,6,4,7,7,10,9,9,10,9,9,4,6,7,10,9,9,11,9,9,7,10,10,11,11,11,12,10,11,6,9,9,11,10,11,11,10,10,6,9,9,11,10,11,11,10,10,7,11,10,12,11,11,11,11,11,7,9,9,10,10,10,11,11,10,6,9,9,11,10,10,11,10,10,2,3,3,6,6,7,7,7,7,7,8,10,10,10,6,6,7,7,8,8,8,8,10,10,10,6,6,7,7,8,8,8,8,10,10,10,7,7,7,7,8,8,8,8,10,10,10,7,7,7,7,8,8,8,8,10,10,10,8,7,8,8,8,8,8,8,10,10,10,7,7,8,8,8,8,8,8,10,10,10,8,8,8,8,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,9,9,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,1,4,4,6,6,7,7,7,7,8,8,9,9,7,5,5,7,7,8,8,8,8,9,9,10,10,7,5,6,7,7,8,8,8,8,9,9,10,10,0,8,8,8,8,9,9,9,9,10,10,11,11,0,8,8,8,8,9,9,9,9,10,10,11,11,0,12,12,9,9,10,10,10,10,11,11,11,11,0,13,13,9,9,9,9,10,10,11,11,11,12,0,0,0,10,10,10,10,11,11,11,11,12,12,0,0,0,10,10,9,9,11,11,11,12,12,12,0,0,0,13,13,10,10,11,11,12,12,13,13,0,0,0,14,14,10,10,11,11,12,12,13,13,0,0,0,0,0,11,11,11,11,13,12,13,13,0,0,0,0,0,12,12,11,11,12,12,13,13,2,3,3,5,5,6,6,6,5,5,6,6,6,5,5,6,6,6,5,5,6,6,6,5,5,1,5,5,10,10,6,9,8,10,10,6,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,1,4,4,6,6,7,7,9,9,11,12,13,12,6,5,5,7,7,8,8,10,9,12,12,12,12,6,5,5,7,7,8,8,10,9,12,11,11,13,16,7,7,8,8,9,9,10,10,12,12,13,12,16,7,7,8,7,9,9,10,10,11,12,12,13,16,10,10,8,8,10,10,11,12,12,12,13,13,16,11,10,8,7,11,10,11,11,12,11,13,13,16,16,16,10,10,10,10,11,11,13,12,13,13,16,16,16,11,9,11,9,15,13,12,13,13,13,16,16,16,15,13,11,11,12,13,12,12,14,13,16,16,16,14,13,11,11,13,12,14,13,13,13,16,16,16,16,16,13,13,13,12,14,13,14,14,16,16,16,16,16,13,13,12,12,14,14,15,13,2,4,4,6,6,7,7,7,7,8,8,8,8,8,8,8,8,10,10,10,7,7,7,8,8,8,9,9,9,9,9,9,9,9,10,10,10,7,7,7,7,8,8,9,9,9,9,9,9,9,9,10,10,10,7,7,8,8,8,8,9,9,9,9,9,10,9,9,10,10,10,7,7,8,8,9,8,9,9,9,9,10,9,9,10,10,10,10,8,8,8,8,9,8,9,9,9,9,9,10,9,10,10,10,10,7,7,8,8,9,9,9,9,9,9,10,9,10,10,10,10,10,8,8,8,9,9,9,9,9,9,9,10,10,10,9,11,10,10,10,10,8,8,9,9,9,9,9,10,9,9,9,10,10,10,10,11,11,9,9,9,9,9,9,9,9,10,9,9,10,11,10,10,11,11,9,9,9,9,9,9,9,9,9,9,10,9,11,11,10,11,11,9,9,9,9,9,9,9,9,9,9,10,9,11,10,10,11,11,11,11,9,9,9,9,9,9,9,9,9,9,10,10,10,11,11,11,11,9,10,9,10,9,9,9,9,10,9,10,11,10,11,10,10,10,10,10,9,9,9,10,9,9,9,10,11,11,10,11,11,10,11,10,10,10,9,9,9,9,10,9,9,10,11,10,11,11,11,11,10,11,10,10,9,10,9,9,9,10,1,5,5,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,7,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,7,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,7,9,8,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,7,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,8,10,9,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,8,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,9,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,9,10,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+256249);
/* memory initializer */ allocate([1,4,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,7,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,7,7,0,0,0,0,0,5,4,7,7,0,0,0,0,0,5,5,7,7,0,0,0,0,0,6,7,8,8,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,9,10,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,3,6,6,7,7,9,9,0,5,5,7,7,8,7,9,9,0,5,5,7,7,8,8,9,9,0,7,7,8,8,8,8,10,10,0,0,0,8,8,8,8,10,10,0,0,0,9,9,9,9,11,11,0,0,0,9,9,9,9,11,11,0,0,0,10,10,10,10,11,11,0,0,0,0,0,9,9,11,11,1,4,4,6,6,8,8,8,8,8,8,9,9,10,10,11,11,0,6,6,7,7,8,8,9,9,9,9,10,10,10,11,11,11,0,5,6,7,7,8,8,9,9,9,9,10,10,10,11,11,11,0,7,7,8,8,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,8,8,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,8,8,9,9,10,10,10,10,11,11,11,11,12,12,0,0,0,8,8,9,9,10,10,10,10,11,11,11,11,12,12,0,0,0,9,9,9,9,10,10,10,10,11,11,12,12,12,13,0,0,0,0,0,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,0,0,9,9,10,10,11,11,11,11,12,12,13,13,0,0,0,0,0,9,9,10,10,11,10,11,11,12,12,13,13,0,0,0,0,0,10,10,10,10,11,11,12,12,12,13,13,13,0,0,0,0,0,0,0,10,10,11,11,12,12,12,13,13,13,0,0,0,0,0,0,0,11,11,12,12,12,12,13,13,14,14,0,0,0,0,0,0,0,11,11,12,11,12,12,13,13,13,13,0,0,0,0,0,0,0,12,12,12,12,13,13,13,13,14,14,0,0,0,0,0,0,0,0,0,12,12,12,12,13,13,14,14,1,4,4,7,6,6,7,6,6,4,7,7,10,9,9,11,9,9,4,7,7,10,9,9,11,9,9,7,10,10,10,11,11,11,10,10,6,9,9,11,11,10,11,10,10,6,9,9,11,10,11,11,10,10,7,11,10,11,11,11,11,11,11,6,9,9,11,10,10,11,11,10,6,9,9,11,10,10,11,10,11,2,4,4,6,6,7,7,7,7,7,8,9,5,5,6,6,7,7,8,8,8,8,9,5,5,6,6,7,7,8,8,8,8,10,7,7,7,7,7,7,8,8,8,8,10,10,10,7,7,7,7,8,8,8,8,10,10,10,8,8,8,8,8,8,8,8,10,10,10,8,8,8,8,8,8,8,8,10,10,10,8,8,8,8,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,9,9,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,1,4,4,6,6,7,7,7,7,8,8,9,9,7,5,5,7,7,8,8,8,8,9,9,10,10,7,6,5,7,7,8,8,8,8,9,9,10,10,0,8,8,8,8,9,9,9,9,10,10,11,11,0,8,8,8,8,9,9,9,9,10,10,11,11,0,12,12,9,9,10,10,10,10,11,11,11,11,0,13,13,9,9,9,9,10,10,11,11,11,12,0,0,0,9,10,10,10,11,11,12,11,12,12,0,0,0,10,10,9,9,11,11,12,12,12,12,0,0,0,13,13,10,10,11,11,12,12,13,13,0,0,0,14,14,10,10,11,11,12,12,13,13,0,0,0,0,0,11,12,11,11,13,12,13,13,0,0,0,0,0,12,12,11,11,13,12,14,14,2,4,4,4,4,6,5,5,5,5,6,5,5,5,5,6,6,6,5,5,6,6,6,5,5,1,3,3,11,11,11,11,11,11,3,7,6,11,11,11,11,11,11,4,8,7,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,1,4,4,6,6,7,7,9,9,10,11,12,12,6,5,5,7,7,8,8,10,10,12,11,12,12,6,5,5,7,7,8,8,10,10,12,11,12,12,17,7,7,8,8,9,9,10,10,12,12,13,13,18,7,7,8,7,9,9,10,10,12,12,12,13,19,10,10,8,8,10,10,11,11,12,12,13,14,19,11,10,8,7,10,10,11,11,12,12,13,12,19,19,19,10,10,10,10,11,11,12,12,13,13,19,19,19,11,9,11,9,14,12,13,12,13,13,19,20,18,13,14,11,11,12,12,13,13,14,13,20,20,20,15,13,11,10,13,11,13,13,14,13,20,20,20,20,20,13,14,12,12,13,13,13,13,20,20,20,20,20,13,13,12,12,16,13,15,13,2,5,5,6,6,7,7,7,7,8,8,8,8,8,8,8,8,10,6,6,7,7,7,7,8,8,9,9,9,9,9,9,9,9,10,6,6,7,7,8,7,8,8,9,9,9,9,9,9,9,9,10,7,7,7,7,8,8,8,9,9,9,9,9,9,9,9,9,10,10,10,7,7,8,8,9,8,9,9,9,9,10,9,9,10,10,10,11,8,8,8,8,9,9,9,9,9,9,9,10,9,10,10,10,10,8,8,8,8,9,9,9,9,9,9,9,9,10,10,11,10,10,8,8,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,11,11,8,8,9,9,9,9,9,9,9,9,9,10,11,11,11,11,11,9,9,9,9,9,9,9,9,10,9,10,9,11,11,10,11,11,9,9,9,9,9,9,9,9,9,9,10,9,11,11,10,11,11,9,9,9,9,9,9,9,9,9,9,10,9,11,10,11,11,11,11,11,9,9,10,9,9,9,9,9,9,9,10,11,10,11,11,11,11,10,10,10,10,9,9,9,9,9,9,10,11,11,11,11,11,11,9,10,9,9,9,9,9,9,9,9,11,11,10,11,11,11,10,10,10,9,9,9,9,9,9,9,9,10,11,10,11,11,11,11,11,11,9,9,9,9,9,9,9,9,5,4,8,9,8,9,10,12,15,4,1,5,5,6,8,11,12,12,8,5,8,9,9,11,13,12,12,9,5,8,5,7,9,12,13,13,8,6,8,7,7,9,11,11,11,9,7,9,7,7,7,7,10,12,10,10,11,9,8,7,7,9,11,11,12,13,12,11,9,8,9,11,13,16,16,15,15,12,10,11,12,5,4,9,10,9,10,11,12,13,4,1,5,7,7,9,11,12,14,8,5,7,9,8,10,13,13,13,10,7,9,4,6,7,10,12,14,9,6,7,6,6,7,10,12,12,9,8,9,7,6,7,8,11,12,11,11,11,9,8,7,8,10,12,12,13,14,12,11,9,9,9,12,12,17,17,15,16,12,10,11,13,6,8,13,12,13,14,15,16,16,4,2,4,7,6,8,11,13,15,10,4,4,8,6,8,11,14,17,11,5,6,5,6,8,12,14,17,11,5,5,6,5,7,10,13,16,12,6,7,8,7,8,10,13,15,13,8,8,7,7,8,10,12,15,15,7,7,5,5,7,9,12,14,15,8,8,6,6,7,8,10,11,4,7,13,14,14,15,16,18,18,4,2,5,8,7,9,12,15,15,10,4,5,10,6,8,11,15,17,12,5,7,5,6,8,11,14,17,11,5,6,6,5,6,9,13,17,12,6,7,6,5,6,8,12,14,14,7,8,6,6,7,9,11,14,14,8,9,6,5,6,9,11,13,16,10,10,7,6,7,8,10,11,2,4,4,0,0,0,0,0,0,5,7,6,0,0,0,0,0,0,5,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,7,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,8,9,10,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,8,8,0,0,0,0,0,0,8,9,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,7,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,7,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,8,8,0,0,0,0,0,0,8,10,9,0,0,0,0,0,0,8,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,8,9,9], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+265365);
/* memory initializer */ allocate([2,3,4,6,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,5,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,2,7,7,0,0,0,0,0,13,13,6,6,0,0,0,0,0,12,0,6,6,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,8,9,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,11,10,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,6,5,6,6,8,8,0,0,0,7,7,7,7,9,9,0,0,0,7,7,7,7,9,9,0,0,0,7,7,8,8,10,10,0,0,0,7,7,8,8,10,10,0,0,0,9,9,8,8,10,10,0,0,0,8,8,8,8,10,10,0,0,0,10,10,9,9,11,11,0,0,0,0,0,9,9,11,11,1,4,3,6,6,7,7,8,8,8,8,9,9,10,10,11,11,0,0,0,7,7,8,8,9,9,9,9,10,10,10,10,11,11,0,0,0,7,7,8,8,9,9,9,9,10,10,10,10,11,11,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,11,11,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,12,11,0,0,0,8,8,9,9,9,10,10,10,10,10,11,11,12,12,0,0,0,8,8,9,9,10,9,10,10,10,10,11,11,12,12,0,0,0,9,9,9,9,10,10,10,10,11,11,12,12,12,12,0,0,0,0,0,9,9,10,10,10,10,11,11,12,12,12,12,0,0,0,0,0,9,9,10,10,10,11,11,11,12,12,13,13,0,0,0,0,0,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,0,0,10,10,10,10,11,11,12,12,12,12,13,13,0,0,0,0,0,0,0,10,10,11,11,12,12,12,12,13,13,0,0,0,0,0,0,0,11,11,12,12,12,12,13,13,13,13,0,0,0,0,0,0,0,11,11,11,11,12,12,13,13,13,13,0,0,0,0,0,0,0,12,12,12,12,12,12,13,13,14,14,0,0,0,0,0,0,0,0,0,12,12,12,12,13,13,14,14,1,4,4,7,6,6,7,6,6,4,7,7,10,9,9,11,9,9,4,7,7,10,9,9,11,9,9,6,10,10,11,11,11,11,10,10,6,9,9,11,10,10,11,10,10,6,9,9,11,10,11,11,10,10,7,11,10,11,11,11,12,11,11,7,9,9,11,10,10,11,11,10,6,9,9,10,10,10,12,10,11,2,3,3,6,6,7,7,7,7,8,8,10,10,10,6,6,7,7,8,8,8,8,10,10,10,6,6,7,7,8,8,8,8,10,10,10,7,7,7,7,8,8,8,8,10,10,10,7,7,7,7,8,8,8,8,10,10,10,7,7,8,8,8,8,8,8,10,10,10,7,7,8,8,8,8,8,8,10,10,10,8,8,8,8,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,9,9,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,1,4,4,6,6,7,7,7,7,8,8,10,9,7,5,6,7,7,8,8,8,8,9,9,10,10,7,5,5,7,7,8,8,8,8,9,9,10,10,0,8,8,8,8,9,9,9,9,10,10,11,10,0,8,8,8,8,9,9,9,9,10,10,11,11,0,12,12,9,9,9,10,10,10,11,11,11,11,0,13,13,9,9,9,9,10,10,11,11,11,11,0,0,0,10,10,10,10,11,11,12,11,12,12,0,0,0,10,10,10,9,11,11,12,11,13,12,0,0,0,13,13,10,10,11,11,12,12,13,13,0,0,0,14,14,10,10,11,11,12,12,13,13,0,0,0,0,0,11,12,11,11,12,12,14,13,0,0,0,0,0,12,11,11,11,13,10,14,13,2,3,3,5,5,6,6,6,5,5,6,6,6,5,5,6,6,6,5,5,6,6,6,5,5,1,4,3,10,10,10,10,10,10,10,10,10,10,4,8,6,10,10,10,10,10,10,10,10,10,10,4,8,7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,1,4,4,6,5,7,7,9,9,10,10,12,12,6,5,5,7,7,8,8,10,10,12,11,12,12,6,5,5,7,7,8,8,10,10,11,11,12,12,15,7,7,8,8,9,9,11,11,12,12,13,12,15,8,8,8,7,9,9,10,10,12,12,13,13,16,11,10,8,8,10,10,11,11,12,12,13,13,16,11,11,9,8,11,10,11,11,12,12,13,12,16,16,16,10,11,10,11,12,12,12,12,13,13,16,16,16,11,9,11,9,14,12,12,12,13,13,16,16,16,12,14,11,12,12,12,13,13,14,13,16,16,16,15,13,12,10,13,10,13,14,13,13,16,16,16,16,16,13,14,12,13,13,12,13,13,16,16,16,16,16,13,12,12,11,14,12,15,13,2,4,4,6,6,6,6,7,7,8,8,8,8,8,8,8,8,10,10,10,7,7,7,7,8,8,9,9,9,9,9,9,9,9,10,10,10,7,7,8,7,8,8,9,9,9,9,9,9,9,9,10,10,10,7,7,8,8,8,9,9,9,9,9,9,10,9,9,10,10,10,7,7,8,8,9,8,9,9,9,9,10,9,9,10,10,11,11,8,8,8,8,9,9,9,9,9,9,10,9,9,10,10,10,10,8,8,8,8,9,9,9,9,9,9,9,9,10,10,11,11,11,8,8,9,9,9,9,9,9,9,9,9,9,10,10,10,10,11,11,11,8,8,9,9,9,9,10,9,9,9,9,9,11,11,11,11,11,9,9,9,9,9,9,9,9,9,9,9,9,11,10,10,11,11,9,9,9,9,9,9,9,9,9,10,10,10,10,11,10,11,11,9,9,9,9,9,9,9,9,9,10,10,9,10,10,11,11,11,11,11,9,9,9,10,9,9,9,9,9,9,10,11,11,11,11,11,11,10,10,10,10,9,9,9,9,9,9,10,11,11,11,11,11,11,9,10,9,9,9,9,10,9,9,9,11,11,11,11,11,11,11,10,10,9,9,9,9,9,9,10,9,11,11,10,11,11,11,11,10,11,9,9,9,9,9,9,9,9,1,5,5,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,7,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,7,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,7,9,8,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,7,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,9,10,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,8,10,9,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,8,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,9,10,9], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+274261);
/* memory initializer */ allocate([2,3,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,7,7,0,0,0,0,0,5,5,6,6,0,0,0,0,0,5,5,7,7,0,0,0,0,0,7,7,7,7,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,8,9,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,6,6,7,7,9,9,0,6,6,7,7,8,8,9,9,0,6,6,7,7,8,8,9,9,0,7,7,8,8,8,8,10,10,0,0,0,8,8,8,8,10,10,0,0,0,8,8,9,9,11,11,0,0,0,9,9,9,9,11,11,0,0,0,10,10,10,10,11,11,0,0,0,0,0,9,9,11,11,2,3,3,6,6,7,7,8,8,8,8,9,9,10,10,11,11,0,5,5,6,6,8,8,9,9,9,9,10,10,10,10,11,11,0,5,5,6,6,8,8,9,9,9,9,10,10,10,10,11,11,0,7,7,7,7,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,8,8,8,8,9,9,10,10,10,11,11,11,12,12,0,0,0,8,8,8,8,9,9,10,10,10,10,11,11,12,12,0,0,0,9,9,9,9,10,10,10,10,11,11,12,12,12,12,0,0,0,0,0,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,0,0,9,9,9,9,10,10,11,11,12,12,13,13,0,0,0,0,0,9,9,9,9,10,10,11,11,12,12,13,13,0,0,0,0,0,9,9,10,10,11,11,12,12,12,12,13,13,0,0,0,0,0,0,0,10,10,11,11,12,12,12,12,13,13,0,0,0,0,0,0,0,11,11,11,11,12,12,13,13,13,13,0,0,0,0,0,0,0,11,11,11,11,12,12,13,13,13,13,0,0,0,0,0,0,0,11,11,12,12,12,12,13,13,14,14,0,0,0,0,0,0,0,0,0,12,12,12,12,13,13,14,14,1,4,4,7,6,6,7,6,6,4,7,7,10,9,9,11,9,9,4,7,7,10,9,9,11,9,9,7,10,10,10,11,11,11,10,10,6,9,9,11,11,10,11,10,10,6,9,9,11,10,11,11,10,10,7,11,11,11,11,11,11,11,11,6,9,9,11,10,10,11,11,10,6,9,9,10,10,10,11,10,11,2,4,4,6,6,7,7,7,7,8,8,10,5,5,6,6,7,7,8,8,8,8,10,5,5,6,6,7,7,8,8,8,8,10,7,7,7,7,8,8,8,8,8,8,10,10,10,7,7,7,7,8,8,8,8,10,10,10,7,7,8,8,8,8,8,8,10,10,10,7,7,8,8,8,8,8,8,10,10,10,8,8,8,8,8,8,9,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,9,9,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,1,4,4,6,6,7,7,7,7,8,8,9,9,7,5,5,7,7,8,8,8,8,9,9,10,10,7,5,6,7,7,8,8,8,8,9,9,11,10,0,8,8,8,8,9,9,9,9,10,10,11,11,0,8,8,8,8,9,9,9,9,10,10,11,11,0,12,12,9,9,10,10,10,10,11,11,11,11,0,13,13,9,9,9,9,10,10,11,11,12,12,0,0,0,9,10,9,10,11,11,12,11,13,12,0,0,0,10,10,9,9,11,11,12,12,13,12,0,0,0,13,13,10,10,11,11,12,12,13,13,0,0,0,14,14,10,10,11,11,12,12,13,13,0,0,0,0,0,11,12,11,11,12,13,14,13,0,0,0,0,0,12,12,11,11,13,12,14,13,2,4,4,4,5,6,5,5,5,5,6,5,5,5,5,6,5,5,5,5,6,6,6,5,5,1,3,3,13,13,13,13,13,13,13,13,13,13,3,6,6,13,13,13,13,13,13,13,13,13,13,4,8,7,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,1,4,4,6,6,7,7,9,9,10,11,12,12,6,5,5,7,7,8,7,10,10,11,11,12,12,6,5,5,7,7,8,8,10,10,11,11,12,12,16,7,7,8,8,9,9,11,11,12,12,13,13,17,7,7,8,7,9,9,11,10,12,12,13,13,19,11,10,8,8,10,10,11,11,12,12,13,13,19,11,11,9,7,11,10,11,11,12,12,13,12,19,19,19,10,10,10,10,11,12,12,12,13,14,18,19,19,11,9,11,9,13,12,12,12,13,13,19,20,19,13,15,11,11,12,12,13,13,14,13,18,19,20,15,13,12,10,13,10,13,13,13,14,20,20,20,20,20,13,14,12,12,13,12,13,13,20,20,20,20,20,13,12,12,12,14,12,14,13,2,5,5,6,6,7,6,7,7,8,8,8,8,8,8,8,8,10,6,6,7,7,7,7,8,8,9,9,9,9,9,9,9,9,10,6,6,7,7,8,8,8,8,9,9,9,9,9,9,9,9,10,7,7,7,7,8,8,8,9,9,9,9,9,9,9,9,9,10,10,10,7,7,8,8,9,9,9,9,9,9,9,9,9,9,10,11,11,8,8,8,8,9,9,9,9,9,9,10,10,9,10,10,10,10,8,8,8,8,9,9,9,9,9,9,9,9,10,10,11,10,10,8,8,9,9,9,9,9,9,9,9,9,9,10,9,10,10,10,11,11,8,8,9,9,9,9,9,9,9,9,9,9,11,11,11,11,11,9,9,9,9,9,9,9,9,10,9,10,9,11,11,11,11,11,9,8,9,9,9,9,9,9,9,10,10,9,11,11,10,11,11,9,9,9,9,9,9,9,9,9,10,10,9,11,11,11,11,11,11,11,9,9,10,9,9,9,9,10,9,10,10,11,10,11,11,11,11,9,10,10,10,9,9,9,9,9,9,10,11,11,11,11,11,11,9,9,9,9,9,9,9,9,10,9,11,11,10,11,11,11,11,10,10,9,9,9,9,9,9,10,9,10,11,10,11,11,11,11,11,11,9,9,10,9,9,9,9,9,5,5,9,10,9,9,10,11,12,5,1,5,6,6,7,10,12,14,9,5,6,8,8,10,12,14,14,10,5,8,5,6,8,11,13,14,9,5,7,6,6,8,10,12,11,9,7,9,7,6,6,7,10,10,10,9,12,9,8,7,7,10,12,11,11,13,12,10,9,8,9,11,11,14,15,15,13,11,9,9,11,5,4,8,10,9,9,10,11,12,4,2,5,6,6,8,10,11,13,8,4,6,8,7,9,12,12,14,10,6,8,4,5,6,9,11,12,9,5,6,5,5,6,9,11,11,9,7,9,6,5,5,7,10,10,10,9,11,8,7,6,7,9,11,11,12,13,10,10,9,8,9,11,11,15,15,12,13,11,9,10,11,11,9,13,12,12,11,12,12,13,15,8,2,11,4,8,5,7,10,12,15,13,7,10,9,8,8,10,13,17,17,11,4,12,5,9,5,8,11,14,16,12,6,8,7,6,6,8,11,13,16,11,4,9,5,6,4,6,10,13,16,11,6,11,7,7,6,7,10,13,15,13,9,12,9,8,6,8,10,12,14,14,10,10,8,6,5,6,9,11,13,15,11,11,9,6,5,6,8,9,12,2,4,4,0,0,0,0,0,0,5,6,6,0,0,0,0,0,0,5,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,6,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,6,8,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,8,8,0,0,0,0,0,0,8,9,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,7,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,8,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,8,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,8,9,9], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+282921);
/* memory initializer */ allocate([1,4,4,0,0,0,7,7,0,0,0,7,7,0,0,0,8,8,0,0,0,0,0,0,0,4,6,6,0,0,0,8,8,0,0,0,8,8,0,0,0,9,9,0,0,0,0,0,0,0,4,6,6,0,0,0,8,8,0,0,0,8,8,0,0,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,8,0,0,0,11,11,0,0,0,11,11,0,0,0,12,11,0,0,0,0,0,0,0,7,8,8,0,0,0,10,11,0,0,0,11,11,0,0,0,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,8,8,0,0,0,11,11,0,0,0,11,11,0,0,0,12,12,0,0,0,0,0,0,0,6,8,8,0,0,0,10,11,0,0,0,10,11,0,0,0,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,9,9,0,0,0,11,12,0,0,0,11,12,0,0,0,12,11,0,0,0,0,0,0,0,8,10,9,0,0,0,12,11,0,0,0,12,11,0,0,0,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,3,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,6,6,0,0,0,0,0,6,6,6,6,0,0,0,0,0,6,6,6,6,0,0,0,0,0,7,7,6,6,0,0,0,0,0,0,0,6,7,0,0,0,0,0,0,0,7,8,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,6,6,7,7,9,9,0,7,7,7,7,7,7,9,9,0,7,7,7,7,7,7,9,9,0,8,8,7,7,8,8,10,10,0,0,0,7,7,8,8,10,10,0,0,0,9,9,8,8,10,10,0,0,0,9,9,8,8,10,10,0,0,0,10,10,9,9,11,11,0,0,0,0,0,9,9,11,11,1,4,3,6,6,8,8,9,9,9,9,9,9,10,10,11,11,0,7,7,7,7,8,8,9,9,9,9,10,10,11,11,12,11,0,7,7,7,7,8,8,9,9,9,9,10,10,11,11,11,12,0,8,8,7,7,9,9,10,10,9,9,10,10,11,11,12,12,0,0,0,7,7,9,9,10,10,10,9,10,10,11,11,12,12,0,0,0,8,8,9,9,10,10,10,10,11,11,11,11,12,12,0,0,0,8,8,9,9,10,10,10,10,11,11,12,12,12,12,0,0,0,9,9,9,9,10,10,10,10,11,11,12,12,12,12,0,0,0,0,0,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,0,0,9,9,10,10,11,11,11,11,12,12,13,13,0,0,0,0,0,9,9,10,10,11,11,11,11,12,12,13,13,0,0,0,0,0,10,10,10,10,11,11,12,12,13,12,13,13,0,0,0,0,0,0,0,10,10,11,11,12,12,13,13,13,13,0,0,0,0,0,0,0,11,11,12,12,12,12,13,13,13,14,0,0,0,0,0,0,0,11,11,12,12,12,12,13,13,13,14,0,0,0,0,0,0,0,12,12,12,12,13,13,13,13,14,14,0,0,0,0,0,0,0,0,0,12,12,13,13,13,13,14,14,1,4,4,7,6,6,7,6,6,4,7,7,10,9,9,11,9,9,4,7,7,10,9,9,10,9,9,7,10,10,11,10,11,11,10,11,6,9,9,11,10,10,11,10,10,6,9,9,11,10,11,11,10,10,7,11,10,11,11,11,12,11,11,6,9,9,11,10,10,11,11,10,6,9,9,11,10,10,12,10,11,2,3,4,6,6,7,7,7,7,7,7,9,7,7,6,6,7,7,8,8,8,8,9,6,6,6,6,7,7,8,8,8,8,10,7,7,7,7,7,7,8,8,8,8,10,10,10,7,7,7,7,8,8,8,8,10,10,10,7,7,8,8,8,8,8,8,10,10,10,7,8,8,8,8,8,8,8,10,10,10,8,8,8,8,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,9,9,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,1,4,4,6,6,7,7,7,7,8,8,9,9,6,5,5,7,7,8,8,8,8,9,9,10,10,7,6,5,7,7,8,8,8,8,9,9,10,10,0,8,8,8,8,9,9,9,9,10,10,11,11,0,8,8,8,8,9,9,9,9,10,10,11,11,0,12,12,9,9,10,10,10,10,11,11,11,11,0,13,13,9,9,10,10,10,10,11,11,12,12,0,0,0,10,10,10,10,11,11,12,12,12,13,0,0,0,10,10,10,10,11,11,12,12,12,12,0,0,0,14,14,10,11,11,11,12,12,13,13,0,0,0,14,14,11,10,11,11,13,12,13,13,0,0,0,0,0,12,12,11,12,13,12,14,14,0,0,0,0,0,12,12,12,12,13,12,14,14,2,4,4,5,4,6,5,5,5,5,6,5,5,5,5,6,5,5,5,5,6,6,6,5,5,1,5,4,12,12,12,12,12,12,12,12,12,12,4,9,8,11,11,11,11,11,11,11,11,11,11,2,8,7,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,1,4,4,6,6,7,6,8,8,10,9,10,10,6,5,5,7,7,8,7,10,9,11,11,12,13,6,5,5,7,7,8,8,10,10,11,11,13,13,18,8,8,8,8,9,9,10,10,12,12,12,13,18,8,8,8,8,9,9,10,10,12,12,13,13,18,11,11,8,8,10,10,11,11,12,11,13,12,18,11,11,9,7,10,10,11,11,11,12,12,13,17,17,17,10,10,11,11,12,12,12,10,12,12,17,17,17,11,10,11,10,13,12,11,12,12,12,17,17,17,15,14,11,11,12,11,13,10,13,12,17,17,17,14,14,12,10,11,11,13,13,13,13,17,17,16,17,16,13,13,12,10,13,10,14,13,17,16,17,16,17,13,12,12,10,13,11,14,14,2,4,4,6,6,7,7,7,7,7,7,8,8,8,8,8,8,10,7,7,7,7,7,7,8,8,8,8,9,9,9,9,9,9,10,7,7,7,7,8,8,8,8,8,8,9,9,9,9,9,9,10,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,8,7,8,8,8,8,9,9,9,9,9,9,9,9,10,11,11,8,8,8,8,9,9,9,9,9,9,10,9,9,9,10,11,10,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,11,10,8,8,9,9,9,9,9,9,10,9,9,10,9,10,11,10,11,11,11,8,8,9,9,9,9,9,9,9,9,10,10,11,11,11,11,11,9,9,9,9,9,9,10,9,9,9,10,10,11,11,11,11,11,9,9,9,9,9,9,9,9,9,10,9,10,11,11,11,11,11,9,9,9,9,10,10,9,9,9,10,10,10,11,11,11,11,11,11,11,9,9,9,10,9,9,10,10,10,10,11,11,10,11,11,11,11,10,9,10,10,9,9,9,9,10,10,11,10,11,11,11,11,11,9,9,9,9,10,9,10,10,10,10,11,10,11,11,11,11,11,10,10,9,9,10,9,10,10,10,10,10,10,10,11,11,11,11,11,11,9,9,10,9,10,9,10,10,6,6,12,10,10,10,9,10,12,12,6,1,10,5,6,6,7,9,11,14,12,9,8,11,7,8,9,11,13,15,10,5,12,7,8,7,9,12,14,15,10,6,7,8,5,6,7,9,12,14,9,6,8,7,6,6,7,9,12,12,9,7,9,9,7,6,6,7,10,10,10,9,10,11,8,7,6,6,8,10,12,11,13,13,11,10,8,8,8,10,11,13,15,15,14,13,10,8,8,9,10,9,13,11,14,10,12,13,13,14,7,2,12,5,10,5,7,10,12,14,12,6,9,8,7,7,9,11,13,16,10,4,12,5,10,6,8,12,14,16,12,6,8,7,6,5,7,11,12,16,10,4,8,5,6,4,6,9,13,16,10,6,10,7,7,6,7,9,13,15,12,9,11,9,8,6,7,10,12,14,14,11,10,9,6,5,6,9,11,13,15,13,11,10,6,5,6,8,9,11,2,4,4,0,0,0,0,0,0,5,6,6,0,0,0,0,0,0,5,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,6,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,6,8,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,8,8,9,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,8,8,0,0,0,0,0,0,7,9,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,8,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,7,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,8,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,8,9,8], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+291843);
/* memory initializer */ allocate([2,5,5,0,0,0,5,5,0,0,0,5,5,0,0,0,7,8,0,0,0,0,0,0,0,5,6,6,0,0,0,7,7,0,0,0,7,7,0,0,0,10,10,0,0,0,0,0,0,0,5,6,6,0,0,0,7,7,0,0,0,7,7,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,7,7,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,5,7,7,0,0,0,7,7,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,7,7,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,5,7,7,0,0,0,7,7,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,10,10,0,0,0,9,9,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,8,10,10,0,0,0,9,9,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,3,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,6,6,0,0,0,0,0,4,4,6,6,0,0,0,0,0,4,4,6,6,0,0,0,0,0,5,5,6,6,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,7,8,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,4,6,6,7,7,9,9,0,5,5,7,7,7,8,9,9,0,5,5,7,7,8,8,9,9,0,7,7,8,8,8,8,10,10,0,0,0,8,8,8,8,10,10,0,0,0,9,9,9,9,10,10,0,0,0,9,9,9,9,10,10,0,0,0,10,10,10,10,11,11,0,0,0,0,0,10,10,11,11,2,3,3,6,6,7,7,8,8,8,8,9,9,10,10,11,10,0,5,5,7,7,8,8,9,9,9,9,10,10,10,10,11,11,0,5,5,7,7,8,8,9,9,9,9,10,10,10,10,11,11,0,6,6,7,7,8,8,9,9,9,9,10,10,11,11,11,11,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,11,12,0,0,0,8,8,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,8,8,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,9,9,9,9,10,10,10,10,11,10,11,11,12,12,0,0,0,0,0,9,9,10,10,10,10,11,11,11,11,12,12,0,0,0,0,0,9,8,9,9,10,10,11,11,12,12,12,12,0,0,0,0,0,8,8,9,9,10,10,11,11,12,11,12,12,0,0,0,0,0,9,10,10,10,11,11,11,11,12,12,13,13,0,0,0,0,0,0,0,10,10,10,10,11,11,12,12,13,13,0,0,0,0,0,0,0,11,11,11,11,12,12,12,12,13,13,0,0,0,0,0,0,0,11,11,11,11,12,12,12,12,13,13,0,0,0,0,0,0,0,11,11,12,12,12,12,13,13,13,13,0,0,0,0,0,0,0,0,0,12,12,12,12,13,13,13,13,1,4,4,7,6,6,7,6,6,4,7,7,10,9,9,11,9,9,4,7,7,10,9,9,11,9,9,7,10,10,11,11,10,12,11,11,6,9,9,11,10,10,11,10,10,6,9,9,11,10,10,11,10,10,7,11,11,11,11,11,12,11,11,6,9,9,11,10,10,11,10,10,6,9,9,11,10,10,11,10,10,2,4,4,6,6,7,7,7,7,8,8,10,5,5,6,6,7,7,8,8,8,8,10,5,5,6,6,7,7,8,8,8,8,10,6,6,7,7,8,8,8,8,8,8,10,10,10,7,7,8,7,8,8,8,8,10,10,10,8,8,8,8,8,8,8,8,10,10,10,7,8,8,8,8,8,8,8,10,10,10,8,8,8,8,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,9,9,8,8,9,8,10,10,10,10,10,8,8,8,8,8,8,1,4,4,6,6,7,7,8,8,9,9,10,10,6,5,5,7,7,8,8,8,8,9,9,10,10,7,5,5,7,7,8,8,8,8,9,9,11,10,0,8,8,8,8,9,9,9,9,10,10,11,11,0,8,8,8,8,9,9,9,9,10,10,11,11,0,12,12,9,9,10,10,10,10,11,11,11,12,0,13,13,9,9,10,10,10,10,11,11,12,12,0,0,0,10,10,10,10,11,11,12,12,12,12,0,0,0,10,10,10,10,11,11,12,12,12,12,0,0,0,14,14,11,11,11,11,12,12,13,13,0,0,0,14,14,11,11,11,11,12,12,13,13,0,0,0,0,0,12,12,12,12,13,13,14,13,0,0,0,0,0,13,13,12,12,13,12,14,13,2,4,4,5,5,6,5,5,5,5,6,4,5,5,5,6,5,5,5,5,6,6,6,5,5,1,4,4,12,12,12,12,12,12,12,12,12,12,4,9,8,12,12,12,12,12,12,12,12,12,12,2,9,7,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,1,4,4,6,6,7,7,8,7,9,9,10,10,10,10,6,5,5,7,7,8,8,10,8,11,10,12,12,13,13,6,5,5,7,7,8,8,10,9,11,11,12,12,13,12,18,8,8,8,8,9,9,10,9,11,10,12,12,13,13,18,8,8,8,8,9,9,10,10,11,11,13,12,14,13,18,11,11,9,9,10,10,11,11,11,12,13,12,13,14,18,11,11,9,8,11,10,11,11,11,11,12,12,14,13,18,18,18,10,11,10,11,12,12,12,12,13,12,14,13,18,18,18,10,11,11,9,12,11,12,12,12,13,13,13,18,18,17,14,14,11,11,12,12,13,12,14,12,14,13,18,18,18,14,14,11,10,12,9,12,13,13,13,13,13,18,18,17,16,18,13,13,12,12,13,11,14,12,14,14,17,18,18,17,18,13,12,13,10,12,11,14,14,14,14,17,18,18,18,18,15,16,12,12,13,10,14,12,14,15,18,18,18,16,17,16,14,12,11,13,10,13,13,14,15,2,5,5,6,6,7,7,7,7,7,7,8,8,8,8,8,8,10,6,6,7,7,8,7,8,8,8,8,8,9,9,9,9,9,10,6,6,7,7,7,7,8,8,8,8,9,9,9,9,9,9,10,7,7,7,7,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,7,7,8,8,8,9,9,9,9,9,9,9,9,9,11,11,11,8,8,8,8,9,9,9,9,9,9,9,9,9,9,10,10,10,8,8,8,8,9,9,9,9,9,9,9,9,9,9,10,10,10,8,9,9,9,9,9,9,9,9,9,9,9,10,9,10,10,10,11,11,9,9,9,9,9,9,9,9,9,9,9,9,11,10,11,11,11,9,9,9,9,9,9,10,10,9,9,10,9,11,10,11,11,11,9,9,9,9,9,9,9,9,10,10,10,9,11,11,11,11,11,9,9,9,9,10,10,9,9,9,9,10,9,11,11,11,11,11,11,11,9,9,9,9,9,9,10,10,10,10,11,11,11,11,11,11,11,10,9,10,10,9,10,9,9,10,9,11,10,10,11,11,11,11,9,10,9,9,9,9,10,10,10,10,11,11,11,11,11,11,10,10,10,9,9,10,9,10,9,10,10,10,10,11,11,11,11,11,11,11,9,9,9,9,9,10,10,10,5,6,11,11,11,11,10,10,12,11,5,2,11,5,6,6,7,9,11,13,13,10,7,11,6,7,8,9,10,12,11,5,11,6,8,7,9,11,14,15,11,6,6,8,4,5,7,8,10,13,10,5,7,7,5,5,6,8,10,11,10,7,7,8,6,5,5,7,9,9,11,8,8,11,8,7,6,6,7,9,12,11,10,13,9,9,7,7,7,9,11,13,12,15,12,11,9,8,8,8,4,7,14,10,15,10,12,15,16,15,4,2,11,5,10,6,8,11,14,14,14,10,7,11,6,8,10,11,13,15,9,4,11,5,9,6,9,12,14,15,14,9,6,9,4,5,7,10,12,13,9,5,7,6,5,5,7,10,13,13,10,8,9,8,7,6,8,10,14,14,13,11,10,10,7,7,8,11,14,15,13,12,9,9,6,5,7,10,14,17,15,13,11,10,6,6,7,9,12,17,2,4,4,0,0,0,0,0,0,5,6,6,0,0,0,0,0,0,5,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,6,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,6,8,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,8,8,0,0,0,0,0,0,8,9,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,7,7,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,8,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,8,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,8,9,9], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+301328);
/* memory initializer */ allocate([2,5,5,0,0,0,5,5,0,0,0,5,5,0,0,0,7,7,0,0,0,0,0,0,0,5,6,6,0,0,0,7,7,0,0,0,7,7,0,0,0,10,10,0,0,0,0,0,0,0,5,6,6,0,0,0,7,7,0,0,0,7,7,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,7,0,0,0,7,7,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,5,7,8,0,0,0,7,7,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,7,7,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,5,7,7,0,0,0,7,7,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,10,10,0,0,0,9,9,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,8,10,10,0,0,0,9,9,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,5,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,6,6,0,0,0,0,0,4,4,6,6,0,0,0,0,0,4,4,6,6,0,0,0,0,0,5,5,6,6,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,7,8,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,6,6,7,7,9,9,0,4,4,6,6,7,7,9,9,0,4,5,6,6,7,7,9,9,0,6,6,7,7,8,8,10,10,0,0,0,7,7,8,8,10,9,0,0,0,9,8,8,8,10,10,0,0,0,8,8,8,8,10,10,0,0,0,10,10,9,9,11,11,0,0,0,0,0,9,9,10,10,2,4,4,6,6,8,8,9,9,8,8,9,9,10,10,11,11,0,4,4,6,6,8,8,9,9,9,9,10,10,11,11,11,11,0,4,4,7,6,8,8,9,9,9,9,10,10,11,11,11,11,0,6,6,7,7,8,8,9,9,9,9,10,10,11,11,11,12,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,8,8,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,8,8,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,9,9,9,9,10,10,10,10,11,11,11,11,12,12,0,0,0,0,0,9,9,10,10,10,10,11,11,11,11,12,12,0,0,0,0,0,9,9,9,10,10,10,11,11,11,11,12,12,0,0,0,0,0,9,9,9,9,10,10,11,11,11,12,12,12,0,0,0,0,0,10,10,10,10,11,11,11,11,12,12,13,12,0,0,0,0,0,0,0,10,10,11,11,11,11,12,12,12,12,0,0,0,0,0,0,0,11,11,11,11,12,12,12,12,13,13,0,0,0,0,0,0,0,11,11,11,11,12,12,12,12,13,13,0,0,0,0,0,0,0,12,12,12,12,12,12,13,13,13,13,0,0,0,0,0,0,0,0,0,12,12,12,12,12,13,13,13,1,4,4,7,6,6,7,6,6,4,7,7,10,9,9,11,9,9,4,7,7,10,9,9,11,9,9,7,10,10,11,11,10,11,11,11,6,9,9,11,10,10,11,10,10,6,9,9,11,10,10,11,10,10,7,11,11,12,11,11,12,11,11,6,9,9,11,10,10,11,10,10,6,9,9,11,10,10,11,10,10,2,4,4,6,6,7,7,7,7,8,8,10,5,5,6,6,7,7,8,8,8,8,10,5,5,6,6,7,7,8,8,8,8,10,6,6,7,7,8,8,8,8,8,8,10,10,10,7,7,8,8,8,8,8,8,10,10,10,8,7,8,8,8,8,8,8,10,10,10,7,7,8,8,8,8,8,8,10,10,10,8,8,8,8,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,9,9,8,8,9,8,10,10,10,10,10,8,8,8,8,9,9,1,4,4,6,6,7,7,8,8,9,9,10,10,6,5,5,7,7,8,8,8,8,9,10,11,11,7,5,5,7,7,8,8,9,9,10,10,11,11,0,8,8,8,8,9,9,9,9,10,10,11,11,0,8,8,8,8,9,9,9,9,10,10,11,11,0,12,12,9,9,9,9,10,10,10,10,11,11,0,13,13,9,9,10,9,10,10,11,11,11,12,0,0,0,10,10,10,10,10,10,11,11,12,12,0,0,0,10,10,10,10,10,10,11,11,12,12,0,0,0,14,14,11,11,11,11,12,12,12,12,0,0,0,14,14,11,11,11,11,12,12,12,13,0,0,0,0,0,12,12,12,12,12,12,13,13,0,0,0,0,0,13,12,12,12,12,12,13,13,2,4,4,5,5,6,5,5,5,5,6,5,4,5,5,6,5,5,5,5,6,6,6,5,5,1,3,3,12,12,12,12,12,12,12,12,12,12,4,7,7,12,12,12,12,12,12,12,12,12,12,3,8,8,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,1,4,4,5,5,7,7,9,8,10,9,10,10,10,10,6,5,5,7,7,9,8,10,9,11,10,12,12,13,13,6,5,5,7,7,9,9,10,10,11,11,12,12,12,13,19,8,8,8,8,9,9,10,10,12,11,12,12,13,13,19,8,8,8,8,9,9,11,11,12,12,13,13,13,13,19,12,12,9,9,11,11,11,11,12,11,13,12,13,13,18,12,12,9,9,11,10,11,11,12,12,12,13,13,14,19,18,18,11,11,11,11,12,12,13,12,13,13,14,14,16,18,18,11,11,11,10,12,11,13,13,13,13,13,14,17,18,18,14,15,11,12,12,13,13,13,13,14,14,14,18,18,18,15,15,12,10,13,10,13,13,13,13,13,14,18,17,18,17,18,12,13,12,13,13,13,14,14,16,14,18,17,18,18,17,13,12,13,10,12,12,14,14,14,14,17,18,18,18,18,14,15,12,12,13,12,14,14,15,15,18,18,18,17,18,15,14,12,11,12,12,14,14,14,15,2,5,5,6,6,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,11,6,6,7,7,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,11,6,6,7,7,8,8,8,8,9,9,9,9,9,9,10,9,10,10,10,10,11,7,7,7,7,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,12,11,11,7,7,8,8,9,9,9,9,9,9,10,10,10,10,10,10,10,10,12,11,12,8,8,8,8,9,9,9,9,9,10,10,10,10,10,10,10,10,10,11,11,11,8,8,8,8,9,9,9,9,10,10,10,10,10,10,10,10,10,10,11,11,12,9,9,9,9,9,9,10,9,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,11,12,11,11,11,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,12,12,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,12,11,12,11,11,11,9,10,10,10,10,10,10,10,10,10,10,10,10,10,11,12,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,12,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,12,11,11,12,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,12,12,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,12,12,12,11,11,11,12,11,11,11,10,10,10,10,10,10,10,10,10,10,10,12,11,12,12,12,12,12,11,12,11,11,10,10,10,10,10,10,10,10,10,10,12,12,12,12,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,4,7,11,11,11,11,10,11,12,11,5,2,11,5,6,6,7,9,11,12,11,9,6,10,6,7,8,9,10,11,11,5,11,7,8,8,9,11,13,14,11,6,5,8,4,5,7,8,10,11,10,6,7,7,5,5,6,8,9,11,10,7,8,9,6,6,6,7,8,9,11,9,9,11,7,7,6,6,7,9,12,12,10,13,9,8,7,7,7,8,11,13,11,14,11,10,9,8,7,7,5,8,10,14,11,11,12,16,15,17,5,5,7,9,7,8,10,13,17,17,7,5,5,10,5,7,8,11,13,15,10,8,10,8,8,8,11,15,18,18,8,5,5,8,3,4,6,10,14,16,9,7,6,7,4,3,5,9,14,18,10,9,8,10,6,5,6,9,14,18,12,12,11,12,8,7,8,11,14,18,14,13,12,10,7,5,6,9,14,18,14,14,13,10,6,5,6,8,11,16,2,4,4,0,0,0,0,0,0,4,7,7,0,0,0,0,0,0,4,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,7,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,7,7,0,0,0,0,0,0,7,9,8,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,7,7,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,10,11,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,8,10,9,0,0,0,0,0,0,9,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,7,7,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,11,10,0,0,0,0,0,0,8,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,9,11,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+310869);
/* memory initializer */ allocate([2,4,4,0,0,0,5,5,0,0,0,5,5,0,0,0,8,7,0,0,0,0,0,0,0,4,6,6,0,0,0,8,8,0,0,0,8,7,0,0,0,10,10,0,0,0,0,0,0,0,4,6,6,0,0,0,8,8,0,0,0,7,8,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,7,0,0,0,8,8,0,0,0,8,8,0,0,0,10,10,0,0,0,0,0,0,0,5,7,8,0,0,0,8,8,0,0,0,8,8,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,10,10,0,0,0,0,0,0,0,5,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,10,10,0,0,0,10,10,0,0,0,9,10,0,0,0,11,10,0,0,0,0,0,0,0,8,10,10,0,0,0,10,10,0,0,0,10,10,0,0,0,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,3,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,5,5,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,6,6,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,6,6,0,0,0,0,0,4,4,6,6,0,0,0,0,0,4,4,6,6,0,0,0,0,0,5,5,6,6,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,8,7,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,3,6,6,7,7,9,9,0,4,4,6,6,7,7,9,9,0,4,4,6,6,7,7,9,9,0,6,6,7,7,7,7,9,9,0,0,0,7,6,7,7,9,9,0,0,0,8,8,8,8,10,10,0,0,0,8,8,8,8,10,10,0,0,0,9,9,9,9,10,10,0,0,0,0,0,9,9,10,10,2,4,4,6,6,8,8,9,9,9,9,10,10,10,10,11,11,0,4,4,6,6,8,8,9,9,9,9,10,10,11,11,12,12,0,4,4,6,6,8,8,9,9,9,9,10,10,11,11,12,12,0,6,6,7,7,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,7,7,9,9,10,10,10,10,11,11,11,11,12,12,0,0,0,7,7,8,9,10,10,10,10,11,11,11,11,12,12,0,0,0,8,8,9,9,10,10,10,10,11,11,12,12,12,12,0,0,0,0,0,9,9,10,10,10,10,11,11,12,12,12,12,0,0,0,0,0,9,9,10,10,10,10,11,11,12,12,12,12,0,0,0,0,0,9,9,9,10,10,10,11,11,12,12,12,12,0,0,0,0,0,10,10,10,10,11,11,11,12,12,12,13,13,0,0,0,0,0,0,0,10,10,11,11,11,11,12,12,13,13,0,0,0,0,0,0,0,11,11,11,11,12,12,12,13,13,13,0,0,0,0,0,0,0,11,11,11,11,12,12,12,12,13,13,0,0,0,0,0,0,0,12,12,12,12,13,12,13,13,13,13,0,0,0,0,0,0,0,0,0,12,12,12,12,13,13,13,13,1,4,4,7,6,6,7,6,6,4,7,7,10,9,9,11,9,9,4,7,7,10,9,9,11,9,9,7,10,10,11,11,10,11,11,11,6,9,9,11,10,10,11,10,10,6,9,9,11,10,10,11,10,10,7,11,11,12,11,11,12,11,11,6,9,9,11,10,10,11,10,10,6,9,9,11,10,10,11,10,10,2,4,4,6,6,7,7,8,8,8,8,10,5,5,6,6,7,7,8,8,8,8,10,5,5,6,6,7,7,8,8,8,8,10,6,6,7,7,8,8,8,8,8,8,10,10,10,7,7,8,8,8,8,8,8,10,10,10,7,7,8,8,8,8,8,8,10,10,10,7,7,8,8,8,8,8,8,10,10,10,8,8,8,8,8,8,8,9,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,9,9,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,1,4,4,6,6,7,7,8,8,9,9,10,10,6,5,5,7,7,8,8,8,9,10,10,10,10,7,5,5,7,7,8,8,9,9,10,10,10,10,0,8,8,8,8,9,9,9,9,10,10,11,11,0,8,8,8,8,9,9,9,9,10,10,11,11,0,12,12,9,9,9,10,10,10,10,10,11,11,0,13,13,9,9,9,9,10,10,11,11,11,11,0,0,0,10,10,10,10,10,10,11,11,11,11,0,0,0,10,10,10,10,10,10,11,11,12,12,0,0,0,14,14,11,11,11,11,12,12,12,12,0,0,0,14,14,11,11,11,11,12,12,12,12,0,0,0,0,0,12,12,12,12,12,12,13,13,0,0,0,0,0,12,12,12,12,12,12,13,13,2,4,4,5,5,6,5,5,5,5,6,4,5,5,5,6,5,5,5,5,6,6,6,5,5,1,3,3,13,13,13,13,13,13,13,13,13,13,13,13,4,7,7,13,13,13,13,13,13,13,13,13,13,13,13,3,8,6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,12,12,1,4,4,5,5,7,7,9,8,10,9,10,10,11,10,11,11,6,5,5,7,7,8,9,10,10,11,10,12,11,12,11,13,12,6,5,5,7,7,9,9,10,10,11,11,12,12,13,12,13,13,18,8,8,8,8,9,9,10,11,11,11,12,11,13,11,13,12,18,8,8,8,8,10,10,11,11,12,12,13,13,13,13,13,14,18,12,12,9,9,11,11,11,11,12,12,13,12,13,12,13,13,20,13,12,9,9,11,11,11,11,12,12,13,13,13,14,14,13,20,18,19,11,12,11,11,12,12,13,13,13,13,13,13,14,13,18,19,19,12,11,11,11,12,12,13,12,13,13,13,14,14,13,18,17,19,14,15,12,12,12,13,13,13,14,14,14,14,14,14,19,19,19,16,15,12,11,13,12,14,14,14,13,13,14,14,14,19,18,19,18,19,13,13,13,13,14,14,14,13,14,14,14,14,18,17,19,19,19,13,13,13,11,13,11,13,14,14,14,14,14,19,17,17,18,18,16,16,13,13,13,13,14,13,15,15,14,14,19,19,17,17,18,16,16,13,11,14,10,13,12,14,14,14,14,19,19,19,19,19,18,17,13,14,13,11,14,13,14,14,15,15,19,19,19,17,19,18,18,14,13,12,11,14,11,15,15,15,15,3,5,5,6,6,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,9,11,5,6,7,7,8,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,11,5,5,7,7,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,11,7,7,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,10,9,10,11,11,11,7,7,8,8,8,8,9,9,9,9,9,9,10,10,10,10,10,10,11,11,11,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,11,11,11,8,8,8,8,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,11,11,9,9,9,9,9,9,10,9,10,10,10,10,10,10,10,10,11,11,11,11,11,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,9,9,10,9,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,9,9,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,3,8,9,13,10,12,12,12,12,12,6,4,6,8,6,8,10,10,11,12,8,5,4,10,4,7,8,9,10,11,13,8,10,8,9,9,11,12,13,14,10,6,4,9,3,5,6,8,10,11,11,8,6,9,5,5,6,7,9,11,12,9,7,11,6,6,6,7,8,10,12,11,9,12,7,7,6,6,7,9,13,12,10,13,9,8,7,7,7,8,11,15,11,15,11,10,9,8,7,7,3,9,11,11,13,14,19,17,17,19,5,4,5,8,10,10,13,16,18,19,7,4,4,5,8,9,12,14,17,19,8,6,5,5,7,7,10,13,16,18,10,8,7,6,5,5,8,11,17,19,11,9,7,7,5,4,5,8,17,19,13,11,8,7,7,5,5,7,16,18,14,13,8,6,6,5,5,7,16,18,18,16,10,8,8,7,7,9,16,18,18,18,12,10,10,9,9,10,17,18,1,5,5,0,5,5,0,5,5,5,8,7,0,9,9,0,9,8,5,7,8,0,9,9,0,8,9,0,0,0,0,0,0,0,0,0,5,9,8,0,8,8,0,8,8,5,8,9,0,8,8,0,8,8,0,0,0,0,0,0,0,0,0,5,9,9,0,8,8,0,8,8,5,9,9,0,8,8,0,8,8,3,5,5,8,8,0,5,5,8,8,0,5,5,8,8,0,7,7,9,9,0,0,0,9,9,5,7,7,9,9,0,8,8,10,10,0,8,7,10,9,0,10,10,11,11,0,0,0,11,11,5,7,7,9,9,0,8,8,10,10,0,7,8,9,10,0,10,10,11,11,0,0,0,11,11,8,9,9,11,11,0,11,11,12,12,0,11,10,12,12,0,13,14,14,14,0,0,0,14,13,8,9,9,11,11,0,11,11,12,12,0,10,11,12,12,0,14,13,14,14,0,0,0,13,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,7,11,10,0,7,7,10,10,0,7,7,10,10,0,9,9,11,10,0,0,0,11,11,5,7,8,10,11,0,7,7,10,10,0,7,7,10,10,0,9,9,10,11,0,0,0,11,11,8,10,9,12,12,0,10,10,12,12,0,10,10,12,12,0,12,12,13,13,0,0,0,13,13,8,9,10,12,12,0,10,10,11,12,0,10,10,12,12,0,12,12,13,13,0,0,0,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,11,11,0,7,7,10,10,0,7,7,10,10,0,9,9,10,11,0,0,0,11,10,5,8,8,11,11,0,7,7,10,10,0,7,7,10,10,0,9,9,11,11,0,0,0,10,11,8,10,10,12,12,0,10,10,12,12,0,10,10,12,12,0,12,13,13,13,0,0,0,14,13,8,10,10,12,12,0,10,10,12,12,0,10,10,12,12,0,13,12,13,13,0,0,0,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,10,10,14,13,0,9,9,13,12,0,9,9,12,12,0,10,10,12,12,0,0,0,12,12,7,10,10,13,14,0,9,9,12,13,0,9,9,12,12,0,10,10,12,12,0,0,0,12,12,9,11,11,14,13,0,11,10,14,13,0,11,11,13,13,0,12,12,13,13,0,0,0,13,13,9,11,11,13,14,0,10,11,13,14,0,11,11,13,13,0,12,12,13,13,0,0,0,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,11,11,14,14,0,11,11,13,13,0,11,10,13,13,0,12,12,13,13,0,0,0,13,13,9,11,11,14,14,0,11,11,13,13,0,10,11,13,13,0,12,12,14,13,0,0,0,13,13,2,3,4,6,6,7,7,9,9,0,4,4,6,6,7,7,9,10,0,4,4,6,6,7,7,10,9,0,5,5,7,7,8,8,10,10,0,0,0,7,6,8,8,10,10,0,0,0,7,7,9,9,11,11,0,0,0,7,7,9,9,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,4,6,6,7,7,8,8,8,8,9,9,9,10,10,10,0,4,4,6,6,8,8,9,9,9,9,10,10,10,10,11,11,0,4,4,6,6,8,8,9,9,9,9,10,10,10,10,11,11,0,6,6,7,7,8,8,9,9,9,9,10,10,11,11,11,11,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,11,11,0,0,0,7,7,9,9,10,10,10,10,11,11,11,11,12,12,0,0,0,7,7,9,9,10,10,10,10,11,11,11,11,12,12,0,0,0,7,7,8,8,9,9,10,10,11,11,12,12,12,12,0,0,0,0,0,8,8,9,9,10,10,11,11,12,12,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,4,5,7,7,6,7,7,4,6,6,9,9,10,10,10,9,4,6,6,9,10,9,10,9,10,6,9,9,10,12,11,10,11,11,7,10,9,11,12,12,12,12,12,7,10,10,11,12,12,12,12,12,6,10,10,10,12,12,11,12,12,7,9,10,11,12,12,12,12,12,7,10,9,12,12,12,12,12,12,3,5,4,6,6,7,7,8,8,8,8,11,4,4,6,6,7,7,8,8,8,8,11,4,4,6,6,7,7,8,8,8,8,11,6,6,6,6,8,8,8,8,9,9,11,11,11,6,6,7,8,8,8,8,9,11,11,11,7,7,8,8,8,8,8,8,11,11,11,7,7,8,8,8,8,8,8,11,11,11,8,8,8,8,8,8,8,8,11,11,11,10,10,8,8,8,8,8,8,11,11,11,10,10,8,8,8,8,8,8,11,11,11,10,10,7,7,8,8,8,8,1,4,4,6,6,8,8,8,8,10,9,10,10,6,5,5,7,7,9,9,9,9,10,10,11,11,6,5,5,7,7,9,9,10,9,11,10,11,11,0,6,6,7,7,9,9,10,10,11,11,12,12,0,7,7,7,7,9,9,10,10,11,11,12,12,0,11,11,8,8,10,10,11,11,12,12,12,12,0,11,12,9,8,10,10,11,11,12,12,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,5,5,5,4,4,5,5,5,4,4,5,5,6,5,5,5,5,6,6,6,5,5,1,4,4,6,6,8,8,8,8,10,10,11,10,6,5,5,7,7,8,8,9,9,10,10,12,11,6,5,5,7,7,8,8,9,9,10,10,12,11,21,7,7,7,7,9,9,10,10,11,11,12,12,21,7,7,7,7,9,9,10,10,11,11,12,12,21,12,12,9,9,10,10,11,11,11,11,12,12,21,12,12,9,9,10,10,11,11,12,12,12,12,21,21,21,11,11,10,10,11,12,12,12,13,13,21,21,21,11,11,10,10,12,12,12,12,13,13,21,21,21,15,15,11,11,12,12,13,13,13,13,21,21,21,15,16,11,11,12,12,13,13,14,14,21,21,21,21,20,13,13,13,13,13,13,14,14,20,20,20,20,20,13,13,13,13,13,13,14,14,3,5,5,6,6,7,7,7,7,7,7,9,5,5,6,6,7,7,7,7,8,7,8,5,5,6,6,7,7,7,7,7,7,9,6,6,7,7,7,7,8,7,7,8,9,9,9,7,7,7,7,7,7,7,8,9,9,9,7,7,7,7,8,8,8,8,9,9,9,7,7,7,7,7,7,8,8,9,9,9,8,8,8,8,7,7,8,8,9,9,9,9,8,8,8,7,7,8,8,9,9,9,8,8,8,8,7,7,8,8,9,9,9,8,8,7,7,7,7,8,8,1,4,4,7,7,8,8,7,7,8,7,9,8,10,9,6,5,5,8,8,9,9,8,8,9,9,11,10,11,10,6,5,5,8,8,9,9,8,8,9,9,10,10,11,11,18,8,8,9,8,10,10,9,9,10,10,10,10,11,10,18,8,8,9,9,10,10,9,9,10,10,11,11,12,12,18,12,13,9,10,10,10,9,10,10,10,11,11,12,11,18,13,13,9,9,10,10,10,10,10,10,11,11,12,12,18,18,18,10,10,9,9,11,11,11,11,11,12,12,12,18,18,18,10,9,10,9,11,10,11,11,11,11,13,12,18,18,18,14,13,10,10,11,11,12,12,12,12,12,12,18,18,18,14,13,10,10,11,10,12,12,12,12,12,12,18,18,18,18,18,12,12,11,11,12,12,13,13,13,14,18,18,18,18,18,12,12,11,11,12,11,13,13,14,13,18,18,18,18,18,16,16,11,12,12,13,13,13,14,13,18,18,18,18,18,16,15,12,11,12,11,13,11,15,14,3,5,5,6,6,7,7,7,7,8,7,8,8,8,8,8,8,8,8,8,8,10,6,6,7,7,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,10,6,6,7,7,8,8,8,8,8,8,9,8,9,9,9,9,9,9,9,9,10,7,7,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,10,11,11,8,7,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,11,11,11,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,11,11,11,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,11,11,11,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,11,11,11,11,11,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,9,11,11,11,11,11,9,9,9,9,9,9,10,9,9,10,9,10,9,9,10,9,11,11,11,11,11,9,9,9,9,9,9,9,10,10,10,10,9,10,10,9,10,11,11,11,11,11,9,9,9,9,10,10,10,9,10,10,10,10,9,10,10,9,11,11,11,11,11,11,11,9,9,9,9,10,10,10,10,9,10,10,10,10,10,11,11,11,11,11,11,11,10,9,10,10,10,10,10,10,10,9,10,9,10,10,11,11,11,11,11,11,11,10,9,10,9,10,10,9,10,10,10,10,10,10,10,11,11,11,11,11,11,11,10,10,10,10,10,10,10,9,10,10,10,10,10,9,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,9,10,10,11,11,11,11,11,11,11,11,11,10,10,10,9,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,10,11,9,10,10,10,10,10,10,10,10,10,1,3,3,11,11,11,11,11,11,11,11,11,11,4,7,7,11,11,11,11,11,11,11,11,11,11,5,8,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,1,4,4,7,7,7,7,7,6,8,8,8,8,6,6,6,8,8,8,8,8,7,9,8,10,10,5,6,6,8,8,9,9,8,8,10,10,10,10,16,9,9,9,9,9,9,9,8,10,9,11,11,16,8,9,9,9,9,9,9,9,10,10,11,11,16,13,13,9,9,10,9,9,10,11,11,11,12,16,13,14,9,8,10,8,9,9,10,10,12,11,16,14,16,9,9,9,9,11,11,12,11,12,11,16,16,16,9,7,9,6,11,11,11,10,11,11,16,16,16,11,12,9,10,11,11,12,11,13,13,16,16,16,12,11,10,7,12,10,12,12,12,12,16,16,15,16,16,10,11,10,11,13,13,14,12,16,16,16,15,15,12,10,11,11,13,11,12,13,2,4,3,4,5,5,5,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,3,8,11,13,14,14,13,13,16,14,6,3,4,7,9,9,10,11,14,13,10,4,3,5,7,7,9,10,13,15,12,7,4,4,6,6,8,10,13,15,12,8,6,6,6,6,8,10,13,14,11,9,7,6,6,6,7,8,12,11,13,10,9,8,7,6,6,7,11,11,13,11,10,9,9,7,7,6,10,11,13,13,13,13,13,11,9,8,10,12,12,15,15,16,15,12,11,10,10,12,4,11,12,14,15,15,17,17,18,18,5,6,6,8,9,10,13,17,18,19,7,5,4,6,8,9,11,15,19,19,8,6,5,5,6,7,11,14,16,17,9,7,7,6,7,7,10,13,15,19,10,8,7,6,7,6,7,9,14,16,12,10,9,7,7,6,4,5,10,15,14,13,11,7,6,6,4,2,7,13,16,16,15,9,8,8,8,6,9,13,19,19,17,12,11,10,10,9,11,14,1,5,5,0,5,5,0,5,5,5,8,7,0,9,9,0,9,8,5,7,8,0,9,9,0,8,9,0,0,0,0,0,0,0,0,0,5,9,9,0,8,8,0,8,8,5,8,9,0,8,8,0,8,8,0,0,0,0,0,0,0,0,0,5,9,9,0,8,8,0,8,8,5,8,9,0,8,8,0,8,8,3,5,5,8,8,0,5,5,8,8,0,5,5,8,8,0,7,7,9,9,0,0,0,9,9,5,7,7,9,9,0,8,8,10,10,0,8,7,10,9,0,10,10,11,11,0,0,0,11,11,5,7,7,9,9,0,8,8,10,10,0,7,8,9,10,0,10,10,11,11,0,0,0,11,11,8,9,9,11,10,0,11,11,12,12,0,11,10,12,12,0,13,14,14,14,0,0,0,14,13,8,9,9,10,11,0,11,11,12,12,0,10,11,12,12,0,13,13,14,14,0,0,0,13,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,7,11,10,0,7,7,10,10,0,7,7,10,10,0,9,9,11,10,0,0,0,11,11,5,7,8,10,11,0,7,7,10,10,0,7,7,10,10,0,9,9,10,11,0,0,0,11,11,8,10,9,12,12,0,10,10,12,12,0,10,10,12,12,0,12,12,13,13,0,0,0,13,13,8,9,10,12,12,0,10,10,12,12,0,10,10,11,12,0,12,12,13,13,0,0,0,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,11,11,0,7,7,10,10,0,7,7,10,10,0,9,9,10,11,0,0,0,11,10,5,8,8,10,11,0,7,7,10,10,0,7,7,10,10,0,9,9,11,10,0,0,0,10,11,9,10,10,12,12,0,10,10,12,12,0,10,10,12,12,0,12,13,13,13,0,0,0,13,12,9,10,10,12,12,0,10,10,12,12,0,10,10,12,12,0,13,12,13,13,0,0,0,12,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,10,10,14,13,0,9,9,12,12,0,9,9,12,12,0,10,10,12,12,0,0,0,12,12,7,10,10,13,14,0,9,9,12,13,0,9,9,12,12,0,10,10,12,12,0,0,0,12,12,9,11,11,14,13,0,11,10,13,12,0,11,11,13,13,0,12,12,13,13,0,0,0,13,13,9,11,11,13,14,0,10,11,12,13,0,11,11,13,13,0,12,12,13,13,0,0,0,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,11,11,14,14,0,10,11,13,13,0,11,10,13,13,0,12,12,13,13,0,0,0,13,12,9,11,11,14,14,0,11,10,13,13,0,10,11,13,13,0,12,12,14,13,0,0,0,13,13,2,4,4,5,5,7,7,9,9,0,4,4,6,6,7,7,9,9,0,4,4,6,6,7,7,9,9,0,5,5,6,6,8,8,10,10,0,0,0,6,6,8,8,10,10,0,0,0,7,7,9,9,10,10,0,0,0,7,7,8,8,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,5,5,7,7,8,8,8,8,9,9,10,10,11,11,0,4,4,6,6,7,7,8,8,9,9,10,10,11,11,12,12,0,4,4,6,6,7,7,8,8,9,9,10,10,11,11,12,12,0,5,5,6,6,8,8,9,9,9,9,10,10,11,12,12,12,0,0,0,6,6,8,7,9,9,9,9,10,10,11,11,12,12,0,0,0,7,7,8,8,9,9,10,10,11,11,12,12,13,12,0,0,0,7,7,8,8,9,9,10,10,11,11,12,12,12,13,0,0,0,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0,0,0,0,8,8,9,9,10,10,11,11,12,12,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,4,5,7,7,6,7,7,4,6,7,10,10,10,10,10,9,4,6,6,10,10,10,10,9,10,5,10,10,9,11,12,10,11,12,7,10,10,11,12,12,12,12,12,7,10,10,11,12,12,12,12,12,6,10,10,10,12,12,11,12,12,7,10,10,12,12,12,12,11,12,7,10,10,11,12,12,12,12,12,3,5,5,6,6,7,7,8,8,8,8,11,4,4,6,6,7,7,8,8,9,9,11,4,4,6,6,7,7,8,8,9,9,12,5,5,6,6,7,7,9,9,9,9,12,12,12,6,6,7,7,9,9,9,9,11,11,11,7,7,7,7,8,8,9,9,11,11,11,7,7,7,7,8,8,9,9,11,11,11,7,7,8,8,8,8,9,9,11,11,11,11,11,8,8,8,8,8,9,11,11,11,11,11,8,8,8,8,8,8,11,11,11,11,11,7,7,8,8,8,8,1,4,4,6,6,7,7,8,7,9,8,10,10,6,5,5,7,7,8,8,9,9,9,10,11,11,7,5,5,7,7,8,8,9,9,10,10,11,11,0,7,7,7,7,9,8,9,9,10,10,11,11,0,8,8,7,7,8,9,9,9,10,10,11,11,0,11,11,9,9,10,10,11,10,11,11,12,12,0,12,12,9,9,10,10,11,11,11,11,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,5,5,5,4,4,5,5,5,4,4,5,5,6,5,5,5,5,6,6,6,5,5,1,4,4,6,6,7,8,9,9,10,10,12,11,6,5,5,7,7,8,8,9,10,11,11,12,12,7,5,5,7,7,8,8,10,10,11,11,12,12,20,7,7,7,7,8,9,10,10,11,11,12,13,20,7,7,7,7,9,9,10,10,11,12,13,13,20,11,11,8,8,9,9,11,11,12,12,13,13,20,11,11,8,8,9,9,11,11,12,12,13,13,20,20,20,10,10,10,10,12,12,13,13,13,13,20,20,20,10,10,10,10,12,12,13,13,13,14,20,20,20,14,14,11,11,12,12,13,13,14,14,20,20,20,14,14,11,11,12,12,13,13,14,14,20,20,20,20,19,13,13,13,13,14,14,15,14,19,19,19,19,19,13,13,13,13,14,14,15,15,4,5,5,6,6,7,7,7,7,7,7,8,6,6,7,7,7,7,7,7,7,7,8,6,6,6,7,7,7,7,7,7,7,8,6,6,7,7,7,7,7,7,7,7,8,8,8,7,7,7,7,7,7,7,7,8,8,8,7,7,7,7,7,7,7,7,8,8,8,7,7,7,7,7,7,7,7,8,8,8,7,7,7,7,7,7,7,7,8,8,8,8,8,7,7,7,7,7,7,8,8,8,8,8,7,7,7,7,7,7,8,8,8,8,8,7,7,7,7,7,7,1,4,4,7,7,8,8,8,7,9,8,9,9,10,10,6,5,5,7,7,9,9,8,8,10,9,11,10,12,11,6,5,5,8,7,9,9,8,8,10,10,11,11,12,11,19,8,8,8,8,10,10,9,9,10,10,11,11,12,11,19,8,8,8,8,10,10,9,9,10,10,11,11,12,12,19,12,12,9,9,10,10,9,10,10,10,11,11,12,12,19,12,12,9,9,10,10,10,10,10,10,12,12,12,12,19,19,19,9,9,9,9,11,10,11,11,12,11,13,13,19,19,19,9,9,9,9,11,10,11,11,11,12,13,13,19,19,19,13,13,10,10,11,11,12,12,12,12,13,12,19,19,19,14,13,10,10,11,11,12,12,12,13,13,13,19,19,19,19,19,12,12,12,11,12,13,14,13,13,13,19,19,19,19,19,12,12,12,11,12,12,13,14,13,14,19,19,19,19,19,16,16,12,13,12,13,13,14,15,14,19,18,18,18,18,16,15,12,11,12,11,14,12,14,14,3,5,5,7,6,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,10,6,6,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,10,6,6,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,10,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,11,10,10,10,9,9,9,9,9,9,9,9,9,9,10,9,9,10,9,9,10,11,10,11,10,9,9,9,9,9,9,9,10,10,10,9,10,9,9,9,9,11,10,11,10,10,9,9,9,9,9,9,10,9,9,10,9,9,10,9,9,10,11,10,10,11,10,9,9,9,9,9,10,10,9,10,10,10,10,9,10,10,10,10,10,10,11,11,11,10,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,10,10,10,10,10,10,10,10,10,10,10,10,9,10,10,9,10,11,11,10,11,10,11,10,9,10,10,9,10,10,10,10,10,10,10,10,10,10,11,11,11,11,10,11,11,10,10,10,10,10,10,9,10,9,10,10,9,10,9,10,10,10,11,10,11,10,11,11,10,10,10,10,10,10,9,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,11,11,10,10,10,10,9,9,10,10,9,9,10,9,10,10,10,10,11,11,10,10,10,10,10,10,10,9,9,10,10,10,9,9,10,10,10,10,10,11,10,11,10,10,10,10,10,10,9,10,10,10,10,10,10,10,10,10,1,3,3,11,11,11,11,11,11,11,11,11,11,4,6,6,11,11,11,11,11,11,11,11,11,11,4,7,7,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,1,4,4,7,7,7,7,7,6,8,8,8,8,6,6,6,8,8,9,8,8,7,9,8,11,10,5,6,6,8,8,9,8,8,8,10,9,11,11,16,8,8,9,8,9,9,9,8,10,9,11,10,16,8,8,9,9,10,10,9,9,10,10,11,11,16,13,13,9,9,10,10,9,10,11,11,12,11,16,13,13,9,8,10,9,10,10,10,10,11,11,16,14,16,8,9,9,9,11,10,11,11,12,11,16,16,16,9,7,10,7,11,10,11,11,12,11,16,16,16,12,12,9,10,11,11,12,11,12,12,16,16,16,12,10,10,7,11,8,12,11,12,12,16,16,15,16,16,11,12,10,10,12,11,12,12,16,16,16,15,15,11,11,10,10,12,12,12,12,2,4,3,4,5,5,5,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,3,8,11,13,15,14,14,13,15,14,6,4,5,7,9,10,11,11,14,13,10,4,3,5,7,8,9,10,13,13,12,7,4,4,5,6,8,9,12,14,13,9,6,5,5,6,8,9,12,14,12,9,7,6,5,5,6,8,11,11,12,11,9,8,7,6,6,7,10,11,13,11,10,9,8,7,6,6,9,11,13,13,12,12,12,10,9,8,9,11,12,14,15,15,14,12,11,10,10,12,4,11,13,14,15,15,18,17,19,17,5,6,8,9,10,10,12,15,19,19,6,6,6,6,8,8,11,14,18,19,8,6,5,4,6,7,10,13,16,17,9,7,6,5,6,7,9,12,15,19,10,8,7,6,6,6,7,9,13,15,12,10,9,8,7,6,4,5,10,15,13,13,11,8,6,6,4,2,7,12,17,15,16,10,8,8,7,6,9,12,19,18,17,13,11,10,10,9,11,14,1,5,5,0,5,5,0,5,5,5,7,7,0,9,8,0,9,8,6,7,7,0,8,9,0,8,9,0,0,0,0,0,0,0,0,0,5,9,8,0,8,8,0,8,8,5,8,9,0,8,8,0,8,8,0,0,0,0,0,0,0,0,0,5,9,8,0,8,8,0,8,8,5,8,9,0,8,8,0,8,8,3,5,5,8,8,0,5,5,8,8,0,5,5,8,8,0,7,7,9,9,0,0,0,9,9,5,7,7,9,9,0,8,7,10,9,0,8,7,10,9,0,10,10,11,11,0,0,0,11,11,5,7,7,9,9,0,7,8,9,10,0,7,8,9,10,0,10,10,11,11,0,0,0,11,11,8,9,9,11,10,0,11,10,12,11,0,11,10,12,12,0,13,13,14,14,0,0,0,14,13,8,9,9,10,11,0,10,11,12,12,0,10,11,12,12,0,13,13,14,14,0,0,0,13,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,7,11,10,0,7,7,10,10,0,7,7,10,10,0,9,9,10,10,0,0,0,11,10,5,7,8,10,11,0,7,7,10,10,0,7,7,10,10,0,9,9,10,10,0,0,0,10,10,8,10,9,12,12,0,10,10,12,11,0,10,10,12,12,0,12,12,13,12,0,0,0,13,12,8,9,10,12,12,0,10,10,11,12,0,10,10,11,12,0,12,12,13,13,0,0,0,12,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,8,7,11,10,0,7,7,10,10,0,7,7,10,10,0,9,9,10,11,0,0,0,10,10,6,7,8,10,11,0,7,7,10,10,0,7,7,10,10,0,9,9,10,10,0,0,0,10,10,9,10,9,12,12,0,10,10,12,12,0,10,10,12,11,0,12,12,13,13,0,0,0,13,12,8,9,10,12,12,0,10,10,12,12,0,10,10,11,12,0,12,12,13,13,0,0,0,12,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,10,10,13,13,0,9,9,12,12,0,9,9,12,12,0,10,10,12,12,0,0,0,12,12,7,10,10,13,13,0,9,9,12,12,0,9,9,12,12,0,10,10,12,12,0,0,0,12,12,9,11,11,14,13,0,10,10,13,12,0,11,10,13,12,0,12,12,13,12,0,0,0,13,13,9,11,11,13,14,0,10,11,12,13,0,10,11,13,13,0,12,12,12,13,0,0,0,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,11,11,14,14,0,10,11,13,13,0,11,10,13,13,0,11,12,13,13,0,0,0,13,12,9,11,11,14,14,0,11,10,13,13,0,10,11,13,13,0,12,12,13,13,0,0,0,12,13,2,4,4,5,5,7,7,9,9,0,4,4,6,6,7,7,9,9,0,4,4,6,6,7,7,9,9,0,5,5,6,6,8,8,10,10,0,0,0,6,6,8,8,10,10,0,0,0,7,7,9,9,10,10,0,0,0,7,7,8,8,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,5,5,7,7,8,8,8,8,9,9,10,10,11,11,0,4,4,6,6,7,7,8,8,9,8,10,10,11,11,11,11,0,4,4,6,6,7,7,8,8,9,9,10,10,11,11,11,11,0,6,5,6,6,7,7,9,9,9,9,10,10,11,11,12,12,0,0,0,6,6,7,7,9,9,9,9,10,10,11,11,12,12,0,0,0,7,7,8,8,9,9,10,10,11,11,11,12,12,12,0,0,0,7,7,8,8,9,9,10,10,11,11,11,12,12,12,0,0,0,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0,0,0,0,8,8,9,9,10,10,11,11,12,12,13,13], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+320562);
/* memory initializer */ allocate([1,4,4,5,7,7,6,7,7,4,7,6,10,10,10,10,10,10,4,6,6,10,10,10,10,9,10,5,10,10,9,11,11,10,11,11,7,10,10,11,12,12,12,12,12,7,10,10,11,12,12,12,12,12,6,10,10,10,12,12,10,12,12,7,10,10,11,12,12,12,12,12,7,10,10,11,12,12,12,12,12,3,5,5,6,6,7,7,8,8,8,8,11,4,5,6,6,7,7,8,8,8,8,11,5,5,6,6,7,7,8,8,8,9,12,5,5,6,6,7,7,8,8,9,9,12,12,12,6,6,7,7,8,8,9,9,11,11,11,6,6,7,7,8,8,8,8,11,11,11,6,6,7,7,8,8,8,8,11,11,11,7,7,7,8,8,8,8,8,11,11,11,11,11,7,7,8,8,8,8,11,11,11,11,11,7,7,7,7,8,8,11,11,11,11,11,7,7,7,7,8,8,1,4,4,6,6,7,7,8,8,9,9,10,10,6,5,5,7,7,8,8,9,9,10,10,11,11,6,5,5,7,7,8,8,9,9,10,10,11,11,0,7,7,7,7,9,9,10,10,10,10,11,11,0,7,7,7,7,9,9,10,10,10,10,11,11,0,11,11,9,9,10,10,11,11,11,11,12,12,0,12,12,9,9,10,10,11,11,12,12,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,5,5,5,4,4,5,5,5,4,4,5,5,6,5,5,5,5,6,6,6,5,5,1,4,4,6,6,8,7,9,9,10,10,12,12,6,5,5,7,7,8,8,10,10,11,11,12,12,7,5,5,7,7,8,8,10,10,11,11,12,12,21,7,7,7,7,8,9,10,10,11,11,12,12,21,7,7,7,7,9,9,10,10,12,12,13,13,21,11,11,8,8,9,9,11,11,12,12,13,13,21,11,11,8,8,9,9,11,11,12,12,13,13,21,21,21,10,10,10,10,11,11,12,13,13,13,21,21,21,10,10,10,10,11,11,13,13,14,13,21,21,21,13,13,11,11,12,12,13,13,14,14,21,21,21,14,14,11,11,12,12,13,13,14,14,21,21,21,21,20,13,13,13,12,14,14,16,15,20,20,20,20,20,13,13,13,13,14,13,15,15,4,5,6,6,6,7,7,7,7,7,7,8,6,6,6,7,7,7,7,7,7,7,8,6,6,6,6,7,7,7,7,7,7,8,6,6,7,7,7,7,7,7,7,7,8,8,8,7,7,7,7,7,7,7,7,8,8,8,7,7,7,7,7,7,7,7,8,8,8,7,7,7,7,7,7,7,7,8,8,8,7,7,7,7,7,7,7,7,8,8,8,8,8,7,7,7,7,7,7,8,8,8,8,8,7,7,7,7,7,7,8,8,8,8,8,7,7,7,7,7,7,1,4,4,7,6,8,8,8,7,9,8,10,10,11,10,6,5,5,7,7,9,9,8,8,10,10,11,11,12,11,6,5,5,7,7,9,9,9,9,10,10,11,11,12,12,20,8,8,8,8,9,9,9,9,10,10,11,11,12,12,20,8,8,8,8,10,9,9,9,10,10,11,11,12,12,20,12,12,9,9,10,10,10,10,10,11,12,12,12,12,20,12,12,9,9,10,10,10,10,11,11,12,12,13,13,20,20,20,9,9,9,9,11,10,11,11,12,12,12,13,20,19,19,9,9,9,9,11,11,11,12,12,12,13,13,19,19,19,13,13,10,10,11,11,12,12,13,13,13,13,19,19,19,14,13,11,10,11,11,12,12,12,13,13,13,19,19,19,19,19,12,12,12,12,13,13,13,13,14,13,19,19,19,19,19,12,12,12,11,12,12,13,14,14,14,19,19,19,19,19,16,15,13,12,13,13,13,14,14,14,19,19,19,19,19,17,17,13,12,13,11,14,13,15,15,4,5,5,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,10,6,6,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,10,6,6,7,7,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,10,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,9,9,9,9,9,9,9,9,10,9,9,9,9,9,9,9,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,9,9,9,9,9,9,9,9,10,10,10,9,9,9,9,9,10,10,10,10,10,10,10,9,9,9,9,9,10,10,10,9,9,9,9,9,9,10,10,10,10,10,10,10,9,10,10,9,10,10,10,10,9,10,9,10,10,9,10,10,10,10,10,10,10,9,10,10,10,10,10,10,9,9,10,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,10,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,10,9,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,10,9,9,9,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,10,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,10,9,9,10,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,10,10,9,10,9,9,1,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,7,7,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,1,4,4,7,6,7,7,7,7,8,8,9,9,10,10,10,10,11,11,6,6,6,8,8,9,8,8,7,10,8,11,10,12,11,12,12,13,13,5,5,6,8,8,9,9,8,8,10,9,11,11,12,12,13,13,13,13,17,8,8,9,9,9,9,9,9,10,9,12,10,12,12,13,12,13,13,17,9,8,9,9,9,9,9,9,10,10,12,12,12,12,13,13,13,13,17,13,13,9,9,10,10,10,10,11,11,12,11,13,12,13,13,14,15,17,13,13,9,8,10,9,10,10,11,11,12,12,14,13,15,13,14,15,17,17,17,9,10,9,10,11,11,12,12,12,12,13,13,14,14,15,15,17,17,17,9,8,9,8,11,11,12,12,12,12,14,13,14,14,14,15,17,17,17,12,14,9,10,11,11,12,12,14,13,13,14,15,13,15,15,17,17,17,13,11,10,8,11,9,13,12,13,13,13,13,13,14,14,14,17,17,17,17,17,11,12,11,11,13,13,14,13,15,14,13,15,16,15,17,17,17,17,17,11,11,12,8,13,12,14,13,17,14,15,14,15,14,17,17,17,17,17,15,15,12,12,12,12,13,14,14,14,15,14,17,14,17,17,17,17,17,16,17,12,12,13,12,13,13,14,14,14,14,14,14,17,17,17,17,17,17,17,14,14,13,12,13,13,15,15,14,13,15,17,17,17,17,17,17,17,17,13,14,13,13,13,13,14,15,15,15,14,15,17,17,17,17,17,17,17,16,15,13,14,13,13,14,14,15,14,14,16,17,17,17,17,17,17,17,16,16,13,14,13,13,14,14,15,14,15,14,2,4,4,4,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,3,8,12,13,14,14,14,13,14,14,6,4,5,8,10,10,11,11,14,13,9,5,4,5,7,8,9,10,13,13,12,7,5,4,5,6,8,9,12,13,13,9,6,5,5,5,7,9,11,14,12,10,7,6,5,4,6,7,10,11,12,11,9,8,7,5,5,6,10,10,13,12,10,9,8,6,6,5,8,10,14,13,12,12,11,10,9,7,8,10,12,13,14,14,13,12,11,9,9,10,5,13,18,16,17,17,19,18,19,19,5,7,10,11,12,12,13,16,17,18,6,6,7,7,9,9,10,14,17,19,8,7,6,5,6,7,9,12,19,17,8,7,7,6,5,6,8,11,15,19,9,8,7,6,5,5,6,8,13,15,11,10,8,8,7,5,4,4,10,14,12,13,11,9,7,6,4,2,6,12,18,16,16,13,8,7,7,5,8,13,16,17,18,15,11,9,9,8,10,13,1,5,5,0,5,5,0,5,5,6,8,8,0,9,8,0,9,8,6,8,8,0,8,9,0,8,9,0,0,0,0,0,0,0,0,0,5,8,8,0,7,7,0,8,8,5,8,8,0,7,8,0,8,8,0,0,0,0,0,0,0,0,0,5,9,8,0,8,8,0,7,7,5,8,9,0,8,8,0,7,7,3,5,5,8,8,0,5,5,8,8,0,5,5,8,8,0,7,7,9,9,0,0,0,9,9,6,7,7,9,8,0,8,8,9,9,0,8,7,9,9,0,9,10,10,10,0,0,0,11,10,6,7,7,8,9,0,8,8,9,9,0,7,8,9,9,0,10,9,11,10,0,0,0,10,10,8,9,8,10,10,0,10,10,12,11,0,10,10,11,11,0,12,13,13,13,0,0,0,13,12,8,8,9,10,10,0,10,10,11,12,0,10,10,11,11,0,13,12,13,13,0,0,0,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,8,7,10,10,0,7,7,10,9,0,7,7,10,10,0,9,9,10,10,0,0,0,10,10,6,7,8,10,10,0,7,7,9,10,0,7,7,10,10,0,9,9,10,10,0,0,0,10,10,8,9,9,11,11,0,10,10,11,11,0,10,10,11,11,0,12,12,12,12,0,0,0,12,12,8,9,10,11,11,0,9,10,11,11,0,10,10,11,11,0,12,12,12,12,0,0,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,7,10,10,0,7,7,10,10,0,7,7,10,9,0,9,9,10,10,0,0,0,10,10,6,7,8,10,10,0,7,7,10,10,0,7,7,9,10,0,9,9,10,10,0,0,0,10,10,8,10,9,12,11,0,10,10,12,11,0,10,9,11,11,0,11,12,12,12,0,0,0,12,12,8,9,10,11,12,0,10,10,11,11,0,9,10,11,11,0,12,11,12,12,0,0,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,10,9,12,12,0,9,9,12,11,0,9,9,11,11,0,10,10,12,11,0,0,0,11,12,7,9,10,12,12,0,9,9,11,12,0,9,9,11,11,0,10,10,11,12,0,0,0,11,11,9,11,10,13,12,0,10,10,12,12,0,10,10,12,12,0,11,11,12,12,0,0,0,13,12,9,10,11,12,13,0,10,10,12,12,0,10,10,12,12,0,11,12,12,12,0,0,0,12,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,11,10,13,13,0,10,10,12,12,0,10,10,12,12,0,11,12,12,12,0,0,0,12,12,9,10,11,13,13,0,10,10,12,12,0,10,10,12,12,0,12,11,13,12,0,0,0,12,12,3,4,4,5,5,6,6,8,8,0,4,4,5,5,6,7,8,8,0,4,4,5,5,7,7,8,8,0,5,5,6,6,7,7,9,9,0,0,0,6,6,7,7,9,9,0,0,0,7,7,8,8,9,9,0,0,0,7,7,8,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,10,10,0,5,4,5,5,7,7,8,8,8,8,9,9,10,10,11,11,0,5,5,6,6,7,7,8,8,8,8,9,9,10,10,11,11,0,6,5,6,6,7,7,8,8,9,9,10,10,11,11,11,12,0,0,0,6,6,7,7,8,8,9,9,10,10,11,11,12,12,0,0,0,7,7,7,7,9,9,9,9,10,10,11,11,12,12,0,0,0,7,7,7,8,9,9,9,9,10,10,11,11,12,12,0,0,0,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0,0,0,0,8,8,9,9,10,10,11,11,12,12,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,4,5,7,7,6,7,7,4,7,6,9,10,10,10,10,9,4,6,7,9,10,10,10,9,10,5,9,9,9,11,11,10,11,11,7,10,9,11,12,11,12,12,12,7,9,10,11,11,12,12,12,12,6,10,10,10,12,12,10,12,11,7,10,10,11,12,12,11,12,12,7,10,10,11,12,12,12,12,12,4,5,5,6,6,7,7,7,7,7,7,11,5,5,6,6,7,7,7,7,8,8,11,5,5,6,6,7,7,7,7,8,8,11,5,5,6,6,7,7,8,8,8,8,11,11,11,6,6,7,7,7,8,8,8,11,11,11,6,6,7,7,7,8,8,8,11,11,11,6,6,7,7,7,7,8,8,11,11,11,7,7,7,7,7,7,8,8,11,11,11,10,10,7,7,7,7,8,8,11,11,11,11,11,7,7,7,7,7,7,11,11,11,11,11,7,7,7,7,7,7,2,4,4,6,6,7,7,7,7,8,8,9,9,5,4,4,6,6,8,8,9,9,9,9,10,10,6,4,4,6,6,8,8,9,9,9,9,10,10,0,6,6,7,7,8,8,9,9,10,10,11,11,0,6,6,7,7,8,8,9,9,10,10,11,11,0,10,10,8,8,9,9,10,10,11,11,12,12,0,11,11,8,8,9,9,10,10,11,11,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,5,5,5,4,4,5,5,5,4,4,5,5,5,5,5,5,5,5,5,5,5,5,2,4,4,6,6,7,7,8,8,10,10,11,11,6,4,4,6,6,8,8,9,9,10,10,12,12,6,4,5,6,6,8,8,9,9,10,10,12,12,20,6,6,6,6,8,8,9,10,11,11,12,12,20,6,6,6,6,8,8,10,10,11,11,12,12,20,10,10,7,7,9,9,10,10,11,11,12,12,20,11,11,7,7,9,9,10,10,11,11,12,12,20,20,20,9,9,9,9,11,11,12,12,13,13,20,20,20,9,9,9,9,11,11,12,12,13,13,20,20,20,13,13,10,10,11,11,12,13,13,13,20,20,20,13,13,10,10,11,11,12,13,13,13,20,20,20,20,19,12,12,12,12,13,13,14,15,19,19,19,19,19,12,12,12,12,13,13,14,14,5,6,6,6,6,7,7,7,7,7,7,7,6,6,6,6,7,7,7,7,7,7,7,6,6,6,6,7,7,7,7,7,7,8,6,6,6,6,7,7,7,7,7,7,8,8,8,6,6,7,7,7,7,7,7,8,8,8,7,7,7,7,7,7,7,7,8,8,8,7,7,7,7,7,7,7,7,8,8,8,7,7,7,7,7,7,7,7,8,8,8,8,8,7,7,7,7,7,7,8,8,8,8,8,7,7,7,7,7,7,8,8,8,8,8,7,7,7,7,7,7,1,4,4,7,6,8,8,8,8,9,9,10,10,11,10,6,5,5,7,7,9,9,8,9,10,10,11,11,12,12,6,5,5,7,7,9,9,9,9,10,10,11,11,12,12,21,7,8,8,8,9,9,9,9,10,10,11,11,12,12,21,8,8,8,8,9,9,9,9,10,10,11,11,12,12,21,11,12,9,9,10,10,10,10,10,11,11,12,12,12,21,12,12,9,8,10,10,10,10,11,11,12,12,13,13,21,21,21,9,9,9,9,11,11,11,11,12,12,12,13,21,20,20,9,9,9,9,10,11,11,11,12,12,13,13,20,20,20,13,13,10,10,11,11,12,12,13,13,13,13,20,20,20,13,13,10,10,11,11,12,12,13,13,13,13,20,20,20,20,20,12,12,12,12,12,12,13,13,14,14,20,20,20,20,20,12,12,12,11,13,12,13,13,14,14,20,20,20,20,20,15,16,13,12,13,13,14,13,14,14,20,20,20,20,20,16,15,12,12,13,12,14,13,14,14,4,6,6,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,10,6,6,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,10,6,6,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,10,7,7,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,10,9,9,9,10,10,10,10,10,10,10,9,9,9,9,9,9,10,9,9,9,9,9,9,9,10,10,10,10,10,10,10,9,9,9,10,10,10,10,10,9,9,9,9,9,9,10,10,10,10,10,10,10,9,9,10,9,10,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,9,9,10,10,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,10,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,9,9,10,10,9,9,10,9,9,9,10,10,10,10,10,10,10,10,10,10,10,9,9,10,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,10,9,9,9,9,9,1,4,3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,4,5,6,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,4,6,6,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,1,4,4,7,7,7,7,8,7,9,8,9,9,10,10,11,11,11,11,6,5,5,8,8,9,9,9,8,10,9,11,10,12,12,13,12,13,13,5,5,5,8,8,9,9,9,9,10,10,11,11,12,12,13,12,13,13,17,8,8,9,9,9,9,9,9,10,10,12,11,13,12,13,13,13,13,18,8,8,9,9,9,9,9,9,11,11,12,12,13,13,13,13,13,13,17,13,12,9,9,10,10,10,10,11,11,12,12,12,13,13,13,14,14,18,13,12,9,9,10,10,10,10,11,11,12,12,13,13,13,14,14,14,17,18,18,10,10,10,10,11,11,11,12,12,12,14,13,14,13,13,14,18,18,18,10,9,10,9,11,11,12,12,12,12,13,13,15,14,14,14,18,18,16,13,14,10,11,11,11,12,13,13,13,13,14,13,13,14,14,18,18,18,14,12,11,9,11,10,13,12,13,13,13,14,14,14,13,14,18,18,17,18,18,11,12,12,12,13,13,14,13,14,14,13,14,14,14,18,18,18,18,17,12,10,12,9,13,11,13,14,14,14,14,14,15,14,18,18,17,17,18,14,15,12,13,13,13,14,13,14,14,15,14,15,14,18,17,18,18,18,15,15,12,10,14,10,14,14,13,13,14,14,14,14,18,16,18,18,18,18,17,14,14,13,14,14,13,13,14,14,14,15,15,18,18,18,18,17,17,17,14,14,14,12,14,13,14,14,15,14,15,14,18,18,18,18,18,18,18,17,16,13,13,13,14,14,14,14,15,16,15,18,18,18,18,18,18,18,17,17,13,13,13,13,14,13,14,15,15,15,2,4,4,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,3,8,12,14,15,15,15,13,15,15,6,5,8,10,12,12,13,12,14,13,10,6,5,6,8,9,11,11,13,13,13,8,5,4,5,6,8,10,11,13,14,10,7,5,4,5,7,9,11,12,13,11,8,6,5,4,5,7,9,11,12,11,10,8,7,5,4,5,9,10,13,13,11,10,8,6,5,4,7,9,15,14,13,12,10,9,8,7,8,9,12,12,14,13,12,11,10,9,8,9,4,3,7,9,12,16,16,3,2,5,7,11,14,15,7,4,5,6,9,12,15,8,5,5,5,8,10,14,9,7,6,6,8,10,12,12,10,10,7,6,8,10,15,12,10,6,4,7,9,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,5,5,0,7,7,0,8,8,0,9,9,0,12,12,0,8,8,0,9,9,0,13,13,0,8,8,0,6,6,0,11,11,0,12,12,0,12,12,0,14,14,0,11,12,0,12,12,0,15,15,0,12,12,0,5,5,0,5,5,0,6,6,0,7,7,0,10,10,0,6,6,0,7,7,0,11,11,0,6,6,0,7,7,0,11,11,0,12,11,0,11,11,0,14,14,0,10,10,0,12,12,0,15,15,0,12,12,0,6,6,0,12,12,0,12,12,0,12,12,0,14,14,0,11,11,0,12,12,0,16,16,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,0,12,12,0,12,12,0,12,12,0,15,15,0,12,12,0,11,11,0,16,16,0,11,11,0,6,6,0,12,12,0,12,12,0,13,13,0,15,15,0,12,12,0,13,13,0,15,15,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,0,9,9,0,9,9,0,10,10,0,9,9,0,10,10,0,10,10,0,10,10,0,10,10,0,7,7,0,7,7,0,6,6,0,8,8,0,7,7,0,8,8,0,8,8,0,7,7,0,8,8,0,7,7,0,9,9,0,8,9,0,10,10,0,9,9,0,10,10,0,10,11,0,9,9,0,10,10,0,9,9,0,11,11,0,12,12,0,12,12,0,11,11,0,12,12,0,13,13,0,12,12,0,13,13,0,8,8,0,12,12,0,12,12,0,13,13,0,13,13,0,13,13,0,13,13,0,13,13,0,13,13,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,11,11,0,12,12,0,13,13,0,12,12,0,13,13,0,13,13,0,12,12,0,12,12,0,9,9,0,12,12,0,13,13,0,14,14,0,13,13,0,14,14,0,14,14,0,13,13,0,14,14,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,6,6,8,8,6,8,8,7,9,9,10,11,11,8,8,8,7,9,9,11,12,12,9,9,9,6,7,7,10,11,11,10,11,11,10,11,11,13,13,13,12,12,12,10,12,11,14,14,14,12,12,12,6,5,5,9,6,6,9,6,6,9,7,7,12,10,10,11,7,6,9,7,7,13,11,11,12,7,7,7,8,8,12,10,10,12,10,10,11,10,10,15,13,13,13,9,9,12,11,11,15,14,14,15,11,11,8,7,7,12,11,11,12,11,11,11,11,11,14,13,14,14,12,12,12,11,11,16,15,15,14,12,12,0,10,10,0,12,12,0,12,12,0,11,11,0,14,14,0,11,11,0,11,11,0,15,15,0,11,11,7,8,8,13,11,11,12,10,10,12,11,11,15,13,13,14,11,11,12,10,10,16,14,14,15,10,10,9,7,7,13,11,12,13,12,11,12,11,11,15,14,14,14,12,12,13,12,12,16,15,15,15,12,12,0,11,11,0,12,12,0,12,13,0,12,12,0,15,15,0,12,12,0,12,12,0,16,15,0,12,12,2,3,4,9,9,10,12,12,12,11,10,12,12,13,12,11,13,12,11,11,11,12,12,12,11,11,13,13,13,13,11,12,12,14,14,12,13,13,13,13,11,13,13,13,13,11,13,13,13,13,11,13,13,13,13,11,12,12,14,14,12,13,13,12,12,11,13,13,13,13,11,13,13,12,12,11,13,13,13,13,12,12,13,14,14,12,13,13,12,12,11,13,13,13,13,11,13,13,12,12,11,13,13,13,13,12,13,13,14,14,12,13,13,12,12,11,13,13,13,13,11,13,13,12,12,11,10,10,10,10,12,10,10,11,11,12,9,9,11,11,13,11,11,10,10,13,10,10,10,10,13,11,11,12,12,13,10,10,12,12,14,12,11,12,12,13,11,11,11,12,13,12,12,12,12,13,11,11,12,12,13,10,10,12,12,14,11,11,12,12,13,11,11,12,12,13,11,11,12,12,14,12,12,12,12,14,10,10,11,11,14,12,11,11,11,13,11,11,11,11,13,12,12,11,11,14,12,12,12,11,14,10,10,11,11,14,12,11,11,11,13,11,11,11,11,13,12,12,11,11,11,11,11,10,10,12,10,11,9,9,12,12,12,11,11,13,12,12,9,9,13,13,13,10,10,13,13,13,12,12,13,13,13,14,14,13,12,12,11,11,14,13,13,12,12,14,13,13,11,11,13,13,13,12,11,13,13,13,14,14,13,12,12,10,10,14,13,13,11,11,13,13,13,10,10,13,13,13,11,11,14,13,13,14,14,14,12,12,10,10,13,13,13,11,11,13,13,13,10,10,13,13,13,11,11,14,13,13,14,14,14,13,13,10,10,13,13,13,11,11,13,13,13,10,10,14,12,12,8,8,14,12,12,9,9,14,11,11,9,9,14,12,12,8,8,14,12,12,7,7,15,13,13,10,10,15,12,12,10,10,15,13,13,10,10,15,12,13,9,9,15,13,13,10,10,15,13,13,10,10,15,12,12,10,10,15,13,13,10,10,15,13,13,9,9,15,13,13,10,10,15,13,13,10,10,15,12,12,10,10,15,13,13,9,9,14,13,12,9,9,14,13,13,9,9,15,13,13,10,10,15,12,12,10,10,15,13,13,9,9,15,13,13,9,9,14,13,13,9,9,14,12,12,8,8,13,13,13,8,8,14,14,13,9,9,14,14,13,7,7,14,14,14,8,8,14,14,14,10,10,15,14,14,12,12,14,14,14,9,9,15,14,14,10,10,14,14,14,9,9,14,14,14,10,9,15,14,14,12,12,14,14,14,9,9,15,14,14,10,10,14,14,14,9,9,15,14,15,9,9,15,14,14,11,11,14,14,14,8,8,14,14,14,9,9,14,14,14,8,8,14,15,14,10,10,15,14,14,11,11,14,14,14,8,8,15,14,14,9,9,14,14,14,8,8,12,12,12,13,13,16,16,15,12,12,17,16,16,13,13,17,16,16,11,11,17,16,16,12,12,17,16,17,13,13,17,16,16,14,14,17,17,16,12,12,18,16,16,13,13,17,16,17,12,12,17,17,17,13,13,18,16,16,14,14,18,17,17,12,12,17,17,17,13,13,18,17,17,13,13,17,17,17,13,13,17,16,16,14,14,17,17,17,12,12,16,16,17,13,13,17,17,16,12,12,18,17,17,13,13,18,16,16,14,14,18,17,17,12,12,19,16,17,13,13,17,16,17,12,12,13,14,14,10,10,16,14,14,13,13,17,15,15,14,14,17,14,14,13,13,16,14,14,13,13,17,16,15,14,14,16,16,16,15,15,17,15,15,14,14,17,15,15,14,14,17,15,15,14,14,17,16,15,14,14,16,16,16,15,15,18,15,15,13,13,16,16,15,14,14,17,15,15,14,13,17,15,15,14,14,16,16,16,15,15,18,15,14,13,13,17,15,15,14,14,18,14,15,13,13,18,15,15,14,14,16,16,16,15,15,17,15,15,13,13,17,15,15,14,14,17,15,15,13,13,13,11,11,10,10,16,14,14,13,13,17,14,15,14,14,17,15,15,12,12,17,14,14,12,12,16,15,15,14,14,16,14,14,14,14,16,15,15,14,14,16,15,15,14,14,16,15,15,14,14,16,15,15,14,14,16,15,14,15,15,17,15,15,14,14,17,15,15,14,14,17,15,15,14,14,17,15,16,14,14,16,14,14,14,14,17,15,15,13,13,17,15,15,13,13,16,15,15,13,13,17,16,16,14,14,17,15,14,15,14,17,15,15,13,13,17,15,15,13,13,17,15,15,13,13,14,14,14,9,9,14,14,14,18,19,14,15,15,19,18,14,14,14,19,19,15,14,14,19,19,15,16,16,19,19,15,16,16,19,19,15,15,15,19,19,15,16,16,19,20,15,15,15,19,19,15,15,15,19,19,15,16,16,20,20,15,15,15,18,19,15,15,16,19,20,15,15,15,19,18,15,15,15,18,18,15,16,16,21,20,15,15,15,19,19,15,15,15,19,19,15,15,14,19,20,15,15,15,20,19,15,16,16,19,20,15,15,15,19,19,15,15,15,20,21,15,14,15,19,19,14,12,12,9,9,14,14,15,21,19,14,14,14,18,19,14,15,15,19,20,14,14,14,19,19,15,15,15,19,20,15,15,14,21,19,15,15,15,20,19,15,14,15,20,21,15,15,15,18,18,15,15,15,20,21,16,14,14,18,19,15,15,15,20,19,15,15,15,18,21,15,15,15,19,19,15,15,15,19,20,16,15,14,20,19,15,16,15,19,19,15,15,15,19,0,14,15,15,19,19,15,15,15,19,19,15,15,14,20,19,15,15,15,20,19,15,15,15,19,19,15,15,15,20,19,12,12,12,13,13,16,15,16,11,11,16,16,16,12,12,17,16,16,11,11,17,16,16,12,11,17,17,17,13,13,18,16,16,14,14,18,18,17,13,13,17,16,16,13,13,17,17,17,13,13,17,16,17,12,12,17,15,16,13,13,17,16,17,12,12,17,16,16,13,12,17,16,16,12,12,18,17,17,13,13,18,16,16,13,14,18,17,17,12,12,17,16,16,12,12,17,17,17,12,12,18,17,17,13,13,17,16,16,14,14,17,17,17,12,12,17,16,16,12,12,18,17,17,12,12,13,14,14,9,9,16,14,14,13,13,16,15,15,14,14,16,14,14,13,13,16,14,14,13,13,17,16,15,15,15,16,15,16,16,15,17,15,15,14,14,17,15,15,15,15,17,15,15,14,14,17,15,15,14,14,16,15,16,16,16,17,15,15,14,14,16,15,15,14,15,16,15,15,14,14,17,15,15,15,15,16,16,16,15,16,18,15,14,13,14,17,15,15,14,14,17,14,14,13,13,17,15,15,14,14,16,15,15,15,15,17,15,14,14,14,17,15,15,14,14,17,14,14,13,13,13,11,11,11,11,16,14,14,12,12,16,14,14,13,13,16,14,14,12,12,16,14,14,12,12,16,15,15,13,13,17,14,14,14,14,17,15,15,13,13,16,15,15,14,13,16,15,15,13,13,16,15,15,13,13,16,14,14,14,14,16,15,15,13,13,16,14,15,13,13,17,15,15,13,13,17,15,15,13,13,16,14,14,14,14,17,15,15,12,12,17,14,15,13,13,17,15,15,12,12,16,15,15,13,13,17,14,14,14,14,17,15,15,12,12,17,15,15,13,13,16,15,15,12,12,14,15,15,8,8,14,14,14,19,18,14,15,15,19,20,14,14,14,19,19,14,14,15,19,20,15,16,15,19,21,15,16,16,21,19,15,15,15,20,19,15,16,16,19,20,15,15,15,19,18,15,16,15,20,19,15,16,16,19,20,15,15,15,19,19,15,16,15,20,20,14,15,15,19,19,15,15,15,21,19,15,17,16,19,20,15,14,15,0,21,15,15,15,19,20,14,14,14,19,19,15,15,15,20,19,15,16,16,19,19,15,15,15,19,18,15,15,15,20,19,14,14,15,18,18,14,12,12,9,9,14,14,14,18,18,14,14,14,18,18,14,15,14,19,18,14,14,14,19,18,15,15,15,19,20,15,14,14,18,18,15,15,15,20,19,15,15,15,18,20,15,15,15,19,18,15,15,15,19,19,15,14,14,19,21,15,15,15,20,20,15,15,15,18,19,14,15,15,19,20,15,15,15,20,19,15,14,14,19,21,15,15,15,18,19,15,14,15,20,19,14,15,15,21,21,14,15,15,19,20,15,14,14,19,20,15,15,15,19,20,15,15,14,20,20,14,15,15,20,19,13,12,12,13,13,17,16,16,11,11,17,16,16,12,12,18,17,16,11,11,18,16,16,11,11,17,17,17,13,13,18,16,16,13,13,18,17,17,12,12,18,16,16,13,13,18,17,17,12,12,18,17,17,13,13,18,16,16,14,14,18,16,17,12,12,18,17,17,13,13,17,17,17,12,12,17,17,17,12,12,17,16,15,13,13,18,16,16,11,11,17,16,16,12,12,17,16,17,11,11,18,17,17,13,12,17,16,16,13,13,17,17,17,12,12,17,16,17,12,12,18,17,17,11,11,14,14,14,9,9,16,14,14,13,13,17,15,15,14,14,17,14,14,13,13,16,14,14,13,13,17,15,15,14,14,16,16,16,16,15,18,15,15,14,14,17,16,15,15,15,17,15,15,14,14,17,15,15,14,15,16,16,16,15,16,18,15,15,14,14,17,15,15,14,15,17,15,15,14,14,17,15,15,14,14,16,16,16,15,16,17,14,14,13,13,17,15,15,14,14,18,15,15,13,13,17,15,15,14,14,16,16,16,15,15,17,14,14,13,13,17,15,15,14,14,17,14,14,13,13,13,11,11,11,11,16,14,14,12,12,16,14,14,12,13,17,15,14,11,11,17,14,14,11,11,17,15,15,13,14,17,14,14,14,14,17,15,15,13,13,17,14,14,13,13,17,15,15,13,13,17,15,15,13,13,17,14,14,14,14,17,15,15,13,13,18,14,15,13,13,17,15,15,13,13,16,15,15,13,13,17,14,14,13,13,17,15,15,12,12,16,14,14,12,12,16,15,15,12,12,17,16,15,13,13,17,14,14,13,13,17,15,15,12,12,16,15,15,12,12,16,15,15,12,12,13,15,15,8,8,14,14,14,18,19,14,15,15,19,20,14,14,14,18,18,14,15,15,18,18,15,16,16,19,19,15,16,17,20,20,15,15,15,19,19,15,16,16,18,20,15,15,15,19,19,15,15,16,18,18,15,17,16,19,19,15,15,15,18,21,15,16,16,21,20,15,15,15,19,21,15,16,15,20,19,15,16,17,20,20,15,15,15,19,19,15,16,16,21,20,15,15,15,19,20,15,15,15,19,19,15,16,16,20,19,15,15,15,19,19,15,16,15,20,21,15,15,15,21,19,14,12,12,8,8,14,14,14,20,18,14,13,13,19,19,14,14,14,19,18,15,14,14,19,20,14,15,15,20,20,15,14,14,21,20,15,15,15,20,20,15,15,14,21,19,15,15,15,19,19,15,15,15,19,20,15,14,14,20,20,15,15,15,19,20,15,14,14,19,20,15,15,15,20,20,15,15,15,20,19,15,14,14,20,21,15,15,15,20,21,15,14,14,20,0,15,16,15,20,21,15,15,15,19,20,15,14,14,19,19,15,15,15,19,20,15,15,15,19,19,15,15,15,18,20,13,12,12,13,13,18,16,17,12,12,17,16,16,12,12,17,17,16,11,11,18,16,16,11,11,17,17,18,13,13,18,16,16,14,14,18,17,17,13,13,18,16,16,13,13,18,17,17,12,12,17,17,16,13,13,17,16,16,13,14,18,17,17,12,12,18,16,16,12,13,17,16,17,12,12,17,18,17,13,13,18,16,16,13,13,18,17,17,12,12,17,16,16,12,12,17,17,17,11,11,17,16,17,12,12,17,16,16,13,13,17,16,16,11,11,17,16,16,12,12,18,16,17,11,11,14,14,14,9,9,16,14,15,13,13,17,15,15,14,14,17,14,14,12,12,16,14,14,13,13,18,15,15,15,15,17,15,16,15,16,18,15,15,14,14,17,15,16,15,15,17,15,15,14,14,18,15,15,14,14,16,16,16,16,15,17,15,15,14,14,16,15,15,14,14,17,15,15,14,14,17,15,15,14,14,17,16,16,15,15,17,15,14,13,13,17,15,15,14,14,17,15,15,13,13,17,15,15,14,14,16,16,16,15,15,18,15,14,14,14,17,15,15,14,14,18,15,15,13,13,13,12,12,11,11,16,14,14,12,12,16,14,14,13,13,17,15,15,12,12,17,14,14,12,12,17,15,15,14,14,17,14,14,14,14,17,15,15,13,13,17,15,14,13,13,17,15,15,13,13,17,15,15,13,13,16,14,14,14,14,17,15,15,13,13,16,14,14,13,13,16,15,15,13,13,17,15,16,13,13,17,14,14,14,13,17,15,15,12,12,16,15,14,12,12,17,15,15,12,12,16,15,16,13,13,16,14,14,14,13,17,15,15,12,12,16,14,14,12,12,17,15,15,12,12,14,15,15,8,8,14,14,14,18,18,14,15,15,19,18,14,14,14,18,18,14,15,15,19,20,15,16,15,21,18,15,16,16,18,0,15,15,15,19,20,15,16,16,20,0,15,16,15,19,18,15,15,15,19,19,15,16,16,21,19,15,15,15,19,19,15,16,16,20,20,15,15,15,19,19,15,15,15,19,18,15,16,16,20,20,15,14,15,20,19,15,15,15,19,20,15,15,15,19,19,15,16,15,19,20,15,16,16,19,20,15,15,15,19,19,15,16,15,20,20,15,15,15,20,18,13,12,12,8,8,14,14,14,19,20,14,14,14,19,19,14,15,15,20,20,14,14,14,18,19,15,15,15,20,0,15,14,14,18,20,15,15,15,19,19,15,15,15,21,19,15,15,15,19,20,15,15,15,20,21,15,14,14,20,19,15,15,15,20,19,15,15,14,21,19,15,15,15,19,18,15,15,15,20,19,15,14,14,19,19,15,15,16,20,19,15,15,15,20,0,15,15,15,19,21,15,15,15,22,20,15,14,14,22,19,15,15,15,19,20,15,14,14,20,19,14,15,15,19,21,1,7,7,14,14,6,8,8,15,16,7,8,8,16,15,0,14,14,17,17,0,14,14,16,16,7,9,9,16,16,10,11,11,17,18,9,8,8,16,16,0,14,14,19,19,0,14,14,17,16,8,9,9,16,16,12,12,12,17,17,10,9,9,16,16,0,15,14,18,20,0,14,14,17,17,0,15,15,18,17,0,21,0,0,21,0,13,13,17,17,0,17,17,0,0,0,15,15,17,17,0,15,15,17,18,0,0,0,0,21,0,13,13,17,17,0,18,18,0,21,0,16,15,17,18,6,7,7,14,14,9,10,10,16,16,11,10,10,15,15,0,21,0,20,21,0,0,0,18,20,10,10,10,15,16,12,13,13,18,18,12,11,11,15,15,0,0,0,20,20,0,0,21,19,19,12,11,11,15,15,15,14,14,18,18,13,11,11,15,16,0,0,0,20,19,0,0,0,20,21,0,0,20,19,19,0,0,0,0,0,0,20,0,17,18,0,0,21,0,0,0,0,0,21,0,0,21,0,20,19,0,0,0,0,0,0,21,0,18,18,0,0,0,21,0,0,0,0,0,20,7,6,6,13,13,9,6,6,12,12,9,7,7,14,14,0,10,10,12,12,0,11,11,15,15,9,7,7,14,14,12,9,9,14,14,10,7,7,14,13,0,11,11,16,15,0,11,11,14,14,9,7,7,14,14,13,10,10,14,14,11,7,7,14,13,0,11,11,16,16,0,11,11,14,14,0,12,12,16,16,0,19,0,17,18,0,10,10,14,14,0,15,14,0,0,0,12,12,14,14,0,12,12,15,15,0,20,0,18,19,0,10,10,14,14,0,16,15,0,20,0,13,13,14,14,0,11,11,13,13,0,12,13,16,16,0,12,12,16,16,0,16,16,0,21,0,17,18,0,0,0,12,12,16,16,0,15,15,18,0,0,12,12,16,16,0,17,16,21,21,0,16,17,0,0,0,13,13,17,16,0,16,16,20,21,0,12,12,17,16,0,17,17,0,21,0,17,17,21,21,0,17,18,0,0,0,0,0,0,0,0,15,15,0,0,0,18,21,0,0,0,18,19,0,0,0,18,17,21,21,0,0,0,0,0,0,16,16,0,0,0,0,0,0,0,0,19,19,0,0,0,11,11,12,12,0,11,11,10,10,0,12,12,13,13,0,12,12,9,9,0,14,14,13,13,0,12,12,13,13,0,14,14,12,13,0,11,11,12,12,0,13,13,13], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+330920);
/* memory initializer */ allocate([13,0,13,13,13,13,0,12,12,13,13,0,14,14,12,12,0,11,11,12,12,0,14,13,14,14,0,13,13,13,13,0,15,15,14,15,0,0,0,16,16,0,12,12,13,13,0,16,17,20,21,0,14,13,12,12,0,14,14,14,14,0,21,0,16,16,0,12,12,13,13,0,18,17,21,0,0,14,14,13,13,7,8,8,17,17,11,10,10,18,18,12,10,10,17,17,0,15,15,20,18,0,15,15,17,17,11,9,9,17,17,14,12,12,19,19,13,9,9,16,16,0,15,14,0,19,0,14,14,16,16,12,10,10,20,18,16,13,13,21,20,14,10,10,17,17,0,15,15,21,20,0,15,14,17,17,0,15,15,21,21,0,0,21,0,0,0,13,13,18,18,0,19,16,0,0,0,15,15,17,16,0,16,16,0,21,0,0,0,0,21,0,13,14,18,17,0,20,19,0,0,0,15,15,18,18,8,7,7,15,15,12,11,11,17,16,13,11,11,16,16,0,0,0,21,20,0,0,0,0,20,11,10,10,17,17,14,13,13,19,18,14,11,11,16,16,0,20,0,21,19,0,0,21,0,20,12,11,11,17,17,16,15,15,0,19,14,11,11,17,16,0,21,0,0,19,0,0,0,21,20,0,0,21,20,0,0,0,0,0,0,0,0,0,19,21,0,0,0,0,0,0,0,0,19,20,0,0,0,20,21,0,0,0,0,0,0,20,0,19,21,0,0,0,0,0,0,0,0,21,20,11,10,9,15,15,14,11,11,15,15,14,11,11,16,16,0,14,14,14,14,0,16,15,17,16,13,11,11,16,16,16,13,13,16,16,15,10,10,15,15,0,14,15,17,17,0,14,14,16,15,13,11,11,16,16,17,15,14,16,16,15,10,10,15,15,0,15,15,17,18,0,15,15,16,16,0,16,16,17,17,0,21,0,21,20,0,13,13,15,15,0,18,18,0,21,0,15,15,15,15,0,16,16,17,17,0,0,0,0,18,0,13,13,15,15,0,19,18,0,0,0,15,15,16,16,0,12,12,15,15,0,13,13,17,17,0,13,13,17,18,0,16,17,21,0,0,20,18,0,0,0,13,13,17,17,0,15,15,0,18,0,12,12,17,18,0,16,16,0,0,0,17,17,21,0,0,13,13,18,18,0,16,16,21,21,0,12,12,17,18,0,16,17,21,0,0,17,17,0,21,0,17,18,0,0,0,0,0,0,0,0,16,15,0,21,0,21,19,0,0,0,18,18,0,0,0,18,19,0,0,0,0,0,0,0,0,16,16,21,21,0,20,19,0,0,0,19,21,0,21,0,12,12,15,15,0,12,12,15,16,0,13,13,16,16,0,14,14,15,15,0,16,15,17,17,0,13,13,17,17,0,15,15,16,18,0,12,12,16,16,0,14,14,17,17,0,15,14,16,16,0,13,13,16,16,0,16,15,17,17,0,12,12,16,16,0,15,15,18,18,0,14,14,17,16,0,16,16,17,18,0,0,0,20,21,0,13,13,16,17,0,17,17,0,0,0,15,15,16,16,0,15,16,17,17,0,0,0,19,0,0,13,13,15,16,0,19,18,0,0,0,16,15,16,17,8,8,8,17,17,13,11,10,17,18,13,10,10,17,17,0,15,15,20,19,0,15,15,17,17,12,10,10,19,18,15,12,12,20,18,14,10,10,17,16,0,15,15,20,20,0,14,15,16,16,13,10,10,17,17,17,14,14,0,18,15,10,10,17,17,0,16,15,20,20,0,14,14,17,17,0,15,16,20,20,0,0,21,0,0,0,13,13,17,17,0,18,17,0,0,0,15,16,17,18,0,15,15,18,21,0,0,0,21,0,0,13,13,18,18,0,19,19,0,0,0,16,16,18,17,9,8,8,15,15,12,11,11,16,16,13,11,11,16,15,0,0,0,0,21,0,21,0,19,19,12,11,11,17,18,15,13,13,18,19,14,11,11,16,16,0,0,21,21,19,0,0,0,21,20,13,11,11,18,17,17,14,15,20,21,15,11,12,16,16,0,0,0,20,0,0,0,21,0,19,0,0,0,0,19,0,0,0,0,0,0,21,21,19,19,0,0,0,21,0,0,0,0,19,21,0,0,0,19,20,0,0,0,21,0,0,0,21,19,19,0,0,0,0,0,0,0,0,21,20,0,11,11,15,15,0,12,12,15,16,0,12,12,16,16,0,15,15,16,15,0,16,16,17,17,0,12,12,17,17,0,14,14,17,17,0,11,11,16,16,0,15,15,19,18,0,15,15,16,16,0,12,12,17,16,0,14,15,16,16,0,11,11,15,15,0,16,16,18,19,0,15,15,15,16,0,17,17,18,20,0,21,0,21,19,0,14,14,16,16,0,18,18,0,0,0,16,16,15,15,0,16,16,18,17,0,0,0,19,20,0,14,14,16,16,0,19,19,0,0,0,16,17,15,15,0,12,12,14,15,0,13,13,16,17,0,12,12,17,17,0,17,16,0,0,0,18,17,21,0,0,13,13,19,17,0,15,15,20,21,0,12,12,17,17,0,17,17,0,0,0,17,17,0,0,0,13,13,17,18,0,16,16,21,0,0,12,12,17,17,0,17,17,0,0,0,17,17,0,0,0,18,21,0,0,0,0,0,0,0,0,15,15,21,0,0,20,21,0,0,0,18,19,0,0,0,18,17,0,0,0,0,0,0,0,0,16,16,21,0,0,21,21,0,0,0,18,19,0,0,0,12,12,16,16,0,13,13,16,17,0,13,13,17,16,0,14,14,16,16,0,16,15,19,18,0,13,13,17,17,0,15,15,18,18,0,12,12,16,16,0,15,15,18,19,0,15,15,17,16,0,13,13,17,17,0,16,16,18,17,0,12,12,17,16,0,15,15,18,18,0,15,15,17,17,0,16,16,0,19,0,0,0,0,0,0,14,14,16,17,0,18,18,0,0,0,15,15,17,17,0,16,16,21,19,0,21,0,21,21,0,13,14,16,16,0,19,19,0,0,0,15,16,16,16,0,11,11,17,16,0,15,14,19,18,0,14,14,19,19,0,18,17,18,20,0,17,17,18,19,0,13,13,17,17,0,16,17,21,18,0,13,13,17,16,0,18,17,19,0,0,16,17,18,18,0,12,12,19,18,0,18,18,20,20,0,13,13,17,17,0,17,17,21,0,0,16,17,17,18,0,18,17,19,18,0,0,0,0,0,0,14,14,17,17,0,19,19,21,0,0,16,16,16,17,0,17,17,19,20,0,0,0,0,21,0,15,15,17,18,0,21,21,0,0,0,17,17,17,18,0,10,10,15,15,0,15,14,17,18,0,14,14,16,16,0,0,0,18,0,0,21,0,19,0,0,13,13,17,16,0,17,17,18,0,0,14,14,16,15,0,0,0,21,0,0,21,0,19,18,0,13,13,17,17,0,18,18,20,20,0,15,15,16,16,0,0,0,21,21,0,0,0,20,20,0,0,0,19,0,0,0,0,0,0,0,21,20,18,18,0,0,0,0,0,0,0,0,0,20,0,0,0,0,20,0,0,0,0,0,0,0,0,19,18,0,0,0,0,21,0,0,0,18,20,0,18,19,16,17,0,21,19,17,17,0,0,21,18,18,0,0,21,20,19,0,0,0,20,20,0,0,21,17,17,0,0,0,19,19,0,20,20,17,17,0,0,0,0,20,0,0,20,18,18,0,21,20,17,17,0,0,0,20,21,0,19,0,17,17,0,0,21,0,0,0,20,0,18,19,0,0,0,21,21,0,0,0,0,21,0,20,20,17,17,0,0,0,0,0,0,21,0,18,17,0,0,0,20,19,0,0,0,0,21,0,20,20,17,17,0,0,0,0,0,0,21,21,18,18,0,12,12,15,14,0,14,14,17,17,0,14,14,17,16,0,18,18,21,0,0,19,20,0,0,0,13,13,18,17,0,16,16,19,18,0,13,13,17,17,0,17,17,0,0,0,17,17,21,0,0,13,13,17,17,0,17,17,21,20,0,13,13,18,17,0,18,19,21,21,0,19,18,0,0,0,18,17,0,0,0,0,0,0,0,0,15,16,0,0,0,21,21,0,0,0,20,18,21,0,0,17,18,0,0,0,0,0,0,0,0,15,16,0,0,0,0,20,0,0,0,0,19,0,0,0,15,15,18,19,0,18,17,21,0,0,16,18,0,20,0,17,18,21,0,0,18,20,0,0,0,16,16,21,21,0,19,20,21,0,0,16,15,0,21,0,18,20,0,0,0,18,19,0,0,0,16,15,21,21,0,21,0,0,0,0,16,15,21,0,0,20,19,0,0,0,18,21,21,0,0,20,18,0,0,0,0,0,0,0,0,16,16,0,20,0,21,0,0,0,0,17,18,20,21,0,18,18,21,21,0,0,0,0,0,0,16,16,20,0,0,0,21,0,0,0,21,18,0,0,0,12,12,20,17,0,15,15,19,18,0,14,14,19,18,0,18,17,21,19,0,17,17,21,17,0,13,13,21,19,0,16,17,20,19,0,13,13,16,16,0,17,17,20,21,0,16,16,19,17,0,13,13,18,18,0,17,19,19,19,0,13,13,17,17,0,18,18,0,19,0,16,17,18,18,0,16,17,19,21,0,0,0,0,0,0,15,15,16,17,0,20,19,21,0,0,17,17,17,17,0,17,17,21,19,0,0,0,0,0,0,15,15,17,17,0,21,0,0,0,0,18,18,17,17,0,10,10,15,15,0,15,15,17,17,0,15,14,16,16,0,0,0,21,19,0,21,21,19,21,0,13,13,17,16,0,17,17,18,19,0,14,15,16,15,0,0,0,21,19,0,21,21,18,19,0,14,14,16,17,0,18,18,18,19,0,15,15,15,16,0,0,21,0,21,0,0,0,19,20,0,0,0,21,19,0,0,0,0,0,0,21,21,19,17,0,0,0,0,0,0,0,0,21,21,0,21,0,0,21,0,0,0,0,0,0,21,21,19,18,0,0,0,0,0,0,0,0,0,19,0,21,18,18,17,0,21,0,20,20,0,0,0,18,20,0,0,21,18,21,0,0,0,21,18,0,0,0,0,19,0,0,0,21,21,0,20,21,17,19,0,21,0,21,0,0,21,0,18,18,0,20,21,17,18,0,0,0,21,19,0,20,21,17,18,0,0,0,21,21,0,0,0,20,19,0,0,0,21,21,0,0,0,0,0,0,21,21,19,18,0,0,0,0,0,0,0,21,19,18,0,21,21,19,0,0,0,0,21,0,0,21,21,18,17,0,0,0,0,0,0,21,0,21,18,0,12,12,14,14,0,15,14,17,17,0,14,14,17,16,0,19,17,0,0,0,19,19,0,0,0,13,13,17,17,0,17,17,20,20,0,13,13,18,18,0,18,17,0,0,0,18,21,0,0,0,13,13,17,17,0,18,18,21,20,0,14,14,18,19,0,19,18,21,0,0,19,19,0,0,0,20,18,20,0,0,0,0,0,0,0,15,16,0,0,0,21,21,0,0,0,19,19,0,0,0,18,18,0,0,0,0,0,0,0,0,16,16,0,21,0,0,0,0,0,0,19,20,0,0,0,15,15,20,21,0,17,17,21,21,0,17,17,0,0,0,19,18,0,0,0,18,19,0,0,0,17,16,0,21,0,0,20,0,0,0,16,16,0,20,0,19,19,0,21,0,19,18,0,21,0,16,16,0,0,0,21,21,0,0,0,16,16,0,0,0,21,21,0,0,0,19,19,0,0,0,20,0,0,0,0,0,0,0,0,0,17,17,0,21,0,0,20,0,0,0,20,18,21,21,0,19,18,0,20,0,0,0,0,0,0,16,17,21,0,0,0,21,0,0,0,19,20,21,20,2,3,3,3,3,3,3,1,7,7,6,8,8,7,8,8,7,9,9,11,11,11,9,8,8,7,9,9,11,12,11,9,9,9,6,7,7,10,11,11,10,10,10,10,11,11,15,14,14,12,12,12,11,11,11,14,14,14,12,12,12,5,6,6,8,5,5,8,7,7,8,8,8,12,10,10,10,7,7,8,7,7,12,10,10,10,7,7,6,7,7,12,11,11,12,10,10,11,10,10,14,14,13,13,10,10,11,10,10,16,14,14,14,11,10,7,7,7,13,12,12,12,12,11,11,11,11,15,14,17,13,12,12,12,11,11,15,15,15,14,13,13,10,9,9,14,12,11,13,11,11,12,11,11,16,15,14,14,11,11,12,11,11,17,14,14,15,11,11,7,8,8,12,11,11,13,10,10,11,10,10,17,14,13,14,10,10,12,10,10,18,15,15,14,10,10,8,7,7,13,12,12,13,11,11,12,11,11,16,14,15,14,12,12,12,11,11,18,16,16,14,12,12,11,10,10,13,12,11,13,11,11,13,12,12,0,15,14,14,11,11,13,11,11,16,15,15,15,11,11,2,6,7,6,8,8,7,7,8,7,8,8,9,9,9,8,7,7,8,8,8,9,9,9,9,8,8,6,6,6,9,7,7,9,7,7,9,8,8,10,8,8,10,8,8,10,8,8,10,9,8,10,8,8,7,6,6,9,6,6,9,6,6,9,7,7,10,8,8,10,6,6,9,7,7,10,8,8,10,6,6,7,7,7,11,9,9,11,9,9,10,9,9,12,10,10,12,8,8,11,9,9,13,9,10,12,8,8,8,7,7,11,9,10,11,10,10,10,9,9,11,11,11,11,9,9,11,10,9,12,11,11,11,9,10,10,8,8,11,9,10,11,9,9,11,9,9,12,10,10,11,9,9,11,9,9,12,10,11,11,9,9,8,8,8,12,9,9,12,9,9,11,9,9,13,9,9,13,8,8,12,9,9,13,10,10,12,8,8,9,7,7,11,10,10,11,10,10,11,10,10,12,11,11,11,10,9,11,10,10,11,11,11,11,9,9,11,9,9,12,10,10,11,10,10,12,10,10,11,11,11,11,9,9,11,10,10,12,11,11,11,9,9,1,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,1,3,2,5,4,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,15,15,3,5,4,5,4,5,4,5,5,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,3,6,7,9,13,17,3,2,5,7,9,13,17,6,5,5,6,9,12,16,7,7,6,6,7,10,13,10,10,9,7,6,10,13,13,13,12,10,10,11,15,17,17,17,14,14,15,17,1,3,2,3,1,3,3,8,8,10,10,10,10,10,10,10,10,5,7,5,9,8,10,10,10,10,11,10,11,10,5,5,7,8,9,10,10,11,10,10,11,10,11,10,10,10,11,11,11,11,11,11,11,10,11,11,10,10,10,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,12,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,12,11,11,11,11,11,11,12,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,10,11,11,11,11,11,11,11,12,11,13,11,11,11,11,11,11,11,11,11,11,11,12,11,13,1,4,4,7,7,4,5,6,7,7,4,6,5,7,7,7,6,7,6,7,7,7,6,7,6,1,4,4,4,4,4,4,4,4,3,3,7,8,10,13,16,3,2,5,7,9,13,16,6,4,4,6,10,14,15,7,5,5,7,10,13,14,9,8,9,9,9,11,13,12,11,12,9,7,8,11,14,12,10,6,5,7,10,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,5,5,0,7,7,0,8,8,0,9,9,0,12,12,0,8,8,0,9,9,0,12,12,0,8,8,0,6,6,0,11,11,0,12,12,0,12,12,0,15,15,0,11,11,0,12,12,0,15,15,0,12,12,0,5,5,0,5,5,0,6,6,0,7,7,0,11,11,0,6,6,0,7,7,0,10,11,0,6,6,0,7,7,0,11,11,0,12,12,0,11,11,0,15,15,0,10,10,0,12,12,0,15,15,0,12,12,0,6,6,0,12,12,0,12,12,0,12,12,0,15,15,0,11,11,0,12,12,0,15,15,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,0,12,12,0,12,12,0,12,12,0,15,15,0,12,12,0,11,12,0,15,16,0,11,11,0,6,6,0,11,12,0,12,12,0,12,12,0,16,15,0,12,12,0,13,12,0,15,14,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,0,9,9,0,9,9,0,10,10,0,9,9,0,10,10,0,10,10,0,9,9,0,10,10,0,7,7,0,7,7,0,6,6,0,8,8,0,7,7,0,8,8,0,8,9,0,8,8,0,8,8,0,7,7,0,9,9,0,8,8,0,10,10,0,9,9,0,10,10,0,10,10,0,9,9,0,10,10,0,9,9,0,11,11,0,11,11,0,12,12,0,11,11,0,12,12,0,13,13,0,12,12,0,13,12,0,8,8,0,12,12,0,12,12,0,13,13,0,12,12,0,13,13,0,13,13,0,13,13,0,13,13,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,11,11,0,12,12,0,13,13,0,12,12,0,13,13,0,13,13,0,12,12,0,12,12,0,8,8,0,12,12,0,12,12,0,13,13,0,13,13,0,13,14,0,14,13,0,13,13,0,13,13,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,6,7,8,8,7,8,8,7,9,9,10,12,11,9,8,8,7,9,9,11,12,12,9,9,9,6,7,7,10,11,11,10,11,11,10,11,11,13,13,14,12,12,12,11,11,11,14,14,14,12,12,12,6,5,5,9,6,5,9,6,6,9,7,7,12,10,10,11,6,6,10,7,7,13,10,10,12,7,7,7,8,8,12,10,10,12,10,10,11,10,10,15,13,13,13,9,9,12,11,11,16,13,13,15,11,11,8,7,7,12,12,12,12,11,11,12,11,11,14,14,14,14,12,12,12,12,12,16,15,15,14,12,12,0,10,10,0,12,12,0,12,12,0,11,11,0,14,14,0,11,11,0,12,12,0,15,15,0,11,11,8,8,8,13,11,11,13,10,10,13,11,11,15,13,13,14,11,11,12,10,10,16,14,14,14,10,10,9,7,7,13,11,11,13,11,11,12,11,11,16,14,14,14,12,12,13,12,12,15,14,14,15,13,12,0,11,11,0,12,12,0,12,12,0,12,12,0,15,15,0,12,12,0,13,12,0,14,15,0,12,12,2,4,4,8,8,10,12,12,11,11,9,11,11,12,13,11,12,12,11,11,11,12,12,12,12,10,13,12,13,13,11,12,12,13,13,11,12,12,13,13,11,12,13,13,13,11,13,13,13,13,10,13,13,12,13,11,12,12,14,14,11,13,12,12,12,11,12,12,13,13,11,13,13,12,12,11,13,13,13,13,11,12,12,13,13,11,13,13,12,12,11,12,12,13,13,11,13,13,12,12,11,13,13,13,13,11,12,12,14,14,11,13,13,12,12,11,12,12,13,13,11,13,13,12,12,11,10,10,10,10,12,10,10,11,11,11,8,8,11,11,13,10,10,10,10,12,10,10,10,10,13,11,11,11,11,13,10,10,11,11,13,11,11,12,12,13,11,11,11,11,13,11,11,12,12,13,11,11,12,12,13,10,10,11,11,13,11,11,11,11,13,11,10,11,11,13,11,11,11,11,13,11,11,11,11,13,10,10,11,11,13,11,11,11,11,12,10,11,11,11,13,11,11,11,11,13,11,11,11,11,13,10,10,11,11,13,11,11,11,11,13,11,11,11,11,13,11,11,11,11,11,10,10,10,10,12,10,10,9,9,12,12,12,11,11,13,12,12,9,9,13,12,12,10,10,12,12,12,12,12,13,13,13,14,14,13,12,12,11,11,13,13,13,12,12,13,12,12,11,11,13,12,13,11,11,13,13,13,14,14,13,12,12,10,10,13,13,13,11,11,13,12,12,10,10,13,13,13,11,11,13,13,13,14,14,13,12,12,10,10,13,13,13,11,11,13,12,13,10,10,13,13,13,11,11,13,13,13,14,14,13,12,12,10,10,13,13,13,11,11,13,13,12,10,10,14,12,12,8,8,14,12,12,9,9,14,11,11,9,9,14,12,12,8,8,14,11,11,7,7,14,13,13,10,10,15,12,12,10,10,15,13,13,10,10,15,12,12,9,9,15,13,13,10,10,15,13,13,10,10,15,12,12,10,10,15,13,13,10,10,14,12,12,9,9,14,13,13,9,9,14,13,13,9,9,15,12,12,9,9,15,13,13,9,9,14,12,12,9,9,14,13,13,9,9,14,13,13,9,9,15,12,12,9,9,14,13,13,9,9,14,12,12,9,9,14,13,13,9,9,13,12,12,8,8,13,13,13,8,8,14,13,13,9,9,13,13,13,7,7,14,13,13,8,8,14,14,14,10,10,14,14,14,11,11,14,14,14,9,9,14,14,14,10,10,14,14,14,9,9,14,14,14,10,9,15,14,14,11,11,14,14,14,9,9,14,14,14,10,10,14,14,14,9,9,14,14,14,9,9,15,14,14,11,11,14,14,14,8,8,14,14,14,9,9,14,14,14,8,8,14,14,14,9,9,15,14,14,11,11,14,14,14,8,8,14,14,14,9,9,14,14,14,8,8,12,12,12,13,13,16,15,15,11,11,16,15,16,12,12,17,16,16,11,11,17,15,15,12,11,16,16,16,12,13,16,15,15,13,13,16,16,16,12,12,16,16,15,13,13,16,16,16,12,12,16,16,16,13,13,17,16,16,14,14,17,17,16,12,12,17,16,16,13,13,17,17,16,12,13,16,16,17,13,12,17,16,16,14,13,17,16,16,12,12,17,16,16,12,12,17,16,17,12,12,17,17,17,13,13,16,16,16,13,14,17,17,16,12,12,16,16,16,13,13,17,17,17,12,12,13,14,14,10,10,16,14,14,12,12,16,15,15,14,14,16,14,14,12,12,15,14,14,13,13,17,15,15,14,13,16,16,15,15,15,16,15,15,14,14,16,15,15,14,14,17,15,15,14,14,16,15,15,14,14,16,16,15,15,15,17,15,15,13,13,16,15,15,14,14,17,15,15,13,13,17,15,15,14,14,16,15,15,15,15,16,14,14,13,13,16,15,15,14,14,16,14,14,13,13,17,15,15,14,14,16,16,15,15,15,17,14,14,13,13,16,15,15,14,14,17,14,14,13,13,13,11,11,10,10,16,14,14,13,13,15,14,14,13,13,16,14,14,12,12,16,14,14,12,12,15,15,15,14,14,16,14,14,14,14,16,15,14,14,14,16,14,14,14,14,16,15,15,14,13,16,15,15,14,14,16,14,14,14,14,17,15,15,14,14,16,14,14,14,14,16,15,15,13,14,16,15,15,14,14,16,14,14,14,14,16,15,15,13,13,16,14,14,13,13,16,15,15,13,13,16,15,15,14,14,16,14,14,14,14,17,15,15,13,13,16,15,14,13,13,17,15,15,13,13,14,14,14,9,9,14,14,14,17,17,14,15,15,18,18,14,14,14,18,19,14,14,14,18,18,15,15,15,19,18,15,16,15,18,20,15,15,15,18,19,15,15,15,19,19,15,15,15,18,20,15,15,15,18,19,15,15,16,20,18,15,15,15,18,18,15,15,15,19,19,15,15,15,18,19,15,15,15,18,19,15,15,15,19,19,14,15,14,19,19,15,15,15,20,19,15,14,14,19,18,14,15,15,18,19,15,15,16,20,20,14,14,14,18,19,15,15,15,19,18,14,14,14,18,18,14,12,12,9,9,13,14,14,18,18,14,13,13,18,19,14,14,14,18,18,14,14,14,18,18,15,15,15,19,19,15,14,14,19,18,14,15,15,19,18,15,14,14,18,18,15,15,15,19,18,14,15,15,19,19,15,14,14,19,18,14,15,15,19,18,15,14,14,19,18,14,15,15,19,18,15,15,15,21,18,15,14,14,19,18,14,15,15,18,19,14,15,14,20,19,14,15,15,18,19,14,15,15,19,19,15,14,14,19,20,14,15,15,18,18,14,14,14,19,19,14,15,15,19,18,12,12,12,13,13,16,15,15,11,11,16,15,15,12,12,16,16,16,11,11,16,15,15,11,11,16,16,16,13,13,17,16,16,13,13,17,17,17,12,12,16,16,16,13,13,17,16,17,13,12,15,16,16,12,12,16,15,15,13,13,17,16,16,12,12,16,16,15,12,12,16,16,16,12,12,17,17,16,13,12,16,16,16,13,13,17,16,16,12,12,17,16,16,12,12,17,17,16,12,12,16,17,16,12,12,17,15,15,13,13,17,16,16,12,12,16,16,16,12,12,16,16,16,12,12,13,13,13,9,9,15,14,14,13,13,16,15,14,14,14,16,14,14,13,13,15,14,14,13,13,17,15,15,14,14,16,15,15,15,15,16,15,15,14,14,16,15,15,15,15,17,15,15,14,14,16,15,15,14,14,16,15,15,15,15,17,14,15,14,14,16,15,15,14,14,17,15,15,13,14,17,15,15,14,14,16,15,15,15,15,17,14,14,13,13,16,15,15,14,14,17,14,14,13,13,17,15,15,14,14,16,15,16,15,15,17,14,14,13,13,16,15,15,14,14,18,14,14,13,13,13,11,11,11,11,15,14,14,12,12,15,14,14,13,13,16,14,14,12,12,16,13,14,12,12,16,15,15,13,13,16,14,14,14,14,16,15,15,13,13,16,14,14,13,13,16,14,15,13,13,15,15,15,13,13,16,14,14,14,13,16,14,14,13,13,16,14,14,13,13,16,15,15,13,13,16,15,15,13,13,16,14,14,14,14,16,15,15,12,12,16,14,14,13,13,16,15,15,12,12,16,15,15,13,13,16,14,14,14,14,17,15,14,12,12,16,14,14,13,13,16,15,15,12,12,14,14,14,8,8,14,14,14,17,18,14,15,15,17,18,14,14,14,17,18,14,14,14,18,18,14,15,15,18,18,14,16,15,19,19,15,15,15,18,19,15,16,15,20,19,15,15,15,18,18,14,15,15,18,19,15,16,16,20,19,15,15,15,19,17,14,15,15,20,18,14,15,15,18,18,14,15,15,18,19,14,15,15,19,20,14,14,14,18,18,14,15,15,18,19,14,14,14,18,19,14,15,15,19,18,15,16,16,20,21,14,14,15,19,19,14,15,15,19,19,14,14,14,19,18,13,12,12,9,9,13,14,14,18,19,14,14,14,18,19,14,14,14,18,18,14,14,14,18,18,14,15,15,19,19,15,14,14,19,18,15,15,15,19,19,15,14,14,19,20,14,15,15,18,19,14,15,15,20,18,15,14,14,18,18,14,15,15,18,18,14,14,14,19,19,14,15,15,18,18,14,15,15,19,18,15,14,14,19,19,14,15,15,19,18,15,14,14,19,18,14,14,15,18,19,14,15,15,19,18,15,14,14,18,19,14,15,14,19,20,14,14,14,19,19,14,15,15,19,19,12,12,12,13,13,16,16,16,11,11,16,16,16,12,12,17,16,16,11,11,17,15,15,11,11,16,16,16,13,13,17,15,16,13,13,16,16,16,12,12,17,16,16,13,13,17,17,16,12,12,17,17,16,13,13,17,16,16,13,13,17,17,17,12,12,17,16,16,13,13,17,17,17,12,12,16,16,16,12,12,17,15,15,13,13,17,16,16,11,11,17,16,16,12,12,16,16,16,11,11,16,17,16,12,12,17,16,16,13,13,17,17,16,12,12,17,17,16,12,12,17,16,16,11,11,13,14,14,9,9,16,14,14,13,13,16,14,15,14,14,16,14,14,12,12,16,14,14,13,13,17,15,15,14,14,16,15,15,15,15,17,15,15,14,14,16,15,15,14,14,17,15,15,14,14,16,15,15,14,14,16,15,15,15,16,17,14,15,14,14,16,15,15,14,14,17,15,15,14,14,16,15,15,14,14,16,15,15,15,15,17,14,14,13,13,16,15,15,14,14,16,14,14,13,13,17,15,15,14,14,16,16,15,15,15,17,14,14,13,13,16,15,15,14,14,17,14,14,13,13,13,11,11,10,10,16,14,14,12,12,15,13,13,13,12,16,14,14,11,11,16,14,14,11,11,16,14,15,13,14,16,14,14,13,13,16,15,15,13,13,16,14,14,13,13,16,15,15,13,13,16,15,15,13,13,17,14,14,14,14,17,15,15,13,13,16,14,15,13,13,16,15,15,13,13,16,15,15,13,13,16,14,14,13,13,17,15,15,12,12,16,14,14,12,12,16,15,15,12,12,16,15,15,13,13,16,14,14,13,13,17,15,15,12,12,17,14,14,12,12,16,15,15,12,12,13,14,14,8,8,13,14,14,18,18,13,15,15,17,18,14,14,14,18,19,14,14,14,19,18,14,15,15,19,18,15,15,16,21,18,15,15,15,19,19,14,16,16,19,19,14,15,15,18,19,14,15,15,19,20,14,16,16,19,18,15,15,15,18,19,14,15,15,19,18,15,15,15,18,18,15,15,15,20,18,15,16,16,20,19,14,15,14,18,19,14,15,16,19,20,14,15,15,19,18,15,15,15,19,18,15,16,16,20,19,15,14,14,18,18,14,15,15,19,19,14,15,15,18,18,13,12,12,8,8,13,14,14,19,18,14,13,13,20,18,14,14,14,19,18,14,13,13,18,19,14,15,15,20,19,15,14,14,19,19,14,15,15,19,18,15,14,14,20,20,15,15,15,19,18,14,15,15,19,18,15,14,14,19,18,14,15,15,20,19,14,14,14,20,19,14,15,15,19,18,15,15,15,18,18,15,14,14,18,18,14,15,15,19,19,14,14,14,19,19,14,15,15,19,19,15,15,15,19,18,15,14,14,20,19,15,15,15,19,19,14,14,14,20,19,14,15,15,20,20,12,12,12,13,13,17,16,16,11,11,16,16,15,12,12,17,16,16,11,11,17,15,15,11,11,17,17,17,13,13,17,16,16,13,13,17,17,17,12,12,17,16,16,13,13,17,17,16,12,13,16,17,16,13,13,17,16,15,13,13,17,16,16,12,12,17,16,16,12,13,17,16,17,12,12,17,17,17,12,12,17,16,15,13,13,17,16,16,12,12,17,16,16,12,12,17,16,16,11,11,16,16,16,12,12,17,15,15,13,13,17,16,15,11,11,16,16,16,12,12,17,16,16,11,11,13,14,14,9,9,16,14,14,13,13,16,14,15,14,14,16,14,14,12,12,16,14,14,13,13,17,15,15,14,15,16,15,15,15,15,17,15,15,14,14,16,15,15,15,14,16,15,15,14,14,16,15,15,14,14,16,15,16,15,15,17,15,14,14,14,16,15,15,14,14,17,15,15,13,13,16,15,15,14,14,16,16,16,15,15,17,14,14,13,13,16,15,15,14,14,18,14,15,13,13,16,15,15,14,14,16,16,15,15,15,16,14,14,13,13,16,15,15,14,14,17,14,15,13,13,13,11,11,10,10,15,14,14,12,12,15,14,14,13,13,16,14,14,12,12,16,13,14,12,12,16,14,15,14,13,16,14,14,14,14,16,15,15,13,13,16,14,14,13,13,16,15,15,13,13,15,15,15,13,13,16,14,14,14,14,17,15,15,13,13,16,14,14,13,13,16,15,15,13,13,16,15,15,13,13,16,14,14,13,13,17,15,15,12,12,16,14,14,12,12,16,14,15,12,12,16,15,15,13,13,16,14,14,13,13,17,15,15,12,12,16,14,14,12,12,16,15,15,12,12,14,14,14,8,8,14,14,14,17,17,14,15,15,18,18,14,14,14,18,17,14,14,14,18,18,14,15,15,18,20,15,16,15,19,18,15,15,15,19,18,15,15,16,19,18,15,15,15,18,18,14,15,15,18,18,15,16,16,18,19,15,15,15,18,18,15,15,15,19,20,15,15,15,18,18,15,15,15,18,18,15,16,16,19,19,15,14,15,19,19,15,15,15,19,20,14,14,15,18,18,15,15,15,19,19,15,16,16,19,19,15,15,14,18,19,15,15,15,20,20,15,15,14,18,18,13,12,12,8,8,13,14,14,18,18,14,14,14,18,18,14,14,14,18,20,14,14,14,18,18,14,15,15,19,18,15,14,14,18,19,15,15,15,18,19,15,14,14,18,19,15,15,15,18,18,14,15,14,18,19,15,14,14,21,19,15,15,15,19,18,14,14,14,19,18,14,15,15,19,18,15,15,15,20,19,15,14,14,20,18,14,15,15,18,19,14,14,14,19,18,14,15,15,18,19,15,15,15,18,19,15,14,14,19,19,15,15,15,19,19,14,14,14,19,20,14,15,15,18,19,2,6,6,14,14,6,8,8,14,14,7,7,7,14,14,0,13,13,15,16,0,13,13,15,15,7,8,8,15,15,9,10,10,16,16,9,8,8,14,15,0,13,13,17,17,0,13,13,16,16,8,8,8,15,15,12,11,11,16,16,9,8,8,14,14,0,13,13,17,17,0,13,13,15,15,0,14,14,16,16,0,0,0,18,19,0,12,12,16,15,0,16,16,0,20,0,14,14,16,16,0,14,14,17,17,0,0,0,19,19,0,12,12,15,15,0,18,17,21,21,0,14,14,16,16,5,7,7,12,13,9,10,9,14,14,11,10,10,14,14,0,0,0,18,17,0,20,21,18,18,9,10,10,14,14,12,12,12,17,16,12,10,10,14,14,0,20,20,18,17,0,21,21,17,17,11,10,10,14,14,15,13,13,18,18,13,11,11,14,14,0,20,0,18,18,0,20,21,18,17,0,21,0,18,19,0,0,0,0,21,0,21,20,16,17,0,0,0,21,21,0,0,0,20,18,0,20,0,17,18,0,0,0,0,0,0,0,20,16,17,0,0,0,20,0,0,0,0,18,18,6,6,6,13,13,8,5,5,11,11,9,6,6,13,13,0,9,9,12,12,0,10,10,14,14,9,7,7,13,13,12,9,9,13,13,10,6,6,13,13,0,10,10,14,14,0,10,10,13,13,9,7,7,13,13,13,10,10,13,13,11,6,6,13,13,0,10,10,15,15,0,10,10,13,13,0,12,11,15,15,0,20,19,17,16,0,9,9,13,13,0,13,13,20,19,0,11,11,13,13,0,11,11,15,15,0,20,19,17,17,0,10,10,13,13,0,14,15,0,21,0,12,12,13,13,0,10,10,12,12,0,11,11,15,15,0,11,11,15,15,0,15,15,20,20,0,16,16,0,0,0,11,11,15,15,0,14,14,17,17,0,11,11,15,15,0,15,15,20,21,0,16,16,21,21,0,12,12,15,15,0,15,15,18,20,0,11,11,16,15,0,15,15,21,21,0,16,16,0,21,0,16,16,0,0,0,0,0,0,0,0,14,14,21,21,0,17,18,0,0,0,16,17,20,0,0,16,16,0,0,0,0,0,0,0,0,15,15,20,20,0,19,18,0,21,0,18,17,0,0,0,10,10,11,11,0,10,10,10,10,0,11,11,12,12,0,11,11,9,9,0,13,13,12,12,0,11,11,12,12,0,13,13,12,12,0,10,10,12,12,0,12,12,13,13,0,12,12,12,12,0,11,11,12,12,0,13,13,12,12,0,10,10,12,12,0,13,13,13,13,0,12,12,12,12,0,14,13,13,13,0,19,21,15,15,0,12,11,12,12,0,16,15,19,19,0,13,13,11,11,0,13,13,13,13,0,0,21,15,16,0,12,12,12,12,0,16,16,19,21,0,13,13,12,12,7,7,7,16,16,11,9,9,16,16,12,9,9,16,16,0,13,13,16,16,0,14,14,17,16,11,9,9,16,16,14,12,11,17,17,13,8,9,15,15,0,13,13,19,19,0,13,13,16,15,12,10,10,17,17,15,12,12,19,18,14,9,9,17,16,0,14,14,18,0,0,14,13,16,16,0,14,15,18,17,0,21,0,19,21,0,12,12,16,16,0,16,16,0,0,0,14,14,16,16,0,14,14,18,18,0,0,21,20,0,0,13,13,16,17,0,18,18,0,0,0,15,14,17,16,8,7,7,14,14,11,10,10,15,15,13,10,10,15,15,0,21,20,19,19,0,21,0,17,18,11,10,10,15,16,14,12,12,18,18,14,11,11,15,14,0,21,20,18,19,0,0,21,18,18,12,11,11,16,16,16,14,14,18,20,14,11,11,16,15,0,20,20,19,19,0,0,20,18,18,0,21,0,18,19,0,0,0,0,0,0,20,20,17,18,0,0,0,20,20,0,0,0,19,19,0,0,0,20,18,0,0,0,0,0,0,0,21,18,18,0,21,21,0,21,0,0,0,19,20,11,9,9,14,14,13,10,10,14,14,13,11,11,15,15,0,13,13,13,13,0,14,14,16,16,13,11,11,15,15,16,12,12,15,15,14,10,10,14,14,0,14,14,16,16,0,14,14,15,15,13,10,10,15,15,17,13,14,15,16,15,10,10,15,15,0,14,14,17,16,0,14,14,15,15,0,15,15,17,17,0,0,21,18,18,0,13,13,15,15,0,16,16,21,20,0,14,14,15,14,0,15,14,16,17,0,0,20,20,19,0,13,13,15,15,0,19,18,0,0,0,15,15,15,15,0,11,11,14,14,0,12,12,16,16,0,12,12,16,16,0,15,16,21,21,0,16,17,21,0,0,12,12,17,16,0,14,14,18,19,0,11,11,16,16,0,15,15,20,21,0,16,16,21,0,0,12,12,17,16,0,15,15,19,19,0,12,12,16,17,0,16,15,0,0,0,16,16,0,0,0,17,17,0,21,0,0,0,0,0,0,14,15,20,0,0,17,17,0,0,0,17,17,0,0,0,17,16,0,0,0,0,0,0,0,0,15,15,0,0,0,18,18,0,0,0,18,17,0,0,0,11,11,14,14,0,12,12,15,15,0,12,12,15,15,0,13,13,14,14,0,14,14,17,17,0,12,12,16,16,0,14,14,16,16,0,11,11,15,15,0,13,13,16,17,0,13,13,16,16,0,12,12,15,15,0,14,14,17,16,0,11,11,15,15,0,14,14,17,17,0,13,13,16,16,0,15,15,17,18,0,21,20,20,21,0,12,12,15,15,0,16,16,20,21,0,14,14,15,15,0,14,14,17,17,0,0,0,18,19,0,12,13,15,15,0,18,17,21,0,0,14,15,15,15,8,8,8,16,16,12,10,10,16,16,13,9,9,16,16,0,14,14,18,17,0,14,14,16,17,12,10,10,18,17,14,12,11,18,18,14,9,9,16,16,0,13,13,18,18,0,13,13,17,16,12,9,9,16,17,17,13,13,17,17,14,9,9,15,15,0,14,14,20,19,0,13,13,16,16,0,15,15,19,18,0,0,0,20,19,0,12,13,17,17,0,16,16,20,0,0,14,14,16,17,0,14,14,19,18,0,0,0,20,20,0,13,13,16,16,0,18,17,0,0,0,15,15,16,16,9,7,7,14,14,12,10,10,15,15,13,10,10,15,15,0,21,0,18,19,0,20,21,19,18,12,10,10,16,15,15,13,13,18,18,14,11,11,15,15,0,0,0,19,18,0,0,21,18,18,13,11,11,15,15,16,14,14,17,19,15,11,11,15,15,0,21,21,20,18,0,0,21,18,18,0,0,21,21,19,0,0,0,0,0,0,19,20,18,17,0,0,0,21,21,0,21,0,20,18,0,0,21,19,19,0,0,0,0,0,0,20,21,17,17,0,0,0,0,0,0,21,0,18,20,0,10,10,14,14,0,11,11,15,15,0,11,11,15,15,0,14,14,15,15,0,15,15,16,16,0,11,12,16,16,0,13,13,16,16,0,11,11,15,15,0,14,14,17,17,0,14,14,15,15,0,11,11,16,15,0,14,14,15,15,0,11,11,15,15,0,15,15,17,17,0,14,14,15,15,0,16,16,18,18,0,0,0,20,19,0,14,13,16,15,0,17,17,21,0,0,15,15,15,15,0,16,15,17,16,0,20,0,20,18,0,13,14,15,15,0,19,18,0,21,0,15,15,15,15,0,11,11,14,14,0,12,12,16,16,0,12,12,16,16,0,16,15,20,21,0,17,16,0,0,0,12,12,16,16,0,14,14,18,18,0,11,11,16,16,0,15,15,21,20,0,16,16,0,0,0,12,12,16,17,0,15,14,19,19,0,11,12,16,16,0,15,15,21,0,0,16,16,0,0,0,16,17,0,0,0,0,0,0,0,0,15,15,21,0,0,17,17,0,0,0,17,17,0,0,0,17,16,0,0,0,0,0,0,0,0,15,15,0,20,0,19,20,0,0,0,17,17,0,0,0,12,12,15,15,0,12,12,15,15,0,12,12,16,16,0,13,13,15,15,0,15,15,17,17,0,13,13,17,16,0,14,14,17,17,0,11,11,16,16,0,14,14,17,17,0,13,13,16,16,0,12,12,16,16,0,15,15,16,17,0,11,11,15,16,0,14,14,17,17,0,13,14,16,16,0,15,15,18,18,0,21,20,20,19,0,13,13,16,17,0,16,16,0,0,0,14,14,16,16,0,15,15,18,18,0,0,0,20,19,0,13,13,16,16,0,17,17,0,0,0,14,14,16,16,0,11,11,16,16,0,13,13,18,17,0,13,13,17,17,0,16,16,17,17,0,16,16,17,18,0,12,12,17,17,0,15,15,18,18,0,12,12,16,16,0,16,16,19,19,0,15,15,16,17,0,12,12,17,17,0,17,17,18,18,0,12,12,17,17,0,16,16,19,19,0,15,16,17,17,0,16,16,18,17,0,0,0,21,21,0,13,13,16,16,0,17,17,0,20,0,15,15,16,17,0,16,16,19,18,0,0,21,20,21,0,14,14,17,16,0,20,0,0,0,0,15,16,16,17,0,9,9,14,14,0,13,13,16,16,0,14,14,15,15,0,0,20,19,19,0,0,0,19,19,0,12,12,15,15,0,15,16,19,18,0,14,14,15,15,0,21,0,18,18,0,20,0,17,18,0,13,13,16,16,0,17,17,17,19,0,14,14,16,15,0,21,20,20,19,0,0,0,19,19,0,0,0,19,18,0,0,0,0,0,0,20,20,17,18,0,0,0,21,21,0,0,0,18,18,0,21,0,18,19,0,0,0,0,0,0,20,21,18,18,0,0,0,20,21,0,0,0,19,19,0,18,18,15,15,0,20,21,17,17,0,19,21,17,17,0,0,0,17,18,0,0,0,20,19,0,19,19,17,17,0,0,0,18,18,0,19,20,16,17,0,0,21,20,20,0,19,20,19,18,0,19,20,16,16,0,0,0,18,19,0,19,20,17,17,0,0,21,0,20,0,21,21,17,19,0,20,0,19,20,0,0,0,20,0,0,19,18,17,16,0,0,0,0,0,0,0,20,17,17,0,20,21,18,20,0,0,0,0,21,0,19,20,17,17,0,0,0,0,0,0,20,21,17,17,0,11,11,14,14,0,13,13,16,17,0,13,13,16,16,0,17,17,0,21,0,18,17,21,0,0,13,13,16,16,0,15,15,18,18,0,12,12,16,16,0,17,16,21,0,0,17,17,0,0,0,12,12,17,17,0,17,17,19,21,0,13,12,16,16,0,17,17,0,0,0,17,17,0,0,0,18,17,0,21,0,0,0,0,0,0,15,15,20,0,0,20,18,0,0,0,17,18,0,0,0,16,17,0,0,0,0,0,0,0,0,15,15,0,0,0,19,19,0,0,0,18,18,0,0,0,14,14,18,18,0,16,16,0,21,0,16,16,21,21,0,17,17,0,20,0,17,17,20,0,0,16,15,0,0,0,20,20,0,0,0,15,15,20,20,0,17,17,21,0,0,17,18,20,20,0,15,15,20,20,0,18,18,0,0,0,15,15,19,20,0,17,18,0,0,0,17,17,20,20,0,18,17,21,0,0,0,0,0,21,0,15,15,20,20,0,19,19], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+341160);
/* memory initializer */ allocate([17,17,21,0,0,17,17,0,0,0,0,0,21,0,0,15,15,19,19,0,20,21,0,0,0,18,17,21,21,0,12,12,16,16,0,14,14,17,17,0,13,13,17,18,0,16,16,18,17,0,16,16,18,18,0,13,13,18,18,0,15,16,19,18,0,13,13,16,16,0,16,16,20,18,0,16,16,17,17,0,12,13,17,17,0,17,16,18,18,0,12,12,16,16,0,17,16,20,19,0,16,16,16,16,0,16,17,18,20,0,0,0,21,20,0,14,14,17,16,0,19,18,0,20,0,16,16,17,16,0,16,16,17,18,0,0,21,21,21,0,14,14,16,16,0,20,20,21,0,0,16,16,16,16,0,10,10,14,14,0,14,14,15,16,0,14,14,15,15,0,0,21,18,18,0,0,21,18,19,0,13,13,16,16,0,16,16,18,18,0,14,14,15,15,0,21,0,18,18,0,21,0,18,18,0,13,13,16,16,0,17,17,19,20,0,14,14,15,15,0,0,0,18,20,0,0,21,18,18,0,0,21,19,18,0,0,0,0,0,0,20,21,18,17,0,0,0,21,21,0,0,0,19,19,0,21,0,18,19,0,0,0,0,0,0,21,20,17,17,0,0,21,20,0,0,0,0,19,19,0,19,20,15,16,0,0,20,18,17,0,20,21,17,18,0,21,0,18,18,0,0,0,19,19,0,20,20,17,18,0,0,0,18,19,0,20,20,18,17,0,0,0,0,20,0,0,21,17,18,0,20,21,17,17,0,0,0,18,18,0,19,19,17,17,0,0,0,21,21,0,20,20,17,17,0,0,0,21,19,0,0,0,20,19,0,21,20,17,18,0,0,0,0,0,0,0,20,18,17,0,21,20,18,18,0,0,0,20,21,0,20,20,17,17,0,0,0,0,0,0,20,0,17,17,0,11,11,13,14,0,13,13,16,16,0,13,13,16,16,0,17,17,0,0,0,17,18,0,0,0,13,13,16,16,0,15,16,18,18,0,13,13,16,17,0,16,17,20,0,0,17,18,20,0,0,13,13,17,17,0,16,16,20,21,0,13,13,16,16,0,17,17,21,0,0,17,18,0,0,0,17,18,0,21,0,0,0,0,0,0,15,15,20,0,0,19,19,0,0,0,17,17,0,0,0,18,17,21,20,0,0,0,0,0,0,16,16,20,21,0,21,20,0,21,0,19,21,0,0,0,15,15,0,0,0,16,17,0,19,0,16,16,0,0,0,17,17,0,0,0,19,18,0,0,0,16,16,20,20,0,20,18,21,0,0,15,15,21,21,0,18,18,0,0,0,18,19,0,0,0,16,15,0,21,0,20,19,0,0,0,16,16,0,0,0,20,18,0,21,0,17,18,21,0,0,18,19,0,0,0,0,0,0,0,0,16,16,20,20,0,19,20,0,0,0,17,17,0,0,0,18,17,20,21,0,0,0,0,0,0,16,16,0,20,0,20,22,0,0,0,18,18,0,22,2,3,3,3,3,3,3,1,6,6,6,8,8,7,8,8,7,9,8,10,11,11,9,8,8,7,8,8,11,11,11,9,8,8,6,7,7,10,10,10,10,10,10,10,10,10,14,13,13,12,11,11,10,10,10,14,14,13,13,11,11,6,6,6,8,5,5,8,7,7,8,7,7,11,9,9,9,7,7,8,7,7,12,10,10,10,7,7,7,8,8,12,11,11,12,10,10,11,10,10,14,13,13,13,10,10,11,10,11,16,14,14,13,10,10,7,8,7,12,12,12,12,11,11,12,11,11,16,14,15,13,12,12,11,11,11,17,15,14,14,13,13,10,9,9,13,11,11,13,11,11,12,11,11,16,14,13,14,11,11,12,11,11,16,15,14,14,11,11,7,8,8,12,11,11,12,10,10,12,10,10,16,14,13,13,11,11,12,10,10,16,14,14,13,10,10,8,8,8,12,12,12,12,11,11,12,11,11,16,14,15,14,12,12,12,11,11,16,15,15,14,12,12,10,10,10,13,11,11,13,11,11,12,12,12,16,14,14,14,11,11,12,11,11,17,14,15,14,11,11,2,7,7,7,8,8,7,7,7,7,8,8,8,8,9,8,7,7,8,8,8,9,9,9,9,7,7,6,6,6,9,7,7,9,7,7,9,8,8,10,8,8,10,8,8,10,8,8,10,8,8,10,8,8,7,6,6,9,6,6,9,6,6,9,7,7,10,8,8,9,6,6,9,7,7,10,8,8,9,7,7,7,8,8,11,9,9,11,9,9,11,9,9,12,9,9,12,8,8,12,9,9,12,10,9,12,8,8,8,7,7,10,9,9,11,9,9,11,9,9,11,11,10,11,9,9,11,10,9,11,10,11,11,9,9,10,8,8,11,9,9,11,9,9,11,9,9,11,10,10,11,9,9,11,9,9,11,10,10,11,9,9,9,8,8,12,9,9,12,9,9,11,9,9,12,9,9,12,8,8,12,9,9,12,9,9,12,8,8,9,7,7,11,9,10,11,10,9,11,9,9,11,11,11,11,9,9,11,10,10,11,11,11,11,9,9,10,9,9,11,9,9,11,10,10,11,10,9,11,10,10,11,9,9,11,10,10,11,10,11,11,9,9,1,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,1,3,2,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,12,14,14,14,15,15,3,4,4,5,4,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,3,6,7,10,14,16,3,2,5,7,11,14,17,6,5,5,7,10,12,14,7,7,6,6,7,9,13,10,11,9,6,6,9,11,15,15,13,10,9,10,12,18,18,16,14,12,13,16,1,3,2,3,1,3,4,7,7,8,8,9,9,9,10,10,10,5,6,5,8,7,9,8,9,9,10,9,11,10,5,5,7,7,8,8,9,9,9,9,10,10,11,8,9,8,10,9,10,9,10,9,11,10,11,10,8,8,9,9,10,9,10,9,11,10,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,12,11,11,11,11,11,11,10,12,12,12,12,12,12,12,11,12,12,12,11,11,11,12,12,12,12,12,12,12,11,12,11,12,11,11,13,12,12,12,13,12,12,12,12,11,12,11,11,13,13,13,12,12,12,12,12,12,11,11,11,10,13,13,13,12,13,12,13,11,13,10,12,11,11,13,13,12,13,12,12,12,12,11,12,11,11,11,1,4,4,6,6,5,5,5,7,5,5,5,5,6,7,7,6,7,7,7,6,7,7,7,7,1,4,4,4,4,4,4,4,4,4,5,7,8,10,13,14,4,2,4,6,8,11,12,7,4,3,5,8,12,14,8,5,4,4,8,12,12,9,7,7,7,9,10,11,13,11,11,9,7,8,10,13,11,10,6,5,7,9,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,4,0,7,7,0,8,8,0,9,9,0,12,12,0,8,8,0,9,9,0,12,12,0,8,8,0,6,6,0,11,11,0,11,11,0,12,12,0,14,14,0,11,11,0,12,12,0,14,14,0,11,11,0,6,6,0,6,5,0,7,6,0,7,7,0,10,10,0,6,6,0,7,7,0,10,10,0,7,7,0,7,7,0,10,10,0,11,11,0,11,11,0,14,14,0,10,10,0,12,12,0,14,14,0,12,12,0,6,6,0,11,11,0,11,11,0,12,12,0,14,14,0,11,11,0,12,12,0,15,15,0,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,0,11,11,0,11,11,0,12,12,0,15,15,0,12,12,0,11,11,0,15,15,0,11,11,0,6,6,0,11,11,0,12,12,0,12,12,0,15,15,0,11,11,0,12,12,0,14,14,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,0,8,8,0,8,8,0,10,10,0,9,9,0,10,10,0,10,10,0,9,9,0,10,10,0,7,7,0,7,7,0,7,7,0,8,8,0,8,8,0,8,8,0,9,9,0,8,8,0,8,8,0,7,7,0,8,8,0,8,8,0,10,10,0,9,9,0,9,9,0,10,10,0,9,9,0,10,10,0,8,8,0,11,11,0,11,11,0,12,12,0,11,11,0,12,12,0,12,12,0,12,12,0,12,12,0,8,8,0,11,11,0,11,11,0,13,12,0,12,12,0,13,12,0,13,13,0,12,12,0,13,13,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,0,11,11,0,11,11,0,13,12,0,12,12,0,12,12,0,12,12,0,11,11,0,12,12,0,8,8,0,12,12,0,12,12,0,13,13,0,12,12,0,13,13,0,13,13,0,12,13,0,13,13,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,6,6,7,7,7,8,8,7,8,8,10,11,11,9,8,8,7,9,9,11,12,12,9,8,8,6,7,7,9,11,11,10,11,11,10,11,11,13,13,13,11,12,12,10,11,11,13,14,14,12,12,12,6,6,6,8,6,6,8,6,6,9,7,7,12,10,10,10,6,6,9,7,7,12,10,10,11,7,6,7,8,8,12,10,10,12,10,10,11,10,10,15,13,13,13,10,10,12,11,11,15,13,13,14,11,11,8,7,7,12,11,11,12,11,11,11,11,11,14,14,14,13,12,12,12,11,11,16,15,15,14,12,12,0,10,10,0,11,11,0,12,12,0,11,11,0,14,14,0,11,11,0,11,11,0,15,15,0,11,11,7,8,8,13,10,10,12,10,10,12,11,11,15,13,13,14,11,11,12,10,10,16,14,14,14,10,10,8,7,7,12,11,11,13,11,11,12,11,11,15,14,14,14,12,12,13,12,12,15,14,14,15,12,12,0,11,11,0,12,12,0,12,12,0,12,12,0,15,15,0,12,12,0,12,12,0,15,14,0,12,12,2,3,4,7,7,10,12,12,12,12,10,11,11,13,13,11,12,12,11,11,12,12,12,12,12,11,13,13,13,13,12,12,12,13,14,12,13,13,13,13,12,13,13,13,13,12,13,13,13,13,11,13,13,13,13,12,12,12,14,14,12,13,13,12,12,12,12,13,13,13,12,13,13,13,13,12,13,13,13,13,12,12,12,14,14,12,13,13,12,12,12,13,13,13,13,12,13,13,12,12,12,13,13,13,13,12,12,12,14,14,12,13,13,12,12,12,13,13,13,13,12,13,13,12,12,10,10,11,10,10,11,11,11,11,11,11,9,9,10,10,12,11,11,10,10,12,10,10,10,10,13,12,12,12,12,13,11,11,11,11,13,12,12,12,12,13,11,11,11,11,13,12,12,12,12,13,12,12,12,12,13,11,11,11,11,13,12,12,12,12,13,11,11,11,11,13,12,12,11,11,13,12,12,11,11,13,11,11,11,11,13,12,12,11,11,13,11,11,11,11,13,12,12,11,11,13,12,12,11,11,13,11,11,11,11,13,12,12,11,11,13,11,11,11,11,13,12,12,11,11,11,11,11,10,10,11,11,11,9,9,11,12,12,11,11,12,12,12,9,9,13,13,13,10,10,13,13,13,11,11,13,13,13,14,14,13,13,13,11,10,13,13,14,12,12,13,13,13,11,11,13,13,13,11,11,13,13,13,14,14,13,13,13,10,10,13,13,13,11,11,13,13,13,10,10,13,14,13,11,11,13,14,14,14,14,13,13,13,10,10,13,14,14,11,11,13,13,13,10,10,13,14,14,11,11,13,13,13,14,14,14,13,13,10,10,13,14,14,11,11,13,13,13,10,10,14,12,12,9,9,14,12,12,9,9,14,11,11,9,9,14,12,12,8,8,14,11,11,7,7,15,13,13,10,10,15,12,12,10,10,15,13,13,10,10,15,12,12,10,10,15,13,13,10,10,15,13,13,10,10,15,12,12,10,10,15,13,13,10,10,15,12,12,10,10,15,13,13,10,10,15,13,13,10,10,15,12,12,10,10,15,13,13,9,9,15,12,12,9,9,14,13,13,9,9,15,13,13,10,10,15,12,12,10,10,15,13,13,9,9,15,12,12,9,9,15,13,13,9,9,13,12,12,9,9,13,13,13,8,8,13,13,13,9,9,13,13,13,7,7,14,13,13,8,8,14,14,14,10,10,15,14,14,11,11,14,14,14,9,9,15,14,14,10,10,15,14,14,9,9,14,14,14,10,10,15,14,14,11,11,15,14,14,9,9,14,14,14,10,10,14,14,14,9,9,15,14,15,10,10,15,14,14,11,11,14,14,14,9,9,14,14,14,9,9,14,14,14,8,8,15,14,14,10,10,15,14,14,11,11,14,14,14,9,9,15,14,14,9,9,14,14,14,8,8,12,12,12,13,13,16,16,16,11,11,17,16,16,12,12,17,16,16,11,11,17,16,16,11,11,17,17,16,13,13,17,16,16,13,13,18,17,16,12,12,17,16,16,13,13,17,16,17,12,12,18,17,17,13,13,17,16,16,14,14,18,17,17,12,12,18,16,16,13,13,17,17,17,13,12,17,17,17,13,13,17,16,16,13,13,18,17,17,12,12,17,16,16,13,12,17,17,17,12,12,18,17,17,13,13,18,16,16,14,14,18,17,17,12,12,17,17,17,13,13,18,17,18,12,12,13,14,14,10,10,16,14,14,13,13,17,15,15,14,14,17,14,14,12,13,16,14,14,13,13,17,15,15,14,14,16,16,16,15,15,17,15,15,14,14,17,16,16,14,15,17,15,15,14,14,17,15,16,14,14,17,16,16,15,15,17,15,15,13,13,17,15,15,14,14,18,15,15,13,14,17,15,15,14,14,16,16,16,15,15,17,15,15,13,13,17,15,15,14,14,17,15,15,13,13,17,15,15,14,14,16,16,16,15,15,17,15,15,13,13,17,15,15,14,14,18,15,15,13,13,13,11,11,10,10,16,14,14,13,12,16,14,14,13,13,16,15,14,12,12,16,14,14,12,12,16,15,15,14,14,16,14,14,14,14,17,15,15,13,13,16,15,15,14,14,17,15,15,13,14,17,15,15,14,14,17,15,14,14,14,17,15,15,13,13,17,15,15,14,14,17,15,15,13,13,17,15,15,14,14,17,14,14,14,14,17,15,15,13,13,17,15,15,13,13,17,15,15,13,13,17,15,15,14,14,17,15,15,14,14,17,15,15,13,13,17,15,15,13,13,17,15,15,13,13,14,14,15,8,8,14,14,14,19,19,14,15,15,18,19,14,14,14,19,18,14,14,14,19,19,15,15,15,19,18,15,16,16,19,19,15,15,15,19,19,15,16,16,20,19,15,15,15,19,19,15,15,15,19,19,16,16,16,20,19,15,15,15,19,18,15,16,16,20,19,15,15,15,18,18,15,15,15,19,20,15,16,16,19,19,15,15,15,20,19,15,15,15,20,19,15,15,15,19,18,15,15,15,19,19,15,16,16,19,20,15,15,15,19,19,15,15,15,19,20,15,15,15,19,19,14,12,12,9,9,14,14,14,19,19,14,14,14,19,19,14,14,15,20,19,15,14,14,18,19,15,15,15,19,19,15,15,14,20,19,15,15,15,20,19,15,15,14,20,19,15,15,15,20,19,15,15,15,19,20,15,14,14,19,20,15,15,15,20,20,15,14,14,20,19,15,15,15,19,19,15,15,15,19,19,15,14,14,19,19,15,15,15,19,20,15,15,15,20,20,15,15,15,19,19,15,15,15,20,19,16,14,14,19,19,15,15,15,20,19,15,14,15,20,19,14,15,15,20,19,12,12,12,13,13,16,16,16,11,11,16,16,16,12,12,17,16,16,11,11,17,15,16,11,11,17,17,17,13,13,18,16,17,13,13,18,17,17,13,12,17,16,17,13,13,17,17,17,13,13,16,16,16,12,12,17,16,16,13,13,17,16,16,12,12,17,16,16,12,13,17,17,17,12,12,17,17,17,13,13,18,16,16,13,13,18,17,17,12,12,18,17,17,12,12,17,17,17,12,12,17,17,17,12,12,17,16,16,13,13,17,17,17,12,12,17,16,16,12,12,17,17,17,12,12,13,14,14,9,9,16,14,14,13,13,16,15,15,14,14,17,14,14,13,13,16,14,14,13,13,17,15,15,15,15,16,16,16,15,15,17,15,15,14,14,17,15,15,15,15,17,15,15,14,14,17,15,15,14,14,16,16,16,15,15,17,15,15,14,14,17,15,15,14,14,17,15,15,14,14,17,15,15,14,14,16,16,16,15,15,18,15,15,14,13,17,15,15,14,14,17,15,15,13,13,17,15,15,14,14,16,16,16,15,15,17,15,15,14,13,17,15,15,14,14,17,15,15,13,13,13,11,11,11,11,16,14,14,12,12,16,14,14,13,13,16,15,14,12,12,17,14,14,12,12,17,15,15,13,13,17,14,14,14,14,17,15,15,13,13,17,14,15,14,13,17,15,15,13,13,16,15,15,13,13,16,14,14,14,14,17,15,15,13,13,16,14,14,13,13,16,15,15,13,13,17,15,15,13,13,17,14,14,14,14,17,15,15,12,12,17,15,15,13,13,17,15,15,12,12,16,15,15,13,13,17,14,14,13,14,17,15,15,12,12,17,14,14,13,13,17,15,15,12,12,14,14,14,8,8,14,14,14,18,18,14,15,15,19,19,14,14,14,19,19,14,15,14,18,19,15,15,15,18,19,15,16,16,20,20,15,15,15,19,20,15,16,16,19,20,15,15,15,19,20,15,15,16,19,19,15,16,16,20,20,15,15,15,20,19,15,16,16,20,19,15,15,15,19,20,15,15,15,19,19,15,16,16,20,19,15,15,15,19,19,15,16,15,20,19,15,15,15,19,19,15,15,15,19,20,15,16,16,20,20,15,15,15,19,19,15,15,15,20,20,15,15,15,19,19,14,12,12,9,9,14,14,14,18,18,14,14,14,19,20,14,14,14,18,18,14,14,14,18,19,15,15,15,19,20,15,14,14,19,19,15,15,15,19,19,15,14,15,19,19,15,15,15,18,20,15,15,15,19,19,15,14,14,19,19,15,15,15,20,19,15,15,14,20,20,15,15,15,19,19,15,15,15,19,19,15,14,14,19,19,15,15,15,19,19,15,14,14,19,20,14,15,15,19,19,15,15,15,19,19,15,14,14,20,19,15,15,15,19,19,15,14,14,20,19,15,15,15,19,19,13,12,12,13,13,17,17,16,11,11,16,16,16,12,12,17,17,16,11,11,17,16,16,11,11,17,17,17,13,13,17,16,16,13,13,18,17,17,12,12,17,16,16,13,13,18,17,17,12,12,18,17,17,13,13,18,16,17,13,13,17,17,17,12,12,18,17,17,13,13,18,17,17,12,12,17,16,17,12,12,17,16,16,13,13,17,16,16,11,11,17,16,16,12,12,17,17,17,11,11,17,17,17,12,12,18,16,16,13,13,18,17,17,12,11,17,16,16,12,12,18,17,17,11,11,13,14,14,9,9,16,14,14,13,13,16,15,15,14,14,17,14,14,12,12,16,14,14,13,13,17,15,15,14,14,17,16,16,15,16,18,15,15,14,14,17,15,15,14,14,17,15,15,14,14,18,15,15,14,14,16,16,16,15,16,18,15,15,14,14,17,16,15,14,14,18,15,15,14,14,17,15,15,14,14,17,16,16,15,15,18,14,15,13,13,17,15,15,14,14,18,15,15,13,13,17,15,15,14,14,17,16,15,15,15,17,15,15,13,13,17,15,15,14,14,18,15,15,13,13,13,11,11,10,10,16,14,14,12,12,16,14,14,12,12,17,14,15,11,11,17,14,14,11,11,17,15,15,13,13,17,14,14,14,13,17,15,15,13,13,16,15,15,13,13,17,15,15,13,13,17,15,15,13,13,17,14,14,14,14,17,15,15,13,13,17,14,15,13,13,16,15,15,13,13,17,15,15,13,13,17,14,14,13,13,17,15,15,12,12,16,14,14,12,12,17,15,15,12,12,17,15,15,13,13,17,14,14,13,13,17,15,15,12,12,17,14,14,12,12,17,15,15,12,12,13,15,14,8,8,14,14,14,19,19,14,15,15,18,19,14,14,14,18,19,14,15,14,19,19,15,16,15,19,19,15,16,16,19,20,15,15,15,19,19,15,16,16,19,19,15,16,16,19,19,15,15,15,19,19,15,16,16,20,20,15,15,15,19,19,15,15,15,19,19,15,15,15,19,19,15,15,15,19,19,15,16,16,20,19,15,15,15,19,19,15,15,15,19,19,15,15,15,19,19,15,16,15,19,19,15,16,16,21,19,15,15,15,20,20,15,15,15,20,21,15,15,15,19,20,14,12,12,8,8,14,14,14,19,19,14,13,13,19,19,14,14,14,19,19,14,13,14,19,19,15,15,15,20,20,15,14,14,20,19,15,15,15,19,20,15,14,14,19,20,15,15,15,20,19,15,15,15,19,20,15,14,14,20,20,15,15,15,20,19,15,14,14,19,19,15,15,15,19,19,15,15,15,20,19,15,14,14,21,19,15,15,15,20,21,15,14,14,21,19,15,15,15,19,19,15,15,15,20,20,15,14,14,19,21,15,15,15,19,19,15,14,14,19,20,15,15,15,19,19,13,12,12,13,13,17,16,16,11,11,17,16,15,12,12,18,16,16,11,11,17,16,16,11,11,18,17,17,13,13,18,16,16,13,13,17,17,17,12,13,18,17,16,13,13,18,17,17,13,13,17,17,17,13,13,17,16,16,13,13,18,16,17,12,12,17,16,16,13,12,17,17,17,12,12,18,17,17,13,12,18,16,16,13,13,18,17,17,12,12,17,16,16,12,12,17,17,17,11,11,17,16,16,12,12,17,16,16,13,13,17,16,16,11,11,17,16,16,12,12,17,17,17,11,11,13,14,14,9,9,16,14,14,13,13,16,15,15,14,14,17,14,14,12,12,16,14,14,13,13,17,15,15,14,14,17,15,16,15,15,17,15,15,14,14,17,15,16,14,15,18,15,15,14,14,17,15,15,14,14,16,16,16,15,15,18,15,15,13,14,17,15,15,14,14,18,15,15,14,14,17,15,15,14,14,17,16,16,15,15,17,15,15,13,13,17,15,15,14,14,18,15,15,13,13,17,15,15,14,14,17,16,16,15,15,17,15,15,13,13,17,15,15,14,14,18,15,15,13,13,13,11,11,10,10,16,14,14,12,12,16,14,14,13,13,17,14,14,11,11,17,14,14,12,12,17,15,15,14,14,17,14,14,14,14,17,15,15,13,13,17,15,14,13,13,16,15,15,13,13,16,15,15,13,13,17,14,14,14,14,17,15,15,13,13,17,14,14,13,13,16,15,15,13,13,16,15,15,13,13,17,14,14,13,13,17,15,15,12,12,17,14,14,12,12,16,15,15,12,12,17,15,15,13,13,17,14,14,13,13,17,15,15,12,12,17,14,14,12,12,16,15,15,12,12,14,14,14,8,8,14,14,14,18,18,14,15,15,19,18,14,14,14,18,18,14,14,14,18,19,15,16,15,19,19,15,17,16,20,20,15,15,15,19,19,15,16,16,19,19,15,15,15,19,19,15,16,15,18,19,15,16,16,20,20,15,15,15,19,19,15,16,16,19,20,15,15,15,19,19,15,15,16,19,19,15,16,16,20,20,15,15,15,19,19,15,15,15,19,20,15,15,15,19,19,15,15,15,19,19,15,16,16,20,20,15,15,15,19,20,15,16,16,20,20,15,15,15,19,19,13,12,12,8,8,14,14,14,19,20,14,14,14,19,19,14,14,14,18,19,14,14,14,19,20,15,15,15,19,20,15,14,14,21,20,15,15,15,20,20,15,15,14,19,19,15,15,15,19,19,15,15,15,19,19,15,14,14,19,20,15,15,15,19,20,15,14,14,19,19,15,15,15,19,19,15,15,15,19,19,16,14,14,19,19,15,15,15,20,20,15,14,14,21,19,15,15,15,19,19,15,15,15,19,20,16,14,14,19,20,15,15,15,19,19,15,14,14,19,19,15,15,15,20,19,2,6,6,14,14,6,7,7,14,14,7,7,7,14,14,0,13,13,16,16,0,13,13,15,14,7,8,8,15,15,9,10,10,16,16,9,8,8,15,15,0,13,13,17,16,0,13,13,15,16,8,8,8,15,15,12,11,11,16,16,9,8,8,14,14,0,13,13,17,18,0,13,13,15,15,0,14,14,16,16,0,0,0,19,18,0,12,12,16,15,0,15,16,0,20,0,14,14,16,16,0,14,14,17,17,0,0,0,19,18,0,12,12,15,15,0,17,17,0,20,0,14,14,16,16,5,6,7,12,12,9,9,9,14,14,10,10,10,14,14,0,21,21,18,17,0,20,20,18,17,9,10,10,14,14,12,12,12,16,16,12,10,10,14,14,0,20,19,18,17,0,0,20,17,18,11,10,10,14,14,14,13,13,18,18,13,11,11,14,14,0,20,20,17,18,0,21,21,17,17,0,21,0,18,18,0,0,0,0,0,0,20,19,16,17,0,0,0,19,19,0,0,0,18,18,0,21,21,18,18,0,0,0,0,0,0,20,20,16,17,0,0,0,21,21,0,0,0,18,19,6,6,6,13,12,8,6,6,11,11,8,6,6,13,13,0,9,9,11,11,0,11,10,14,14,9,7,7,13,13,11,9,9,13,13,10,6,6,13,13,0,10,10,14,15,0,10,10,13,13,9,7,7,13,13,13,10,9,13,13,10,6,6,13,13,0,10,10,15,14,0,10,10,13,13,0,11,11,15,15,0,19,20,17,17,0,9,9,13,13,0,13,13,20,20,0,11,11,13,13,0,11,11,15,15,0,19,19,17,17,0,10,10,13,13,0,15,15,20,20,0,12,12,13,13,0,10,10,12,12,0,11,11,15,15,0,11,11,15,15,0,15,15,20,0,0,16,16,0,21,0,11,11,15,15,0,14,14,18,17,0,11,11,15,15,0,15,16,19,20,0,16,16,21,21,0,12,12,15,15,0,15,14,18,18,0,11,11,16,16,0,15,15,21,21,0,16,15,0,0,0,16,16,21,0,0,0,0,0,0,0,14,14,20,20,0,18,18,0,0,0,16,17,21,0,0,16,16,21,21,0,0,0,0,0,0,15,15,21,21,0,20,19,0,21,0,17,17,0,0,0,10,10,12,11,0,10,10,10,11,0,11,11,12,12,0,11,11,9,9,0,13,13,11,12,0,11,11,12,12,0,13,13,12,12,0,10,10,12,12,0,12,12,13,13,0,12,12,12,12,0,11,11,12,12,0,13,13,12,12,0,10,10,12,12,0,13,13,14,14,0,12,12,12,12,0,14,14,14,13,0,19,20,15,15,0,12,11,12,12,0,15,15,21,20,0,13,13,11,11,0,13,13,13,13,0,19,0,15,15,0,12,12,12,12,0,17,16,19,0,0,13,13,12,12,7,7,7,16,16,11,9,9,15,15,12,9,9,16,16,0,13,13,15,14,0,14,14,17,16,10,9,9,16,16,14,11,11,17,16,12,9,8,15,15,0,13,13,18,18,0,13,13,15,15,12,10,10,18,17,15,12,12,17,17,14,9,9,16,16,0,13,13,18,19,0,14,13,17,16,0,14,14,18,18,0,0,0,20,21,0,12,12,16,16,0,16,16,20,21,0,14,14,17,16,0,14,14,18,19,0,0,0,19,21,0,13,13,17,17,0,17,17,0,21,0,15,15,16,16,8,7,7,14,14,11,10,10,15,15,12,10,10,15,15,0,20,20,18,18,0,0,0,17,17,11,10,10,16,16,14,12,12,18,17,14,11,11,15,15,0,20,21,18,18,0,0,19,18,17,12,10,10,16,16,17,14,14,19,19,14,11,11,15,15,0,21,21,19,19,0,21,20,19,18,0,21,0,18,19,0,0,0,0,0,0,20,20,18,17,0,21,0,0,0,0,0,0,19,18,0,0,0,18,19,0,0,0,0,0,0,0,21,17,18,0,0,0,0,21,0,0,21,18,19,11,9,9,14,14,13,10,10,13,13,13,11,11,15,15,0,13,13,12,12,0,15,15,16,16,13,10,10,15,15,16,12,12,15,15,15,10,10,15,15,0,14,13,16,15,0,14,13,15,15,13,10,10,15,15,18,14,14,15,15,15,10,10,14,15,0,14,14,16,16,0,14,14,16,15,0,15,15,17,16,0,21,0,18,18,0,12,13,15,15,0,16,16,0,0,0,14,14,15,15,0,15,15,16,16,0,21,20,18,18,0,13,13,15,15,0,19,18,0,0,0,15,15,15,15,0,11,11,13,13,0,12,12,16,16,0,12,12,16,16,0,15,16,20,0,0,16,17,0,0,0,12,12,16,16,0,14,14,18,18,0,11,11,16,17,0,15,15,20,0,0,16,16,0,0,0,12,12,16,16,0,15,15,19,19,0,11,11,17,17,0,16,16,21,0,0,16,16,0,0,0,17,17,20,20,0,0,0,0,0,0,15,15,20,0,0,17,18,0,0,0,17,17,0,0,0,16,16,0,21,0,0,0,0,0,0,15,15,21,0,0,19,18,0,0,0,18,17,0,0,0,11,11,14,14,0,11,11,15,15,0,12,12,16,16,0,13,13,14,14,0,14,14,17,17,0,12,12,16,16,0,14,14,16,16,0,11,11,16,15,0,13,13,16,17,0,13,13,16,16,0,12,12,15,16,0,15,14,16,16,0,11,11,15,15,0,14,14,17,17,0,13,13,16,16,0,15,14,18,18,0,21,0,19,19,0,13,13,15,15,0,16,16,20,20,0,14,14,16,15,0,14,14,17,17,0,21,0,20,18,0,13,13,15,15,0,17,17,0,0,0,14,14,16,15,8,8,8,16,16,12,9,9,16,16,13,9,9,16,16,0,14,14,18,17,0,14,14,16,17,12,10,10,18,17,14,11,11,18,18,14,9,9,16,16,0,13,13,18,18,0,13,13,17,16,12,9,9,16,17,17,13,13,16,16,14,9,9,15,15,0,14,14,20,20,0,13,13,15,15,0,15,14,18,18,0,0,0,20,21,0,12,13,16,17,0,16,16,20,21,0,14,14,16,17,0,14,14,18,17,0,0,0,20,21,0,13,13,16,16,0,19,17,0,21,0,14,15,16,16,8,7,7,14,13,12,10,10,15,15,13,10,10,15,15,0,21,21,18,19,0,20,21,18,18,12,10,10,16,15,15,12,12,17,17,14,11,11,15,15,0,21,21,19,18,0,0,21,17,18,13,11,11,15,15,16,13,13,18,19,15,11,11,15,14,0,21,0,19,19,0,0,21,18,18,0,0,21,19,19,0,0,0,0,0,0,20,19,17,17,0,0,0,21,0,0,21,0,18,19,0,0,20,20,19,0,0,0,0,0,0,21,20,18,17,0,0,0,0,20,0,0,0,18,19,0,10,10,15,14,0,11,11,14,14,0,11,11,15,16,0,14,14,15,15,0,15,15,16,16,0,11,11,16,16,0,14,13,16,16,0,11,11,15,15,0,14,14,16,16,0,14,14,15,15,0,11,11,15,15,0,13,13,15,15,0,11,11,15,15,0,15,15,18,17,0,14,14,15,15,0,15,16,18,18,0,0,0,20,20,0,14,13,16,15,0,17,17,21,0,0,15,15,15,15,0,16,15,17,17,0,0,0,19,19,0,13,13,15,15,0,20,19,0,0,0,15,15,15,15,0,11,11,13,13,0,12,12,16,16,0,12,12,16,16,0,15,15,21,21,0,17,16,0,0,0,12,12,16,16,0,14,14,17,17,0,11,11,16,16,0,15,15,0,0,0,16,16,21,0,0,12,12,17,16,0,14,15,20,20,0,11,11,16,16,0,15,15,0,20,0,16,16,0,21,0,16,17,21,0,0,0,0,0,0,0,15,15,0,21,0,18,18,0,0,0,17,16,0,0,0,17,17,21,0,0,0,0,0,0,0,15,15,0,20,0,19,20,21,0,0,17,18,0,0,0,12,12,15,15,0,12,12,15,15,0,12,12,16,16,0,13,13,15,15,0,15,15,17,17,0,13,12,17,16,0,14,14,17,16,0,11,11,16,16,0,14,14,17,17,0,14,14,17,17,0,12,12,16,16,0,15,15,17,17,0,11,11,16,16,0,14,14,17,17,0,14,14,16,16,0,15,15,18,17,0,0,0,19,0,0,13,13,16,16,0,16,16,0,21,0,14,14,16,16,0,15,15,18,17,0,0,0,19,19,0,13,13,16,16,0,18,17,0,21,0,14,15,16,16,0,11,11,16,16,0,13,13,17,17,0,13,13,17,17,0,16,16,16,17,0,16,16,18,18,0,12,12,17,17,0,16,15,18,17,0,12,12,16,16,0,16,15,19,19,0,16,15,17,17,0,12,12,17,18,0,16,16,18,18,0,12,12,16,16,0,16,16,19,19,0,15,16,17,17,0,15,16,18,18,0,0,0,20,20,0,13,13,16,16,0,18,18,21,20,0,15,15,16,16,0,16,16,19,18,0,0,0,19,20,0,14,14,17,17,0,19,19,0,21,0,15,16,16,16,0,9,9,14,14,0,13,13,15,15,0,14,14,15,15,0,0,21,19,19,0,0,21,18,18,0,12,12,15,15,0,15,15,18,18,0,14,13,15,15,0,21,21,18,19,0,21,20,18,18,0,13,13,16,16,0,17,17,18,19,0,14,14,15,15,0,0,21,19,19,0,21,20,18,19,0,20,20,19,19,0,0,0,0,0,0,19,20,17,17,0,0,0,21,21,0,21,0,18,20,0,21,0,18,21,0,0,0,0,0,0,21,21,19,18,0,0,0,0,0,0,0,0,19,19,0,18,18,15,15,0,18,20,17,16,0,20,0,17,17,0,21,0,17,17,0,21,20,19,20,0,19,19,16,16,0,21,21,17,18,0,19,19,17,17,0,20,21,21,21,0,20,20,18,18,0,19,19,16,16,0,0,21,18,19,0,18,19,16,17,0,21,21,19,20,0,21,19,18,18,0,21,20,19,21,0,0,0,20,21,0,19,19,17,16,0,0,0,0,0,0,21,20,17,17,0,20,21,19,18,0,0,0,0,21,0,19,18,16,17,0,0,0,0,0,0,20,20,17,17,0,11,11,14,14,0,13,13,16,16,0,13,13,16,16,0,17,17,21,0,0,17,18,0,0,0,12,12,16,16,0,15,15,17,18,0,12,12,16,16,0,16,16,0,20,0,17,17,0,21,0,12,12,17,17,0,16,16,19,20,0,12,12,17,17,0,17,17,0,20,0,17,17,0,0,0,17,17,21,0,0,0,0,0,0,0,15,15,0,20,0,19,19,0,0,0,18,18,0,0,0,17,17,0,0,0,0,0,0,0,0,15,15,0,0,0,20,19,0,0,0,19,18,0,0,0,14,14,21,19,0,16,16,20,21,0,16,16,20,20,0,17,17,20,0,0,17,17,20,20,0,15,15,20,20,0,19,18,20,0,0,15,15,20,20,0,17,18,21,20,0,17,17,20,21,0,15,15,19,19,0,19,18,21,21,0,15,15,19,20,0,17,18,0,0,0,17,17,20,20,0,17,18,20,21,0,0,0,0,0,0,15,15,20,20,0,19,19,0,0,0,17,17,19,21,0,17,17,0,21,0,0,0,0,21,0,15,15,20,19,0,0,20,0,0,0,17,17,21,20,0,12,12,16,16,0,14,14,17,17,0,13,13,17,17,0,16,16,17,18,0,17,16,18,18,0,13,13,18,17,0,15,16,19,18,0,13,13,16,16,0,16,16,19,19,0,16,16,17,17,0,13,12,17,17,0,16,16,18,17,0,12,12,16,16,0,17,17,19,18,0,16,15,16,16,0,16,17,18,19,0,0,0,20,20,0,14,14,17,16,0,18,18,21,0,0,16,16,16,16,0,16,16,18,17,0,0,21,21,21,0,14,14,16,16,0,21,20,21,0,0,16,16,16,16,0,10,10,14,14,0,14,14,15,16,0,14,14,15,15,0,0,21,18,18,0,0,21,18,19,0,13,13,16,16,0,16,16,18,17,0,14,14,15,15,0,20,0,18,18,0,21,0,18,17,0,13,13,16,15,0,17,17,19,19,0,14,14,15,15,0,20,20,18,19,0,0,0,18,17,0,0,21,18,18,0,0,0,0,0,0,20,21,18,17,0,0,0,0,0,0,0,0,19,19,0,0,21,18,18,0,0,0,0,0,0,21,0,18,17,0,0,0,0,21,0,0,0,19,20,0,19,19,16,16,0,0,21,18,17,0,21,0,18,18,0,20,0,19,18,0,21,20,19,19,0,21,19,17,18,0,0,21,19,19,0,21,19,18,18,0,21,0,20,18,0,0,21,18,18,0,20,21,17,17,0,21,0,18,18,0,21,19,17,17,0,21,0,0,20,0,0,20,17,18,0,0,0,19,20,0,0,0,20,19,0,19,21,17,18,0,21,0,0,0,0,21,21,18,17,0,0,21,18,18,0,0,0,0,21,0,20,19,16,17,0,0,0,0,0,0,21,20,17,17,0,11,11,13,13,0,13,13,16,16,0,13,13,16,16,0,17,17,0,21,0,18,19,21,0,0,12,12,16,16,0,15,15,19,18,0,13,13,16,16,0,16,17,21,19,0,17,17,21,21,0,13,13,16,16,0,16,16,20,18,0,13,13,16,16,0,17,17,0,0,0,18,18,0,0,0,18,17,0,20,0,0,0,0,0,0,15,15,21,21,0,19,18,0,0,0,17,17,21,21,0,17,17,0,0,0,0,0,0,0,0,15,15,20,21,0,20,20,0,0,0,19,19,0,0,0,14,15,21,19,0,16,16,0,21,0,17,16,21,21,0,17,18,21,20,0,18,18,0,21,0,16,16,0,20,0,19,19,0,0,0,16,15,0,20,0,18,18,0,0,0,17,17,0,21,0,16,16,20,20,0,20,19,0,0,0,15,16,21,22,0,18,18,0,0,0,18,17,0,0,0,18,18,0,0,0,0,0,0,0,0,16,16,21,20,0,19,20,0,0,0,18,17,21,0,0,17,18,0,0,0,0,0,0,0,0,16,16,0,20,0,0,20,0,0,0,18,18,22,0,2,3,3,3,3,3,3,1,6,6,7,8,8,7,8,8,7,9,8,10,11,11,9,8,8,7,8,8,11,11,11,9,8,8,6,7,7,10,10,10,10,10,10,10,10,10,14,13,13,12,11,11,10,10,10,14,14,13,12,11,11,6,6,6,8,5,5,8,7,7,9,7,7,11,10,10,9,7,7,9,7,7,12,10,10,10,7,7,7,8,8,12,11,10,12,10,10,11,10,10,15,13,13,13,10,10,11,10,10,17,14,13,13,10,10,7,7,7,12,11,12,12,11,11,12,11,11,16,14,14,13,12,12,12,11,11,17,15,14,14,12,12,10,9,9,13,11,11,13,11,11,13,11,11,17,14,13,14,11,11,12,11,11,16,15,14,14,11,11,7,8,8,12,11,11,12,10,10,12,10,10,15,13,13,14,11,10,12,10,10,16,14,14,14,10,10,8,7,7,12,11,11,12,11,11,12,11,11,17,14,14,14,12,12,12,11,11,16,15,15,14,12,12,10,10,10,13,11,11,13,11,11,13,11,12,16,14,14,14,11,11,13,12,11,16,15,15,14,11,11,2,7,7,7,7,7,7,7,7,7,8,8,9,8,8,8,7,7,8,8,8,9,8,8,9,7,7,6,6,6,9,8,7,9,7,7,9,8,8,10,8,8,10,8,8,10,8,8,10,8,8,10,8,8,7,6,6,9,6,6,9,7,7,9,7,7,10,8,8,9,6,6,9,7,7,10,8,8,9,7,7,7,8,8,11,9,9,11,9,9,11,8,9,12,9,9,12,8,8,11,9,9,12,9,9,12,8,8,8,7,7,10,9,9,10,10,9,10,9,9,11,10,10,11,9,9,11,9,9,11,10,11,11,9,9,10,8,8,11,9,9,10,9,9,11,9,9,11,10,10,11,9,9,11,9,9,11,10,10,11,9,9,9,8,8,11,9,9,12,9,9,11,9,9,12,9,9,12,8,8,12,9,9,12,9,9,12,8,8,9,7,7,11,9,9,11,10,10,11,9,9,11,11,11,11,9,9,11,10,10,11,11,11,11,9,9,10,9,9,11,9,9,11,10,10,11,9,9,11,10,10,11,9,9,11,9,10,11,10,10,11,9,9,1,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,1,3,2,5,4,7,7,8,8,9,9,10,10,11,11,12,12,13,13,13,14,16,16,16,16,3,4,4,5,4,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,3,7,7,9,13,16,3,2,4,6,10,13,17,7,4,4,6,9,12,14,7,6,6,5,7,9,12,10,10,9,6,6,9,12,14,14,13,9,8,10,11,18,18,15,13,11,10,11,1,3,2,3,1,4,4,7,7,8,8,9,9,10,10,11,11,4,6,5,8,6,9,8,10,9,10,10,11,10,5,5,6,6,8,8,9,9,10,10,10,10,11,7,8,8,9,8,10,9,10,9,11,10,11,10,7,8,8,8,10,9,10,10,10,10,11,10,11,9,10,10,11,11,11,11,12,11,12,11,12,11,9,10,10,11,11,11,11,11,11,11,12,11,12,11,11,11,12,12,12,12,12,12,12,12,12,11,11,12,11,12,12,12,12,12,12,12,12,11,12,12,12,12,12,13,12,13,12,12,12,12,12,12,12,12,12,13,13,13,13,12,13,12,12,12,12,12,13,13,12,13,12,13,12,13,12,12,12,12,13,13,13,13,13,13,12,12,12,12,12,11,12,1,4,4,6,6,5,5,5,6,6,5,6,5,6,6,6,6,7,7,7,6,7,6,7,7,1,4,4,4,4,4,4,4,4,4,4,12,9,8,12,15,17,4,2,11,6,5,9,13,15,11,7,8,7,7,10,14,13,8,5,7,5,5,8,12,12,8,4,7,4,3,6,11,12,11,8,9,7,6,8,11,12,15,13,14,12,9,7,10,13,16,12,17,12,7,5,8,11,1,2,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+351400);
/* memory initializer */ allocate([1,4,4,0,0,0,8,8,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,11,11,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,11,11,0,0,0,0,0,0,0,0,11,11,0,0,0,0,0,0,0,0,10,10,0,0,0,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,6,6,0,0,0,7,7,0,0,0,8,8,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,8,8,0,0,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,0,0,0,8,8,0,0,0,10,10,0,0,0,9,9,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,11,11,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,11,10,0,0,0,0,0,0,0,0,11,11,0,0,0,0,0,0,0,0,10,10,0,0,0,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,0,0,0,10,10,0,0,0,11,11,0,0,0,12,12,0,0,0,0,0,0,0,0,11,11,0,0,0,0,0,0,0,0,10,10,0,0,0,13,13,0,0,0,0,0,0,0,0,13,13,0,0,0,0,0,0,0,0,12,12,0,0,0,13,13,0,0,0,0,0,0,0,0,13,13,0,0,0,0,0,0,0,0,12,12,0,0,0,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,0,0,11,11,0,0,0,12,12,0,0,0,12,12,0,0,0,0,0,0,0,0,13,13,0,0,0,0,0,0,0,0,12,11,0,0,0,12,12,0,0,0,0,0,0,0,0,13,13,0,0,0,0,0,0,0,0,12,12,0,0,0,13,13,0,0,0,0,0,0,0,0,13,13,0,0,0,0,0,0,0,0,12,12,0,0,0,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,0,0,0,10,10,0,0,0,11,11,0,0,0,12,12,0,0,0,0,0,0,0,0,13,13,0,0,0,0,0,0,0,0,12,12,0,0,0,13,13,0,0,0,0,0,0,0,0,11,11,0,0,0,0,0,0,0,0,10,10,0,0,0,13,13,0,0,0,0,0,0,0,0,14,13,0,0,0,0,0,0,0,0,13,12,0,0,0,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,0,0,11,11,0,0,0,12,12,0,0,0,12,12,0,0,0,0,0,0,0,0,12,12,0,0,0,0,0,0,0,0,12,12,0,0,0,13,13,0,0,0,0,0,0,0,0,13,13,0,0,0,0,0,0,0,0,12,12,0,0,0,12,12,0,0,0,0,0,0,0,0,13,13,0,0,0,0,0,0,0,0,12,12,0,0,0,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,0,0,11,11,0,0,0,12,12,0,0,0,12,12,0,0,0,0,0,0,0,0,12,12,0,0,0,0,0,0,0,0,11,11,0,0,0,14,14,0,0,0,0,0,0,0,0,13,13,0,0,0,0,0,0,0,0,12,12,0,0,0,12,13,0,0,0,0,0,0,0,0,12,12,0,0,0,0,0,0,0,0,11,11,0,0,0,14,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,0,0,11,11,0,0,0,12,12,0,0,0,13,13,0,0,0,0,0,0,0,0,13,13,0,0,0,0,0,0,0,0,12,12,0,0,0,13,13,0,0,0,0,0,0,0,0,12,12,0,0,0,0,0,0,0,0,12,12,0,0,0,14,14,0,0,0,0,0,0,0,0,14,14,0,0,0,0,0,0,0,0,12,12,0,0,0,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,5,5,6,7,7,0,8,8,6,9,9,8,11,11,0,8,8,0,9,9,0,12,12,0,8,8,5,7,7,7,10,10,0,12,12,8,11,11,9,12,12,0,11,12,0,12,12,0,15,15,0,12,12,0,6,6,0,6,6,0,7,7,0,7,7,0,10,10,0,7,7,0,8,8,0,11,11,0,7,7,6,7,7,10,9,9,0,11,10,10,9,9,12,12,12,0,10,10,0,11,11,0,13,13,0,11,11,7,6,6,10,10,10,0,11,11,11,11,11,12,12,12,0,11,11,0,12,12,0,15,15,0,11,11,0,11,11,0,11,11,0,12,12,0,12,12,0,14,14,0,12,12,0,12,12,0,15,15,0,11,11,0,8,8,0,10,10,0,11,11,0,11,11,0,12,12,0,12,12,0,11,11,0,15,15,0,11,11,0,6,6,0,10,10,0,12,12,0,10,10,0,13,13,0,12,12,0,13,13,0,14,14,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,0,8,8,0,8,8,0,9,9,0,9,9,0,9,9,0,9,9,0,9,9,0,8,8,0,6,6,0,7,7,0,7,7,0,8,8,0,8,8,0,8,8,0,8,8,0,8,8,0,8,8,0,6,6,0,6,6,0,6,6,0,8,8,0,9,9,0,7,7,0,8,8,0,9,9,0,6,6,0,8,8,0,9,9,0,9,9,0,10,10,0,10,10,0,10,10,0,10,10,0,11,11,0,9,9,0,7,7,0,10,10,0,10,10,0,12,11,0,12,12,0,11,11,0,11,11,0,12,12,0,10,10,0,7,7,0,10,10,0,10,10,0,12,12,0,11,12,0,11,11,0,11,11,0,11,11,0,10,10,0,8,8,0,9,9,0,9,9,0,10,10,0,10,10,0,10,9,0,10,10,0,10,10,0,9,9,0,6,6,0,10,10,0,10,10,0,11,11,0,12,12,0,11,11,0,11,11,0,12,12,0,11,11,0,7,7,0,9,9,0,9,9,0,11,11,0,11,11,0,10,10,0,10,10,0,11,11,0,9,9,1,6,6,6,7,7,7,8,8,7,8,8,10,11,11,9,8,8,7,8,8,11,11,11,9,8,8,6,7,7,9,11,11,9,11,11,10,11,11,12,13,13,11,12,12,10,11,11,13,14,14,12,12,12,6,6,6,8,6,6,8,7,7,9,7,7,11,10,10,10,6,6,9,7,7,12,10,10,11,6,7,7,7,7,11,10,10,12,10,10,11,10,10,14,13,13,13,10,10,12,11,11,15,13,13,14,10,10,8,7,7,12,11,11,12,11,11,11,11,11,14,14,14,13,12,12,12,11,11,15,15,15,13,12,12,0,10,10,0,11,11,0,11,11,0,11,11,0,14,14,0,11,11,0,11,11,0,15,15,0,11,11,7,8,8,12,10,10,12,10,10,12,11,11,15,13,13,14,11,11,12,10,10,16,14,14,14,10,10,8,7,7,12,11,11,12,11,11,12,11,11,16,14,14,14,12,12,13,12,12,15,14,14,15,12,12,0,11,11,0,12,12,0,12,12,0,12,12,0,15,15,0,12,12,0,12,12,0,14,14,0,12,12,3,4,4,8,8,11,9,9,12,12,11,10,10,12,12,12,10,10,11,11,12,12,12,12,12,12,11,11,13,13,12,12,12,13,13,12,10,10,12,12,12,11,11,13,13,12,13,13,13,13,12,11,11,13,13,12,12,12,13,13,12,10,10,12,12,12,11,11,13,13,12,13,13,12,12,12,11,11,13,13,12,13,13,13,13,12,11,11,12,12,12,11,11,12,12,12,13,13,12,12,12,13,13,13,13,12,13,13,13,13,13,13,13,12,12,12,13,13,13,13,12,13,13,12,12,11,8,8,10,10,12,11,11,11,11,12,10,10,10,10,13,11,11,10,10,13,11,11,10,10,13,12,12,12,12,13,11,11,11,11,13,12,12,11,11,13,12,12,11,11,13,12,12,12,11,13,12,12,12,12,13,11,11,11,11,13,12,12,11,11,13,11,12,11,11,13,12,12,11,11,14,12,12,11,11,13,11,11,11,11,14,12,12,11,11,13,11,12,10,10,14,12,12,11,11,14,12,12,11,11,14,11,11,11,11,14,12,12,11,11,13,12,12,11,11,14,12,12,11,11,11,8,8,10,10,12,7,7,10,10,12,9,9,11,11,13,9,9,9,9,13,13,13,10,10,13,9,9,12,12,13,13,13,12,12,13,9,8,11,11,13,10,10,12,12,14,13,13,11,11,13,9,9,11,11,13,13,13,12,12,13,9,9,10,10,13,10,10,11,11,13,13,13,10,10,14,10,10,11,11,14,14,14,12,12,13,9,9,10,10,13,10,10,11,11,14,13,14,10,10,14,14,14,11,12,14,14,14,14,14,14,13,13,10,10,13,14,14,11,11,14,14,14,10,10,14,9,9,9,9,14,9,9,9,9,14,10,10,9,9,14,10,10,8,8,14,11,11,8,8,15,11,11,10,10,15,12,12,10,10,15,10,10,10,10,15,11,11,10,10,15,13,13,10,10,15,11,11,10,10,15,12,12,10,10,15,10,10,10,10,15,11,11,10,10,15,13,13,10,10,15,11,11,10,10,15,12,12,10,10,15,11,11,9,9,15,11,11,9,9,15,13,13,9,9,15,13,13,10,10,15,12,12,10,10,15,13,13,10,10,15,13,12,9,9,15,13,13,9,9,14,12,12,9,9,14,13,13,9,9,14,13,13,9,9,14,13,13,7,7,14,13,13,8,8,15,14,14,10,10,15,14,14,10,10,15,14,14,10,10,15,14,14,10,10,15,14,14,9,9,15,14,14,10,10,15,14,14,10,10,14,14,14,9,9,15,14,14,10,10,14,14,14,9,9,15,14,14,10,10,15,14,14,10,10,14,14,14,9,9,14,14,14,9,9,14,14,14,8,8,15,14,14,10,10,15,14,14,11,11,15,14,14,9,9,15,14,14,9,9,14,14,14,8,8,13,9,9,12,12,17,11,11,12,12,17,12,12,12,12,17,12,12,11,11,18,15,15,12,12,17,12,12,12,12,17,14,15,13,13,17,12,12,12,12,17,13,13,12,13,17,15,15,12,12,18,13,13,13,13,18,15,15,13,13,18,12,12,12,12,18,13,13,13,13,18,15,15,12,12,18,13,13,12,12,18,15,15,13,13,18,13,13,12,12,17,13,13,12,12,17,15,15,12,12,18,15,15,13,13,18,15,15,13,14,18,15,16,12,12,18,15,15,12,12,18,16,16,12,12,13,8,8,10,10,14,15,14,11,11,14,15,15,12,12,15,14,14,12,11,15,15,15,12,12,15,15,15,12,12,15,15,15,13,13,15,15,15,12,12,15,15,15,13,13,15,15,15,13,13,15,15,15,13,13,15,15,16,13,13,15,15,15,12,12,15,15,15,13,13,15,15,15,13,13,15,15,15,13,13,15,15,15,13,13,15,15,14,12,12,15,15,15,12,12,16,15,14,12,12,16,15,15,13,13,16,16,16,13,13,16,15,15,12,12,15,15,15,13,13,15,15,15,12,12,13,12,12,10,10,14,14,14,11,11,15,14,14,12,12,15,14,14,11,11,15,14,14,11,11,15,15,15,13,13,15,14,14,13,13,15,15,15,12,12,15,14,15,13,13,16,15,15,12,12,15,15,15,13,13,16,14,14,13,13,15,15,15,12,12,15,15,15,13,13,16,15,15,12,12,16,15,15,12,12,16,14,14,13,13,15,15,15,11,11,15,15,15,12,12,16,15,15,11,11,16,15,15,13,13,16,14,15,14,14,16,15,15,12,12,16,15,14,12,12,16,15,15,12,12,14,10,10,9,9,14,11,11,12,12,14,12,12,13,13,14,12,12,12,12,15,14,14,13,13,15,13,13,14,14,15,14,14,15,15,15,12,12,13,13,15,13,13,14,14,15,14,14,13,13,15,13,13,13,14,15,14,14,15,15,15,12,12,13,13,15,13,13,14,14,15,14,14,13,13,15,13,13,14,14,15,14,14,15,15,15,13,13,12,12,15,13,13,13,13,15,14,14,13,12,15,15,15,14,15,15,15,14,20,20,15,14,14,13,13,15,14,14,13,13,15,14,14,13,13,14,12,12,9,9,14,14,14,12,12,14,13,13,12,13,14,14,14,12,12,15,14,14,12,12,15,14,14,14,13,15,14,14,14,14,15,14,14,13,13,15,14,14,13,13,15,15,15,14,14,15,14,14,13,13,15,14,14,14,14,15,14,14,13,13,15,14,14,13,13,15,15,15,15,14,15,15,15,13,13,15,14,14,14,14,15,14,14,13,13,15,14,14,13,13,14,15,15,14,14,15,15,15,14,14,15,14,14,14,14,15,15,15,14,14,15,14,14,13,14,15,15,15,14,14,13,10,10,12,12,17,11,11,12,12,17,12,12,12,12,17,12,12,11,11,17,15,15,12,11,18,13,13,13,13,18,15,15,13,13,17,12,12,12,12,18,13,13,13,13,17,15,15,12,12,17,12,12,12,12,17,15,15,13,13,17,12,12,12,12,17,13,13,12,12,17,15,15,12,12,18,14,13,12,12,18,15,15,13,13,18,13,13,12,12,18,13,13,12,12,18,16,16,12,12,18,16,16,12,12,18,15,15,13,13,18,16,16,12,12,17,15,15,12,12,17,16,16,12,12,13,8,8,10,10,14,14,15,12,12,14,15,15,12,12,15,14,14,12,12,15,15,14,12,12,15,15,15,13,13,15,15,15,13,13,15,15,15,12,12,16,15,15,13,13,16,15,15,13,13,15,15,15,12,12,15,15,15,14,14,15,15,15,12,12,15,15,15,13,13,16,15,15,13,13,15,15,15,13,13,16,15,15,13,13,15,15,14,12,12,15,15,15,12,12,16,14,15,13,13,16,15,15,13,13,15,16,15,13,13,16,15,14,13,13,16,15,15,13,13,16,15,15,13,13,13,12,12,11,11,14,14,14,11,11,14,14,14,12,12,15,14,14,11,11,16,14,14,11,11,15,15,15,12,13,16,14,14,13,13,15,15,15,12,12,15,14,14,13,13,16,15,15,12,12,15,15,15,12,12,15,14,14,13,13,15,15,15,12,12,15,14,14,12,12,16,15,15,12,12,16,15,15,12,12,16,14,14,13,13,15,15,15,11,11,15,15,14,12,12,16,15,15,11,11,16,15,15,12,12,16,14,14,13,13,16,15,15,11,11,16,14,14,12,12,16,15,15,11,11,14,10,10,9,9,14,11,11,12,12,14,12,12,13,14,14,12,12,12,12,14,14,14,13,13,15,13,13,14,14,15,14,14,15,15,15,12,12,13,13,15,13,13,14,14,15,15,15,14,14,15,13,13,14,14,15,15,15,15,15,15,12,12,13,13,15,13,13,14,14,15,14,14,13,13,15,13,13,14,14,15,14,14,15,15,15,12,12,13,13,15,13,13,13,13,14,14,14,13,13,15,15,15,14,15,15,15,15,21,19,15,14,14,13,13,15,14,14,14,14,14,14,14,13,13,14,12,12,9,9,14,14,14,12,12,14,14,13,13,13,14,14,14,12,12,14,14,14,12,12,15,14,14,13,13,15,14,14,14,14,15,14,14,13,13,15,14,14,13,13,15,15,15,15,15,15,14,14,13,13,15,14,14,14,14,15,14,14,13,13,15,14,14,13,13,14,15,15,15,15,15,14,15,13,13,15,14,14,14,14,15,14,14,13,13,15,14,14,13,13,14,15,15,14,14,15,15,15,14,14,15,14,14,14,14,15,15,15,15,15,15,14,14,14,13,14,15,15,14,14,13,10,10,12,12,18,12,12,12,12,17,12,12,12,12,18,13,13,11,11,18,15,14,11,11,17,13,13,13,13,18,15,15,12,12,18,12,12,12,12,17,13,13,12,12,18,15,15,12,12,18,13,13,13,12,18,15,15,13,13,18,13,13,12,12,18,13,13,12,12,18,15,15,12,12,17,13,13,12,12,17,15,15,12,12,17,12,12,11,11,17,13,13,11,11,17,15,15,11,11,18,16,16,12,12,18,15,15,13,13,18,15,15,11,11,17,15,15,12,12,18,15,15,11,11,13,8,8,10,10,14,14,14,11,11,15,15,15,12,12,15,14,14,11,11,16,14,14,12,12,15,15,15,12,12,15,15,15,13,13,15,15,15,12,12,15,15,15,12,12,16,15,15,13,13,15,15,15,12,12,15,15,15,13,13,16,15,15,12,12,15,15,15,12,12,16,15,15,13,13,16,15,15,12,12,15,15,15,13,13,15,14,14,12,12,15,15,15,12,12,16,15,14,12,12,16,15,15,13,13,16,16,16,13,13,16,14,15,13,13,15,15,15,13,13,16,15,15,12,12,13,12,12,10,10,14,14,14,11,11,15,14,14,12,12,15,14,14,11,11,16,14,14,11,11,15,14,15,12,12,15,14,14,13,13,15,15,15,12,12,15,14,14,12,12,15,14,15,12,12,15,15,15,12,12,16,14,14,13,13,15,15,15,11,12,16,14,14,12,12,16,15,15,12,12,15,15,15,12,12,16,14,14,12,12,15,15,15,11,11,15,14,14,11,12,15,15,14,11,11,16,15,15,12,12,16,14,14,13,13,16,15,15,11,11,16,14,14,12,12,16,15,15,11,11,13,10,10,8,8,14,12,12,12,12,14,12,12,13,13,14,12,12,12,12,14,14,14,13,13,15,13,13,14,14,15,15,14,15,15,15,13,13,13,13,15,13,13,14,14,15,14,15,14,14,15,13,13,13,13,15,15,15,15,15,15,12,12,13,12,15,13,13,14,14,15,14,14,13,13,15,13,13,14,13,15,15,15,16,16,15,13,13,12,12,15,13,13,13,13,14,14,14,12,12,15,15,15,14,14,15,15,15,20,20,15,14,14,13,13,15,15,14,14,14,15,14,14,13,13,13,12,12,9,9,14,13,13,12,12,14,13,13,12,12,14,14,14,12,12,14,14,14,13,13,15,14,14,13,13,15,14,14,14,14,15,15,14,12,12,15,14,14,13,13,15,14,15,14,15,15,14,14,13,13,15,14,14,14,14,15,14,14,12,12,15,14,14,13,13,14,15,14,15,14,15,14,14,13,13,15,14,14,14,14,15,14,14,12,12,15,14,14,13,13,15,15,15,14,14,15,15,15,14,14,16,14,14,14,14,15,15,15,14,14,15,14,14,14,14,14,15,15,14,14,13,13,13,12,13,17,15,15,12,12,17,15,15,12,12,18,15,15,11,11,17,16,16,11,11,18,16,16,13,13,18,17,16,13,13,18,16,16,12,12,18,16,16,12,12,18,17,17,12,12,17,16,16,12,13,17,16,16,12,13,17,16,16,12,12,17,16,16,12,12,18,17,16,12,12,18,16,16,12,12,17,16,17,12,12,18,15,15,11,11,18,15,15,12,12,17,17,17,11,11,17,17,17,12,12,17,16,16,13,13,18,16,16,11,11,18,16,16,12,12,18,17,16,11,11,14,14,14,10,10,16,15,14,11,11,16,15,15,12,12,16,14,14,12,12,17,14,14,13,13,17,15,15,13,13,17,15,15,14,14,16,15,15,12,12,16,15,15,13,13,18,15,15,14,14,16,15,15,12,12,16,15,15,14,14,16,15,15,12,12,16,15,15,13,13,17,15,15,13,13,17,15,15,13,13,17,15,15,14,14,16,14,14,12,12,17,15,15,12,12,18,15,15,13,13,17,15,15,14,14,17,16,16,15,15,17,15,14,13,13,17,15,15,14,14,17,15,15,13,13,14,12,12,11,11,15,14,14,12,12,16,14,14,12,12,16,14,14,11,11,17,14,14,12,12,16,15,14,13,13,16,14,14,13,13,16,15,15,12,12,16,14,14,13,13,17,15,15,13,13,16,15,15,13,13,17,14,14,13,13,16,15,15,12,12,16,14,14,12,12,16,15,15,12,12,17,15,15,12,12,17,14,14,13,13,16,15,15,12,12,16,14,14,12,12,16,15,15,12,12,17,15,15,13,13,17,14,14,13,13,17,15,15,12,12,17,14,14,12,12,17,15,15,12,12,14,14,14,8,8,14,14,14,13,13,14,15,15,14,14,14,14,14,14,14,15,15,15,19,19,15,15,15,14,14,15,15,16,20,19,15,15,15,14,14,15,16,16,15,15,15,15,15,19,19,15,15,15,14,14,15,16,16,19,20,15,15,15,14,14,15,15,15,15,15,15,15,15,19,19,15,15,15,15,15,15,15,16,19,20,15,14,15,14,14,15,15,15,15,15,15,15,15,20,19,15,15,15,21,19,15,16,16,20,20,15,15,14,19,19,15,15,16,20,21,15,15,15,20,19,13,12,12,9,9,14,14,14,12,12,14,13,13,13,13,14,14,14,13,13,15,14,14,20,19,15,14,14,14,13,15,14,14,19,19,15,15,14,13,13,15,14,14,14,14,15,15,15,19,20,15,14,14,13,13,15,14,14,20,19,14,15,14,13,13,15,14,14,14,13,15,15,15,19,20,15,15,14,14,14,15,14,14,21,19,15,15,15,13,13,15,14,14,14,14,14,15,15,20,20,15,15,15,21,20,15,14,14,19,20,15,15,15,20,20,15,14,14,19,20,15,15,15,21,19,2,6,6,14,14,6,7,7,14,14,7,7,7,15,15,0,13,13,16,16,0,13,13,15,15,7,8,8,15,15,9,10,10,17,16,9,8,8,15,15,0,13,13,18,17,0,13,13,16,16,8,8,8,15,15,12,11,11,16,17,9,8,8,14,14,0,13,13,18,17,0,13,13,16,15,0,14,14,18,17,0,20,22,18,20,0,12,12,16,16,0,16,16,22,20,0,14,14,16,16,0,14,14,17,17,0,22,22,22,19,0,12,13,16,16,0,17,17,0,0,0,15,15,16,16,5,7,7,13,13,9,9,9,15,14,10,10,10,14,14,0,21,21,18,17,0,21,22,18,17,9,10,10,14,14,12,12,12,17,17,12,10,10,14,14,0,19,21,18,17,0,20,22,18,18,11,10,10,14,14,14,13,13,18,17,12,11,11,14,14,0,22,19,17,18,0,20,0,18,17,0,22,21,17,17,0,0,0,0,0,0,20,22,17,17,0,22,0,21,19,0,22,0,18,18,0,0,22,18,19,0,0,0,0,0,0,19,21,17,17,0,0,0,20,20,0,0,0,18,18,6,6,6,13,12,8,6,6,11,11,8,6,6,13,13,0,9,9,11,11,0,11,11,14,14,9,7,7,13,13,11,9,9,13,13,10,6,6,13,13,0,10,10,14,14,0,10,10,13,13,9,7,7,13,14,13,9,9,13,13,10,6,6,13,12,0,11,11,15,15,0,10,10,13,13,0,12,12,15,15,0,19,0,17,17,0,9,9,13,13,0,13,14,19,20,0,11,11,13,13,0,11,11,14,14,0,19,20,17,18,0,10,10,13,13,0,15,15,21,19,0,12,12,13,13,0,10,10,12,13,0,11,11,15,15,0,11,11,15,15,0,15,15,22,0,0,16,17,22,0,0,11,11,15,15,0,14,14,18,17,0,11,11,15,16,0,15,15,22,21,0,16,16,0,20,0,12,12,16,15,0,15,14,19,19,0,11,11,16,16,0,15,15,21,0,0,16,15,0,0,0,16,16,22,21,0,0,0,0,0,0,15,15,20,20,0,18,18,0,0,0,16,17,0,0,0,17,17,0,22,0,0,0,0,0,0,15,15,21,22,0,20,18,0,0,0,18,17,22,0,0,10,10,12,11,0,10,10,10,10,0,11,11,12,12,0,11,11,9,9,0,13,13,12,12,0,11,11,12,12,0,13,13,12,12,0,10,10,12,12,0,13,12,13,13,0,12,12,12,12,0,11,11,12,12,0,13,13,12,12,0,10,10,12,12,0,13,13,13,14,0,12,12,12,12,0,13,14,14,14,0,20,21,15,15,0,12,11,12,12,0,15,16,20,22,0,13,12,11,11,0,13,13,14,13,0,20,0,16,15,0,12,12,12,12,0,16,16,22,21,0,13,13,12,12,6,7,7,16,16,11,9,9,15,15,12,9,9,16,16,0,13,13,14,14,0,14,14,16,17,10,9,9,16,16,14,12,12,16,16,12,9,9,15,15,0,13,13,18,18,0,13,13,15,16,12,10,10,17,18,15,12,12,17,17,13,9,9,16,16,0,13,13,17,18,0,14,14,16,16,0,15,15,18,18,0,22,0,20,20,0,12,12,16,16,0,16,16,20,22,0,14,14,16,16,0,15,14,18,18,0,0,22,19,21,0,13,13,16,17,0,17,17,22,22,0,15,15,16,16,7,7,7,14,14,11,10,10,15,15,12,10,10,15,14,0,22,0,18,18,0,0,21,17,18,11,10,10,15,15,14,12,12,17,17,14,11,11,15,15,0,22,20,18,18,0,0,20,18,17,12,10,10,16,16,17,14,14,19,18,14,11,11,15,15,0,21,22,19,19,0,21,22,18,18,0,22,0,19,21,0,0,0,0,0,0,22,22,18,17,0,0,0,21,20,0,22,22,20,19,0,0,22,20,20,0,0,0,0,0,0,20,21,17,17,0,0,22,21,21,0,0,0,18,18,10,9,9,14,14,13,10,10,13,13,13,10,11,14,14,0,13,13,12,12,0,15,15,16,16,13,10,10,15,15,15,12,12,14,14,15,10,10,14,15,0,14,14,16,15,0,14,14,15,15,13,10,10,15,15,18,13,13,15,15,15,10,10,14,15,0,14,14,16,16,0,14,14,15,15,0,15,15,16,16,0,22,0,18,18,0,12,13,14,14,0,17,17,22,0,0,14,14,14,14,0,15,15,16,16,0,22,0,18,17,0,13,13,14,14,0,19,18,21,22,0,15,15,14,14,0,11,11,13,13,0,12,12,16,16,0,12,12,16,16,0,15,16,21,0,0,16,17,0,22,0,12,12,16,16,0,14,14,17,18,0,11,11,16,16,0,15,15,21,22,0,16,16,0,0,0,12,12,16,16,0,15,15,0,19,0,12,12,16,17,0,16,16,22,0,0,16,16,0,22,0,17,17,0,22,0,0,0,0,0,0,15,15,20,19,0,18,18,0,0,0,17,18,0,0,0,17,17,0,0,0,0,0,0,0,0,15,15,0,22,0,20,18,0,0,0,18,18,22,22,0,11,11,14,14,0,12,12,14,14,0,12,12,15,15,0,13,13,14,14,0,14,14,17,16,0,12,12,16,16,0,14,14,16,16,0,11,11,15,15,0,13,13,16,16,0,13,13,15,15,0,12,12,15,15,0,15,14,16,16,0,11,11,15,15,0,14,14,17,17,0,13,13,15,15,0,15,15,17,17,0,0,0,19,18,0,13,12,15,15,0,16,16,0,0,0,14,14,15,15,0,14,14,16,17,0,22,0,18,18,0,13,13,15,15,0,17,17,0,0,0,14,14,15,15,8,8,8,16,16,12,10,10,16,16,13,9,9,16,16,0,14,14,17,17,0,14,14,17,16,12,10,10,18,17,14,11,11,18,18,14,9,10,16,16,0,13,13,18,19,0,14,13,16,16,12,9,9,16,16,17,13,13,17,17,14,9,9,15,15,0,14,14,19,20,0,13,13,15,15,0,15,15,18,19,0,0,22,22,22,0,13,13,17,17,0,16,16,19,21,0,14,14,16,16,0,14,14,18,18,0,0,0,0,0,0,13,13,16,16,0,18,18,0,0,0,15,15,16,16,8,7,7,14,14,12,10,10,15,15,13,10,10,15,14,0,22,0,18,18,0,22,0,18,18,12,10,10,16,15,15,12,12,17,17,14,11,11,15,15,0,20,21,19,18,0,0,0,17,18,13,11,11,15,15,16,13,13,18,18,15,11,11,14,14,0,22,21,19,19,0,21,22,18,18,0,22,22,20,18,0,0,0,0,0,0,22,19,17,17,0,0,0,22,21,0,0,22,19,17,0,0,22,19,19,0,0,0,0,0,0,22,21,18,17,0,0,0,22,0,0,0,0,19,19,0,10,10,14,14,0,11,11,15,14,0,11,11,15,15,0,14,14,15,14,0,15,15,16,16,0,11,11,16,16,0,13,13,16,16,0,11,11,15,15,0,14,14,17,16,0,14,14,15,15,0,11,11,16,16,0,14,13,15,15,0,11,11,15,15,0,15,15,17,17,0,14,14,15,14,0,16,16,17,17,0,0,22,18,18,0,13,13,15,15,0,17,17,22,0,0,15,15,15,14,0,15,16,16,17,0,0,22,18,19,0,13,13,15,15,0,20,18,21,0,0,15,15,14,14,0,11,11,13,13,0,12,12,16,16,0,12,12,16,15,0,15,16,22,22,0,17,17,0,0,0,12,12,16,16,0,14,14,18,18,0,11,11,16,16,0,15,16,22,20,0,16,16,0,22,0,12,12,16,16,0,15,15,18,20,0,11,11,16,16,0,15,15,0,0,0,16,16,0,0,0,17,17,22,0,0,0,0,0,0,0,15,15,0,21,0,18,18,0,0,0,17,16,0,0,0,17,17,22,22,0,0,0,0,0,0,15,15,21,0,0,20,22,0,0,0,18,18,0,0,0,12,12,15,15,0,12,12,15,15,0,12,12,16,16,0,13,13,15,15,0,15,15,17,17,0,13,12,16,16,0,14,14,16,16,0,12,11,16,16,0,14,14,17,17,0,14,14,16,16,0,12,12,16,16,0,15,15,17,16,0,11,11,15,16,0,14,14,17,17,0,14,14,16,16,0,15,15,18,18,0,0,0,22,19,0,13,13,15,16,0,16,17,0,0,0,14,14,16,16,0,15,15,18,17,0,0,0,20,20,0,13,13,16,15,0,17,17,22,22,0,14,14,15,15,0,11,11,16,16,0,13,13,16,17,0,13,13,17,18,0,16,16,17,17,0,17,17,18,18,0,12,12,17,17,0,16,15,18,18,0,12,12,16,16,0,16,16,18,18,0,15,15,17,17,0,12,12,17,17,0,16,16,19,18,0,12,12,16,17,0,16,16,19,19,0,15,16,16,17,0,16,16,19,17,0,0,0,20,22,0,13,13,16,16,0,19,18,21,0,0,15,15,16,16,0,16,16,18,18,0,0,0,22,21,0,14,14,16,16,0,21,19,21,22,0,16,16,16,16,0,9,9,14,14,0,13,13,15,15,0,14,14,15,15,0,0,20,18,19,0,0,22,18,18,0,12,12,15,15,0,15,15,17,18,0,14,13,14,14,0,20,0,18,18,0,21,0,18,17,0,13,13,15,16,0,17,17,18,18,0,14,14,15,15,0,22,22,20,19,0,20,21,18,18,0,20,22,19,19,0,0,0,0,0,0,20,20,17,17,0,0,22,22,21,0,22,0,18,18,0,20,22,19,19,0,0,0,0,0,0,21,21,17,18,0,0,0,21,20,0,0,22,19,18,0,18,18,15,15,0,22,21,17,16,0,0,22,17,17,0,20,22,18,18,0,0,22,20,20,0,21,19,16,16,0,21,21,18,18,0,19,19,17,17,0,0,22,19,19,0,22,20,17,17,0,21,19,16,16,0,22,22,19,18,0,19,20,16,16,0,22,21,19,21,0,21,22,17,18,0,21,20,18,18,0,0,0,19,20,0,20,19,16,16,0,22,22,0,0,0,21,21,17,16,0,22,20,19,18,0,0,0,20,20,0,20,19,16,16,0,0,0,0,0,0,21,22,17,17,0,11,11,13,13,0,13,13,15,16,0,13,13,16,16,0,17,18,21,0,0,17,18,0,0,0,12,12,15,16,0,15,15,19,18,0,12,12,16,16,0,17,17,22,0,0,17,17,0,22,0,12,12,17,16,0,16,16,19,20,0,12,12,16,16,0,17,17,0,0,0,17,17,0,21,0,17,16,22,0,0,0,0,0,0,0,15,15,20,22,0,20,18,0,0,0,18,18,0,0,0,17,17,21,0,0,0,0,0,0,0,15,15,21,22,0,19,20,22,0,0,19,18,0,0,0,14,14,18,18,0,16,16,22,20,0,16,16,22,19,0,17,17,20,22,0,19,19,0,0,0,15,15,20,0,0,18,21,0,20,0,15,15,21,20,0,18,17,0,0,0,17,17,0,22,0,15,15,19,19,0,19,18,0,0,0,15,15,20,0,0,18,18,22,22,0,17,17,0,20,0,18,18,0,0,0,0,22,0,0,0,15,15,19,20,0,20,19,0,0,0,17,17,20,21,0,17,18,20,22,0,0,0,0,22,0,15,15,20,20,0,22,20,0,0,0,17,18,20,0,0,12,12,17,16,0,14,14,17,17,0,13,13,17,17,0,16,16,18,18,0,17,16,17,17,0,13,13,17,17,0,15,16,18,18,0,13,13,16,16,0,16,16,18,18,0,16,16,17,16,0,13,13,16,16,0,17,17,18,17,0,12,12,15,16,0,17,17,19,19,0,16,16,16,16,0,16,17,19,18,0,0,0,21,22,0,14,14,16,16,0,18,18,0,22,0,16,16,16,16,0,16,16,18,17,0,0,0,21,20,0,14,14,16,16,0,21,22,22,0,0,16,16,16,16,0,9,9,14,13,0,13,14,15,16,0,14,13,15,14,0,22,0,18,18,0,21,0,17,18,0,13,13,15,15,0,15,16,18,17,0,14,14,15,14,0,20,22,18,18,0,22,21,17,17,0,13,13,15,15,0,17,17,19,19,0,14,14,14,14,0,0,22,18,18,0,0,22,17,17,0,0,22,19,20,0,0,0,0,0,0,21,20,17,16,0,0,0,21,22,0,0,0,18,19,0,0,0,18,18,0,0,0,0,0,0,22,0,17,17,0,0,0,20,22,0,0,0,18,19,0,18,19,16,16,0,22,20,17,17,0,22,22,17,18,0,22,22,18,17,0,0,22,18,19,0,20,20,17,18,0,0,22,19,18,0,22,22,17,17,0,22,0,19,19,0,0,22,18,18,0,20,22,17,17,0,0,22,18,18,0,19,20,17,17,0,22,0,20,19,0,22,21,17,17,0,0,0,18,18,0,0,0,22,19,0,20,0,17,17,0,22,0,0,22,0,0,20,17,18,0,22,0,19,19,0,0,0,0,19,0,19,21,17,17,0,0,0,0,0,0,20,21,17,16,0,11,11,13,13,0,13,13,16,16,0,13,13,15,16,0,17,17,21,22,0,17,18,0,0,0,12,12,16,16,0,15,15,18,18,0,13,13,16,16,0,17,16,21,21,0,17,17,0,0,0,13,13,16,16,0,16,16,19,18,0,13,13,16,16,0,17,17,0,22,0,17,18,20,22,0,17,18,0,0,0,0,0,0,0,0,15,15,20,0,0,18,19,0,0,0,17,17,0,0,0,18,17,22,0,0,0,0,0,0,0,15,16,21,20,0,20,20,0,0,0,18,19,0,0,0,15,15,22,22,0,17,16,20,22,0,17,17,20,22,0,18,18,0,21,0,19,18,0,0,0,16,16,20,20,0,19,19,22,0,0,15,16,21,22,0,18,19,22,0,0,17,18,0,0,0,16,16,22,0,0,19,19,0,21,0,15,16,20,0,0,18,18,0,22,0,18,17,0,0,0,18,18,0,0,0,0,0,0,0,0,16,16,22,21,0,20,21,0,0,0,17,18,22,0,0,18,18,0,0,0,0,0,0,0,0,16,16,20,19,0,22,21,0,0,0,18,18,22,22,2,3,3,3,3,3,3,1,7,7,7,8,8,7,8,8,7,9,9,10,11,11,9,8,8,7,8,9,11,11,11,9,8,8,6,7,7,10,10,10,10,10,10,10,10,10,14,14,14,12,11,11,10,11,11,15,14,14,13,11,11,6,6,6,8,5,5,8,7,7,8,7,7,11,10,10,9,7,7,9,7,7,12,10,10,10,7,7,6,8,7,12,10,10,12,10,10,11,10,10,15,14,13,13,10,10,11,10,10,16,14,14,14,10,10,7,7,7,12,11,11,12,11,11,11,11,11,16,14,14,13,12,12,11,11,11], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+361716);
/* memory initializer */ allocate([17,15,15,14,12,12,10,9,9,13,11,11,13,11,11,12,11,11,16,14,13,14,11,11,12,11,11,17,15,14,14,11,11,7,8,8,12,11,11,12,10,10,12,10,10,16,13,14,13,10,10,11,10,10,17,14,14,14,10,10,7,7,7,12,11,11,12,11,11,12,11,11,15,14,15,14,12,12,12,11,11,17,15,15,14,12,12,10,10,9,13,11,11,13,11,11,13,11,11,16,14,14,14,11,11,13,11,11,16,15,15,15,11,11,2,6,6,7,7,7,7,7,7,7,8,8,9,9,9,8,7,7,8,8,8,9,9,9,9,8,8,6,7,7,9,8,8,9,7,7,9,8,8,10,8,8,10,8,8,10,8,8,10,8,9,10,8,8,7,6,6,8,6,6,9,6,6,9,7,7,10,8,8,9,6,6,9,7,7,10,9,8,9,7,7,7,7,7,11,8,8,11,9,9,10,9,9,12,9,9,12,8,8,11,9,9,12,9,9,12,8,8,8,7,7,10,9,9,10,9,9,10,9,9,11,10,11,11,9,9,11,9,9,11,11,11,11,9,9,10,8,8,11,9,9,10,9,9,11,9,9,11,10,10,11,9,9,11,9,9,12,10,10,11,9,9,8,8,8,11,9,9,12,9,9,11,9,9,12,9,9,12,8,8,12,9,9,12,9,10,12,8,8,9,7,7,11,9,9,11,10,10,11,9,9,11,11,11,11,9,9,11,10,10,12,11,11,11,9,10,10,9,9,11,9,9,11,10,10,11,10,10,11,11,11,11,9,9,11,9,10,11,11,11,11,9,9,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,1,9,9,6,9,9,5,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,1,3,2,5,4,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,15,15,3,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,4,9,8,8,10,13,16,4,2,9,5,7,10,14,18,9,7,6,5,7,9,12,16,7,5,5,3,5,8,11,13,8,7,7,5,5,7,9,11,10,10,9,8,6,6,8,10,13,14,13,11,9,8,9,10,17,18,16,14,11,10,10,10,1,3,2,3,1,4,4,7,7,8,8,9,9,10,10,11,11,4,6,5,8,7,9,8,10,9,11,10,11,11,4,5,6,7,8,8,9,9,10,10,10,10,11,8,9,8,10,8,10,9,11,10,11,11,11,11,8,8,9,8,10,9,10,10,11,11,11,11,11,9,10,10,11,11,11,11,11,11,12,11,12,11,9,10,10,10,11,11,11,11,11,11,12,11,12,10,11,11,12,11,12,12,12,12,12,12,12,12,10,11,11,11,11,12,12,12,13,12,12,12,12,11,12,12,12,12,13,13,12,12,12,12,12,12,11,12,12,12,12,13,13,12,13,12,12,12,12,12,13,13,13,13,13,13,12,13,12,13,12,12,12,13,13,13,13,13,13,13,12,13,12,12,12,2,4,4,5,5,4,5,5,6,5,4,5,5,5,6,5,5,6,6,6,5,6,5,6,6,1,4,4,4,4,4,4,4,4,4,5,16,9,9,12,17,18,4,2,18,6,5,9,13,15,10,7,7,6,7,9,13,13,8,5,6,5,5,7,11,12,8,4,7,4,3,6,10,12,11,8,9,7,6,8,11,12,15,13,13,11,9,7,10,12,16,12,16,12,6,5,8,11,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,7,7,0,0,0,8,8,0,0,0,8,8,0,0,0,11,11,0,0,0,0,0,0,0,0,10,9,0,0,0,0,0,0,0,0,9,9,0,0,0,10,11,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,12,12,0,0,0,0,0,0,0,0,11,11,0,0,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,5,5,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,5,5,0,0,0,8,8,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,5,6,0,0,0,7,7,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,8,8,0,0,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,11,0,0,0,9,9,0,0,0,10,10,0,0,0,10,10,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,11,12,0,0,0,0,0,0,0,0,11,11,0,0,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,0,0,7,7,0,0,0,8,8,0,0,0,10,10,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,8,8,0,0,0,9,9,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,0,0,7,7,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,8,8,0,0,0,9,9,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,0,11,11,0,0,0,0,0,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,0,0,7,7,0,0,0,8,8,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,8,7,0,0,0,9,9,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,0,11,11,0,0,0,0,0,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,0,0,7,7,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,8,8,0,0,0,9,9,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,0,0,0,9,9,0,0,0,10,10,0,0,0,11,12,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,8,8,0,0,0,11,11,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,11,11,0,0,0,0,0,0,0,0,9,9,0,0,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,0,0,0,9,9,0,0,0,10,10,0,0,0,12,12,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,11,11,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,11,11,0,0,0,0,0,0,0,0,12,12,0,0,0,0,0,0,0,0,10,10,0,0,0,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,5,5,5,8,8,0,8,8,6,9,9,8,10,10,0,8,8,0,9,9,0,12,12,0,8,8,4,7,7,6,10,10,0,12,12,7,11,11,9,12,12,0,12,12,0,13,13,0,15,15,0,12,12,0,7,7,0,7,7,0,8,8,0,8,8,0,10,10,0,7,7,0,8,8,0,11,11,0,7,7,5,7,7,9,9,9,0,11,10,9,9,9,11,12,12,0,10,10,0,11,11,0,13,13,0,11,11,6,7,7,9,10,10,0,12,12,10,11,11,11,12,12,0,12,12,0,13,13,0,15,15,0,12,12,0,10,10,0,11,11,0,11,11,0,12,12,0,13,13,0,11,11,0,12,12,0,15,15,0,11,11,0,8,8,0,10,10,0,12,12,0,11,11,0,12,12,0,12,12,0,12,12,0,15,15,0,11,11,0,7,7,0,10,10,0,12,12,0,10,10,0,12,13,0,12,12,0,13,13,0,14,14,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,4,0,8,8,0,8,8,0,9,9,0,10,10,0,8,8,0,9,9,0,10,10,0,8,8,0,7,7,0,8,8,0,8,8,0,8,8,0,8,8,0,8,8,0,8,8,0,8,8,0,8,8,0,7,7,0,6,6,0,7,7,0,7,7,0,10,10,0,6,6,0,7,7,0,10,10,0,6,5,0,8,8,0,7,7,0,8,8,0,8,8,0,9,9,0,7,7,0,8,8,0,9,9,0,7,7,0,6,6,0,9,10,0,10,10,0,10,10,0,11,11,0,9,9,0,10,10,0,11,11,0,9,9,0,8,8,0,8,8,0,8,8,0,9,9,0,9,9,0,8,8,0,8,8,0,9,9,0,7,7,0,8,8,0,7,7,0,7,7,0,8,8,0,9,9,0,7,7,0,7,7,0,9,9,0,6,6,0,6,6,0,10,10,0,10,10,0,10,10,0,12,12,0,9,9,0,10,10,0,12,12,0,9,9,0,8,8,0,7,7,0,8,8,0,8,8,0,9,9,0,7,7,0,8,8,0,9,9,0,7,7,1,6,6,7,7,7,7,7,7,7,8,8,10,11,11,9,8,8,8,8,8,11,11,11,10,8,8,5,7,7,9,11,11,10,11,11,10,11,11,12,13,14,11,12,12,10,11,11,13,14,14,12,12,12,5,6,6,8,6,6,8,7,7,8,7,7,11,10,10,10,7,7,9,7,7,12,11,11,11,7,7,7,7,7,11,10,10,12,10,10,11,10,10,15,13,13,13,10,10,12,11,11,15,13,13,14,11,11,7,7,7,11,11,11,12,11,11,12,11,11,14,14,14,14,12,12,12,12,12,16,15,15,14,12,12,0,10,10,0,11,11,0,11,12,0,11,11,0,14,14,0,11,11,0,12,12,0,15,15,0,11,11,8,8,8,12,10,10,12,10,10,13,11,11,15,13,13,14,11,11,12,10,10,16,14,14,14,10,10,8,7,7,12,11,11,13,11,11,12,11,11,15,14,14,14,12,12,13,12,12,15,14,14,15,12,12,0,11,11,0,12,12,0,12,12,0,12,12,0,15,15,0,12,12,0,13,13,0,14,15,0,12,12,3,4,5,8,8,12,10,10,12,12,12,10,10,12,12,13,11,11,12,12,13,12,12,12,12,13,10,10,13,13,13,13,13,13,13,13,10,10,13,13,13,11,11,13,13,14,13,13,12,12,13,10,10,13,13,13,13,13,13,13,13,10,10,12,12,13,11,11,13,13,13,13,13,12,12,13,12,12,13,13,13,13,13,13,13,14,11,11,12,12,14,12,12,13,12,14,14,14,12,12,13,14,14,13,13,14,13,13,13,13,14,14,14,12,12,14,13,13,13,13,14,14,14,12,12,12,8,8,11,11,12,12,12,11,11,12,11,11,10,10,13,12,12,10,10,13,12,12,10,10,13,12,12,12,12,14,12,12,12,12,13,13,13,11,11,14,12,12,11,11,14,12,12,12,12,14,12,12,12,12,13,12,12,12,12,13,13,13,11,11,14,12,12,11,11,14,12,12,12,12,14,13,13,12,12,14,12,12,12,11,14,13,13,11,11,14,13,12,11,11,14,13,13,11,11,14,13,13,12,12,14,12,12,12,12,15,13,13,12,12,14,12,12,11,11,14,13,13,11,11,12,9,9,10,10,12,7,7,11,11,12,9,9,12,12,13,10,10,10,10,14,14,14,11,11,13,9,9,12,12,14,14,14,12,12,13,8,8,11,11,14,9,9,12,12,14,14,14,11,11,13,9,9,12,12,14,14,14,12,12,14,8,8,11,11,14,9,9,12,12,14,14,14,11,11,14,10,10,12,12,14,14,14,13,13,14,9,9,11,11,14,10,10,12,12,14,14,14,11,11,14,14,15,12,12,15,14,14,14,14,15,14,14,11,11,14,14,14,12,12,14,14,14,11,11,14,11,11,10,10,14,10,10,10,10,14,10,10,10,10,15,11,11,9,9,14,12,12,9,9,15,11,11,11,11,15,13,13,11,11,15,10,10,10,10,15,11,11,10,10,15,13,13,11,11,15,11,11,11,11,15,13,13,11,11,15,10,10,10,10,15,11,11,10,10,15,13,13,11,11,15,12,12,11,11,15,13,13,11,11,15,11,11,10,10,15,12,12,10,10,15,13,13,10,10,15,14,14,11,11,15,13,13,11,11,15,14,14,10,11,15,13,13,10,10,15,13,14,10,10,14,13,13,10,10,14,13,13,10,10,14,13,13,10,10,14,13,13,9,9,14,14,14,9,9,15,14,14,11,11,15,14,14,10,10,15,14,14,10,10,15,14,14,11,11,15,14,14,10,10,15,14,14,11,11,15,14,14,10,10,14,14,14,10,10,15,14,14,10,10,14,14,14,10,10,15,14,14,11,11,15,14,14,11,11,14,14,14,10,10,15,14,14,10,10,14,14,14,9,9,15,15,15,11,11,15,14,14,12,12,15,15,14,10,10,15,14,14,10,10,14,15,15,9,9,14,10,10,12,12,17,9,9,12,12,17,10,10,13,13,17,11,11,12,12,18,14,14,12,12,17,10,10,13,13,17,14,14,12,12,17,9,9,12,12,17,11,11,12,12,17,14,14,12,12,18,10,10,13,13,18,14,14,13,13,18,9,9,12,12,18,10,10,13,13,18,14,14,12,12,18,11,11,13,13,18,14,14,13,13,18,10,10,12,12,17,11,11,12,12,17,14,14,12,12,18,15,15,13,13,18,14,14,14,14,18,15,15,12,12,18,14,14,12,12,18,15,15,12,12,13,7,7,11,11,14,15,15,11,11,14,15,15,12,12,14,15,15,11,11,15,15,15,11,11,14,15,15,12,12,14,15,15,12,12,14,15,15,11,11,14,15,15,11,11,15,15,15,12,12,14,15,15,12,12,14,15,15,12,12,14,15,15,11,11,14,15,15,11,11,15,15,15,12,12,15,15,15,12,12,14,15,15,12,12,14,15,14,12,12,14,15,15,11,11,15,14,14,12,12,15,15,15,12,12,15,16,16,12,12,15,15,15,12,12,15,15,15,12,12,15,15,15,12,12,13,13,13,11,10,14,14,15,11,11,14,14,14,12,12,15,14,14,10,10,15,15,15,11,11,14,15,15,12,12,14,14,14,11,11,14,15,15,11,11,14,15,15,12,12,15,15,15,11,11,14,15,15,12,12,14,14,14,12,12,14,15,15,11,11,14,15,15,12,12,15,15,15,11,11,15,15,15,12,12,15,14,14,12,12,14,15,15,11,11,14,15,15,11,11,15,15,15,10,10,15,15,16,12,12,15,15,15,14,14,15,15,15,11,11,15,15,15,12,12,15,15,15,11,11,14,11,11,10,10,15,9,9,12,12,15,10,10,12,12,15,11,11,11,11,15,14,14,12,12,15,10,10,13,13,15,14,14,12,12,15,9,9,12,12,15,10,10,13,13,15,13,13,12,11,15,10,10,12,12,15,14,14,12,12,15,9,9,11,11,15,11,11,12,12,15,13,13,11,11,15,11,11,13,13,15,13,14,13,14,15,11,11,11,11,15,11,11,12,12,15,14,14,11,11,15,14,14,13,13,15,14,14,20,20,15,14,14,12,12,15,14,14,12,12,15,14,14,11,11,14,13,13,10,10,14,13,13,12,12,14,14,13,12,12,15,14,14,12,12,15,14,14,11,11,15,14,14,12,12,15,14,14,13,13,15,14,14,12,11,15,14,14,11,11,15,14,14,13,13,15,14,14,12,12,15,14,14,13,13,15,14,14,12,11,15,14,14,12,12,15,14,14,13,13,15,14,14,13,13,15,14,14,12,12,15,14,14,12,12,15,14,14,12,12,15,15,15,13,13,15,15,15,13,13,15,14,14,13,13,15,15,15,13,13,15,14,15,12,12,15,15,15,13,13,14,10,10,12,13,17,9,9,12,12,17,10,10,13,13,17,11,11,12,12,18,14,14,12,12,18,10,10,13,13,18,14,14,12,12,17,9,9,12,12,18,10,11,13,13,18,14,14,12,12,17,10,10,12,12,17,14,14,12,12,17,9,9,12,12,17,11,11,12,12,17,14,14,12,12,18,11,11,12,12,18,14,14,13,13,18,11,11,12,12,18,11,11,12,12,18,14,14,12,12,18,15,15,12,12,18,14,14,13,13,18,15,15,12,12,17,14,14,12,12,17,15,15,12,12,13,7,7,11,11,14,15,15,11,11,14,15,15,11,11,14,15,14,12,12,15,15,15,12,11,14,15,15,12,12,14,15,15,12,12,14,15,15,11,11,14,15,15,11,11,15,15,15,13,13,14,15,15,11,11,14,15,15,13,12,14,15,15,11,11,14,15,15,11,11,15,15,15,13,13,14,15,15,12,12,15,15,15,12,12,15,15,15,11,11,15,15,15,11,11,15,15,15,12,12,15,15,15,13,13,15,16,16,12,12,15,15,15,12,13,15,15,15,12,12,15,15,15,12,12,13,13,13,11,11,14,14,14,11,11,14,14,14,12,12,14,14,14,10,10,15,14,14,11,11,14,15,15,12,12,14,14,14,12,12,14,15,15,11,11,14,15,14,12,12,15,14,14,11,11,14,15,15,12,12,14,14,14,11,11,14,15,15,11,11,14,14,14,12,12,15,15,14,11,11,15,15,15,12,12,15,14,14,12,12,14,15,15,11,11,14,15,14,11,11,15,15,15,10,10,15,15,15,12,12,15,14,14,14,13,15,15,15,11,11,15,15,15,11,11,15,15,15,10,10,14,11,11,10,10,15,9,9,12,12,15,10,10,12,12,15,11,11,11,11,15,14,14,12,12,15,10,10,13,13,15,13,13,12,12,15,9,9,12,12,15,11,11,13,13,15,14,14,12,12,15,10,10,13,13,15,13,14,12,12,15,9,9,12,12,15,10,10,13,13,15,13,13,11,11,15,11,11,13,13,15,14,14,13,13,15,10,10,11,11,15,11,11,12,12,15,14,14,11,11,15,14,14,13,13,15,14,14,21,20,15,14,14,11,11,15,14,14,12,12,15,14,14,11,11,14,13,13,10,10,14,13,13,11,11,15,14,14,12,12,15,14,14,12,12,14,14,14,12,12,15,14,14,12,12,15,14,14,13,13,14,14,14,11,11,15,14,14,11,11,15,14,14,13,13,15,14,14,12,12,15,14,14,13,13,14,14,14,11,11,15,14,14,11,11,14,14,14,13,13,15,14,14,12,12,15,14,14,12,12,15,14,14,12,12,15,14,14,12,12,14,14,14,13,13,15,15,15,13,13,16,14,14,12,13,15,15,15,13,13,15,14,14,12,12,15,15,15,13,13,15,11,11,13,12,18,10,10,12,12,17,11,11,12,12,18,12,12,11,11,18,14,14,12,12,18,11,11,13,13,17,14,14,12,12,18,10,10,12,12,18,12,12,12,12,18,14,15,12,12,18,11,11,13,13,18,14,14,12,12,17,10,10,12,12,18,11,11,12,12,18,15,14,12,12,17,12,12,12,12,17,14,14,12,12,17,11,11,11,11,17,12,12,12,11,17,15,15,11,11,18,15,15,12,12,18,14,15,13,13,18,15,15,11,11,17,15,15,12,12,18,15,15,11,11,14,9,9,11,11,14,15,15,11,11,15,15,15,11,11,15,15,15,12,11,15,15,15,12,12,15,15,15,11,11,15,15,15,13,13,14,15,15,11,11,15,15,15,11,11,15,15,15,13,13,15,15,15,11,11,15,15,15,13,13,15,15,15,11,11,15,15,15,11,11,15,15,15,13,13,15,15,15,12,12,15,15,15,13,13,15,15,14,11,11,15,15,15,12,12,15,15,15,12,12,16,15,15,13,13,15,16,16,13,13,16,15,15,12,12,15,15,15,13,12,15,15,15,12,12,13,12,12,11,11,14,14,14,11,11,14,14,14,12,12,15,14,14,11,11,15,14,14,12,12,15,14,14,12,12,15,14,14,12,12,14,15,15,11,11,15,14,14,12,12,15,14,14,11,11,15,14,14,12,12,15,14,14,12,12,14,15,15,11,11,15,14,14,12,12,15,14,14,11,11,15,15,15,12,12,15,14,14,12,12,15,15,15,11,11,15,14,14,11,11,15,14,15,11,11,15,15,15,12,12,15,14,14,13,13,16,15,15,11,11,15,14,14,12,12,15,15,15,11,11,14,11,11,9,9,15,10,10,12,12,14,11,11,12,12,15,12,12,12,12,15,14,14,13,13,15,11,11,13,13,15,14,14,13,13,15,10,10,12,12,15,12,12,13,13,15,14,14,13,13,15,11,11,12,12,15,14,14,13,13,14,10,10,12,12,15,12,12,13,13,15,14,14,12,12,15,12,12,13,13,15,14,14,15,15,15,11,11,12,12,15,12,12,12,13,15,14,14,12,12,15,15,15,14,14,15,14,14,20,20,15,14,14,12,12,15,14,14,13,13,15,14,14,12,12,14,13,13,10,10,14,13,13,11,11,14,13,13,12,12,14,14,14,12,12,15,14,14,13,13,15,14,14,12,12,14,14,14,14,14,14,14,14,11,11,15,14,14,12,12,15,14,14,14,14,15,14,14,12,12,14,14,14,14,14,14,14,14,11,11,15,14,14,12,12,14,14,14,14,14,15,14,14,12,12,15,14,14,13,13,15,14,14,12,12,15,14,14,12,12,14,14,14,14,13,15,15,15,14,14,15,14,14,13,13,15,15,15,14,14,15,14,14,13,13,15,15,15,13,13,14,13,13,13,13,18,15,15,12,12,18,15,15,13,12,18,15,16,11,11,18,16,17,12,12,18,15,15,13,13,18,17,17,12,12,18,15,15,12,12,17,15,15,12,12,18,17,17,12,12,18,15,15,13,13,18,16,17,12,12,17,15,15,12,12,18,15,15,12,12,18,16,17,11,12,18,16,16,12,12,17,16,17,12,12,18,15,15,11,11,18,15,15,12,12,18,17,17,11,11,17,17,17,12,12,18,16,16,13,13,18,17,17,11,11,18,16,16,12,12,18,17,17,11,11,15,14,14,11,11,16,15,15,11,11,16,15,15,12,12,16,15,15,12,12,17,15,15,14,13,16,15,15,12,12,17,15,15,14,14,16,15,15,11,11,16,15,15,12,12,18,15,15,13,13,16,15,15,11,11,17,15,15,14,14,16,15,15,11,11,16,15,15,12,12,17,15,15,13,13,16,15,15,12,12,17,16,15,14,14,16,14,15,12,12,16,15,15,12,12,18,15,15,13,13,17,15,15,14,14,17,16,16,15,15,17,15,15,13,13,17,15,15,14,14,18,15,15,13,13,15,12,13,11,11,15,14,14,12,12,16,14,14,12,12,16,14,14,12,12,16,14,14,12,12,16,14,14,13,12,17,14,14,13,13,16,15,15,12,12,16,14,14,12,12,17,14,14,12,12,16,14,14,12,12,17,14,14,13,13,15,15,15,12,12,16,14,14,12,12,17,14,14,12,12,17,15,15,12,12,17,14,14,13,13,16,15,15,12,12,16,14,14,12,12,17,15,15,12,12,18,15,15,13,13,17,14,14,13,13,17,15,15,12,12,17,14,14,12,12,17,15,15,12,12,14,15,15,9,9,15,15,15,12,12,15,15,15,13,13,15,15,15,14,14,15,15,15,19,19,15,15,16,13,13,15,15,16,19,20,15,15,15,13,12,15,16,16,14,14,15,15,15,19,19,15,15,15,13,13,15,16,15,20,19,14,15,15,13,13,15,15,15,14,14,15,15,15,19,19,15,15,15,14,14,15,16,16,19,20,15,15,15,14,14,15,15,15,14,14,15,15,15,19,19,15,15,15,20,19,15,16,16,20,19,15,15,15,19,19,15,16,16,20,20,15,15,15,19,20,14,13,13,10,10,14,14,14,11,11,14,14,14,12,12,15,14,14,13,13,15,14,14,19,20,15,14,14,12,12,14,14,14,20,19,14,14,14,11,11,15,14,14,12,12,15,14,14,20,20,15,14,14,12,12,14,14,14,20,19,14,14,14,11,11,15,14,14,12,12,15,14,14,19,20,15,14,14,13,13,15,14,14,22,19,15,15,14,12,12,15,14,14,13,13,14,15,15,22,20,15,15,15,20,20,15,14,14,21,20,15,15,15,20,21,15,14,14,20,20,14,15,15,20,20,2,6,6,14,14,6,7,7,14,14,7,7,7,15,15,0,12,12,15,15,0,13,13,15,15,7,8,8,15,15,10,10,10,16,16,9,8,8,15,15,0,13,13,18,17,0,13,13,16,16,8,8,8,15,15,12,11,11,16,16,9,8,8,15,15,0,13,13,18,18,0,13,13,16,16,0,14,14,17,17,0,20,0,19,20,0,12,12,16,16,0,16,16,20,22,0,14,14,16,16,0,14,14,17,17,0,20,22,20,19,0,13,13,15,16,0,17,18,0,21,0,15,15,16,16,5,7,7,13,13,8,9,9,14,14,10,10,10,14,14,0,20,22,18,18,0,22,21,18,17,9,10,10,14,14,12,12,12,17,17,12,10,10,14,14,0,0,20,17,17,0,22,21,17,18,11,10,10,14,14,14,13,13,18,18,12,11,11,14,14,0,22,21,18,19,0,20,0,17,17,0,22,0,18,18,0,0,0,0,0,0,20,20,17,17,0,22,0,22,21,0,21,0,19,18,0,22,22,18,18,0,0,0,0,0,0,21,0,17,17,0,22,0,20,20,0,0,0,19,18,6,6,6,12,12,8,6,6,10,10,8,6,6,13,12,0,10,10,11,11,0,11,11,13,13,8,7,7,13,13,11,9,9,13,13,10,6,6,12,12,0,10,10,14,14,0,10,10,13,13,9,7,7,13,13,12,10,10,13,13,10,6,6,12,12,0,11,11,15,15,0,10,10,13,13,0,12,12,15,14,0,19,20,16,17,0,9,9,13,13,0,14,14,20,21,0,12,11,13,12,0,12,12,15,14,0,20,19,17,17,0,10,10,12,13,0,15,15,22,21,0,12,12,12,13,0,10,10,12,12,0,11,11,15,15,0,11,11,15,15,0,15,15,22,22,0,16,17,0,0,0,11,11,15,15,0,14,14,18,18,0,11,11,16,16,0,16,15,0,21,0,16,16,0,0,0,12,12,15,15,0,14,14,19,19,0,11,11,15,15,0,15,15,22,0,0,16,16,22,0,0,16,16,0,21,0,0,0,0,0,0,15,15,19,20,0,18,18,0,0,0,17,17,0,0,0,17,17,0,0,0,0,0,0,0,0,16,15,22,21,0,20,20,0,0,0,18,18,0,0,0,10,10,12,12,0,10,10,11,11,0,11,11,12,12,0,11,11,9,9,0,13,12,12,12,0,11,11,13,13,0,13,13,12,12,0,10,10,12,12,0,13,12,13,13,0,12,12,12,12,0,11,11,13,13,0,13,13,12,12,0,10,10,12,12,0,13,13,14,13,0,12,12,12,12,0,14,13,13,14,0,20,21,15,15,0,11,11,12,12,0,15,16,20,20,0,12,13,10,10,0,13,13,14,13,0,20,20,15,15,0,11,11,12,12,0,16,17,21,21,0,13,13,11,11,6,7,7,16,15,11,9,9,14,15,12,9,9,16,16,0,13,13,15,15,0,14,14,17,17,10,9,9,16,16,14,12,12,16,16,12,9,9,15,15,0,13,13,17,18,0,13,13,15,15,12,10,10,17,17,15,12,12,17,17,13,9,9,16,16,0,13,13,18,19,0,14,14,16,16,0,15,15,18,18,0,0,0,20,19,0,12,12,17,16,0,16,17,0,21,0,14,15,16,16,0,15,15,18,18,0,0,22,19,21,0,13,13,16,16,0,18,17,22,22,0,15,15,16,16,7,7,7,13,13,11,10,10,15,15,12,10,10,14,14,0,21,0,18,17,0,21,22,18,18,11,10,10,15,15,14,12,12,17,17,14,11,11,14,14,0,21,20,18,18,0,22,21,18,17,12,11,10,16,16,16,14,14,17,19,14,11,11,15,15,0,0,22,19,19,0,21,22,18,18,0,21,0,18,19,0,0,0,22,0,0,22,21,17,17,0,0,0,20,22,0,0,21,18,18,0,0,0,19,20,0,0,0,0,0,0,0,21,17,17,0,0,0,22,21,0,0,0,19,19,10,9,9,14,13,13,10,10,12,12,13,10,10,14,14,0,13,13,12,12,0,15,14,16,15,13,10,10,14,14,15,12,12,14,14,15,10,10,14,14,0,14,14,15,15,0,14,13,14,14,13,10,10,15,15,17,13,13,15,15,14,10,10,14,14,0,14,14,15,16,0,14,14,15,15,0,15,15,16,16,0,21,22,17,18,0,12,12,14,14,0,17,17,20,21,0,14,14,14,14,0,15,15,16,16,0,21,22,18,18,0,13,13,14,14,0,18,18,22,0,0,15,15,14,14,0,11,11,13,13,0,12,12,16,15,0,12,12,16,16,0,16,16,0,0,0,16,17,0,22,0,12,12,16,16,0,14,14,17,18,0,11,11,16,16,0,15,15,0,21,0,16,16,21,22,0,12,12,16,16,0,15,15,19,19,0,12,12,17,16,0,16,16,21,22,0,16,16,0,0,0,17,17,0,22,0,0,0,0,0,0,15,15,19,20,0,17,19,0,0,0,17,17,22,0,0,17,17,0,22,0,0,0,0,0,0,15,15,21,0,0,19,20,0,0,0,19,18,22,0,0,11,12,14,14,0,11,11,14,14,0,12,12,15,15,0,13,13,13,13,0,14,14,16,16,0,12,12,15,15,0,14,14,16,15,0,11,11,15,15,0,13,13,16,16,0,13,13,15,15,0,12,12,15,15,0,15,14,16,16,0,11,11,15,15,0,14,14,17,17,0,13,13,15,15,0,15,15,16,16,0,0,0,18,18,0,12,12,14,14,0,16,16,22,0,0,14,14,15,15,0,15,15,16,17,0,21,22,18,18,0,13,13,15,14,0,18,17,22,0,0,14,14,15,15,8,8,8,16,15,12,10,10,16,15,12,10,10,16,16,0,14,14,16,17,0,14,14,17,16,12,10,10,17,18,14,12,12,18,18,14,10,10,16,16,0,14,14,18,18,0,14,14,16,16,12,9,9,16,16,17,13,13,16,17,14,9,9,15,15,0,14,14,18,19,0,13,13,15,15,0,15,15,18,19,0,0,0,22,21,0,13,13,16,16,0,16,16,22,0,0,15,15,16,16,0,14,14,18,17,0,0,0,20,0,0,13,13,16,16,0,18,18,0,0,0,15,15,16,16,8,7,7,13,13,12,10,10,15,15,12,10,10,14,14,0,22,22,19,18,0,0,0,18,18,12,10,10,15,15,14,13,13,17,17,14,11,11,15,15,0,19,20,18,18,0,22,21,17,18,13,11,11,15,15,16,13,13,18,18,14,11,11,14,15,0,22,21,20,19,0,22,21,17,17,0,0,22,19,18,0,0,0,0,0,0,22,20,17,17,0,0,0,21,20,0,0,0,19,17,0,0,22,19,19,0,0,0,0,0,0,22,20,18,17,0,0,0,0,0,0,0,0,18,18,0,10,10,14,14,0,11,11,14,14,0,11,11,15,15,0,14,14,14,14,0,15,15,16,16,0,11,11,16,16,0,13,13,16,16,0,11,11,15,15,0,14,14,16,16,0,14,14,15,15,0,11,11,15,15,0,13,13,15,15,0,10,10,15,15,0,15,15,17,17,0,14,14,14,14,0,16,16,16,16,0,0,22,19,19,0,13,13,14,14,0,17,17,0,0,0,15,15,14,14,0,16,16,17,17,0,0,22,18,18,0,13,13,14,14,0,21,18,0,0,0,15,15,14,14,0,11,11,13,13,0,12,12,15,15,0,12,12,16,15,0,16,16,0,0,0,17,17,22,22,0,12,12,16,16,0,14,14,18,18,0,11,12,16,16,0,15,16,0,21,0,16,16,22,21,0,12,12,16,16,0,15,15,19,20,0,11,12,16,16,0,15,15,20,22,0,16,16,0,22,0,17,17,22,0,0,0,0,0,0,0,15,15,21,22,0,19,18,0,0,0,17,17,0,0,0,17,17,0,22,0,0,0,0,0,0,16,15,22,0,0,19,19,0,0,0,17,18,0,0,0,12,12,15,15,0,12,12,15,15,0,12,12,15,15,0,13,13,14,14,0,15,15,16,17,0,12,12,16,16,0,14,14,16,16,0,12,11,15,16], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+371956);
/* memory initializer */ allocate([0,14,14,16,17,0,14,14,16,16,0,13,12,16,16,0,15,15,16,16,0,11,11,15,15,0,14,14,16,16,0,14,14,15,15,0,15,15,18,17,0,0,22,0,20,0,13,13,15,15,0,16,17,22,22,0,14,14,15,15,0,15,15,17,18,0,20,0,19,19,0,13,13,15,15,0,18,18,22,0,0,14,14,15,15,0,11,11,16,16,0,14,14,17,16,0,13,13,17,17,0,16,16,17,17,0,17,17,18,19,0,12,12,16,17,0,15,15,18,18,0,12,12,16,16,0,16,16,19,18,0,16,16,17,16,0,12,13,17,17,0,17,16,18,17,0,13,12,16,16,0,16,16,18,19,0,16,16,16,17,0,16,16,18,18,0,22,0,22,22,0,13,13,16,16,0,19,18,22,20,0,16,15,16,16,0,16,17,18,18,0,0,0,22,20,0,14,14,16,16,0,19,19,0,0,0,16,16,16,16,0,9,9,13,13,0,13,13,15,15,0,14,14,15,15,0,0,22,17,18,0,22,0,18,19,0,12,12,15,15,0,15,16,17,17,0,14,14,14,14,0,22,0,18,18,0,21,22,17,17,0,13,13,15,15,0,17,17,17,18,0,14,14,15,15,0,22,21,21,19,0,20,21,17,17,0,21,21,19,18,0,0,0,0,0,0,21,21,17,17,0,0,0,22,22,0,0,22,19,18,0,0,21,19,18,0,0,0,0,22,0,19,20,17,17,0,0,0,0,22,0,0,0,19,18,0,19,19,15,16,0,21,19,16,17,0,0,21,17,17,0,0,22,17,17,0,22,22,18,19,0,20,20,16,16,0,0,22,18,18,0,20,19,16,17,0,22,21,20,19,0,0,21,17,17,0,21,20,17,17,0,0,0,18,18,0,19,19,17,16,0,22,0,19,19,0,21,22,17,18,0,0,22,19,18,0,0,0,19,20,0,19,19,16,16,0,22,22,22,0,0,20,22,16,16,0,22,20,18,19,0,0,0,20,19,0,20,20,16,16,0,0,0,0,0,0,22,20,17,16,0,11,11,13,13,0,14,13,15,15,0,13,13,16,15,0,18,17,21,0,0,18,18,21,0,0,12,12,15,15,0,15,16,17,18,0,12,12,15,15,0,17,17,22,20,0,17,18,22,0,0,12,12,17,16,0,16,17,19,19,0,13,13,16,16,0,17,17,0,22,0,17,17,0,21,0,18,18,20,22,0,0,0,0,0,0,15,15,21,20,0,20,19,0,0,0,18,18,22,0,0,17,17,22,0,0,0,0,0,0,0,15,16,20,22,0,20,21,0,0,0,19,18,0,0,0,15,15,19,19,0,17,16,20,20,0,16,17,20,21,0,18,17,0,0,0,19,19,0,0,0,15,15,21,19,0,19,19,0,0,0,15,15,22,22,0,18,18,0,22,0,17,18,22,21,0,15,15,20,19,0,19,19,0,0,0,15,15,20,22,0,18,19,20,0,0,18,17,21,21,0,18,18,19,22,0,0,0,0,0,0,15,15,20,19,0,19,19,0,0,0,18,18,21,22,0,18,18,22,0,0,0,0,0,0,0,15,15,19,20,0,21,21,0,0,0,17,17,20,20,0,12,12,17,17,0,14,14,16,17,0,13,14,17,17,0,16,16,17,17,0,17,17,17,19,0,13,13,17,17,0,16,16,18,18,0,13,13,16,16,0,16,16,18,18,0,16,16,17,17,0,13,13,17,17,0,17,17,18,17,0,12,12,15,16,0,17,18,19,20,0,16,16,16,16,0,17,16,18,19,0,0,22,21,22,0,14,14,16,16,0,19,19,0,0,0,16,16,16,16,0,16,16,18,17,0,0,22,21,21,0,14,14,16,16,0,22,20,22,0,0,16,16,15,15,0,9,9,13,13,0,14,14,15,15,0,14,14,14,14,0,22,22,18,18,0,0,22,18,18,0,12,12,15,15,0,16,16,18,17,0,14,14,14,14,0,20,21,18,18,0,22,21,17,17,0,13,13,15,15,0,17,17,18,18,0,14,14,14,14,0,0,21,18,19,0,0,22,17,17,0,22,22,19,18,0,0,0,0,0,0,19,21,17,17,0,0,0,22,20,0,0,21,18,19,0,0,22,18,18,0,0,0,0,22,0,20,22,17,17,0,0,0,20,22,0,0,0,18,18,0,19,21,16,16,0,20,22,16,17,0,20,0,17,17,0,22,0,18,17,0,21,0,18,19,0,20,20,17,17,0,22,0,18,18,0,21,20,17,17,0,0,20,20,19,0,0,21,18,17,0,21,21,17,17,0,22,0,18,17,0,19,19,17,17,0,0,22,20,21,0,0,21,17,17,0,22,0,18,18,0,0,0,20,22,0,20,19,16,16,0,0,0,0,0,0,22,22,17,17,0,22,0,18,19,0,0,0,21,20,0,19,21,16,17,0,0,0,0,0,0,22,22,17,16,0,11,11,13,13,0,13,13,15,15,0,13,13,15,15,0,17,17,22,21,0,18,18,22,0,0,12,13,16,15,0,15,16,18,18,0,13,13,16,16,0,17,17,0,22,0,17,17,22,22,0,13,13,16,16,0,16,16,19,18,0,13,13,16,16,0,18,17,0,20,0,18,17,20,0,0,17,17,21,0,0,0,0,0,0,0,15,15,21,22,0,19,20,0,0,0,18,18,0,0,0,18,17,0,0,0,0,0,0,0,0,16,16,22,22,0,20,20,0,0,0,21,19,0,0,0,15,15,20,19,0,16,16,22,20,0,17,17,0,22,0,18,18,0,22,0,19,17,0,0,0,15,16,22,20,0,18,19,0,0,0,16,16,22,20,0,18,18,0,22,0,18,18,22,0,0,16,16,21,20,0,19,20,0,22,0,16,16,0,22,0,18,18,0,22,0,18,18,0,21,0,19,18,0,22,0,0,0,0,0,0,16,16,21,20,0,20,0,0,0,0,18,18,21,0,0,18,18,0,0,0,0,0,0,0,0,16,16,21,19,0,0,0,0,0,0,18,18,0,21,2,3,3,3,3,3,3,1,6,6,7,7,7,7,8,8,7,9,9,11,11,11,9,8,8,8,9,9,12,11,11,9,8,8,6,7,7,10,11,10,10,10,10,11,11,10,14,13,14,12,11,11,11,11,11,15,14,14,13,12,12,5,6,6,8,5,5,8,7,7,8,8,8,12,10,10,9,7,7,9,7,8,12,10,10,10,7,7,7,8,8,12,10,10,12,10,10,11,10,10,15,13,13,13,10,10,11,10,10,16,13,14,14,10,10,7,7,7,12,11,11,12,11,11,11,11,11,16,15,15,14,12,12,12,11,11,16,15,16,14,12,12,10,9,9,14,11,11,13,11,11,12,11,11,16,14,14,14,11,11,12,11,11,17,15,15,14,11,11,7,8,8,12,11,11,12,10,10,12,10,10,16,14,13,14,10,10,12,10,10,17,14,14,14,10,10,8,7,7,13,11,11,12,11,11,12,11,11,16,15,14,14,12,12,12,11,11,16,15,14,15,12,12,11,10,10,13,11,11,13,12,11,13,11,11,17,14,14,14,11,11,13,11,11,17,14,15,14,11,11,2,6,6,7,7,7,7,7,7,7,8,8,9,9,9,9,7,7,8,8,8,9,9,9,9,7,8,6,7,7,8,8,8,8,8,8,9,8,8,10,9,9,10,8,8,10,8,8,10,9,9,10,8,8,6,6,6,8,6,6,8,7,7,8,7,7,10,8,8,9,7,7,9,7,7,10,8,9,9,7,7,7,7,7,10,8,8,11,8,8,10,8,8,12,9,9,12,8,8,11,9,9,12,9,9,11,8,8,7,7,7,10,9,9,10,9,9,10,9,9,11,10,10,10,9,9,11,9,9,11,10,10,11,9,9,9,8,8,10,9,9,10,9,9,11,9,9,11,10,10,11,9,9,11,9,9,11,10,10,11,9,9,8,8,8,11,9,9,11,9,9,11,9,9,12,9,9,12,8,8,12,9,9,12,9,9,12,8,8,8,7,7,10,9,9,10,9,9,11,9,9,11,11,11,11,9,9,11,10,10,11,11,11,11,9,9,10,9,9,11,9,9,11,9,10,11,10,9,11,10,10,11,9,9,11,9,10,11,10,10,11,9,9,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,1,9,9,6,9,9,5,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,1,3,2,5,4,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,15,15,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,4,13,9,9,12,15,17,4,2,18,5,7,10,14,18,11,8,6,5,6,8,11,14,8,5,5,3,5,8,11,13,9,6,7,5,5,7,9,10,11,10,9,8,6,6,8,10,14,14,11,11,9,8,9,10,17,17,14,13,10,9,10,10,1,3,2,3,1,4,4,8,8,8,8,9,9,10,10,10,10,4,6,5,8,7,9,9,9,9,10,9,11,9,4,5,6,7,8,9,9,9,9,9,10,9,10,8,9,8,9,8,10,9,11,9,12,10,12,10,8,8,9,8,9,9,10,9,11,10,12,10,12,9,10,10,11,10,12,11,12,11,12,12,12,12,9,10,10,11,11,11,11,11,12,12,12,12,12,10,11,11,12,12,12,12,12,12,12,12,12,12,10,11,11,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,13,12,13,12,13,12,12,11,12,12,12,12,12,12,13,12,12,12,12,12,12,12,12,13,13,12,13,12,13,12,13,12,12,12,13,12,13,12,13,12,13,12,13,12,12,12,3,4,4,5,5,4,4,5,5,5,4,5,4,5,5,5,5,6,5,6,5,6,5,6,5,1,4,4,4,4,4,4,4,4,3,5,16,9,9,13,18,21,4,2,21,6,6,10,15,21,16,19,6,5,7,10,13,16,8,6,5,4,4,8,13,16,8,5,6,4,4,7,12,15,13,10,9,7,7,9,13,16,18,15,13,12,9,7,10,14,21,18,13,13,7,5,8,12,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,9,9,0,0,0,8,8,0,0,0,9,9,0,0,0,12,12,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,11,11,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,11,11,0,0,0,0,0,0,0,0,12,12,0,0,0,0,0,0,0,0,11,11,0,0,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,5,5,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,5,5,0,0,0,7,7,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,5,5,0,0,0,7,7,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,11,0,0,0,9,9,0,0,0,10,10,0,0,0,10,10,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,12,12,0,0,0,0,0,0,0,0,11,11,0,0,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,0,0,7,7,0,0,0,8,8,0,0,0,10,10,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,8,8,0,0,0,9,9,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,0,0,0,7,7,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,8,8,0,0,0,9,9,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,8,8,0,0,0,9,9,0,0,0,0,0,0,0,0,11,11,0,0,0,0,0,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,0,0,0,7,7,0,0,0,8,8,0,0,0,10,11,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,8,8,0,0,0,9,9,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,7,7,0,0,0,9,9,0,0,0,0,0,0,0,0,11,11,0,0,0,0,0,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,0,0,0,7,7,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,7,8,0,0,0,9,9,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,8,8,0,0,0,9,9,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,0,0,0,9,9,0,0,0,10,10,0,0,0,11,11,0,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,8,8,0,0,0,10,10,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,11,11,0,0,0,0,0,0,0,0,9,9,0,0,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,0,0,0,9,9,0,0,0,10,10,0,0,0,12,12,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,9,9,0,0,0,10,10,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,8,8,0,0,0,10,10,0,0,0,0,0,0,0,0,11,11,0,0,0,0,0,0,0,0,10,10,0,0,0,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,6,5,7,8,0,8,8,6,9,9,7,10,10,0,8,8,0,9,9,0,12,12,0,8,8,4,7,7,6,10,10,0,12,12,7,11,11,8,12,12,0,12,12,0,13,12,0,15,15,0,12,12,0,7,7,0,7,7,0,7,7,0,8,8,0,10,10,0,7,7,0,8,8,0,11,11,0,7,7,5,7,7,8,9,9,0,10,10,8,9,9,11,11,11,0,10,9,0,11,11,0,13,13,0,10,10,6,7,7,8,10,10,0,12,12,9,10,10,10,12,12,0,12,12,0,12,12,0,15,15,0,12,12,0,10,10,0,11,11,0,11,11,0,11,11,0,13,13,0,11,11,0,11,11,0,15,15,0,10,10,0,8,8,0,10,10,0,12,12,0,11,11,0,12,12,0,12,12,0,12,12,0,15,15,0,11,11,0,7,7,0,10,10,0,12,12,0,10,10,0,12,12,0,12,12,0,13,13,0,14,14,0,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,5,5,0,8,8,0,8,8,0,9,9,0,10,10,0,8,8,0,8,8,0,10,10,0,8,8,0,7,7,0,8,8,0,7,7,0,8,8,0,8,8,0,8,8,0,8,8,0,8,8,0,8,8,0,7,7,0,6,6,0,7,7,0,7,7,0,10,10,0,6,6,0,7,7,0,10,10,0,5,5,0,8,8,0,7,7,0,8,8,0,8,8,0,9,9,0,7,7,0,8,8,0,9,9,0,7,7,0,6,6,0,9,10,0,10,10,0,10,10,0,11,11,0,9,9,0,10,10,0,11,11,0,9,9,0,8,8,0,8,8,0,8,8,0,9,9,0,9,9,0,7,7,0,8,8,0,9,9,0,7,7,0,8,8,0,7,7,0,7,7,0,8,8,0,9,9,0,7,7,0,7,7,0,8,8,0,6,6,0,6,6,0,10,10,0,10,10,0,10,10,0,12,12,0,9,9,0,10,10,0,12,12,0,9,9,0,8,8,0,7,7,0,7,7,0,8,8,0,9,9,0,7,7,0,8,8,0,9,9,0,6,6,1,6,6,6,7,7,7,8,8,7,8,8,10,11,11,9,8,8,8,8,8,11,11,12,9,8,8,5,7,7,9,11,11,10,11,11,10,11,11,12,14,14,11,12,12,10,12,12,13,14,14,12,12,12,5,6,6,7,6,6,8,7,7,8,7,7,11,10,10,10,7,7,9,8,8,12,11,11,10,7,7,7,7,7,11,10,10,12,10,10,11,10,10,15,13,13,13,10,10,12,11,11,15,13,13,14,11,11,7,7,7,11,11,11,12,11,11,12,11,11,14,14,14,13,12,12,12,12,12,16,15,15,14,12,12,0,10,10,0,11,11,0,12,12,0,11,11,0,14,14,0,11,11,0,12,12,0,15,15,0,11,11,7,8,8,12,11,10,12,10,10,12,11,11,15,13,13,14,11,11,12,10,10,16,14,14,14,10,10,8,7,7,12,11,11,12,11,11,12,11,11,15,14,14,14,12,12,13,12,12,15,14,14,15,13,13,0,11,11,0,12,12,0,12,12,0,12,12,0,15,15,0,12,12,0,13,13,0,15,14,0,12,12,4,5,5,9,9,12,9,9,12,12,12,10,10,13,13,13,11,11,12,12,13,13,13,12,12,13,10,10,13,13,13,13,13,13,13,13,10,10,13,12,13,11,11,13,13,13,14,14,13,12,13,10,10,13,13,12,13,13,13,13,13,10,10,12,12,13,11,11,13,13,13,14,14,12,12,13,12,12,13,13,13,13,13,13,13,13,11,11,12,12,13,11,11,13,13,13,14,14,12,12,13,14,14,13,13,14,13,13,14,14,14,14,14,12,12,13,14,14,13,13,14,14,14,12,12,12,8,8,12,12,13,12,12,11,11,13,11,11,11,11,14,12,12,11,11,14,12,12,10,11,14,12,12,12,12,14,12,12,12,12,13,13,13,11,11,14,12,12,11,11,14,12,12,12,12,14,12,12,12,12,14,12,12,12,12,14,13,13,11,11,14,12,12,11,11,14,12,12,12,12,14,13,13,12,12,14,12,12,12,12,14,13,13,11,11,14,12,12,11,11,14,13,13,11,11,15,13,13,12,12,14,12,12,12,12,15,13,13,12,12,14,12,12,11,11,15,13,13,11,11,12,9,9,11,11,13,7,7,11,11,13,8,8,12,12,14,10,10,10,10,14,14,14,11,11,14,8,8,12,12,14,14,14,12,12,14,7,7,11,11,14,9,9,12,12,14,14,14,11,11,14,8,8,12,12,14,14,14,12,12,14,7,7,11,11,14,9,9,12,12,14,14,14,11,11,14,10,10,12,12,14,14,14,13,13,14,9,9,11,11,14,10,10,12,11,15,14,14,11,11,14,15,15,12,12,15,14,14,14,14,15,14,14,11,11,15,14,14,12,12,15,14,14,11,11,14,11,11,10,10,15,10,10,10,10,15,10,10,10,10,15,11,11,9,9,15,12,13,9,9,15,11,11,11,11,15,13,13,11,11,15,10,10,10,10,15,11,11,10,10,15,13,13,11,11,15,11,11,11,11,15,13,13,11,11,15,10,10,10,10,15,11,11,10,10,15,13,13,10,11,15,12,12,11,11,15,13,13,11,10,15,11,11,10,10,15,11,12,10,9,15,13,13,10,10,15,14,14,11,11,15,13,13,11,11,15,14,14,10,10,15,13,13,10,10,15,14,14,10,10,14,13,13,10,10,15,13,13,10,10,15,13,13,10,10,14,14,14,8,9,15,14,14,9,9,15,14,14,11,11,15,14,14,10,10,15,14,14,10,10,15,14,14,11,11,15,14,14,10,10,15,14,14,11,11,15,14,14,10,10,15,14,14,10,10,15,14,14,10,10,15,14,14,9,9,15,14,14,11,11,15,14,14,11,11,15,14,14,10,10,15,14,14,10,10,14,14,14,9,9,15,15,15,11,11,15,14,14,12,12,15,15,15,10,10,15,14,15,10,10,15,15,15,9,9,15,10,10,13,13,17,8,8,12,12,17,10,9,13,13,18,11,11,12,12,18,14,14,12,12,17,9,9,13,13,17,13,13,12,12,18,8,8,12,12,18,10,10,12,12,18,14,14,12,12,18,10,10,13,13,18,13,13,13,13,18,9,9,12,12,18,10,10,13,13,18,14,14,12,12,18,11,11,13,13,18,14,14,13,13,18,10,10,12,12,17,11,11,12,12,18,14,14,12,12,18,14,14,13,13,18,14,14,13,13,19,14,15,12,12,18,14,14,12,12,18,15,15,12,12,13,7,7,11,11,14,15,15,11,11,14,16,15,11,11,14,15,15,11,11,14,15,15,11,11,14,15,15,11,12,14,15,15,12,12,13,15,15,11,11,14,15,15,11,11,15,15,15,12,12,14,15,15,12,12,14,16,16,12,12,14,15,15,11,11,14,15,15,11,11,15,15,15,12,12,15,15,15,12,12,14,15,15,12,12,14,15,15,11,11,14,15,15,11,11,15,14,15,12,12,15,15,15,12,12,15,16,16,12,12,15,15,15,12,12,14,15,15,12,12,15,15,15,12,12,13,13,13,11,11,14,14,15,11,11,14,14,14,12,12,14,15,15,10,10,15,15,15,11,11,14,15,15,12,12,14,14,14,11,11,14,15,15,11,11,14,15,15,12,12,15,15,15,11,11,14,15,15,12,12,14,14,15,11,11,14,15,15,11,11,14,15,15,12,12,15,15,15,11,11,15,15,15,12,12,14,15,15,12,12,14,15,15,10,10,14,15,15,11,11,15,15,15,10,10,15,15,15,12,12,15,15,15,14,14,15,15,15,11,11,15,15,15,11,11,15,15,15,11,11,14,10,10,10,10,15,9,9,12,11,15,10,10,12,12,15,11,11,11,11,15,13,13,12,12,16,10,10,12,12,15,13,13,12,12,15,9,9,11,11,15,10,10,13,12,15,13,13,11,11,15,10,10,12,12,15,13,13,12,12,15,9,9,11,11,15,10,10,12,12,15,13,13,11,11,15,11,11,12,12,15,13,13,13,13,15,10,10,11,11,15,11,11,12,12,15,13,14,11,11,15,14,14,13,13,16,14,14,20,19,15,14,14,11,11,15,13,14,12,12,15,14,14,11,11,14,13,13,10,10,14,14,13,11,11,15,13,14,12,12,15,14,14,12,12,15,14,14,11,11,15,14,14,12,12,15,15,14,13,13,15,14,14,11,11,15,14,14,11,11,15,14,14,13,13,15,14,14,12,12,15,14,14,13,13,15,14,14,11,11,15,14,14,11,11,15,14,14,13,13,15,14,14,12,12,15,14,14,12,12,15,14,14,12,12,15,14,14,11,11,15,15,15,12,12,15,15,15,13,13,16,14,14,12,12,15,15,15,13,13,15,15,15,12,12,15,15,15,12,12,14,10,10,13,13,17,9,9,12,12,17,9,9,13,13,17,11,11,12,12,18,14,14,12,12,18,10,10,13,13,18,14,13,12,12,18,9,9,12,12,18,10,10,12,13,18,14,14,12,12,17,9,9,12,12,17,13,14,12,12,17,9,9,12,12,17,10,10,12,12,17,14,14,11,11,18,11,11,12,12,18,14,14,12,13,18,10,10,12,12,18,11,11,12,12,18,14,14,11,11,18,15,15,12,12,18,14,14,13,13,18,14,15,12,12,17,14,14,12,12,17,15,15,12,12,13,7,7,11,11,14,15,15,11,11,14,15,15,11,11,14,15,15,11,11,14,15,15,11,11,14,15,15,11,11,14,15,15,12,12,14,15,15,11,11,14,15,15,11,11,15,15,15,12,12,14,15,15,11,11,14,15,15,12,12,14,15,15,11,11,15,15,15,11,11,15,15,15,12,12,14,15,15,12,12,14,15,16,12,12,14,15,15,11,11,14,15,15,11,11,15,15,15,12,12,15,15,15,12,12,15,16,16,12,12,15,15,15,12,12,15,15,15,12,12,15,15,15,12,12,13,13,13,12,12,14,14,14,11,11,14,14,14,12,12,14,14,14,10,10,15,15,15,11,11,14,15,15,12,12,14,14,14,11,11,14,15,15,11,11,14,14,14,12,12,15,15,14,11,11,14,15,15,12,12,14,14,14,11,11,14,15,15,11,11,14,14,14,11,11,15,14,14,10,10,14,15,15,12,12,14,14,14,12,12,14,15,15,10,10,14,15,15,11,11,15,15,15,10,10,15,15,15,12,12,15,14,14,13,13,15,15,15,10,10,15,14,14,11,11,15,15,15,10,10,14,10,10,10,10,14,9,9,12,12,15,10,10,12,12,14,11,11,11,11,15,13,14,12,12,15,10,10,13,13,15,13,13,12,12,15,9,9,12,12,15,10,10,13,13,15,13,14,11,11,15,10,10,12,12,15,13,13,12,12,15,9,9,11,11,15,10,10,12,12,15,13,13,11,11,15,11,11,12,12,15,13,13,13,13,15,10,10,11,11,15,11,11,12,12,15,14,14,11,11,15,14,14,13,13,15,14,14,20,19,15,14,14,11,11,15,14,14,12,12,15,14,14,11,11,14,13,13,11,11,15,13,13,11,11,15,14,13,12,12,15,14,14,11,12,15,14,14,11,11,15,14,14,12,12,14,14,14,13,13,15,14,14,11,11,15,14,14,11,11,15,14,14,13,13,15,14,14,12,12,15,14,14,13,13,14,14,14,11,11,15,14,14,11,11,15,14,14,13,13,15,14,14,12,12,15,14,14,12,12,15,14,14,12,12,15,14,14,11,11,14,14,14,12,12,15,15,15,13,13,16,14,14,12,12,15,15,15,13,13,15,14,14,12,12,15,15,15,12,12,15,11,11,13,13,18,10,10,12,12,17,11,11,12,12,18,12,12,11,11,18,14,14,12,12,18,10,10,13,13,18,14,14,12,12,18,10,10,12,12,18,11,11,12,12,18,14,14,12,12,18,11,11,12,13,18,14,14,12,12,18,10,10,12,12,18,11,11,12,12,18,14,14,11,11,18,11,11,12,12,18,14,14,12,12,17,10,10,11,11,17,12,12,11,11,17,14,14,11,11,18,15,15,12,12,18,14,14,13,13,18,15,15,11,11,18,15,14,12,12,18,15,15,11,11,14,8,8,11,11,14,15,15,10,10,14,15,15,11,11,14,15,15,11,11,15,15,15,12,12,15,15,15,11,11,15,15,15,12,12,14,15,15,10,10,15,15,15,11,11,15,15,15,12,12,15,15,15,11,11,15,15,15,13,13,14,15,15,10,10,15,15,15,11,11,15,15,15,12,12,15,15,15,12,12,15,16,16,12,12,15,14,14,11,11,15,15,15,11,11,15,15,15,12,12,16,15,15,13,13,15,16,16,13,13,16,15,15,12,12,15,15,15,12,12,15,15,15,12,12,14,13,13,11,11,14,14,14,11,11,14,14,14,12,12,15,14,14,11,11,15,15,14,11,11,15,14,14,12,12,15,14,14,12,12,14,15,15,11,11,15,14,14,12,12,15,14,14,11,11,15,14,15,12,12,15,14,14,12,12,14,15,15,11,11,15,14,14,11,11,15,14,14,11,11,15,15,14,12,12,15,14,14,12,12,15,15,15,10,11,15,14,14,11,11,15,15,15,10,10,15,15,15,12,12,16,14,14,13,13,15,15,15,11,11,15,14,14,11,11,15,15,15,11,11,14,11,11,9,9,14,10,10,12,12,15,11,11,12,12,15,12,12,12,12,15,14,14,13,13,15,11,11,12,12,15,14,14,13,13,14,10,10,12,12,15,11,11,13,13,15,14,14,12,12,15,10,10,12,12,14,14,14,13,13,14,10,10,11,11,15,11,11,12,12,15,14,14,12,12,15,12,12,13,13,15,14,14,14,14,15,11,11,11,11,15,12,11,12,12,15,14,14,11,11,15,15,15,13,14,15,14,14,20,19,15,14,14,12,12,15,14,14,13,13,15,14,14,12,12,14,13,13,10,10,14,13,13,11,11,14,13,13,11,11,15,14,14,12,12,15,14,14,12,12,15,14,14,12,11,14,14,14,13,13,15,14,14,11,11,15,14,14,11,11,15,14,14,14,14,15,14,14,11,12,15,14,14,13,13,14,14,14,11,11,15,14,14,11,11,15,14,14,14,14,15,14,14,12,12,15,14,14,13,13,15,14,14,11,11,14,14,14,12,12,15,14,14,13,13,15,15,15,13,13,15,14,14,13,13,15,15,15,13,13,15,14,14,13,13,15,15,15,13,13,15,14,14,13,13,18,15,15,12,12,18,15,15,12,12,18,16,16,11,11,18,17,17,12,12,18,15,15,13,13,18,17,17,12,12,18,15,15,12,12,18,15,16,12,12,18,17,17,12,12,18,15,15,13,12,17,16,17,12,12,17,15,15,11,12,18,15,15,12,12,18,17,17,11,11,18,16,16,12,12,18,17,16,12,12,18,15,15,11,11,18,15,15,12,12,18,17,17,11,11,18,17,17,12,12,18,16,16,13,13,18,17,17,11,11,17,16,16,11,11,18,17,17,11,11,15,15,15,11,11,16,15,15,11,11,16,15,15,11,11,16,15,15,12,12,17,15,15,14,14,16,15,15,11,11,17,15,15,14,14,16,15,15,11,11,16,15,15,12,12,18,15,15,13,13,16,15,15,11,11,17,15,15,14,14,16,15,15,11,11,16,15,15,12,12,17,15,15,13,13,16,15,15,12,12,17,16,15,14,14,16,15,15,11,11,16,15,15,12,12,18,15,15,13,13,17,15,15,14,14,17,16,16,15,15,18,14,15,13,13,18,15,15,14,14,18,15,15,13,13,15,13,13,12,12,15,14,14,12,12,16,14,14,12,12,16,14,14,12,12,17,14,15,12,12,16,14,14,12,12,17,14,14,13,13,16,15,15,12,12,16,14,14,12,12,17,14,14,12,12,16,14,14,12,12,17,14,14,13,13,15,15,15,11,11,16,14,14,12,12,17,14,14,12,12,16,15,15,12,12,17,14,14,13,12,16,15,15,11,11,16,14,14,12,12,17,15,15,11,11,17,15,15,13,13,17,14,14,13,13,18,15,15,12,12,17,14,14,12,12,17,15,15,12,12,14,15,15,9,9,14,15,15,12,12,15,16,15,13,13,15,15,15,14,14,15,15,15,21,19,15,15,15,13,13,15,15,15,19,19,15,15,15,12,12,15,16,16,14,14,15,15,15,19,19,15,16,15,13,13,15,16,16,19,20,15,15,15,12,13,15,16,16,14,14,15,15,15,20,19,15,15,15,14,14,15,16,16,19,19,15,15,15,14,13,15,15,15,14,14,15,15,15,19,19,15,16,16,20,19,15,17,16,21,20,15,15,15,20,19,15,16,16,20,20,15,15,15,19,20,14,13,13,10,10,14,14,14,11,11,14,14,14,12,12,15,14,14,13,13,15,15,14,20,20,15,14,14,12,12,14,14,14,19,19,15,14,14,11,11,15,14,14,12,12,15,14,14,20,19,15,14,14,12,12,14,14,14,20,20,14,14,14,11,11,15,14,14,12,12,15,14,14,20,21,15,14,14,13,13,15,14,14,20,20,15,14,14,12,12,15,14,14,13,13,14,15,15,20,20,15,15,15,20,19,15,14,14,20,19,15,15,15,20,20,15,14,14,21,20,15,15,15,20,20,1,7,6,15,15,7,8,8,15,15,8,8,8,15,15,0,13,13,16,16,0,14,14,16,16,7,9,9,16,16,10,11,11,17,17,10,8,8,15,16,0,14,14,18,18,0,14,14,16,16,9,9,9,16,16,12,11,11,17,17,10,9,9,15,15,0,14,14,19,19,0,14,14,16,16,0,15,15,18,17,0,0,0,20,20,0,13,13,16,16,0,17,17,22,20,0,15,15,17,17,0,15,15,18,18,0,22,21,20,21,0,13,13,16,16,0,18,18,0,22,0,15,15,17,17,6,7,7,13,13,9,10,10,15,15,11,10,10,15,15,0,21,22,18,18,0,0,0,18,18,10,10,10,15,15,12,13,13,17,17,12,11,11,15,15,0,22,22,18,18,0,0,21,18,18,12,11,11,15,15,15,14,14,18,18,13,11,11,15,15,0,0,21,18,19,0,21,22,18,19,0,22,0,18,19,0,0,0,0,0,0,21,21,18,18,0,22,0,0,21,0,0,0,19,18,0,0,0,18,19,0,0,0,0,0,0,20,20,18,17,0,0,22,0,21,0,0,0,19,19,6,6,6,13,13,8,6,6,11,11,9,7,7,13,13,0,10,10,11,11,0,12,12,14,14,9,8,8,14,14,12,10,10,13,13,10,7,7,13,13,0,11,11,15,15,0,11,11,13,13,9,8,8,14,14,13,10,10,13,14,11,7,7,13,13,0,11,11,15], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+382196);
/* memory initializer */ allocate([15,0,11,11,13,13,0,12,12,15,15,0,21,21,17,17,0,10,10,13,13,0,14,14,20,20,0,12,12,13,13,0,12,12,15,15,0,21,22,17,18,0,10,10,13,13,0,16,16,20,21,0,12,12,13,13,0,11,11,13,13,0,12,12,16,16,0,12,12,16,16,0,16,16,0,21,0,17,18,0,0,0,12,12,15,15,0,15,15,18,18,0,12,12,16,16,0,16,16,21,22,0,17,17,22,21,0,12,12,16,16,0,15,15,19,19,0,12,12,16,16,0,16,16,22,22,0,17,16,22,0,0,17,18,0,0,0,0,0,0,0,0,15,15,21,20,0,19,20,0,22,0,18,18,0,0,0,18,17,0,0,0,0,0,0,0,0,16,16,22,21,0,20,20,0,22,0,20,19,0,0,0,11,11,12,12,0,10,10,11,11,0,11,11,12,12,0,12,12,10,10,0,13,13,12,12,0,11,11,13,13,0,13,13,12,12,0,10,10,12,12,0,13,13,14,13,0,12,12,12,12,0,12,12,13,13,0,14,14,13,13,0,10,10,12,12,0,13,13,14,14,0,13,12,12,12,0,14,14,14,14,0,21,21,16,16,0,12,12,12,12,0,16,16,20,21,0,13,13,11,11,0,14,14,14,14,0,20,20,16,15,0,12,12,12,12,0,17,17,20,20,0,13,13,11,11,7,8,8,16,16,11,10,10,15,15,12,10,10,17,17,0,14,14,16,15,0,15,15,17,17,11,9,9,16,16,14,12,12,17,17,13,9,9,16,15,0,14,14,19,18,0,14,14,16,16,12,10,10,17,18,16,13,13,17,18,14,10,10,16,16,0,14,14,19,19,0,14,15,17,17,0,15,15,18,19,0,0,0,20,20,0,13,13,17,17,0,17,18,0,22,0,15,15,16,17,0,15,15,18,18,0,0,0,20,21,0,14,14,17,17,0,19,18,0,0,0,16,16,17,17,8,7,7,14,14,12,11,11,15,15,13,11,11,15,15,0,0,0,18,19,0,21,20,18,18,12,10,11,15,16,14,13,13,18,18,14,11,11,15,15,0,20,20,19,18,0,20,0,18,18,13,11,11,16,16,17,15,15,19,19,14,12,12,15,15,0,21,0,18,20,0,22,22,18,19,0,22,22,19,19,0,0,0,0,0,0,21,22,19,18,0,0,0,0,21,0,0,0,19,19,0,0,22,20,20,0,0,0,0,0,0,22,0,18,18,0,0,0,0,22,0,0,0,19,20,11,10,10,14,14,14,11,11,13,13,14,11,11,15,15,0,14,13,12,12,0,15,15,16,16,13,11,11,15,15,16,13,13,15,15,15,10,10,14,15,0,14,14,16,16,0,14,14,15,15,13,11,11,15,15,18,14,14,15,15,15,10,10,15,14,0,14,14,16,16,0,14,14,15,15,0,15,15,17,16,0,21,22,18,18,0,13,13,14,14,0,18,17,20,21,0,15,15,14,14,0,15,16,16,17,0,0,0,19,18,0,13,13,15,14,0,19,19,0,0,0,15,15,14,14,0,12,12,14,13,0,13,13,16,16,0,12,12,16,16,0,16,16,22,0,0,17,18,0,22,0,13,13,16,16,0,15,15,18,18,0,12,12,16,16,0,16,16,22,22,0,17,17,0,0,0,13,13,17,17,0,16,16,19,20,0,12,12,17,17,0,17,17,22,0,0,17,17,22,21,0,18,18,0,0,0,0,0,0,0,0,16,16,21,21,0,19,19,0,0,0,18,18,0,22,0,18,18,0,22,0,0,0,0,0,0,16,16,22,0,0,20,20,0,0,0,19,18,0,0,0,12,12,15,15,0,12,12,15,14,0,13,13,15,15,0,14,14,14,14,0,15,15,16,16,0,13,13,15,16,0,15,15,16,16,0,12,12,15,15,0,14,14,16,16,0,14,14,15,15,0,13,13,15,16,0,15,15,16,16,0,12,12,15,15,0,15,15,17,17,0,14,14,15,15,0,15,15,17,17,0,21,21,19,19,0,13,13,14,14,0,17,17,22,0,0,14,14,15,15,0,15,15,17,17,0,22,0,18,20,0,13,13,15,15,0,18,18,0,22,0,15,15,14,15,8,8,8,17,16,12,10,10,16,16,13,10,10,17,16,0,15,15,17,17,0,15,15,17,17,12,11,11,18,18,15,12,12,18,18,15,10,10,16,17,0,14,14,18,18,0,14,14,17,17,13,10,10,16,16,17,14,14,17,17,15,10,10,16,15,0,15,15,19,20,0,14,14,15,16,0,16,16,19,19,0,0,0,21,22,0,13,13,17,17,0,18,17,0,21,0,15,15,17,17,0,15,15,18,19,0,0,22,0,21,0,13,13,16,17,0,19,19,0,22,0,16,15,16,16,9,8,8,14,14,12,11,11,15,15,13,11,11,15,15,0,21,20,19,18,0,0,0,19,18,12,11,11,16,15,15,13,13,17,18,14,11,11,15,15,0,22,22,19,18,0,22,21,18,18,14,11,11,15,15,17,14,14,18,18,15,12,12,15,15,0,22,22,20,19,0,0,21,18,18,0,0,22,20,20,0,0,0,0,0,0,20,21,18,18,0,0,0,21,21,0,0,0,20,19,0,22,21,19,19,0,0,0,0,0,0,0,22,17,18,0,0,22,0,22,0,22,0,19,19,0,11,11,15,15,0,11,11,14,14,0,12,12,15,15,0,15,15,14,14,0,16,16,16,16,0,12,12,16,16,0,14,14,16,16,0,11,11,15,15,0,15,15,17,17,0,15,15,15,15,0,12,12,16,16,0,14,14,15,15,0,11,11,15,15,0,15,15,17,17,0,15,15,14,15,0,16,16,17,17,0,0,0,19,19,0,14,14,15,15,0,18,18,21,0,0,15,15,14,15,0,16,16,17,17,0,21,0,19,19,0,14,14,15,15,0,20,20,22,0,0,16,15,14,14,0,12,12,13,13,0,12,12,16,16,0,12,12,16,16,0,16,16,22,21,0,18,17,21,0,0,13,13,16,16,0,15,15,18,19,0,12,12,16,16,0,16,17,22,0,0,17,17,0,22,0,13,13,17,16,0,15,15,19,19,0,12,12,16,16,0,16,16,21,20,0,17,16,22,0,0,18,18,22,21,0,0,0,0,0,0,15,16,21,21,0,19,19,0,0,0,18,17,0,0,0,18,18,21,0,0,0,0,0,0,0,16,16,22,22,0,20,21,0,0,0,18,19,0,22,0,13,13,16,16,0,12,12,15,15,0,13,13,16,16,0,14,14,15,15,0,15,15,17,17,0,13,13,17,16,0,15,15,17,17,0,12,12,16,16,0,15,15,17,17,0,14,14,16,16,0,13,13,16,17,0,15,15,17,17,0,12,12,16,16,0,14,14,17,17,0,14,14,16,16,0,16,16,17,17,0,21,0,21,19,0,13,13,16,16,0,17,17,0,0,0,15,15,16,16,0,16,15,18,18,0,22,0,20,20,0,13,13,15,15,0,18,18,0,0,0,15,15,15,15,0,12,12,17,17,0,14,14,17,17,0,14,14,17,17,0,17,17,18,17,0,17,17,19,18,0,13,13,17,17,0,16,16,18,18,0,13,13,16,16,0,17,17,19,19,0,16,16,17,17,0,13,13,18,18,0,17,17,18,18,0,13,13,17,17,0,17,17,19,19,0,16,17,17,17,0,17,17,19,19,0,21,0,21,19,0,14,14,16,16,0,20,19,0,21,0,16,16,16,16,0,17,18,19,19,0,0,0,0,21,0,15,15,16,17,0,21,20,0,0,0,17,18,16,17,0,9,9,14,14,0,14,14,15,16,0,14,14,15,15,0,0,0,18,18,0,21,0,18,19,0,12,12,15,15,0,16,16,17,17,0,14,14,14,14,0,22,0,19,18,0,22,0,17,18,0,14,14,16,15,0,18,18,19,18,0,14,15,15,15,0,0,21,20,20,0,0,0,18,18,0,21,21,19,19,0,0,0,0,0,0,21,21,18,18,0,22,0,20,20,0,22,0,19,19,0,22,0,19,20,0,0,0,0,0,0,0,21,17,18,0,0,0,22,22,0,0,0,19,18,0,18,20,16,16,0,21,20,17,17,0,0,21,18,18,0,22,21,18,18,0,0,22,19,19,0,20,20,17,17,0,0,0,18,18,0,19,20,17,17,0,22,0,19,21,0,22,21,18,18,0,20,19,17,18,0,0,0,19,19,0,20,20,17,17,0,22,22,21,21,0,20,0,18,18,0,22,22,18,18,0,0,0,20,22,0,20,20,16,16,0,0,0,21,0,0,21,20,16,17,0,22,0,19,20,0,0,0,21,20,0,19,21,17,17,0,0,0,0,0,0,21,21,17,17,0,12,12,13,13,0,14,14,16,16,0,14,14,16,16,0,18,18,0,0,0,19,18,22,0,0,13,13,16,16,0,16,16,18,18,0,13,13,16,16,0,17,18,21,0,0,18,18,21,0,0,13,13,16,16,0,17,17,19,20,0,13,13,16,17,0,18,18,21,0,0,18,18,21,0,0,18,19,0,21,0,0,0,0,0,0,16,16,21,20,0,20,20,0,0,0,18,19,0,0,0,18,18,0,0,0,0,0,0,0,0,16,16,0,21,0,22,22,0,0,0,19,19,0,0,0,16,16,19,20,0,17,16,22,21,0,17,17,21,20,0,19,18,0,22,0,19,19,22,22,0,16,15,22,22,0,19,19,0,21,0,15,15,20,20,0,18,19,0,21,0,18,18,22,22,0,16,16,21,20,0,20,19,21,22,0,16,15,20,20,0,19,19,0,22,0,18,18,21,0,0,19,18,21,22,0,0,0,0,0,0,16,16,19,21,0,20,22,0,22,0,18,18,20,21,0,19,18,0,22,0,0,0,22,0,0,16,16,20,20,0,21,21,0,0,0,18,18,21,0,0,12,12,17,17,0,15,14,17,17,0,14,14,18,18,0,17,17,17,18,0,18,18,18,18,0,13,13,18,18,0,16,17,19,18,0,13,13,16,17,0,17,17,18,19,0,17,17,17,17,0,13,13,17,17,0,17,18,18,18,0,13,13,16,16,0,18,18,19,20,0,16,17,17,16,0,17,18,19,18,0,0,0,22,21,0,15,15,16,16,0,20,20,21,22,0,17,17,16,16,0,16,17,18,18,0,0,0,21,21,0,15,15,16,16,0,21,20,0,0,0,17,17,16,16,0,10,10,14,14,0,14,14,15,15,0,14,14,15,15,0,22,0,18,18,0,0,0,19,19,0,13,13,15,16,0,17,16,18,18,0,14,14,15,15,0,21,21,19,18,0,22,21,18,17,0,14,14,15,15,0,18,18,19,18,0,15,15,14,14,0,22,21,19,19,0,22,21,17,18,0,0,0,19,19,0,0,0,0,0,0,20,22,17,17,0,0,22,22,20,0,0,0,19,18,0,21,22,19,18,0,0,0,0,0,0,22,22,17,18,0,0,0,21,22,0,0,0,19,18,0,20,20,17,17,0,21,21,17,18,0,21,22,18,18,0,21,0,18,18,0,22,0,19,19,0,19,21,18,18,0,0,22,18,18,0,22,21,17,17,0,22,0,20,20,0,0,0,18,18,0,22,21,18,18,0,21,0,19,19,0,20,21,17,17,0,0,22,22,20,0,21,22,17,17,0,0,21,19,18,0,0,0,21,21,0,21,20,16,17,0,0,0,0,0,0,21,0,17,17,0,21,0,19,20,0,0,0,20,22,0,20,20,17,17,0,0,0,0,0,0,21,21,17,17,0,12,12,13,13,0,14,14,16,16,0,14,14,16,16,0,18,18,21,0,0,19,19,22,0,0,13,13,16,16,0,16,16,18,18,0,13,13,16,16,0,18,18,21,22,0,18,18,0,22,0,13,13,16,16,0,17,17,20,18,0,13,13,16,16,0,19,18,0,22,0,18,18,22,21,0,18,19,0,0,0,0,0,0,0,0,16,16,21,21,0,21,21,0,0,0,18,19,0,0,0,19,19,21,0,0,0,0,0,0,0,16,16,0,21,0,20,20,0,0,0,20,20,0,0,0,16,16,21,20,0,18,17,21,22,0,17,18,0,21,0,18,19,22,22,0,19,19,0,22,0,16,17,21,22,0,20,19,0,0,0,16,16,20,21,0,19,19,0,0,0,19,19,0,22,0,17,17,21,21,0,19,20,0,0,0,16,16,0,20,0,19,20,0,21,0,18,18,0,22,0,19,20,22,22,0,0,0,0,22,0,17,17,0,21,0,21,21,0,0,0,18,19,23,21,0,20,19,0,0,0,0,0,0,0,0,17,17,0,20,0,0,0,0,0,0,19,19,23,22,2,3,3,3,3,3,3,1,7,7,7,8,8,7,8,8,7,9,9,11,11,11,9,8,8,8,9,9,12,11,12,9,8,8,6,7,7,10,11,11,10,10,10,11,11,11,14,14,14,12,11,12,11,11,11,15,15,14,13,12,12,5,6,6,8,5,5,8,7,7,8,7,7,12,10,10,10,7,6,9,8,8,12,10,10,10,6,6,7,8,8,12,10,10,12,10,10,11,10,10,16,14,14,13,10,10,12,10,10,15,14,14,14,10,10,7,7,7,13,11,11,13,11,11,12,11,11,16,14,14,14,12,12,12,11,11,18,15,15,14,12,12,10,9,10,14,11,11,13,11,11,12,11,11,17,14,14,14,11,11,13,11,11,16,15,15,14,11,11,7,8,8,13,11,11,12,10,10,12,10,10,16,14,13,13,10,10,12,10,10,17,14,14,14,10,10,8,7,7,12,11,11,13,11,11,12,11,11,16,15,14,14,12,12,12,11,11,16,15,15,14,12,12,11,10,10,14,11,11,13,11,11,13,11,11,17,14,14,14,11,11,13,11,11,18,14,15,15,11,10,2,6,6,6,7,7,7,7,7,7,8,8,9,9,9,9,7,7,8,8,8,9,9,9,9,8,8,6,7,7,8,8,8,8,8,8,9,8,8,9,8,9,9,8,8,10,8,8,10,9,9,10,8,8,6,6,6,8,6,6,8,7,7,8,7,7,10,8,8,9,7,7,9,7,7,10,8,8,9,7,7,7,7,7,10,8,8,11,9,9,10,9,9,11,9,9,11,8,8,11,9,9,12,9,9,12,8,8,7,7,7,10,9,9,10,9,9,10,9,9,11,10,10,10,9,9,11,9,10,11,10,11,10,9,9,9,8,8,10,9,9,10,9,9,11,9,9,11,10,10,11,9,9,11,9,9,11,10,10,11,9,9,8,8,8,11,9,9,11,9,9,11,9,9,12,9,9,12,8,8,11,9,9,12,9,9,12,8,8,8,7,7,10,9,9,10,9,9,10,9,9,11,11,11,11,9,9,11,10,10,11,11,11,11,9,9,10,9,9,11,9,9,11,9,10,11,10,10,11,10,10,11,9,9,11,10,10,11,10,10,11,9,9,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,1,9,9,7,9,9,8,8,9,9,9,9,9,9,9,8,9,9,7,9,9,9,9,9,9,9,9,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,6,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,5,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,5,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,1,3,2,5,4,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,15,15,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,5,13,9,9,12,16,18,4,2,20,6,7,10,15,20,10,7,5,5,6,8,10,13,8,5,5,3,5,7,10,11,9,7,6,5,5,7,9,9,11,10,8,7,6,6,8,8,15,15,10,10,9,7,8,9,17,19,13,12,10,8,9,9,1,3,2,3,1,4,4,8,8,9,8,9,9,10,10,10,10,4,6,5,8,7,9,9,9,9,10,9,10,10,4,5,6,7,8,9,9,9,9,9,10,9,10,8,9,8,9,8,10,9,11,9,12,10,11,10,8,8,9,8,9,9,10,9,11,10,11,10,12,9,10,10,11,10,11,11,12,11,12,12,12,12,9,10,10,11,11,11,11,11,12,12,12,12,12,10,11,11,12,12,12,12,12,12,12,12,12,12,10,11,11,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,13,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,12,12,11,13,12,12,12,13,12,12,12,12,12,12,12,3,4,4,5,5,4,4,5,5,5,4,5,4,5,5,5,5,6,5,6,5,6,5,6,5,1,4,4,4,4,4,4,4,4,4,7,12,14,15,18,20,20,5,3,4,6,9,11,15,19,9,4,3,4,7,9,13,18,11,6,3,3,5,8,13,19,14,9,6,5,7,10,16,20,16,11,9,8,10,10,14,16,21,14,13,11,8,7,11,14,21,14,13,9,6,5,10,12,2,5,5,5,7,7,5,7,7,5,7,7,7,8,9,7,9,9,5,7,7,7,9,9,7,9,8,5,7,8,8,9,10,8,9,10,8,9,10,9,10,12,10,11,11,8,10,10,10,11,11,9,11,11,5,8,7,8,9,9,8,10,9,8,10,10,9,11,11,10,11,11,8,10,9,10,11,11,9,12,10,5,8,8,7,9,10,8,10,9,7,9,9,9,10,11,9,11,11,8,10,9,10,11,11,10,11,11,7,9,9,9,10,11,9,11,11,9,9,11,10,10,13,11,11,12,9,11,11,11,12,13,11,13,12,7,9,9,9,11,11,9,11,10,9,11,10,10,11,12,11,13,12,9,11,11,11,12,13,11,13,11,5,8,8,8,9,10,7,10,9,8,9,10,10,11,11,10,11,11,7,9,9,9,11,11,9,11,10,7,9,9,9,10,11,9,11,11,9,11,11,11,11,13,11,13,12,9,10,11,11,12,13,10,12,11,7,9,9,9,11,11,9,11,10,9,11,11,11,12,13,11,13,12,9,11,9,11,12,11,10,13,10,4,6,6,9,9,6,7,8,10,10,6,8,7,10,10,8,10,10,12,13,8,10,10,13,12,6,7,8,10,10,7,8,9,10,11,8,9,9,11,11,10,10,11,12,14,10,11,11,14,13,6,8,7,10,10,8,9,9,11,11,7,9,8,11,10,10,11,11,13,14,10,11,10,14,12,9,10,10,12,12,10,10,11,12,13,10,11,11,13,13,12,12,13,12,15,13,14,13,15,14,9,10,10,12,12,10,11,11,13,13,10,11,10,13,12,13,13,14,14,15,12,13,12,15,12,6,7,8,10,11,8,9,10,11,12,8,9,9,11,12,10,11,12,13,14,10,11,11,14,13,8,9,10,11,12,9,10,11,12,13,9,10,11,12,13,11,12,13,13,15,12,12,13,15,14,8,9,9,12,12,9,10,11,12,13,9,10,10,13,12,12,12,13,14,15,11,12,12,14,14,11,11,12,13,14,11,12,13,13,15,12,13,13,14,15,14,13,15,14,16,14,15,15,16,16,11,12,11,14,13,12,13,13,15,14,11,13,12,14,13,14,15,15,15,16,13,14,14,16,14,6,8,7,11,10,8,9,9,11,12,8,10,9,12,11,10,11,11,13,14,10,12,11,14,13,8,9,9,12,12,9,10,10,12,13,9,11,10,13,12,11,12,12,13,14,12,13,12,15,14,8,10,9,12,11,9,11,10,13,12,9,11,10,13,12,12,13,12,14,15,11,13,12,15,13,11,11,12,13,14,11,12,13,13,15,12,13,13,14,15,13,14,14,14,16,14,15,15,16,16,11,12,11,14,13,12,13,13,15,14,11,13,12,15,13,14,15,15,16,16,13,15,13,16,14,9,10,11,12,14,11,11,12,13,15,11,12,12,13,14,13,14,15,15,17,13,14,14,15,16,11,11,12,13,15,12,12,13,14,16,12,13,13,14,15,14,14,16,15,17,15,15,15,16,17,11,12,12,14,14,12,13,13,15,16,12,13,13,15,15,15,15,15,16,17,14,15,15,16,16,14,14,15,15,17,14,15,15,15,17,15,15,16,16,17,16,16,17,16,18,17,17,17,18,18,14,15,14,16,16,15,15,16,17,17,14,15,15,17,16,17,17,17,18,18,16,16,16,17,17,9,11,10,14,12,11,12,12,14,13,11,12,11,15,13,13,14,14,16,15,13,15,14,17,15,11,12,12,15,14,12,13,13,15,15,12,13,13,15,15,14,15,15,16,16,15,15,15,17,16,11,12,11,15,13,12,13,13,15,14,12,13,12,16,14,15,15,15,17,16,14,15,14,17,15,14,14,15,16,16,14,15,15,16,16,15,16,15,17,17,16,16,16,17,17,17,17,17,18,17,14,15,14,16,15,15,15,15,17,16,15,15,15,17,15,17,17,17,18,18,16,17,16,18,16,6,8,8,11,11,8,9,9,11,12,8,9,9,12,11,10,11,11,13,14,10,12,11,14,13,7,9,9,11,12,9,10,10,12,13,9,10,10,13,13,11,11,12,13,15,11,12,12,15,14,8,9,9,12,11,9,11,10,13,13,9,11,10,13,12,12,13,12,14,15,11,13,12,15,13,10,11,12,13,14,11,12,12,13,15,12,12,13,14,15,13,13,14,14,16,14,15,15,16,16,11,12,11,14,13,12,13,13,15,14,11,13,12,15,13,14,15,15,15,16,13,14,14,16,14,7,9,9,11,12,9,10,11,12,13,9,10,10,13,12,11,12,12,14,15,11,12,12,15,14,9,9,11,11,13,10,10,12,12,14,10,11,12,13,14,12,12,13,14,16,12,13,13,15,15,9,11,10,13,13,10,12,12,13,14,10,12,11,14,13,12,13,13,15,16,12,13,13,15,14,11,11,13,13,15,12,12,14,13,16,13,13,13,14,15,14,14,15,14,17,15,15,15,16,16,12,13,12,15,14,13,14,14,15,15,12,14,13,16,14,15,15,16,16,17,14,15,14,17,15,7,9,9,12,11,9,10,10,12,13,9,11,10,13,12,11,12,12,14,14,11,13,12,15,14,9,10,10,13,12,10,10,11,12,13,10,12,11,14,13,12,12,13,13,15,12,14,13,16,15,9,10,10,13,12,11,11,12,13,13,10,12,10,14,12,13,13,13,15,15,12,13,12,15,13,11,12,12,14,14,12,12,13,14,15,13,14,13,15,15,14,13,15,13,16,15,16,15,17,16,12,13,12,14,14,13,14,14,15,15,12,13,12,15,14,15,15,16,16,17,14,15,13,16,13,10,11,12,13,14,11,12,13,14,15,12,13,13,15,15,14,14,15,15,17,14,15,15,16,16,12,12,13,12,15,12,12,14,13,16,13,13,14,14,16,14,14,16,15,17,15,15,16,16,17,12,13,13,15,15,13,14,14,16,16,13,14,13,16,15,15,16,16,17,17,14,15,15,17,16,14,14,15,14,17,15,15,16,15,17,15,15,16,15,17,16,16,17,16,18,17,17,17,17,18,14,15,15,17,16,15,16,16,17,17,15,16,15,17,16,17,17,17,18,18,16,17,16,18,17,10,12,11,14,14,12,13,13,15,15,12,13,12,15,14,14,15,15,16,16,14,15,15,17,16,11,13,12,15,14,12,13,13,15,15,13,14,13,16,14,15,15,15,16,16,15,16,15,17,16,12,13,13,15,15,13,14,14,16,16,12,14,13,16,15,15,16,16,17,17,15,16,15,17,16,14,15,15,16,16,14,15,15,16,16,15,16,16,17,16,16,16,16,16,17,17,18,17,18,17,14,15,15,17,16,15,16,16,17,17,15,16,15,17,16,17,17,18,18,18,16,17,16,18,16,6,8,8,11,11,8,9,9,11,12,8,9,9,12,11,10,11,12,13,14,10,11,11,14,13,8,9,9,11,12,9,10,11,12,13,9,10,11,13,13,11,12,13,13,15,12,12,12,15,14,7,9,9,12,11,9,10,10,13,13,9,10,10,13,12,11,12,12,14,15,11,12,11,15,13,11,11,12,13,14,11,12,13,13,15,12,13,13,14,15,13,14,14,14,16,14,15,15,16,16,10,12,11,14,13,12,13,12,14,14,11,12,12,15,13,14,15,15,16,16,13,14,13,16,14,7,9,9,11,12,9,10,11,12,13,9,10,10,13,12,11,12,13,14,15,11,12,12,14,14,9,10,10,12,13,10,10,12,12,14,11,12,11,13,13,12,12,14,13,15,13,13,13,15,15,9,10,10,12,13,10,11,12,13,14,10,11,10,13,12,13,13,14,15,16,12,13,12,15,13,12,13,13,14,14,12,12,13,14,15,13,14,14,15,15,14,13,15,13,16,15,16,15,17,16,11,12,12,14,14,13,13,14,15,15,12,13,12,15,14,15,15,16,16,17,14,14,13,16,13,7,9,9,12,11,9,10,10,12,13,9,11,10,13,12,11,12,12,14,15,11,12,12,15,14,9,10,11,13,13,10,11,12,13,14,10,12,12,14,13,12,13,13,14,16,12,13,13,16,15,9,11,9,13,11,10,12,11,13,13,10,12,10,14,12,12,13,13,15,15,12,13,12,16,14,12,12,13,14,15,12,13,14,14,15,13,14,14,15,15,14,14,15,15,17,15,16,15,17,16,11,13,11,15,13,13,14,13,15,14,12,14,12,16,13,15,15,15,16,16,14,15,14,17,14,10,11,12,14,14,12,12,13,14,15,12,13,13,15,15,14,15,15,16,17,14,15,15,16,16,12,12,13,15,15,13,13,14,15,16,13,14,14,16,16,15,15,16,16,17,15,16,16,17,17,11,12,13,14,15,13,13,14,15,16,12,13,13,15,15,15,15,16,16,17,15,15,15,16,16,14,15,15,16,17,15,15,16,16,17,15,16,16,17,17,16,16,17,16,18,17,17,17,18,18,14,15,15,16,16,15,16,16,16,17,15,15,15,16,16,17,17,17,18,18,16,16,16,17,16,10,12,11,14,13,12,13,13,15,15,11,13,12,15,14,14,15,15,16,16,14,15,14,17,15,12,13,13,15,15,13,13,14,16,16,13,14,14,16,16,15,15,15,16,17,15,16,16,17,17,12,13,12,15,12,13,14,13,16,14,12,14,12,16,13,15,16,15,17,16,14,16,14,17,15,14,15,15,16,17,15,15,16,17,17,15,16,16,17,17,16,16,17,17,18,17,18,17,18,18,14,15,14,17,14,15,16,15,17,15,15,16,15,17,15,17,17,17,18,17,16,17,16,18,16,9,11,11,14,14,11,12,12,14,14,11,12,12,15,14,13,14,14,16,16,13,15,14,16,16,10,11,12,14,14,11,12,13,15,15,12,13,13,15,15,13,14,15,16,17,14,15,15,17,16,11,12,12,15,14,12,13,13,15,15,12,13,13,15,15,14,15,15,16,16,14,15,15,17,16,12,13,14,15,16,13,14,14,15,16,13,14,15,16,16,15,15,16,16,18,16,16,16,18,17,14,14,14,16,15,15,15,15,17,16,14,15,15,17,16,16,17,17,18,17,16,16,16,18,16,10,12,12,14,14,11,12,13,15,15,12,13,13,15,15,13,14,15,16,17,14,15,15,17,16,11,12,13,14,15,12,12,14,15,16,13,13,14,15,16,14,14,15,16,17,15,15,16,17,17,12,13,13,15,15,13,14,14,16,16,13,14,13,16,15,15,16,15,17,17,15,16,15,17,16,13,13,15,14,17,14,13,16,15,17,15,14,16,15,17,15,15,17,16,18,16,16,17,17,18,14,15,15,17,16,15,16,16,17,17,15,16,15,17,16,17,17,17,18,18,16,17,16,18,17,10,12,11,14,14,11,12,13,15,15,12,13,12,15,15,14,15,15,16,16,14,15,15,17,16,11,12,12,15,15,12,13,13,15,15,13,14,13,16,15,14,15,15,16,16,15,16,15,17,16,11,13,13,15,15,13,14,14,15,15,12,14,13,16,15,15,16,15,17,17,15,16,15,17,16,13,15,14,16,16,14,15,14,16,16,15,16,15,17,16,15,16,16,16,17,16,17,16,18,17,14,15,15,16,16,15,16,16,17,17,15,15,15,17,16,17,17,17,18,18,16,16,16,18,16,12,13,13,15,16,13,14,14,15,16,13,14,14,16,16,15,15,16,16,18,15,16,16,17,17,13,13,14,15,16,14,14,15,15,17,14,15,15,16,17,15,15,17,16,18,16,16,17,17,17,13,14,14,16,16,14,15,15,17,17,14,15,14,17,16,16,17,16,17,18,16,17,16,18,17,15,15,16,14,17,16,15,17,14,18,16,16,16,15,18,16,16,18,15,19,18,18,18,17,19,15,16,16,18,17,16,17,17,18,17,16,17,16,18,17,18,18,18,19,19,17,18,16,18,17,11,12,12,15,15,13,13,14,15,16,13,14,13,16,15,15,16,16,16,17,15,16,16,17,16,12,14,13,16,15,13,13,14,15,16,14,15,14,17,15,15,15,16,16,17,16,17,16,18,17,12,13,14,15,16,14,15,15,16,16,13,14,13,16,15,16,16,16,17,17,15,16,15,17,15,15,16,15,17,16,15,15,15,16,16,16,17,16,18,16,16,15,16,15,17,17,18,17,18,17,15,15,16,17,17,16,16,17,17,17,15,16,15,17,16,18,18,18,18,18,16,17,16,18,15,9,11,11,14,14,11,12,12,14,15,10,12,12,15,14,13,14,15,16,16,13,14,14,16,16,11,12,12,14,15,12,12,13,15,15,12,13,13,15,15,14,15,15,16,17,14,15,15,16,16,10,12,12,14,14,12,13,13,15,15,11,13,12,15,15,14,15,15,16,17,13,15,14,16,16,14,14,14,15,16,14,15,15,16,17,14,15,15,16,17,16,16,17,16,18,16,17,17,17,17,12,14,13,16,15,13,15,14,16,16,13,14,14,16,15,16,16,16,17,17,15,16,15,17,16,10,11,11,14,14,12,12,13,14,15,11,13,12,15,14,14,15,15,16,17,14,15,15,16,16,12,13,13,15,15,12,13,14,15,16,13,14,14,15,15,15,15,16,16,17,15,15,16,17,17,11,12,12,15,15,13,13,14,15,16,12,13,13,15,15,15,15,16,16,17,14,15,15,16,16,14,15,15,16,16,15,15,15,16,17,15,16,16,17,17,16,16,17,16,18,17,17,17,17,18,13,14,15,16,16,15,15,16,16,17,14,14,14,16,16,16,16,17,17,18,16,16,16,17,16,10,12,12,14,14,12,13,13,15,15,11,13,12,15,15,14,15,15,16,17,13,15,14,17,16,12,13,13,15,15,13,13,14,15,16,13,14,14,16,16,15,15,16,16,17,15,15,16,17,17,11,13,12,15,14,13,14,13,16,15,12,14,12,16,15,15,16,15,17,17,14,15,14,17,16,14,15,15,16,17,15,15,16,16,17,15,16,16,17,17,16,16,17,17,18,17,17,17,18,18,13,15,13,17,14,14,16,14,17,16,14,15,13,17,15,16,17,16,18,17,15,17,15,18,16,11,12,12,15,15,13,13,14,15,16,13,14,13,16,15,15,16,16,16,17,15,16,16,17,16,12,14,13,16,15,13,13,14,15,16,14,15,15,16,16,16,15,16,16,17,16,16,16,17,17,12,13,14,15,16,14,14,15,15,17,13,14,13,16,15,16,16,17,17,18,15,16,15,17,15,15,16,15,17,17,15,15,16,16,17,16,17,16,17,17,16,15,17,15,18,17,18,17,18,18,15,15,16,16,17,16,16,17,16,18,15,15,15,16,16,17,17,18,17,18,16,16,15,17,15,12,13,13,15,15,13,14,14,16,16,13,14,14,16,16,15,16,16,17,18,15,16,15,18,16,13,14,14,16,16,14,14,15,16,17,14,15,15,17,17,16,16,17,17,18,16,16,17,18,17,13,14,13,16,14,14,15,15,17,16,14,15,14,17,15,16,17,17,18,17,15,17,15,18,16,15,16,16,17,17,16,16,17,17,18,16,17,17,18,18,17,16,18,17,19,18,18,18,18,18,15,16,15,17,14,16,16,16,18,15,16,17,15,18,14,18,18,18,18,17,17,18,16,19,15,1,5,6,5,7,8,5,8,7,5,7,8,7,8,10,8,10,10,5,8,7,8,10,10,7,10,8,6,8,9,8,10,11,9,10,10,9,10,11,10,11,12,11,12,12,9,11,10,11,12,12,10,12,11,6,9,8,9,10,10,8,11,10,9,10,11,10,11,12,11,12,12,9,11,10,11,12,12,10,12,11,6,9,9,8,10,11,9,11,10,8,10,10,10,10,12,11,12,12,9,11,10,11,12,12,10,12,11,8,10,10,10,11,12,10,12,11,10,10,12,11,11,13,12,13,13,10,12,11,12,13,13,11,13,11,7,10,10,10,11,12,10,12,11,10,12,11,11,11,12,12,14,13,10,12,12,12,14,14,11,13,11,6,9,9,9,10,11,8,11,10,9,10,11,10,11,12,11,12,12,8,11,10,11,12,12,10,12,10,7,10,10,10,11,12,10,12,11,10,12,12,11,11,13,12,13,13,10,11,12,12,13,14,11,12,11,8,10,10,10,11,12,10,12,11,10,11,12,11,11,13,12,13,13,10,12,10,12,13,13,11,13,11,5,6,6,6,7,7,6,7,7,6,7,7,7,7,8,7,8,8,6,7,7,7,8,8,7,8,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,9,9,8,8,8,8,9,9,8,9,9,7,8,7,8,8,8,8,8,8,8,8,8,8,9,9,8,9,9,8,8,8,8,9,9,8,9,8,6,8,8,7,8,8,7,8,8,7,8,8,8,8,9,8,9,9,8,8,8,8,9,9,8,9,8,7,8,8,8,9,9,8,9,9,8,8,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,7,8,8,8,8,9,8,9,8,8,8,8,8,9,9,9,9,9,8,9,8,9,9,9,8,9,9,6,8,8,7,8,8,7,8,8,8,8,8,8,8,9,8,9,9,7,8,8,8,9,9,8,9,8,7,8,8,8,8,9,8,9,8,8,8,9,8,9,9,9,9,9,8,8,8,9,9,9,8,9,9,7,8,8,8,9,9,8,9,9,8,9,9,9,9,9,9,9,9,8,9,8,9,9,9,9,9,9,1,5,5,5,7,9,5,9,7,5,7,8,7,7,10,9,10,10,5,8,7,9,10,10,7,10,7,6,8,9,9,10,12,9,11,11,9,10,11,11,11,13,12,13,13,9,11,11,11,12,13,11,13,11,6,9,8,9,11,11,9,12,10,9,11,11,11,11,13,11,13,12,9,11,10,12,13,13,11,13,11,6,9,9,8,10,11,9,12,11,9,10,11,10,10,12,11,13,13,9,11,11,11,13,12,11,13,11,8,10,10,9,10,12,10,12,11,10,10,12,10,10,13,12,13,13,10,12,11,12,13,13,10,13,10,7,10,10,11,11,13,11,14,11,10,12,11,11,11,13,13,14,13,10,12,12,14,14,14,11,14,11,6,9,9,9,11,12,8,11,10,9,11,11,11,11,13,11,12,13,8,11,10,11,13,13,10,12,10,7,10,10,11,11,14,11,13,11,10,12,12,11,11,14,14,14,14,10,11,12,13,13,14,11,13,11,8,10,10,10,11,12,9,12,10,10,11,12,11,10,13,12,13,13,10,12,10,12,13,13,11,13,10,5,7,7,10,10,7,8,9,10,11,7,9,8,11,10,9,10,10,11,11,9,10,10,11,11,7,9,9,10,10,8,9,10,10,11,9,10,10,11,11,10,10,11,11,11,10,11,11,12,12,7,9,9,10,10,9,10,10,11,11,8,10,9,11,10,10,11,11,11,11,10,11,10,11,11,10,10,10,11,11,10,10,11,11,11,11,11,11,11,11,11,11,12,11,12,11,12,11,12,12,10,10,10,11,11,10,11,11,11,11,10,11,10,11,11,11,12,11,12,12,11,12,11,12,11,8,9,9,11,11,9,10,10,11,12,9,10,10,11,11,10,11,11,12,12,10,11,11,12,12,9,10,10,11,11,10,10,11,11,12,10,11,11,12,12,11,11,12,12,12,11,12,12,12,12,9,10,10,11,11,10,11,11,12,12,10,11,10,12,12,11,12,12,12,12,11,12,12,12,12,11,11,11,12,12,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,8,9,9,11,11,9,10,10,11,11,9,10,10,11,11,10,11,11,12,12,10,11,11,12,12,9,10,10,11,11,10,10,11,12,12,10,11,11,12,12,11,12,12,12,12,11,12,12,12,12,9,10,10,11,11,10,11,11,12,12,10,11,10,12,11,11,12,12,12,12,11,12,11,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,10,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,13,13,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,13,12,12,12,13,13,12,12,13,13,13,12,13,13,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,12,13,13,13,13,12,13,13,13,13,12,12,12,12,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,13,12,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,10,11,11,12,12,11,12,12,12,12,11,12,11,12,12,12,12,12,13,12,12,12,12,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,12,13,13,13,13,12,13,13,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,13,13,13,13,12,13,12,13,13,12,12,12,12,13,12,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,13,12,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,8,9,9,11,11,9,10,10,11,11,9,10,10,12,11,10,11,11,12,12,10,11,11,12,12,9,10,10,11,11,10,10,11,11,12,10,11,11,12,12,11,11,12,12,12,11,12,12,12,12,9,10,10,11,11,10,11,11,12,12,10,11,10,12,12,11,12,12,12,12,11,12,12,12,12,11,11,11,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,9,10,10,11,11,10,10,11,12,12,10,11,11,12,12,11,11,12,12,12,11,12,12,12,12,10,10,11,11,12,11,11,12,12,12,11,11,12,12,12,11,11,12,12,13,12,12,12,12,12,10,11,11,12,12,11,12,11,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,11,11,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,13,12,13,12,12,13,13,13,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,8,10,10,11,11,10,11,11,12,12,10,11,10,12,12,11,12,12,12,12,11,12,12,12,12,10,11,10,12,12,10,10,11,12,12,11,12,12,12,12,12,12,12,12,13,12,12,12,13,13,10,11,11,12,12,11,12,12,12,12,10,12,11,12,12,12,12,12,13,13,12,13,12,13,12,11,12,12,12,12,11,12,12,12,13,12,12,12,13,13,12,12,13,12,13,12,13,13,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,13,13,13,13,12,13,12,13,12,11,11,11,12,12,11,12,12,12,13,11,12,12,12,12,12,12,12,13,13,12,12,13,13,13,11,12,12,12,12,12,12,12,12,13,12,12,13,13,13,12,12,13,13,13,13,13,13,13,13,11,12,12,12,12,12,13,12,13,13,12,12,12,13,13,12,13,13,13,13,12,13,13,13,13,12,12,12,12,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,10,11,11,12,12,11,12,12,12,13,11,12,12,13,12,12,13,13,13,13,12,13,13,13,13,11,12,12,12,12,12,12,12,13,13,12,13,12,13,13,13,13,13,13,13,13,13,13,13,13,11,12,12,13,12,12,13,12,13,13,12,13,12,13,13,13,13,13,13,13,13,13,13,13,13,12,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,8,9,9,11,11,9,10,10,11,12,9,10,10,11,11,10,11,11,12,12,10,11,11,12,12,9,10,10,11,11,10,10,11,12,12,10,11,11,12,12,11,11,12,12,12,11,12,12,12,12,9,10,10,11,11,10,11,11,12,12,10,11,10,12,12,11,12,12,12,12,11,12,11,12,12,11,11,11,12,12,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,8,10,10,11,11,10,10,11,12,12,10,11,11,12,12,11,12,12,12,12,11,12,12,12,12,10,11,11,12,12,10,11,12,12,12,11,12,12,12,12,12,12,12,12,13,12,12,12,13,13,10,10,11,12,12,11,12,12,12,12,10,11,10,12,12,12,12,12,13,13,12,12,12,13,12,11,12,12,12,12,11,12,12,12,13,12,12,12,13,13,12,12,13,12,13,12,13,13,13,13,11,12,12,12,12,12,12,12,13,13,11,12,12,13,12,12,13,13,13,13,12,13,12,13,12,9,10,10,11,11,10,11,11,12,12,10,11,11,12,12,11,12,12,12,12,11,12,11,12,12,10,11,11,12,12,11,11,12,12,12,11,11,12,12,12,12,12,12,12,13,12,12,12,13,12,10,11,10,12,11,11,12,11,12,12,11,12,11,12,12,12,12,12,12,12,12,12,11,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,13,12,13,13,13,13,11,12,11,12,12,12,12,12,13,12,12,12,12,12,12,12,13,12,13,13,12,12,12,13,12,10,11,11,12,12,11,12,12,12,13,11,12,12,13,12,12,12,13,13,13,12,13,13,13,13,11,12,12,12,13,12,12,13,13,13,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,11,12,12,12,12,12,12,13,13,13,12,13,12,13,13,13,13,13,13,13,13,13,13,13,13,12,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,13,13,13,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,13,13,13,12,13,12,13,13,11,12,12,12,12,12,12,13,13,13,12,12,13,13,13,12,13,13,13,13,12,13,13,13,13,11,12,12,12,12,12,13,12,13,13,12,12,12,13,12,13,13,13,13,13,12,13,12,13,13,12,12,12,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,13,12,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,10,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,12,12,12,12,11,12,12,13,13,12,12,12,13,13,12,12,13,13,13,12,13,13,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,13,13,13,13,12,13,12,13,13,12,12,12,12,12,12,12,13,13,13,12,13,13,13,13,12,13,13,13,13,13,13,13], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+392436);
/* memory initializer */ allocate([13,13,12,12,12,13,12,12,13,13,13,13,12,13,12,13,13,13,13,13,13,13,13,13,13,13,13,10,11,11,12,12,11,12,12,12,13,11,12,12,13,12,12,12,12,13,13,12,12,12,13,13,11,12,12,12,12,12,12,13,13,13,12,12,12,13,13,12,12,13,13,13,12,13,13,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,12,13,13,13,13,12,13,13,13,13,12,12,12,12,13,12,12,13,13,13,12,13,13,13,13,12,13,13,13,13,13,13,13,13,13,12,12,12,13,13,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,10,11,11,12,12,11,12,12,12,13,11,12,12,13,12,12,13,13,13,13,12,13,12,13,13,11,12,12,13,13,12,12,12,13,13,12,12,13,13,13,12,13,13,13,13,13,13,13,13,13,11,12,12,13,12,12,13,12,13,13,12,13,12,13,13,13,13,13,13,13,12,13,13,13,13,12,12,12,13,13,12,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,13,13,12,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,13,12,12,12,13,13,12,12,13,13,13,12,13,13,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,13,13,13,13,12,13,12,13,13,12,12,12,12,12,12,12,13,12,13,12,13,13,13,13,12,13,13,12,13,13,13,13,13,13,12,12,12,12,12,12,13,13,13,13,12,13,12,13,13,13,13,13,13,13,12,13,13,13,12,10,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,13,13,12,13,12,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,12,12,13,13,13,13,13,13,13,13,11,12,12,12,12,12,13,12,13,13,12,13,12,13,13,12,13,13,13,13,12,13,12,13,13,12,12,12,12,12,12,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,13,12,12,13,13,13,13,12,13,12,13,13,13,13,13,13,13,13,13,13,13,13,10,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,12,12,13,13,13,12,12,13,13,13,11,12,11,12,12,12,12,12,13,13,11,12,12,13,13,12,13,13,13,13,12,13,12,13,13,12,12,12,12,12,12,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,13,12,12,13,13,13,13,12,13,12,13,13,13,13,13,13,13,12,13,13,13,13,10,11,11,12,12,11,12,12,12,13,11,12,12,13,12,12,12,13,13,13,12,13,13,13,13,11,12,12,13,13,12,12,13,13,13,12,12,13,13,13,12,13,13,13,13,13,13,13,13,13,11,12,12,13,12,12,13,12,13,13,12,12,12,13,13,12,13,13,13,13,13,13,13,13,13,12,12,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,13,13,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,10,12,11,12,12,11,12,12,12,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,12,12,12,13,12,12,12,13,13,12,12,12,13,13,12,13,13,13,13,12,13,13,13,13,11,12,12,13,12,12,12,12,13,13,12,12,12,13,13,12,13,13,13,13,12,13,12,13,13,12,13,12,13,13,12,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,13,12,13,13,13,13,13,12,13,12,13,13,13,13,13,13,13,12,13,13,13,13,10,11,11,12,12,11,12,12,12,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,12,12,12,12,12,12,13,13,13,12,13,13,13,13,12,12,13,13,13,13,13,13,13,13,11,12,12,12,12,12,13,12,13,13,12,12,12,13,13,12,13,13,13,13,12,13,12,13,13,12,12,12,12,13,12,13,13,13,13,12,13,13,13,13,12,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,13,13,13,13,12,13,13,13,13,13,13,13,13,13,12,13,13,13,13,11,12,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,13,12,12,12,13,12,11,12,12,12,12,12,12,12,12,13,12,12,12,13,13,12,12,13,13,13,12,13,13,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,13,13,13,13,12,13,12,13,13,12,12,12,12,12,12,12,13,13,13,12,13,13,13,13,13,13,13,12,13,13,13,13,13,13,12,12,12,12,12,12,13,13,13,13,12,13,12,13,12,13,13,13,13,13,13,13,13,13,12,1,6,6,10,10,6,7,9,11,13,5,9,7,13,11,8,11,12,13,15,8,12,11,15,13,6,7,8,11,11,7,8,10,11,13,9,10,10,13,13,11,11,13,12,16,12,13,13,16,15,6,8,7,11,11,9,10,10,13,13,7,10,7,13,11,12,13,13,15,16,11,13,11,16,12,10,11,11,11,13,11,11,13,12,15,13,13,13,14,15,13,12,15,12,17,15,16,16,16,16,10,11,11,14,11,13,13,13,15,14,11,13,11,15,12,15,15,16,16,16,13,15,12,17,12,6,8,9,12,12,9,10,12,13,15,9,11,11,15,14,12,13,15,16,18,13,14,14,17,16,9,10,11,13,14,11,10,13,14,16,11,12,12,15,15,14,13,16,15,18,14,15,15,17,17,9,11,11,14,14,11,12,13,15,16,11,13,11,15,14,15,15,15,17,18,14,15,14,17,15,13,14,14,15,16,14,14,15,15,17,15,16,15,17,17,16,16,17,15,19,17,18,18,19,18,13,14,14,16,15,15,15,16,17,17,14,15,14,18,15,17,17,17,19,19,16,17,15,19,16,6,9,8,13,12,9,11,11,14,15,9,12,10,15,13,13,14,14,16,17,12,15,13,18,16,9,11,11,14,14,11,11,13,14,15,11,13,12,16,15,14,14,15,15,18,14,15,15,18,17,9,11,10,14,13,11,12,12,15,15,11,13,10,16,14,14,15,15,16,18,14,16,13,18,15,13,14,14,16,16,14,14,15,15,17,15,16,15,17,17,16,16,17,16,19,17,18,17,18,19,13,14,14,16,15,15,15,15,17,17,14,15,14,17,15,17,17,17,18,19,16,17,15,19,15,11,13,13,15,16,13,14,15,16,18,14,15,15,17,17,16,16,18,18,20,17,18,17,19,20,13,14,14,16,17,15,15,16,17,18,15,16,16,17,17,18,17,19,18,19,18,18,18,19,21,14,14,15,16,17,15,15,16,18,18,15,16,16,17,18,18,18,19,19,21,18,19,19,22,20,16,16,17,17,19,17,17,17,18,20,17,18,18,20,19,19,19,20,19,0,19,19,20,20,21,17,17,17,19,18,18,18,20,19,19,18,18,18,20,20,19,19,20,20,20,20,21,20,21,19,11,13,13,16,15,14,15,15,17,17,14,15,14,18,16,16,18,18,20,19,16,19,17,21,18,13,14,15,16,17,15,15,16,18,18,15,16,15,19,18,18,18,18,19,19,18,18,18,22,20,13,14,14,16,16,15,16,16,18,17,15,16,15,18,17,18,18,18,19,19,17,18,17,21,18,16,17,17,18,18,17,18,19,19,19,18,20,18,19,19,19,20,21,19,21,20,20,20,0,21,16,17,17,19,19,18,18,18,19,21,17,18,18,19,18,20,19,21,20,21,19,20,20,22,19,7,9,9,13,13,8,10,11,14,15,9,12,11,15,14,11,13,14,16,17,13,15,14,17,16,8,10,11,14,14,10,10,12,14,16,11,12,12,16,15,13,12,15,15,18,14,15,15,19,17,9,11,11,14,14,11,12,12,15,15,11,13,11,16,14,14,15,14,17,17,14,16,14,18,15,12,13,14,15,16,13,13,15,14,17,15,15,15,17,17,15,14,17,14,19,17,18,18,19,18,13,14,14,16,16,15,15,15,17,17,14,15,14,18,15,17,18,17,18,17,16,18,16,19,15,7,10,10,13,13,9,10,12,14,15,10,12,11,15,14,12,13,14,16,17,13,15,14,18,16,10,10,12,13,14,10,10,13,13,16,12,12,13,15,15,13,12,15,15,18,15,15,16,18,17,10,11,11,14,14,12,13,13,15,16,10,13,10,16,14,14,15,15,17,17,14,15,13,17,15,13,13,14,15,16,14,13,15,14,18,15,15,16,16,17,16,15,18,15,18,17,18,18,18,18,13,15,14,17,16,15,16,16,17,17,14,15,13,17,15,17,17,18,18,18,16,17,14,20,14,8,10,10,14,14,11,11,13,14,16,11,13,11,16,14,14,15,16,16,18,14,16,15,18,16,10,12,11,15,14,11,11,13,14,16,13,14,13,16,15,15,14,16,15,19,16,17,16,20,18,10,11,12,14,15,13,13,14,16,16,11,14,11,16,14,16,16,17,18,19,15,17,14,20,15,14,15,14,17,16,13,14,15,15,18,16,17,16,19,18,16,15,18,15,19,18,19,18,21,21,14,14,15,16,17,16,16,17,18,18,13,15,14,17,15,18,18,19,18,22,16,18,15,21,15,12,13,14,16,16,14,14,16,16,18,14,15,15,17,18,16,16,18,18,20,18,18,17,20,20,13,14,15,15,17,15,14,16,16,18,16,16,16,17,19,17,15,18,17,21,18,18,18,19,19,14,15,15,18,17,15,16,16,18,19,15,16,15,18,18,17,18,18,20,21,17,19,17,20,19,16,16,17,16,19,17,17,18,17,20,18,18,18,18,19,19,18,20,17,22,20,20,19,20,20,17,17,18,18,19,18,18,20,21,20,17,18,17,20,20,21,21,21,21,21,19,21,18,22,20,11,13,13,17,16,14,14,16,16,18,14,16,14,18,16,17,18,19,19,20,18,19,18,21,19,14,15,14,17,16,14,14,16,18,18,16,17,16,18,17,18,17,19,18,20,19,19,18,20,20,13,14,15,16,17,16,16,17,18,19,14,16,14,19,17,18,19,18,20,20,18,20,17,21,18,17,17,17,19,18,16,17,18,18,19,18,19,18,21,21,18,18,20,17,21,19,20,20,22,21,16,17,18,18,19,18,18,19,21,20,16,17,17,20,18,21,21,22,21,22,18,21,18,0,18,7,9,9,13,13,9,11,12,14,15,8,11,10,15,14,13,14,15,16,18,11,14,13,17,15,9,11,11,14,14,11,11,13,14,16,11,12,12,15,15,14,14,16,15,18,14,14,15,17,17,8,11,10,14,14,11,12,12,15,15,10,12,10,16,14,14,15,15,17,18,13,15,12,18,15,13,14,14,16,16,14,14,15,15,17,15,15,15,16,17,16,15,17,15,19,17,17,17,18,18,12,14,13,16,15,15,15,15,17,17,13,15,13,17,14,17,18,18,18,19,15,17,14,19,14,8,10,10,14,14,11,11,13,14,16,11,13,11,16,14,14,15,16,17,19,14,16,15,18,17,10,12,11,15,14,11,11,14,14,17,13,14,13,17,15,15,14,17,15,19,16,17,16,19,17,10,11,12,14,15,13,13,14,15,17,11,13,11,17,14,16,16,17,18,19,15,16,14,18,15,14,15,14,16,16,13,14,15,15,18,16,16,16,18,18,16,15,18,15,20,18,19,18,21,18,14,14,15,16,17,16,16,17,17,18,13,15,14,17,16,19,19,19,19,19,15,18,15,20,15,7,10,10,13,13,10,11,12,14,15,9,12,10,15,14,13,14,15,16,17,12,15,13,17,16,10,11,11,14,14,10,10,13,14,16,12,13,13,16,15,14,13,16,15,18,15,15,16,17,17,10,12,10,14,13,12,13,12,15,15,10,13,10,16,13,15,16,15,17,18,13,16,12,18,15,13,14,14,16,17,14,13,15,15,18,15,16,15,17,17,16,14,17,15,19,17,18,18,19,19,13,15,13,17,14,15,15,15,18,17,14,15,13,17,14,18,17,18,18,19,15,17,15,19,15,11,13,13,16,17,14,14,16,16,18,14,16,15,18,17,17,18,19,18,21,18,18,17,20,18,13,15,14,17,16,14,14,16,17,18,16,17,16,19,17,18,17,19,18,22,18,19,19,21,21,13,14,15,16,18,16,16,17,17,20,14,16,14,18,17,18,18,19,19,21,17,18,17,21,18,17,18,17,19,18,16,17,17,18,19,18,18,18,22,22,18,17,19,17,0,20,21,19,21,20,17,17,18,18,21,18,18,18,19,21,17,17,17,19,19,20,20,22,21,21,19,20,18,20,17,12,14,13,17,16,14,15,15,17,18,14,16,14,18,16,17,18,18,21,20,16,18,16,21,18,14,15,15,17,17,15,15,16,18,18,15,17,16,18,18,17,17,19,19,20,18,19,18,20,19,14,15,14,17,15,15,16,16,18,17,15,16,14,19,15,18,18,18,19,20,17,20,15,21,17,16,17,18,18,19,17,17,18,18,20,18,19,18,19,21,19,18,19,19,21,20,0,19,21,20,16,17,16,19,16,18,18,18,19,19,17,18,17,20,17,19,20,20,22,0,19,20,17,21,17,11,13,14,16,17,14,15,15,17,18,14,15,15,18,18,16,17,17,19,20,16,18,17,19,21,13,14,15,17,17,14,15,16,17,19,15,16,16,18,19,16,17,18,19,21,17,18,20,21,21,13,15,15,17,17,15,16,16,18,19,15,16,16,18,19,17,17,18,19,22,17,19,18,22,19,15,16,17,19,19,16,17,18,18,20,17,18,18,19,20,19,18,20,18,22,20,19,19,22,21,16,17,17,18,19,18,18,18,19,20,17,18,18,20,19,20,19,20,22,20,19,20,21,21,20,12,14,14,16,16,13,14,16,17,18,14,16,15,18,18,15,17,17,19,19,17,18,18,19,19,13,14,15,16,17,14,14,16,16,20,15,16,16,17,19,16,15,18,17,20,18,17,19,19,19,14,15,15,17,17,16,16,16,18,18,15,16,15,19,18,17,18,18,20,21,17,18,17,21,18,16,15,17,17,19,17,15,18,17,20,19,17,18,19,20,18,16,19,17,22,20,19,20,19,20,17,17,18,19,19,18,18,19,20,20,17,18,17,18,18,21,21,20,20,21,18,20,17,21,19,11,14,14,16,17,15,14,16,17,19,14,16,14,18,17,18,18,19,19,21,17,19,18,20,20,13,15,14,17,17,14,14,16,17,18,16,17,16,19,18,18,17,19,18,20,18,21,18,20,20,13,15,15,16,17,16,16,17,18,19,14,16,15,19,18,19,19,19,21,20,18,19,17,20,18,16,17,16,19,18,16,17,17,19,20,17,19,18,20,19,18,17,21,18,0,21,20,20,0,20,17,17,18,18,19,18,19,19,20,22,16,17,17,20,18,21,22,20,20,22,18,22,18,22,18,12,14,14,17,17,14,15,16,17,19,14,16,15,17,17,17,17,18,18,21,17,19,17,20,19,14,15,15,16,18,15,14,16,16,19,16,17,16,19,18,17,16,20,17,20,18,20,19,19,20,14,15,15,18,17,16,16,17,18,19,14,16,15,19,17,18,21,18,19,21,17,18,17,19,18,17,17,18,17,20,17,16,18,17,21,18,19,19,19,19,18,17,19,17,20,20,21,20,21,20,17,17,17,19,19,19,18,18,20,21,16,18,16,19,18,20,20,21,21,20,18,19,16,0,17,12,14,14,17,17,15,15,18,17,19,15,18,15,20,16,20,19,21,18,22,20,20,20,22,19,14,16,14,20,17,14,15,17,17,20,18,18,17,20,18,18,17,19,17,21,20,21,20,0,21,14,15,16,17,19,18,17,19,18,21,14,18,15,21,17,21,20,21,20,0,18,21,17,21,17,18,19,17,20,18,16,17,17,19,19,19,21,20,0,20,18,17,21,17,0,22,0,21,0,22,17,17,19,18,20,20,20,21,19,22,16,17,18,20,18,22,22,0,22,0,17,21,17,22,17,11,14,13,16,16,14,15,15,17,18,14,15,14,18,17,17,18,18,19,20,16,17,17,21,19,13,14,15,17,17,15,16,16,18,18,15,16,16,19,18,18,18,18,19,20,17,18,18,20,19,13,15,14,17,17,15,16,16,17,18,14,16,15,19,17,17,18,19,21,21,17,18,17,20,18,16,17,17,19,19,17,18,19,19,20,18,19,18,21,21,21,20,19,21,22,20,20,19,21,20,15,17,16,19,19,17,18,18,20,21,16,18,17,20,18,19,19,21,21,21,19,19,19,20,18,11,14,13,17,16,14,14,16,16,19,14,16,15,19,16,18,18,18,19,22,17,18,17,20,19,13,15,14,17,17,15,15,16,17,19,16,17,16,20,18,18,17,19,18,21,19,19,18,22,0,13,14,15,17,18,16,16,17,17,19,14,16,15,19,18,18,19,19,20,21,18,18,17,20,18,17,18,17,20,18,16,17,17,18,20,18,19,18,20,20,18,18,21,17,21,20,21,21,0,19,16,16,18,18,19,19,18,20,19,20,16,17,17,20,18,21,20,21,22,22,18,20,17,21,17,12,14,14,17,16,14,15,16,18,18,13,15,14,18,17,17,18,18,19,19,15,17,16,19,19,14,15,15,17,17,15,15,16,18,19,15,16,16,19,18,17,17,18,18,20,18,18,18,21,20,13,15,14,17,16,15,16,15,18,18,14,16,14,18,17,18,18,18,19,21,16,18,16,20,17,17,18,17,18,19,17,17,18,18,19,18,19,19,21,19,19,18,20,18,21,21,20,20,21,20,16,17,15,20,17,17,19,17,19,19,17,18,15,20,17,19,20,19,21,22,17,20,16,0,17,12,14,14,17,18,16,15,18,16,20,16,18,15,21,17,20,18,21,19,22,19,21,19,0,19,14,16,15,19,17,14,15,17,16,21,18,19,18,21,17,19,17,21,17,22,20,21,21,0,21,14,15,16,17,19,18,17,19,18,21,14,17,15,20,17,21,22,21,20,22,18,21,17,21,17,17,19,17,21,18,16,17,17,19,20,19,21,20,21,20,17,18,20,17,21,0,22,20,21,22,17,17,20,18,21,21,20,22,20,21,16,17,17,21,19,0,22,0,21,21,18,22,17,21,17,12,14,14,17,16,14,15,16,17,18,14,16,15,18,17,17,17,20,19,20,16,18,17,21,18,14,15,15,17,17,14,15,16,17,19,16,17,16,18,18,17,16,19,18,19,18,19,18,21,20,14,15,15,18,17,16,16,16,19,18,15,16,14,20,16,18,18,19,19,20,16,19,16,21,17,17,17,18,19,19,16,16,18,18,19,19,19,18,20,20,18,16,19,18,20,22,21,20,19,20,16,18,17,20,16,18,19,18,19,18,16,18,16,20,17,21,20,21,20,20,18,19,17,21,16,2,3,3,3,3,3,3,1,5,5,5,7,9,5,9,7,5,7,8,7,7,10,9,9,10,5,8,7,9,10,9,7,10,7,6,9,9,9,10,12,10,12,11,9,10,11,11,10,13,12,12,13,10,11,11,12,13,13,11,13,11,6,9,9,10,11,12,9,12,11,10,11,11,11,11,13,12,13,13,9,11,10,12,13,13,11,13,10,6,9,10,9,11,12,10,12,11,9,10,11,10,10,13,11,13,13,10,11,11,12,13,12,11,13,11,7,9,10,9,10,12,10,11,11,10,10,11,10,10,12,12,11,12,10,11,10,12,12,12,10,12,10,7,10,10,11,11,13,11,13,11,10,12,11,11,10,13,13,14,13,10,11,12,13,13,14,11,13,10,6,10,9,10,11,12,9,12,11,9,11,11,11,11,13,12,12,13,9,11,10,12,13,13,10,13,10,7,10,10,11,11,14,11,13,11,10,12,11,11,10,14,13,14,13,10,11,12,13,13,14,11,13,10,7,10,9,10,10,12,9,12,10,10,11,11,10,10,12,12,12,12,9,11,10,11,12,12,10,12,9,2,6,6,5,7,8,5,8,7,6,7,7,7,7,8,8,8,8,6,7,7,7,8,8,7,8,7,6,8,8,8,9,10,8,9,9,8,9,9,9,9,10,10,10,10,8,9,9,10,10,10,9,10,10,6,8,8,8,9,9,8,10,9,9,9,9,9,9,10,10,10,10,8,9,9,10,10,10,9,10,9,6,8,9,8,9,9,8,9,9,8,9,9,9,9,10,9,10,10,8,9,9,9,10,10,9,10,9,7,8,9,8,9,9,9,9,9,8,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,7,9,9,9,10,10,9,10,10,9,10,9,9,9,10,10,10,10,9,10,9,10,10,10,9,10,9,6,8,8,8,9,9,8,9,9,8,9,9,9,9,10,9,10,10,8,9,9,9,10,10,9,10,9,7,9,9,9,10,10,9,10,9,9,9,10,10,9,10,10,10,10,9,9,9,10,10,10,9,10,9,7,9,8,8,9,9,8,9,9,9,9,9,9,9,9,9,9,9,8,9,8,9,9,9,9,9,9,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,1,7,7,6,9,9,7,9,9,6,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,1,2,3,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,14,14,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,7,12,14,14,16,18,19,6,2,4,6,8,9,12,14,12,3,3,5,7,8,11,13,13,6,4,5,7,8,10,11,14,8,7,7,7,7,9,10,15,9,8,7,7,6,8,9,17,11,11,10,9,8,9,9,19,14,13,11,10,9,9,9,1,3,2,3,1,4,4,8,8,10,10,10,10,9,8,11,11,4,6,5,8,6,10,10,10,10,10,9,10,9,4,5,6,6,9,10,10,10,10,9,10,9,10,8,9,8,9,8,9,9,10,9,11,10,12,10,8,8,9,8,9,9,9,9,10,10,11,10,12,9,10,10,11,10,11,10,12,11,12,11,13,11,9,10,10,10,11,10,11,11,12,11,12,11,12,11,12,12,12,12,13,12,13,12,13,12,13,13,11,12,12,12,12,12,12,12,13,13,13,13,13,12,12,12,13,13,13,13,13,13,13,13,13,13,12,13,12,13,13,13,13,13,13,13,13,13,13,12,13,13,13,14,14,13,13,13,13,13,13,13,12,13,12,13,13,13,13,13,13,13,13,13,13,4,4,4,5,5,4,5,5,5,5,4,5,4,4,5,5,5,5,5,5,5,5,5,5,5,1,4,4,4,4,4,4,4,4,2,8,13,15,16,18,21,22,5,4,6,8,10,12,17,21,9,5,5,6,8,11,15,19,11,6,5,5,6,7,12,14,14,8,7,5,4,4,9,11,16,11,9,7,4,3,7,10,22,15,14,12,8,7,9,11,21,16,15,12,9,5,6,8,2,5,5,5,7,7,5,7,7,5,7,7,7,8,9,7,9,9,5,7,7,7,9,9,7,9,8,5,7,8,8,9,10,8,9,9,8,9,10,9,10,12,10,11,11,8,9,10,10,11,11,9,11,11,5,8,7,8,9,9,8,10,9,8,10,9,9,11,11,10,11,11,8,10,9,10,11,11,9,12,10,5,8,8,7,9,10,8,10,9,7,9,9,9,10,11,9,11,11,8,10,10,10,11,11,10,12,11,7,9,9,9,10,11,9,11,11,9,9,11,10,10,13,11,11,12,9,11,11,11,12,13,11,13,12,7,9,9,9,11,11,9,12,10,9,11,10,10,11,12,11,13,12,9,11,11,11,13,13,11,13,11,5,8,8,8,9,10,7,10,9,8,10,10,10,11,11,10,11,11,7,9,9,9,11,11,9,11,10,7,9,9,9,10,12,9,11,11,9,11,11,11,11,13,11,13,13,9,10,11,11,12,13,10,12,11,7,9,9,9,11,11,9,11,10,9,11,11,11,12,13,11,13,12,9,11,9,11,12,11,10,13,10,4,6,6,9,9,6,7,8,10,10,6,8,7,10,10,8,10,10,12,13,8,10,10,13,12,6,8,8,10,10,7,8,9,10,11,8,9,9,11,11,10,10,11,12,13,10,11,11,14,13,6,8,8,10,10,8,9,9,11,11,7,9,8,11,10,10,11,11,13,14,10,11,10,13,12,9,10,10,12,12,10,10,11,12,13,10,11,11,13,13,12,12,13,12,15,13,14,13,15,14,9,10,10,13,12,10,11,11,13,13,10,11,10,13,12,13,13,14,14,15,12,13,12,15,12,6,8,8,10,11,8,9,10,11,12,8,9,9,11,11,10,11,12,13,14,10,11,11,14,13,8,9,9,11,12,9,10,11,12,13,9,10,11,12,13,11,11,13,13,15,11,12,12,14,14,8,9,9,12,12,9,10,11,12,13,9,10,10,13,12,11,12,13,14,15,11,12,12,14,14,11,11,12,13,14,11,12,13,13,15,12,13,13,14,15,13,13,14,14,16,14,15,15,16,16,11,12,11,14,13,12,13,13,14,14,11,13,12,14,13,14,15,15,16,16,13,14,14,16,14,6,8,8,11,10,8,9,9,12,11,8,10,9,12,11,10,11,11,13,13,10,12,11,14,13,8,9,9,12,12,9,10,10,12,13,9,11,10,13,12,11,12,12,14,14,11,13,12,15,14,8,9,9,12,11,9,10,10,13,12,9,11,10,13,12,12,12,12,14,14,11,13,12,15,13,11,11,12,13,14,11,12,13,13,14,12,13,13,14,15,13,13,14,14,16,14,15,15,16,16,11,12,11,14,13,12,13,13,15,14,11,13,12,15,13,14,15,15,16,16,13,15,13,16,14,9,10,11,12,13,11,11,12,13,14,11,12,12,13,14,13,13,14,14,16,13,14,14,15,16,11,11,12,13,14,12,12,13,14,15,12,13,13,14,15,14,14,15,15,17,14,15,15,16,17,11,12,12,14,14,12,13,13,14,15,12,13,12,15,15,14,15,15,16,17,14,15,15,16,16,13,14,14,15,16,14,14,15,15,17,15,15,15,16,17,16,16,17,16,18,16,17,17,18,18,13,14,14,16,15,14,15,15,17,16,14,15,15,16,16,16,17,17,18,18,16,16,16,17,16,9,11,10,13,12,11,12,12,14,13,11,12,11,15,13,13,14,14,16,15,13,14,13,17,14,11,12,12,14,14,12,12,13,15,15,12,13,13,15,14,14,14,15,16,16,14,15,15,17,16,11,12,11,14,13,12,13,13,15,14,12,13,12,15,13,14,15,15,16,16,14,15,14,17,15,13,14,14,15,16,14,15,15,16,17,14,15,15,16,17,16,16,16,17,17,16,17,17,18,18,13,15,14,16,15,15,15,15,17,16,14,15,14,17,15,16,17,17,18,18,16,17,16,18,16,6,8,8,11,11,8,9,9,11,12,8,9,9,12,11,10,11,11,13,14,10,12,11,14,13,7,9,9,11,12,9,10,10,12,13,9,10,10,13,12,11,11,12,13,15,11,12,12,15,14,8,9,9,12,11,9,10,10,13,13,9,11,10,13,12,12,12,12,14,15,11,13,12,15,13,10,11,11,13,14,11,12,12,13,15,11,12,12,14,14,13,13,14,14,16,14,15,14,16,16,11,12,11,14,13,12,13,13,15,14,11,13,12,15,13,14,15,15,16,16,13,14,14,16,14,8,9,9,11,12,9,10,11,12,13,9,10,10,13,12,11,12,13,14,15,11,12,12,15,14,9,9,11,11,13,10,10,12,12,14,10,10,11,13,14,12,12,13,14,16,12,13,13,15,15,9,11,10,13,12,10,11,11,13,14,10,12,11,14,13,12,13,13,15,16,12,13,13,15,15,11,11,13,13,15,12,12,14,13,15,13,13,14,14,15,14,14,15,14,17,15,15,15,16,16,12,13,12,15,14,13,14,14,15,15,12,14,13,15,14,15,15,15,17,17,14,15,14,17,15,7,9,9,12,11,9,10,10,12,12,9,11,10,13,12,11,12,12,14,14,11,13,12,15,14,9,10,10,12,12,10,10,11,12,13,10,11,11,14,13,12,12,13,14,15,12,13,13,16,15,9,10,10,13,12,10,11,11,13,13,10,11,10,14,12,13,13,13,15,15,12,13,12,15,14,11,12,12,14,14,12,12,13,14,15,13,14,13,15,15,14,13,15,14,16,15,16,15,17,16,12,12,12,14,14,13,13,14,15,15,12,13,12,15,14,15,15,16,16,17,14,15,14,17,14,10,11,12,13,14,11,12,13,14,15,11,12,13,14,15,13,14,15,15,17,14,15,15,16,16,11,12,13,12,15,12,12,14,13,16,13,13,14,13,16,14,14,16,14,18,15,15,16,16,17,12,13,12,15,15,13,14,14,15,16,13,14,13,16,15,15,15,16,17,18,15,15,15,17,16,14,14,15,14,17,15,14,16,14,17,15,15,16,15,18,16,16,17,16,19,17,17,17,17,18,14,15,15,17,16,15,16,16,17,17,15,16,15,18,16,17,17,18,18,18,16,17,16,18,17,10,11,11,14,13,11,12,12,15,14,11,13,12,15,14,14,15,15,16,16,14,15,15,17,16,11,12,12,15,14,12,13,13,15,14,13,14,13,16,14,14,15,15,16,16,15,16,15,18,16,11,13,12,15,15,13,14,14,15,15,12,14,13,16,15,15,16,16,17,17,15,16,15,17,16,14,15,14,16,16,14,15,15,16,16,15,16,15,17,16,16,16,17,16,17,17,18,17,19,18,14,15,15,17,16,15,16,16,17,17,15,15,15,18,16,17,18,18,18,18,16,17,16,19,16,6,8,8,11,11,8,9,9,11,12,8,9,9,12,11,10,11,12,13,14,10,11,11,14,13,8,9,9,11,12,9,10,11,12,13,9,10,10,13,13,11,12,13,13,15,11,12,12,15,14,7,9,9,12,11,9,10,10,12,13,9,10,10,13,12,11,12,12,14,15,11,12,11,14,13,11,11,12,13,14,11,12,13,13,15,12,13,13,14,15,13,14,14,14,16,14,15,15,16,16,10,11,11,14,13,11,12,12,14,14,11,12,12,15,13,14,14,14,16,16,13,14,13,16,14,7,9,9,11,12,9,10,10,12,13,9,10,10,12,12,11,12,13,14,15,11,12,12,14,14,9,10,10,12,13,10,10,11,12,14,10,11,11,13,13,12,12,13,14,15,13,13,13,15,15,9,10,10,12,12,10,11,11,13,14,10,11,10,13,12,12,13,13,15,16,12,13,12,15,14,11,12,13,14,14,12,12,13,14,15,13,14,13,15,15,14,14,15,14,17,15,16,15,17,16,11,12,12,14,14,13,13,13,15,15,12,13,12,15,14,15,15,15,16,17,14,15,14,16,14,8,9,9,12,11,9,10,10,12,13,9,11,10,13,12,11,12,12,14,15,11,12,12,15,14,9,10,11,13,13,10,11,12,13,14,10,11,11,14,13,12,13,13,15,15,12,13,13,16,15,9,11,9,13,11,10,11,10,14,13,10,12,10,14,12,12,13,13,15,15,12,13,12,16,14,12,12,13,14,15,12,13,14,14,16,13,14,14,15,15,14,14,15,15,17,15,16,15,17,16,11,13,11,15,13,13,14,13,15,14,12,14,12,16,13,15,15,15,16,16,14,15,14,17,14,10,11,11,13,14,11,12,13,14,15,11,12,12,14,15,14,14,15,16,17,14,15,15,16,16,11,12,13,14,15,12,13,14,15,16,13,14,14,15,16,15,15,16,16,18,15,16,16,17,17,11,12,12,14,15,13,13,14,14,16,12,13,13,15,15,15,15,16,16,18,14,15,15,16,16,14,15,15,16,17,15,15,16,16,17,15,16,16,17,17,16,16,17,16,19,17,18,17,18,18,14,14,15,16,16,15,15,16,16,17,14,15,15,16,16,17,17,18,18,19,16,17,16,17,16,10,12,11,14,13,11,13,12,15,14,11,13,12,15,14,14,15,15,16,16,13,15,14,17,15,12,13,13,15,15,13,13,14,15,16,13,14,14,16,16,14,15,15,17,17,15,16,16,17,17,11,13,12,15,12,13,14,13,16,13,12,14,12,16,13,15,16,15,17,16,14,16,14,18,14,14,15,15,16,17,15,15,16,16,17,15,16,16,17,17,16,16,17,17,18,17,18,17,18,18,14,15,14,17,14,15,16,15,18,15,15,16,15,18,14,17,17,17,18,17,16,17,16,19,16,9,11,11,13,13,10,12,12,14,14,11,12,12,15,14,13,14,14,16,16,13,14,14,16,16,10,11,12,14,14,11,12,13,14,15,12,13,13,15,15,13,14,15,16,16,14,15,15,17,16,11,12,12,15,14,12,13,13,15,15,12,13,12,15,15,14,15,15,16,17,14,15,14,17,16,12,13,14,15,16,13,13,14,15,16,13,14,15,16,16,14,15,16,16,18,15,16,16,18,18,13,14,14,16,15,14,15,15,17,16,14,15,15,17,16,16,17,17,18,18,16,17,16,18,17,10,12,12,14,14,11,12,13,15,15,12,13,13,15,15,13,14,15,16,17,14,15,15,17,16,11,11,13,14,15,12,12,14,15,16,13,13,14,15,16,14,14,15,16,17,15,15,16,17,17,12,13,12,15,15,13,14,14,16,16,13,14,13,16,15,15,16,15,17,17,15,16,15,18,16,13,12,15,14,17,14,13,16,14,17,14,14,16,15,18,15,14,17,16,18,16,16,17,17,18,14,15,15,17,16,15,16,16,17,17,15,16,15,18,16,17,17,17,18,18,16,17,16,19,17,10,11,11,14,14,11,12,12,15,15,11,13,12,15,15,14,15,14,16,16,14,15,15,17,16,11,12,12,15,14,12,12,13,15,15,13,14,13,16,15,14,15,15,16,16,15,16,15,18,17,11,13,12,15,15,13,14,13,15,15,12,14,13,16,15,15,16,15,17,17,15,16,15,18,16,13,14,13,16,16,14,15,14,16,16,14,15,15,17,16,16,16,16,16,18,16,18,17,19,18,14,15,15,17,16,15,16,16,17,17,15,15,15,17,16,17,17,18,18,19,16,17,16,18,16,12,13,13,15,16,13,14,14,16,17,13,14,14,16,16,15,15,16,17,18,15,16,16,18,17,13,13,14,14,17,14,14,15,15,17,14,14,15,16,17,15,15,17,16,18,16,17,17,18,18,13,14,14,17,16,14,15,15,17,17,14,15,14,17,16,16,17,17,18,18,16,17,16,18,17,15,14,16,13,18,16,15,17,14,19,16,16,17,15,18,17,16,18,15,19,18,18,18,17,19,15,16,16,18,17,16,17,17,18,18,16,17,16,19,17,18,19,18,19,19,17,18,17,20,18,11,12,12,15,15,13,13,14,15,16,13,14,13,16,15,15,16,16,17,17,15,16,16,18,17,12,14,13,16,15,13,13,14,15,16,14,15,14,17,16,16,16,16,16,17,16,17,17,19,17,12,13,14,16,16,14,15,15,16,17,13,15,13,17,15,16,17,17,18,18,16,17,16,18,16,15,16,15,17,16,15,15,15,17,17,16,17,16,18,17,17,16,17,16,18,18,19,18,20,18,15,16,16,17,17,16,17,17,18,18,15,16,15,18,17,18,18,19,19,19,17,18,16,19,16,9,11,11,13,13,11,12,12,14,15,10,12,12,14,14,13,14,14,16,16,13,14,14,16,16,11,12,12,14,14,12,12,13,15,15,12,13,13,15,15,14,15,15,16,17,14,15,15,16,16,10,12,11,14,14,12,13,13,15,15,11,13,12,15,14,14,15,15,16,17,13,15,14,17,16,13,14,14,15,16,14,15,15,16,17,14,15,15,16,17,16,16,17,17,18,16,17,17,18,18,12,14,13,16,15,13,15,14,17,16,13,14,13,17,15,15,16,16,18,18,15,16,15,18,16,10,11,11,14,14,11,12,13,14,15,11,12,12,15,15,14,15,15,16,17,14,15,15,16,16,11,12,13,15,15,12,13,14,15,16,13,14,14,15,16,15,15,16,16,18,15,15,16,17,17,11,12,12,14,15,13,13,14,15,16,12,13,13,15,15,15,15,16,17,18,14,15,15,17,16,14,15,15,16,17,15,15,16,16,17,15,16,16,17,17,16,16,17,16,19,17,17,18,19,18,13,13,14,16,16,14,15,16,17,17,14,14,15,16,16,16,16,17,18,18,16,16,16,18,16,10,12,12,14,14,12,13,13,15,15,11,13,12,15,15,14,15,15,16,17,13,15,14,17,16,12,13,13,15,15,13,13,14,15,16,13,14,14,16,16,15,15,16,17,18,15,15,16,17,17,11,13,12,15,14,13,14,13,16,15,12,14,12,16,14,15,16,15,17,17,14,16,14,17,16,14,15,15,16,17,15,15,16,16,18,15,16,16,17,17,16,17,17,17,19,17,17,17,18,18,13,15,12,17,14,14,16,14,17,15,14,15,13,17,14,16,17,16,18,17,15,17,14,19,15,11,12,12,15,15,13,13,14,15,16,13,14,13,16,15,15,16,16,17,18,15,16,16,17,17,12,14,13,16,16,13,13,15,15,17,14,15,15,17,16,16,16,17,16,19,16,17,17,18,18,12,13,14,15,16,14,14,15,16,17,13,14,13,16,15,16,17,17,18,19,15,16,16,17,16,15,16,16,18,17,15,15,16,17,18,16,17,17,18,18,16,16,18,16,19,18,19,19,20,19,15,15,16,16,17,16,16,17,17,18,15,15,15,17,16,18,18,19,18,20,17,17,16,18,16,12,13,13,16,15,13,14,14,16,16,13,14,14,16,16,15,16,16,17,18,15,16,15,18,17,13,14,14,16,16,14,15,15,16,17,14,15,15,17,17,16,17,17,18,18,16,17,17,18,18,13,14,13,17,14,14,15,14,17,16,14,15,14,17,15,16,17,17,18,18,15,17,15,19,15,16,16,16,17,18,16,16,17,17,19,16,17,17,18,19,17,17,18,18,20,18,18,18,19,19,15,16,14,18,13,16,17,16,19,15,16,17,15,19,14,18,18,18,19,17,17,18,16,20,15,1,5,5,5,7,8,5,8,7,5,7,8,8,8,10,8,10,10,5,8,7,8,10,10,8,10,8,6,8,9,8,10,12,9,11,11,9,10,11,11,11,13,12,13,13,9,11,11,11,13,13,11,13,12,6,9,8,9,11,11,8,12,10,9,11,11,11,12,13,11,13,13,9,11,10,11,13,13,11,13,11,5,9,9,8,11,11,9,12,11,8,10,11,10,11,13,11,13,13,9,11,11,11,13,13,11,13,12,8,10,11,10,12,13,10,13,12,10,10,13,11,11,14,12,13,14,11,13,12,13,14,14,12,14,12,8,11,10,11,12,13,11,14,12,10,13,12,12,12,13,13,15,14,11,12,13,13,14,15,12,14,12,5,9,9,9,11,12,8,11,11,9,11,11,11,12,13,11,13,13,8,11,10,11,13,13,10,13,11,8,10,11,11,12,14,11,13,12,11,13,12,12,12,14,13,15,14,10,12,13,13,14,15,12,13,12,8,11,10,10,12,13,10,13,12,11,12,13,12,12,14,13,14,14,10,13,10,12,14,13,11,14,11,5,7,7,6,7,7,6,7,7,6,7,7,7,8,8,7,8,8,6,7,7,7,8,8,7,8,8,7,7,8,7,8,8,7,8,8,8,8,8,8,8,9,8,9,9,8,8,8,8,9,9,8,9,8,7,8,7,7,8,8,7,8,8,8,8,8,8,8,9,8,9,9,8,8,8,8,9,9,8,9,8,6,8,8,7,8,8,7,8,8,7,8,8,8,8,9,8,9,9,8,8,8,8,9,9,8,9,8,7,8,8,8,8,9,8,9,9,8,8,9,8,9,9,9,9,9,8,9,9,9,9,9,9,9,9,7,8,8,8,9,9,8,9,8,8,8,8,8,9,9,9,9,9,8,9,8,9,9,9,9,9,9,6,8,8,7,8,8,7,8,8,8,8,8,8,8,9,8,9,9,7,8,8,8,9,9,8,9,8,7,8,8,8,8,9,8,9,8,8,8,9,9,9,9,9,9,9,8,8,8,9,9,9,8,9,9,7,8,8,8,9,9,8,9,8,8,9,9,9,9,9,9,9,9,8,9,8,9,9,9,9,9,9,2,5,5,5,7,8,5,8,7,5,7,7,7,7,9,7,9,9,5,7,7,8,9,9,7,9,7,6,8,8,8,9,10,8,9,9,8,9,10,9,9,11,10,11,11,8,9,9,10,11,11,9,11,10,6,8,8,8,9,9,8,10,9,8,9,9,9,10,11,10,11,10,8,10,9,10,11,11,9,11,9,6,8,8,7,9,9,8,10,9,7,9,9,9,9,10,9,10,10,8,9,9,9,10,10,9,11,10,7,9,9,8,10,10,9,10,10,9,9,10,10,10,11,10,11,11,9,10,10,10,11,11,10,11,10,7,9,9,9,9,10,9,10,9,8,10,9,9,9,11,10,11,11,9,10,10,10,11,11,9,11,9,6,8,8,8,9,10,7,9,9,8,9,9,9,10,10,9,10,10,7,9,9,9,10,10,9,10,9,7,9,9,9,9,10,9,10,9,9,10,10,9,9,11,10,11,11,8,9,10,10,11,11,9,11,9,7,9,9,9,10,10,8,10,10,9,10,10,10,10,11,10,11,11,9,10,9,10,11,11,10,11,10,6,8,8,10,10,8,9,9,10,11,8,10,9,11,10,9,10,10,11,11,9,10,10,11,11,8,9,9,10,10,9,9,10,11,11,10,10,10,11,11,10,11,11,11,11,10,11,11,11,11,8,9,9,11,10,10,10,10,11,11,9,10,9,11,11,10,11,11,11,11,10,11,10,11,11,10,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,9,10,11,11,10,10,11,11,11,10,10,10,11,11,10,11,11,12,12,10,11,11,12,12,10,10,11,11,11,10,10,11,11,12,11,11,11,12,12,11,11,12,12,12,11,11,12,12,12,10,10,10,11,11,11,11,11,12,12,10,11,11,12,12,11,12,12,12,12,11,12,11,12,12,11,11,11,11,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,11,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,8,10,9,11,11,10,10,10,11,11,10,11,10,11,11,10,11,11,12,12,10,11,11,12,12,10,10,10,11,11,10,11,11,12,12,11,11,11,12,12,11,11,12,12,12,11,12,12,12,12,10,11,10,11,11,11,11,11,12,12,10,11,10,12,11,11,12,11,12,12,11,12,11,12,12,11,11,11,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,11,11,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,10,11,11,11,12,11,11,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,11,12,11,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,13,12,12,12,12,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,12,12,12,13,12,10,11], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+402676);
/* memory initializer */ allocate([11,12,11,11,11,12,12,12,11,12,11,12,12,11,12,12,12,12,11,12,12,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,11,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,13,12,13,12,8,10,10,11,11,10,10,11,11,11,10,11,10,11,11,10,11,11,12,12,10,11,11,12,12,9,10,11,11,11,10,10,11,12,12,10,11,11,12,12,11,11,12,12,12,11,12,12,12,12,10,11,10,11,11,11,11,11,12,12,10,11,11,12,12,11,12,12,12,12,11,12,11,12,12,11,11,11,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,9,10,10,11,11,10,11,11,12,12,10,11,11,12,12,11,11,12,12,12,11,12,12,12,12,10,11,11,12,12,11,11,12,12,12,11,11,12,12,12,11,11,12,12,12,12,12,12,12,12,10,11,11,12,12,11,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,9,10,10,11,11,10,11,11,12,12,10,11,11,12,11,11,12,12,12,12,11,12,12,12,12,10,11,11,12,12,11,11,11,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,10,11,11,12,12,11,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,13,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,13,12,12,13,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,12,12,13,13,12,13,12,13,13,12,12,12,12,12,12,12,12,12,13,12,13,13,13,13,12,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,12,13,13,13,12,13,12,13,13,12,13,13,13,13,12,13,13,13,13,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,13,12,12,12,13,12,12,13,12,13,13,12,13,12,13,13,12,12,12,12,12,12,12,13,13,13,12,12,13,13,13,12,13,13,12,13,13,13,13,13,13,12,12,12,12,12,12,13,12,13,13,12,13,12,13,12,12,13,13,13,13,12,13,13,13,13,8,10,10,11,11,10,10,11,11,11,9,11,10,11,11,10,11,11,12,12,10,11,11,12,12,10,10,11,11,11,10,11,11,12,12,11,11,11,12,12,11,11,12,12,12,11,12,12,12,12,9,11,10,11,11,10,11,11,12,12,10,11,10,12,12,11,12,12,12,12,11,12,11,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,9,10,10,11,11,10,11,11,12,12,10,11,11,12,12,11,12,12,12,12,11,12,12,12,12,10,11,11,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,10,11,11,12,12,11,11,12,12,12,11,11,11,12,12,12,12,12,12,12,11,12,12,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,9,10,10,11,11,10,11,11,12,12,10,11,11,12,12,11,12,12,12,12,11,12,11,12,12,10,11,11,12,12,11,11,12,12,12,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,10,11,11,12,12,11,12,11,12,12,11,12,11,12,12,12,12,12,12,12,11,12,11,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,12,12,13,13,12,12,13,13,13,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,13,13,12,12,12,13,12,12,12,12,12,12,12,12,13,13,13,12,12,13,13,13,12,13,13,12,13,12,13,13,13,13,12,12,12,12,12,12,12,13,13,13,12,12,12,13,12,12,13,13,13,13,12,13,13,13,13,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,13,13,13,12,12,12,13,13,11,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,13,12,13,13,12,13,12,13,12,12,12,12,12,12,12,12,13,13,13,12,13,13,13,13,12,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,13,12,13,12,12,13,12,13,12,13,13,13,13,13,12,13,13,13,13,10,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,13,12,13,12,13,13,13,13,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,13,13,13,13,12,13,12,13,13,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,13,12,12,12,13,12,11,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,13,13,13,12,12,13,13,13,11,12,12,12,12,12,12,12,12,13,12,12,12,13,12,12,13,12,13,13,12,13,12,13,13,12,12,12,12,12,12,12,13,12,13,12,12,13,13,13,12,12,13,13,13,13,13,13,13,13,12,12,12,12,12,12,13,13,13,13,12,13,12,13,12,12,13,13,13,13,12,13,13,13,13,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,13,11,12,12,12,12,12,12,12,12,13,12,12,12,13,13,12,12,13,13,13,12,12,13,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,13,12,13,13,12,13,12,13,13,12,12,12,12,12,12,12,12,12,13,12,13,12,13,13,12,13,13,13,13,12,13,13,13,13,12,12,12,12,12,12,13,12,13,13,12,12,12,13,13,12,13,13,13,13,12,13,12,13,13,11,12,12,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,13,12,13,13,12,12,12,12,12,12,12,13,12,13,12,12,13,12,13,12,12,13,12,13,12,13,13,13,13,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,13,13,13,13,12,13,12,13,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,13,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,13,12,13,12,12,13,12,13,12,10,11,11,12,12,11,12,12,12,12,11,12,11,12,12,11,12,12,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,13,13,11,12,11,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,13,13,12,13,12,13,13,13,13,12,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,13,13,13,13,12,13,12,13,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,13,13,12,12,12,13,12,11,12,12,12,12,12,12,12,12,13,12,12,12,13,13,12,12,13,13,13,12,12,13,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,13,12,13,13,12,12,12,13,13,12,12,12,12,12,12,12,13,13,13,12,12,13,13,13,12,12,13,13,13,12,13,13,13,13,12,12,12,12,12,12,12,13,13,13,12,12,12,13,12,12,13,13,13,13,12,13,13,13,13,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,13,12,12,12,13,13,12,12,13,13,13,12,12,13,13,13,11,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,13,12,13,13,12,13,12,13,13,12,12,12,12,12,12,12,12,13,13,12,13,12,13,13,12,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,13,12,13,13,12,13,12,13,12,12,13,13,13,13,12,13,12,13,13,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,12,12,13,12,12,13,12,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,13,12,12,12,11,12,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,13,12,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,13,13,12,12,12,13,12,12,12,12,12,12,12,12,12,12,13,12,12,12,13,13,12,12,13,12,13,12,13,13,13,13,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,13,12,13,13,12,13,12,13,12,2,6,6,10,10,5,7,8,11,12,5,8,7,12,11,9,11,11,13,15,9,11,11,15,13,6,7,8,11,11,7,7,9,11,13,8,9,9,13,12,11,11,12,12,15,11,12,12,15,14,6,8,7,11,11,8,9,9,12,13,7,9,7,13,11,11,12,12,14,15,11,12,11,15,12,10,11,11,12,14,10,11,12,12,15,12,13,13,14,15,13,12,14,12,16,15,15,15,16,16,10,11,11,14,12,12,13,13,15,14,10,12,11,15,12,15,15,15,16,17,13,14,12,17,12,6,8,8,12,12,8,9,10,13,13,8,9,9,13,13,12,12,13,15,16,12,13,13,16,15,8,9,10,12,13,9,9,11,13,14,10,11,11,14,14,13,13,14,15,16,13,14,14,16,16,8,10,9,13,13,10,11,11,14,14,9,10,10,14,13,13,14,14,16,17,13,13,13,16,15,12,13,13,14,16,13,13,14,14,16,14,14,14,16,16,15,15,16,15,18,16,17,17,18,18,12,13,13,15,15,14,14,14,16,16,13,14,13,16,15,16,16,17,18,18,15,16,15,18,15,6,8,8,12,12,8,9,9,13,13,8,10,9,13,13,12,13,13,15,16,12,13,12,16,15,8,9,10,13,13,9,10,10,13,14,10,11,11,14,14,13,13,13,15,16,13,14,14,17,16,8,10,9,13,13,10,11,11,14,14,9,11,9,14,13,13,14,14,16,16,13,14,13,16,14,12,13,13,15,16,13,13,14,15,16,14,14,14,16,16,15,15,16,15,18,17,17,17,18,18,12,13,13,16,14,14,14,14,16,16,13,14,13,16,14,16,17,17,18,18,15,16,15,18,15,11,12,13,14,16,13,13,14,15,17,13,14,14,16,17,16,16,17,17,19,16,17,17,18,19,13,13,14,16,16,14,14,15,16,17,14,15,15,17,17,17,16,17,17,19,17,17,18,19,19,13,14,14,16,16,14,14,15,17,18,14,15,14,17,17,17,17,18,18,19,17,17,17,18,19,16,16,16,17,18,17,17,17,18,19,17,17,17,18,19,18,18,19,18,20,19,20,19,21,20,16,17,17,18,18,17,17,18,19,19,17,17,17,19,18,19,19,19,19,20,19,19,19,20,19,11,13,12,16,14,13,14,14,17,16,13,14,13,17,15,16,17,17,18,18,16,17,16,19,17,13,14,14,16,16,14,14,14,17,17,14,15,15,17,16,17,17,17,19,19,17,18,17,19,18,13,14,13,17,16,14,15,15,17,17,14,15,14,18,16,17,17,17,19,19,17,17,16,19,17,16,17,17,18,19,17,17,17,18,18,17,18,17,19,18,18,19,18,19,19,19,20,19,20,20,16,17,16,18,17,17,17,17,18,18,17,18,17,19,17,19,19,19,19,20,18,19,19,20,18,6,8,8,12,12,8,9,9,13,13,8,10,9,13,13,11,13,13,15,16,12,13,13,16,15,8,9,9,13,13,9,9,10,13,14,10,11,11,14,14,12,12,13,14,16,13,14,14,17,16,8,10,9,13,13,10,11,11,14,14,9,11,10,14,13,13,14,14,16,16,13,14,13,16,15,12,13,13,14,16,12,13,14,14,16,13,14,14,16,16,15,14,16,15,18,16,17,17,18,17,12,13,13,16,15,14,14,14,16,16,13,14,13,16,15,16,16,17,17,17,15,16,15,18,15,7,9,9,13,13,9,9,11,13,14,9,10,10,14,13,12,13,14,15,16,12,14,13,17,15,9,9,10,13,14,10,9,11,13,15,11,11,11,14,14,13,12,14,14,17,14,14,14,17,16,9,10,10,14,13,11,11,11,14,14,10,11,10,15,13,14,14,14,16,17,13,14,13,17,14,13,13,14,14,16,13,13,14,14,17,14,14,14,16,16,15,14,16,15,18,17,17,17,18,18,13,14,13,16,15,14,14,15,17,16,13,14,13,17,15,17,16,17,17,17,15,16,14,18,14,7,9,9,13,13,9,10,10,13,14,9,11,10,14,13,13,14,14,16,16,13,14,14,17,15,9,10,10,14,13,9,10,11,13,14,11,12,11,15,14,13,13,14,14,16,14,15,15,17,17,9,10,10,14,14,11,12,12,14,15,10,11,10,15,13,14,15,15,17,17,14,15,13,17,14,13,14,13,16,16,13,13,14,15,16,14,15,15,17,17,15,14,16,15,18,17,18,17,20,18,13,14,14,16,16,15,15,15,17,17,13,14,13,17,15,17,17,18,18,18,15,16,14,19,14,12,13,13,15,16,13,13,15,16,17,13,14,14,16,16,15,15,17,17,19,16,17,17,19,18,13,13,14,15,17,14,13,15,15,17,14,15,15,16,17,16,15,18,16,19,17,17,17,18,19,13,14,14,17,16,14,15,15,17,17,14,15,14,17,16,17,17,17,18,19,16,17,16,19,17,16,16,17,16,18,16,16,17,16,19,17,17,18,18,19,18,17,18,17,21,19,19,19,20,19,16,17,17,18,18,17,17,18,18,19,16,17,16,18,18,19,19,19,19,20,18,18,17,20,18,11,13,13,16,15,13,14,14,16,17,13,15,14,17,16,16,17,17,18,18,17,17,17,19,18,13,14,13,17,16,14,13,14,16,17,15,16,15,18,16,17,16,17,17,19,18,18,18,20,18,13,14,14,16,17,15,15,15,17,18,14,15,14,18,16,18,18,18,19,20,17,18,16,20,17,16,17,16,18,18,16,16,17,18,18,17,18,18,19,18,18,17,19,17,20,19,20,19,22,20,16,16,17,18,18,18,17,17,19,19,16,17,16,18,17,19,20,19,22,21,18,19,18,21,17,6,8,8,12,12,8,9,10,13,13,8,9,9,13,13,12,13,13,15,16,11,13,13,16,15,8,9,10,13,13,9,10,11,13,14,10,11,11,14,14,13,13,14,15,16,13,14,14,16,16,8,9,9,13,13,10,11,11,14,14,9,10,9,14,13,13,14,14,16,17,12,14,12,16,14,12,13,13,15,16,13,13,14,15,16,13,14,14,15,17,15,15,16,15,18,16,16,17,17,17,12,13,13,16,14,13,14,14,16,16,12,14,13,16,14,16,17,17,18,18,15,15,14,18,14,7,9,9,13,13,9,10,11,13,14,9,10,10,14,13,13,14,14,15,17,13,14,14,16,15,9,10,10,14,14,10,10,11,13,15,11,12,12,15,14,14,13,15,14,17,14,15,15,17,17,9,10,10,13,14,11,11,12,14,15,9,11,10,14,13,14,15,15,16,18,13,14,13,16,14,13,14,14,16,16,13,13,14,15,17,15,15,15,16,17,15,14,16,15,18,17,17,18,19,18,13,14,14,16,16,14,15,15,17,17,13,14,13,16,15,17,17,18,18,18,15,16,14,18,15,7,9,9,13,13,9,10,10,13,14,9,11,10,14,13,12,13,14,15,16,12,14,13,16,15,9,10,10,13,14,10,10,11,13,14,11,11,11,15,14,13,13,14,14,16,14,14,14,17,16,9,10,9,14,13,11,11,11,14,14,10,11,9,15,13,14,14,14,16,16,13,14,12,17,14,13,13,14,15,16,13,13,14,15,16,14,15,14,16,17,15,14,16,14,18,16,17,17,18,18,13,14,13,16,14,14,14,14,16,16,13,14,13,17,14,17,17,17,18,18,15,16,14,18,15,11,13,13,16,16,13,14,15,16,17,13,14,14,17,16,16,17,17,18,19,17,17,17,19,18,13,14,14,17,17,13,13,15,16,18,15,15,15,17,17,17,16,18,17,20,18,17,18,19,19,13,14,14,16,17,15,15,16,16,18,14,15,14,16,16,17,17,18,18,20,17,18,16,18,17,16,17,16,19,18,16,16,17,18,19,18,18,18,19,19,18,17,18,17,21,20,19,19,21,21,16,16,17,18,18,17,17,18,19,19,16,17,16,19,18,20,20,20,19,21,18,18,17,20,18,12,13,13,16,15,13,14,14,16,16,13,14,13,17,16,16,17,17,18,18,15,17,15,19,17,13,14,14,16,17,14,14,15,16,17,14,15,15,17,17,16,16,17,17,18,17,17,17,19,19,13,14,13,17,15,14,15,15,17,16,14,15,13,17,15,17,18,17,19,18,16,17,15,20,16,16,17,17,18,18,16,16,17,18,18,17,18,17,19,18,17,17,18,18,20,19,20,19,20,19,16,16,16,19,16,17,17,17,19,18,16,17,16,19,16,19,19,19,19,19,18,19,17,19,17,11,13,13,16,16,13,14,14,17,17,13,14,14,17,17,15,17,17,19,19,16,18,17,20,19,12,14,14,17,17,13,14,15,17,18,14,15,15,17,18,16,16,17,18,20,17,18,18,20,18,13,14,14,17,17,14,15,15,17,18,14,15,15,17,17,17,18,17,19,19,17,18,17,19,19,15,16,16,18,18,15,16,17,18,19,16,17,17,19,19,17,17,18,18,21,18,19,19,21,19,16,17,17,18,18,17,17,18,19,19,17,18,17,19,19,19,19,19,20,20,18,19,18,21,19,12,13,13,16,16,13,14,14,16,17,13,15,14,17,16,15,16,17,17,19,16,17,17,19,18,13,13,14,16,17,14,13,15,16,17,14,15,15,17,17,15,15,17,17,20,17,17,18,19,18,13,14,14,17,16,15,15,15,17,18,14,15,14,17,16,17,17,17,18,18,16,17,16,19,17,16,15,17,17,19,16,15,17,16,19,17,16,17,18,19,17,16,19,16,20,19,18,19,19,19,16,17,17,18,18,17,17,17,18,19,16,17,16,19,18,20,19,19,20,19,18,18,17,20,17,11,13,13,16,16,13,14,15,16,17,14,15,14,18,16,17,17,17,18,21,17,18,17,20,19,13,14,14,17,16,13,14,15,16,18,15,16,15,18,17,17,16,17,17,19,17,18,18,20,19,13,14,14,16,17,15,15,16,17,18,14,15,14,18,17,17,18,18,19,20,17,18,16,19,17,16,17,15,19,18,16,16,16,18,18,17,18,17,20,19,18,17,18,17,20,20,20,19,22,20,16,17,17,18,19,18,18,18,19,20,16,17,16,19,18,20,19,19,20,20,18,19,17,20,17,13,14,14,16,17,14,14,16,16,18,14,16,15,17,16,16,16,17,17,18,17,17,16,19,18,14,14,15,16,17,14,14,16,16,18,16,16,16,17,17,16,15,17,16,19,18,18,18,19,19,14,15,15,17,17,15,16,16,17,18,14,16,14,18,16,17,17,18,18,19,16,17,16,19,17,16,16,17,16,18,16,16,17,16,19,18,18,18,17,18,17,16,18,16,20,19,19,19,19,19,16,17,17,18,18,17,17,18,19,19,16,17,16,19,17,18,19,19,19,20,17,18,16,20,16,11,14,13,17,17,14,14,16,16,18,14,16,14,19,16,18,18,19,18,19,18,19,18,21,18,13,15,14,18,16,14,14,16,16,18,16,17,16,19,17,18,16,19,17,20,19,19,19,21,19,13,14,15,17,18,17,16,17,17,19,14,16,14,18,16,20,19,19,20,21,18,19,16,21,17,17,18,16,19,17,16,16,17,18,18,19,19,18,21,18,17,17,18,17,20,20,20,20,22,20,17,17,18,18,20,19,19,19,18,20,16,17,17,19,19,21,21,21,20,21,17,19,17,23,17,11,13,13,16,16,13,14,14,17,17,13,14,14,17,17,16,17,17,19,20,15,16,16,19,19,13,14,14,16,17,14,15,15,17,18,14,15,15,17,17,17,17,18,19,19,17,17,18,19,19,13,14,14,17,16,14,15,15,17,17,13,15,14,18,17,17,18,18,19,20,16,17,16,19,18,16,16,17,18,18,17,17,17,18,19,17,18,17,19,19,19,19,19,19,20,19,20,19,20,20,15,16,16,18,17,16,17,17,20,18,15,16,16,19,17,19,19,19,20,20,17,18,17,21,17,11,13,13,16,16,13,14,15,16,17,13,15,14,17,16,17,17,18,18,20,17,17,17,19,19,13,14,14,17,17,14,14,15,17,18,15,15,15,18,17,17,17,18,17,20,18,18,17,20,18,13,14,14,16,17,15,15,16,17,18,14,15,13,17,17,17,18,18,19,20,17,17,16,19,17,16,17,17,18,18,16,16,17,18,18,18,18,18,19,19,18,17,19,18,21,19,20,20,20,20,16,15,17,18,18,17,17,18,18,20,16,16,16,18,17,20,19,20,21,22,17,18,17,20,17,12,13,13,16,16,13,14,15,16,17,13,14,14,17,16,16,17,18,18,19,15,16,16,19,18,13,14,14,16,17,14,14,15,16,17,14,15,15,17,17,16,16,17,17,19,17,17,17,19,18,13,14,13,17,16,14,15,15,17,17,13,15,13,17,16,17,17,17,19,19,15,17,15,19,17,16,17,17,18,18,16,16,17,17,19,17,18,17,19,19,18,17,19,17,19,19,19,19,20,19,15,17,15,19,16,17,17,16,19,18,16,17,15,18,16,19,19,19,20,19,17,19,16,19,16,11,14,14,17,17,15,14,16,16,18,15,16,14,18,16,18,18,19,18,21,18,19,18,20,18,13,15,14,18,17,14,14,16,16,18,16,17,16,19,17,17,17,19,17,22,19,19,19,21,19,13,14,15,17,18,17,16,17,17,19,14,16,14,18,16,19,19,19,20,21,18,18,16,20,17,17,18,16,19,18,15,17,17,19,19,19,19,18,21,19,18,17,20,17,21,22,21,20,21,21,17,16,19,18,20,19,18,19,18,20,16,17,16,19,18,21,20,21,19,23,18,19,16,20,17,13,14,14,17,16,14,14,15,16,18,14,16,14,17,16,16,16,17,17,19,16,17,16,19,17,14,15,15,17,17,14,14,16,16,17,15,16,16,18,17,16,16,17,17,19,17,18,17,19,18,14,15,14,17,16,16,16,16,17,17,14,16,14,17,16,18,18,18,18,19,16,17,15,19,16,17,17,17,18,18,16,15,17,17,18,18,18,18,19,19,17,16,18,16,19,19,19,19,19,19,16,17,16,19,16,18,18,17,19,18,16,17,16,19,16,19,19,20,19,19,17,18,16,20,16,2,3,3,3,3,3,3,1,5,5,5,7,9,5,9,7,5,7,8,7,7,10,9,10,10,5,8,7,9,10,10,7,10,7,6,9,9,9,10,12,9,11,11,9,10,11,11,11,13,12,13,13,9,11,11,12,13,13,11,13,11,6,9,9,9,11,11,9,12,10,9,11,11,11,11,13,12,13,13,9,11,10,12,13,13,11,13,11,6,9,9,9,11,12,9,12,11,9,10,11,10,10,13,12,13,13,9,11,11,12,13,12,11,13,11,7,9,10,9,10,12,10,12,11,10,10,12,10,10,12,12,12,13,10,11,11,12,12,13,10,12,10,7,10,10,11,11,14,11,14,11,10,12,11,11,11,14,14,14,14,10,11,12,14,14,14,11,14,11,6,9,9,9,11,12,9,12,11,9,11,11,11,11,13,12,12,13,9,11,10,12,13,13,10,13,10,7,10,10,11,11,14,11,14,11,10,12,11,11,11,14,14,15,14,10,11,12,13,14,15,11,14,11,7,10,9,10,11,12,9,12,10,10,11,11,10,10,12,12,13,12,9,12,10,12,13,12,10,12,10,2,6,6,6,7,8,6,8,7,6,7,7,7,7,8,7,8,8,6,7,7,7,8,8,7,8,7,6,8,8,8,9,9,8,9,9,8,9,9,9,9,10,9,10,10,8,9,9,9,10,10,9,10,9,6,8,8,8,9,9,8,9,9,8,9,9,9,9,10,9,10,10,8,9,9,9,10,9,9,10,9,6,8,8,8,9,9,8,9,9,8,9,9,9,9,10,9,9,10,8,9,9,9,10,9,9,10,9,7,8,8,8,9,9,8,9,9,8,8,9,9,9,9,9,9,9,8,9,9,9,10,9,9,9,9,7,9,9,9,9,10,9,10,9,9,9,9,9,9,10,10,10,10,9,9,9,10,10,10,9,10,9,6,8,8,8,9,9,8,9,9,8,9,9,9,9,10,9,10,10,8,9,9,9,10,9,9,10,9,7,9,9,9,9,10,9,10,9,9,9,9,9,9,10,10,10,10,9,9,9,10,10,10,9,10,9,7,8,8,8,9,9,8,9,9,8,9,9,9,9,10,9,9,10,8,9,8,9,9,9,9,10,9,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,1,4,5,5,10,10,5,10,10,5,10,10,10,10,10,10,10,10,5,10,10,10,10,10,10,10,10,7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,6,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,6,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,6,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,1,2,3,4,5,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,15,15,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,7,13,15,16,17,19,20,6,3,4,7,9,10,12,15,13,4,3,4,7,8,11,13,14,7,4,4,6,7,10,11,16,9,7,6,7,8,9,10,16,9,8,7,7,6,8,8,18,12,10,10,9,8,8,9,20,14,13,12,11,8,9,9,2,3,1,3,1,4,4,7,7,10,10,12,12,12,12,13,12,5,5,5,8,6,11,9,12,12,13,12,12,12,4,5,5,6,8,9,11,12,12,13,12,12,12,7,7,8,9,9,11,8,12,9,12,12,12,12,7,8,8,9,9,8,11,9,12,12,12,11,12,10,10,10,11,11,11,11,11,10,11,11,12,11,10,10,10,11,11,11,11,10,11,11,11,11,12,11,11,11,12,11,12,11,12,11,13,11,13,11,11,11,11,11,12,11,12,10,13,11,12,11,13,12,12,12,13,12,13,13,13,12,14,12,14,13,12,12,12,12,13,13,13,12,14,12,14,13,14,13,14,14,14,14,14,14,14,14,15,14,15,14,13,14,13,14,14,14,14,14,15,14,14,14,15,4,4,4,5,5,4,5,5,5,5,4,5,5,5,5,5,5,5,4,5,5,5,5,5,4,1,3,2,5,5,6,6,6,6,3,9,14,16,17,19,22,22,5,4,6,9,11,13,17,20,9,5,5,6,9,11,15,19,11,7,5,5,7,9,13,17,14,9,7,6,6,7,11,14,16,11,9,7,6,4,4,8,19,15,13,11,9,4,3,4,21,16,16,15,12,6,4,4,2,5,5,4,7,7,4,7,7,5,7,7,7,8,9,7,9,9,5,7,7,7,9,9,7,9,8,6,7,8,8,9,10,8,9,10,8,9,10,10,10,12,10,11,11,8,10,10,10,11,12,10,11,11,6,8,7,8,10,9,8,10,9,8,10,10,10,11,11,10,12,11,8,10,9,10,11,11,10,12,10,5,8,8,8,10,10,8,10,10,7,9,10,9,10,11,9,11,11,8,10,10,10,11,12,10,12,11,7,9,9,9,10,11,9,11,11,9,9,11,10,11,12,11,11,12,9,11,11,11,12,12,11,12,12,7,9,9,10,11,11,10,12,11,9,11,10,11,11,12,11,13,12,10,11,11,12,13,13,11,13,11,5,8,8,8,10,10,8,10,10,8,10,10,10,11,12,10,12,11,7,10,9,9,11,11,9,11,10,7,9,9,10,11,12,10,11,11,10,11,11,11,11,13,12,13,13,9,10,11,11,12,13,11,12,11,7,9,9,9,11,11,9,11,10,9,11,11,11,12,12,11,12,12,9,11,9,11,12,11,10,12,11,4,6,6,9,9,6,8,8,10,10,6,8,8,10,10,8,10,10,12,13,8,10,10,13,12,6,8,8,10,10,8,8,9,10,11,8,9,9,11,11,10,10,11,12,13,10,11,11,13,13,6,8,8,10,10,8,9,9,11,11,8,9,8,11,10,10,11,11,13,13,10,11,10,13,12,9,10,10,12,12,10,10,11,12,13,10,11,11,13,13,12,12,13,12,15,13,13,13,15,14,9,10,10,12,12,10,11,11,13,13,10,11,10,13,12,12,13,13,14,15,12,13,12,15,12,6,8,8,10,11,8,9,10,11,12,8,9,9,11,11,10,11,12,13,14,10,11,11,13,13,8,9,9,11,12,9,10,11,12,13,9,10,10,12,13,11,12,13,13,15,11,12,12,14,14,8,9,9,11,12,9,10,11,12,13,9,10,10,13,12,11,12,13,14,15,11,12,12,14,13,10,11,12,13,14,11,12,13,13,15,12,13,13,14,14,13,13,14,14,16,14,15,14,16,15,10,12,11,14,13,12,12,13,14,14,11,12,12,14,14,14,14,15,15,16,13,14,14,16,14,6,8,8,11,10,8,9,9,11,11,8,10,9,12,11,10,11,11,13,13,10,12,11,14,13,8,9,9,12,11,9,10,10,12,13,9,11,10,13,12,11,12,12,14,14,11,13,12,15,14,8,9,9,12,11,9,10,10,13,12,9,11,10,13,12,11,12,12,14,14,11,13,12,15,13,10,11,12,13,14,11,12,13,13,14,12,13,12,14,14,13,13,14,14,16,14,15,14,16,16,10,12,11,14,13,12,13,13,14,14,11,13,12,15,13,14,14,15,16,16,13,14,13,16,14,9,10,11,12,13,11,11,12,13,14,11,11,12,13,14,13,13,14,14,16,13,14,14,15,15,11,11,12,13,14,12,12,13,13,15,12,13,13,14,15,14,14,15,15,17,14,14,15,16,16,11,12,12,13,14,12,12,13,14,15,12,13,12,14,15,14,14,15,15,17,14,15,14,16,16,13,14,14,15,16,14,14,15,15,17,14,15,15,16,16,15,16,17,16,18,16,17,16,17,17,13,14,14,16,15,14,15,15,16,16,14,15,14,16,15,16,16,17,17,18,16,16,16,17,16,9,11,10,13,12,11,12,11,14,13,11,12,11,14,13,13,14,14,16,15,13,14,13,16,14,11,12,12,14,13,12,12,13,14,14,12,13,13,15,14,14,14,15,16,16,14,15,14,17,15,11,12,11,14,13,12,13,13,15,14,12,13,12,15,13,14,15,14,16,16,14,15,14,17,15,13,14,14,15,16,14,14,15,16,16,14,15,15,16,16,15,16,16,16,17,16,16,16,17,17,13,14,14,16,15,14,15,15,17,16,14,15,14,17,15,16,17,17,17,17,16,16,16,18,16,6,8,8,11,11,8,9,9,11,12,8,9,9,12,11,10,11,11,13,14,10,11,11,14,13,8,9,9,11,12,9,10,10,12,13,9,10,10,13,12,11,11,12,13,15,11,12,12,15,14,8,9,9,12,11,9,10,11,12,13,9,11,10,13,12,11,12,12,14,15,11,13,12,15,14,10,11,11,13,14,11,12,12,13,14,11,12,12,14,14,13,13,14,14,16,13,14,14,16,15,11,12,11,14,13,12,13,13,14,14,11,13,12,14,13,14,14,15,16,16,13,14,14,16,14,8,9,9,11,12,9,10,10,12,13,9,10,10,13,12,11,12,12,14,15,11,12,12,14,14,9,9,10,11,13,10,10,12,12,14,10,10,11,13,13,12,12,13,14,16,12,12,13,15,15,9,10,10,13,12,10,11,11,13,14,10,12,11,14,13,12,13,13,15,15,12,13,13,15,15,11,11,12,13,15,12,12,13,13,15,12,13,13,14,15,14,14,15,15,17,14,15,15,16,16,11,13,12,15,14,13,13,13,15,15,12,14,13,15,14,15,15,15,16,16,14,15,15,17,15,7,9,9,12,11,9,10,10,12,12,9,11,10,13,12,11,12,12,14,14,11,13,12,15,14,9,10,10,12,12,10,10,11,12,13,10,11,11,14,13,12,12,13,14,15,12,13,13,15,14,9,10,10,12,12,10,11,11,13,13,10,11,10,14,12,12,13,13,15,15,12,13,12,15,13,11,12,12,14,14,12,12,13,14,15,12,13,13,15,15,14,13,14,13,16,14,15,15,16,16,11,12,12,14,14,13,13,14,15,15,12,13,12,15,14,15,15,15,16,16,14,15,14,17,14,10,11,12,13,14,11,12,13,14,15,11,12,12,14,15,13,14,15,15,17,14,14,14,16,16,11,12,13,12,15,12,12,14,13,16,13,13,14,13,16,14,14,15,14,17,15,15,15,15,17,11,13,12,15,15,13,13,14,15,16,12,14,13,16,15,15,15,15,17,17,15,15,15,17,16,14,14,15,14,16,14,14,16,14,17,15,15,15,14,17,16,16,17,15,18,17,17,17,16,18,14,15,15,17,16,15,16,16,17,17,15,16,15,17,16,17,17,17,18,18,16,17,16,18,17,10,11,11,14,13,11,12,12,14,14,11,13,12,15,14,14,14,14,16,16,14,15,14,16,15,11,12,12,15,13,12,13,13,15,14,13,14,13,16,14,14,15,15,16,16,15,16,15,17,16,11,13,12,15,14,13,13,14,15,15,12,14,13,16,14,15,15,15,17,17,14,16,15,17,16,14,14,14,16,15,14,15,15,16,16,15,16,15,17,16,16,16,16,16,17,16,17,17,18,17,14,15,15,16,16,15,15,16,17,16,14,15,15,17,16,17,17,17,18,18,16,17,16,18,16,6,8,8,11,11,8,9,9,11,12,8,9,9,12,11,10,11,12,13,14,10,11,11,14,13,8,9,9,11,12,9,10,11,12,13,9,11,10,13,12,11,12,13,14,15,11,12,12,15,14,8,9,9,12,11,9,10,10,12,13,9,10,10,13,12,11,12,12,14,15,11,12,12,14,13,11,11,12,13,14,11,12,13,13,15,12,13,13,14,14,13,14,14,14,16,14,15,14,16,16,10,11,11,14,13,11,12,12,14,14,11,12,12,14,13,13,14,14,15,16,13,14,13,16,14,7,9,9,11,11,9,10,11,12,13,9,10,10,12,12,11,12,13,14,15,11,12,12,14,14,9,10,10,12,12,10,10,11,12,13,10,11,11,13,13,12,12,13,13,15,12,13,13,15,15,9,10,10,12,12,10,11,11,13,13,10,11,10,13,12,12,13,13,14,15,12,13,12,15,13,11,12,12,14,14,12,12,13,14,15,13,14,13,15,15,14,13,15,13,16,15,15,15,16,16,11,12,12,14,14,12,13,13,14,15,12,13,12,15,14,14,15,15,16,17,13,14,13,16,13,8,9,9,12,11,9,10,10,12,13,9,10,10,13,12,11,12,12,14,15,11,12,12,15,14,9,10,10,12,13,10,11,12,13,14,10,11,11,14,13,12,13,13,15,15,12,13,13,15,15,9,10,9,13,11,10,11,10,13,13,10,12,10,14,12,12,13,12,15,15,12,13,12,15,14,11,12,13,14,15,12,13,14,14,15,13,13,13,15,15,14,15,15,15,17,15,15,15,16,16,11,12,11,15,13,12,13,13,15,14,12,13,12,16,13,14,15,15,16,16,14,15,14,17,14,10,11,11,13,14,11,12,13,14,15,11,12,12,14,14,14,14,15,15,17,14,14,14,15,16,11,12,13,14,15,12,13,14,14,16,13,14,13,15,15,14,15,16,15,17,15,15,15,17,17,11,12,12,13,15,13,13,14,14,16,12,13,13,14,15,15,15,15,16,17,14,15,15,16,16,14,15,15,16,16,14,15,15,16,17,15,15,16,16,17,16,16,17,16,18,17,17,17,18,18,14,14,15,15,16,15,15,15,16,17,14,15,15,16,16,16,17,17,17,18,16,16,16,17,16,10,11,11,14,13,11,13,12,15,14,11,13,12,15,14,14,15,14,16,16,13,15,14,17,15,11,12,13,15,15,12,13,14,15,16,13,14,13,16,15,15,15,15,16,17,15,15,15,17,16,11,13,11,15,12,13,14,13,16,13,12,14,12,16,13,15,15,15,17,15,14,16,14,17,14,14,15,15,16,17,15,15,16,16,17,15,16,15,17,17,16,16,17,17,18,16,17,17,18,18,14,15,14,17,13,15,16,15,17,15,15,16,15,17,14,16,17,16,18,16,16,17,16,18,15,9,11,11,13,13,10,12,12,14,14,11,12,12,14,14,13,14,14,15,16,13,14,14,16,16,10,11,12,14,14,11,12,13,14,15,11,13,13,15,15,13,14,14,15,16,14,15,15,16,16,11,12,12,14,14,12,13,13,15,15,12,13,12,15,14,14,15,15,16,16,14,15,14,17,16,12,13,13,15,16,13,13,14,15,16,13,14,14,16,16,14,15,16,16,17,15,16,16,17,17,13,14,14,16,15,14,15,15,17,16,14,15,14,17,15,16,16,17,17,17,16,16,16,18,16,10,11,12,14,14,11,12,13,14,15,11,13,12,15,15,13,14,15,16,16,14,15,15,17,16,11,11,13,14,15,12,12,14,14,16,12,13,14,15,15,14,14,15,16,17,15,15,15,17,17,12,13,12,15,15,13,14,14,16,15,13,14,13,16,15,15,16,15,17,17,15,16,15,17,16,13,12,15,14,16,14,13,15,14,17,14,13,15,15,17,15,14,17,15,18,16,15,17,17,18,14,15,15,17,16,15,16,16,17,17,15,16,15,17,16,16,17,17,18,18,16,17,16,18,17,10,11,11,14,14,11,12,12,14,15,11,13,12,15,14,13,14,14,16,16,14,15,14,16,16,11,12,12,14,14,12,12,13,15,15,12,13,13,15,15,14,14,15,16,16,14,15,15,17,16,11,12,12,15,15,13,13,13,15,15,12,13,13,15,15,15,15,15,17,17,14,15,15,17,16,13,14,13,16,15,14,14,14,16,16,14,15,14,17,16,15,15,16,16,17,16,17,16,18,17,14,15,15,16,16,15,15,15,17,17,14,15,15,17,16,16,17,17,18,18,16,17,16,18,16,12,13,13,15,15,13,14,14,16,16,13,14,14,16,16,14,15,16,16,18,15,16,16,17,17,13,13,14,14,16,14,14,15,15,17,14,14,15,15,17,15,15,17,15,18,16,16,17,17,18,13,14,14,16,16,14,15,15,16,17,14,15,15,17,16,16,17,16,17,18,16,17,16,18,17,15,14,16,13,18,16,15,17,14,18,16,15,17,14,18,17,16,18,15,19,17,17,18,16,19,15,16,16,17,17,16,17,17,18,18,16,17,16,18,17,18,18,18,19,18,17,18,17,19,17,11,12,12,15,15,13,13,14,15,16,13,14,13,16,15,15,15,15,16,17,15,16,15,17,16,12,13,13,15,15,13,13,14,15,16,14,15,14,16,15,15,15,16,16,17,16,16,16,18,17,12,13,13,15,15,14,14,15,16,16,13,14,13,16,15,16,16,16,17,17,15,16,15,18,16,15,15,15,17,15,14,15,15,16,16,16,17,16,17,16,16,16,17,16,17,17,18,17,19,18,15,15,16,17,17,16,16,16,17,17,15,16,15,17,16,17,18,18,18,18,16,17,16,18,16,9,11,11,13,13,11,12,12,14,14,10,12,12,14,14,13,14,14,15,16,13,14,14,16,15,11,12,12,14,14,12,12,13,14,15,12,13,13,15,15,14,14,15,16,17,14,15,15,16,16,10,12,11,14,14,11,13,13,15,15,11,13,12,15,14,14,14,15,16,16,13,14,14,16,15,13,14,14,15,16,14,14,15,15,17,14,15,15,16,17,16,16,16,16,18,16,16,17,17,17,12,13,13,16,15,13,14,14,16,16,12,14,13,16,15,15,16,16,17,17,14,16,15,17,16,10,11,11,14,14,11,12,13,14,15,11,12,12,15,14,14,14,15,16,16,13,14,14,16,16,11,12,12,14,15,12,13,14,15,15,13,13,13,15,15,14,15,15,16,17,15,15,15,16,17,11,12,12,14,14,12,13,13,15,15,12,13,12,15,15,14,15,15,16,17,14,15,14,16,16,14,14,15,16,16,14,15,15,16,17,15,16,15,17,17,16,16,17,16,18,16,17,17,18,18,13,13,14,15,16,14,14,15,16,17,14,14,14,16,15,16,16,17,17,18,15,16,15,17,16,10,12,11,14,14,11,13,13,15,15,11,13,12,15,15,14,15,15,16,16,13,15,14,16,16,12,12,13,15,15,13,13,14,15,16,13,14,14,16,15,15,15,16,16,17,15,15,15,17,17,11,13,11,15,14,12,14,13,16,15,12,14,12,16,14,15,15,15,17,17,14,15,14,17,15,14,15,15,16,17,15,15,16,16,17,15,16,16,17,17,16,16,17,17,18,16,17,17,18,18,13,14,12,16,14,14,15,13,17,15,14,15,13,17,14,16,17,15,18,17,15,17,14,18,15,11,12,12,14,15,13,13,14,15,16], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+412916);
/* memory initializer */ allocate([13,14,13,16,15,15,15,16,16,17,15,15,15,16,16,12,13,13,15,15,13,13,14,15,16,14,15,14,16,16,15,15,16,16,18,16,16,16,18,17,12,13,13,15,15,14,14,15,15,16,13,14,13,15,15,16,16,16,17,18,15,16,15,17,16,15,16,15,17,16,15,15,16,16,17,16,17,16,17,17,16,16,17,16,18,17,18,18,18,18,14,15,15,15,17,16,15,17,16,17,14,15,15,16,16,17,17,18,18,19,16,16,16,17,16,12,13,13,15,15,13,14,14,16,16,13,14,14,16,16,15,16,16,17,17,15,16,15,18,16,13,14,14,16,16,14,15,15,16,17,14,15,15,17,16,16,16,17,17,18,16,17,16,18,18,13,14,13,16,14,14,15,14,17,15,14,15,14,17,14,16,17,16,18,17,15,17,15,18,15,15,16,16,17,18,16,16,17,17,18,16,17,17,17,18,17,17,18,18,19,17,18,18,19,18,15,16,14,17,13,16,17,15,18,14,16,17,15,18,14,18,18,17,19,16,17,18,16,19,15,2,5,5,4,7,7,4,7,7,5,7,8,7,8,10,8,9,9,5,7,7,8,9,9,7,10,8,5,7,8,8,9,10,8,10,10,8,9,10,10,10,12,10,12,12,8,10,10,10,12,12,10,12,11,5,8,7,8,10,10,8,10,9,8,10,10,10,11,12,10,12,12,8,10,9,10,12,12,10,12,10,5,8,8,7,10,10,8,10,10,7,9,10,9,10,12,10,12,12,8,10,10,10,12,12,10,12,11,7,9,10,9,11,12,10,12,11,9,9,12,11,10,14,12,12,13,10,12,11,12,13,13,11,14,12,7,10,9,10,11,11,10,12,11,9,11,11,11,11,13,12,14,13,10,12,12,12,14,14,11,14,12,5,8,8,8,10,10,7,10,10,8,10,10,10,11,12,10,12,12,7,10,9,10,12,12,9,12,10,7,9,10,10,11,12,10,11,11,10,12,12,11,12,14,12,14,14,9,11,11,12,13,14,11,13,11,7,10,9,10,11,12,9,12,11,10,11,12,11,12,14,12,13,13,9,12,9,12,13,12,11,14,10,6,7,7,7,7,7,7,7,7,7,7,8,7,8,8,7,8,8,7,8,7,7,8,8,7,8,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,8,9,8,8,8,8,8,8,8,9,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,8,8,8,8,8,8,9,8,8,9,8,7,8,8,7,8,8,7,8,8,7,8,8,8,8,8,8,8,8,8,8,8,8,9,8,8,9,8,7,8,8,8,8,9,8,8,8,8,8,8,8,8,9,8,9,9,8,8,8,9,9,9,8,9,9,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,9,9,8,8,8,8,9,9,8,9,8,7,8,8,7,8,8,7,8,8,8,8,8,8,8,9,8,8,9,7,8,8,8,8,8,8,8,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,9,9,8,8,8,8,9,9,8,9,8,7,8,8,8,8,8,8,9,8,8,8,8,8,9,9,9,9,9,8,8,8,8,9,9,8,9,8,1,5,5,5,7,8,5,8,7,5,7,8,7,8,10,8,10,10,5,8,7,8,10,10,7,10,8,6,8,9,9,10,12,9,11,11,9,10,11,11,11,13,11,13,13,9,11,11,11,12,13,11,13,11,6,9,8,9,11,11,9,12,10,9,11,11,11,11,13,11,13,13,9,11,10,11,13,13,11,13,11,6,9,9,8,10,11,9,12,11,8,10,11,10,11,13,11,13,13,9,11,11,11,13,12,11,13,11,8,10,10,9,11,12,10,12,12,10,10,12,11,11,14,12,13,14,10,12,12,12,13,13,11,14,11,8,11,10,11,12,13,11,14,12,10,12,11,11,12,14,13,15,14,10,12,12,13,14,15,12,14,12,5,9,9,9,11,12,8,11,10,9,11,11,11,11,13,11,12,13,8,11,10,11,13,13,10,13,11,8,10,11,11,12,14,11,13,12,10,12,12,12,12,14,14,15,14,10,11,12,13,14,15,11,14,12,8,10,10,10,12,12,9,12,11,10,12,12,11,11,14,12,13,13,10,12,10,12,14,13,11,13,11,7,8,8,10,10,8,9,9,10,11,8,9,9,10,10,9,10,10,11,11,9,10,10,11,11,8,9,9,10,10,9,9,10,11,11,9,10,10,11,11,10,10,11,11,11,10,11,11,11,11,8,9,9,10,10,9,10,10,11,11,9,10,9,11,11,10,11,11,11,11,10,11,10,11,11,10,10,10,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,12,11,11,11,11,12,10,10,10,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,12,11,11,11,11,12,11,8,9,10,11,11,9,10,11,11,11,9,10,10,11,11,10,11,11,12,12,10,11,11,12,12,10,10,10,11,11,10,10,11,11,12,10,11,11,12,12,11,11,12,12,12,11,11,12,12,12,10,10,10,11,11,10,11,11,12,12,10,11,11,12,11,11,12,12,12,12,11,12,11,12,12,11,11,11,11,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,8,10,9,11,11,9,10,10,11,11,9,10,10,11,11,10,11,11,12,12,10,11,11,12,12,10,10,10,11,11,10,11,11,12,12,10,11,11,12,12,11,11,12,12,12,11,12,12,12,12,10,10,10,11,11,10,11,11,12,12,10,11,10,12,11,11,12,11,12,12,11,12,11,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,11,11,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,10,11,11,11,12,11,11,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,13,12,13,12,12,12,13,13,11,12,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,12,12,12,12,12,12,12,12,12,13,12,12,13,13,13,12,13,13,13,13,12,13,13,13,13,12,12,12,12,12,12,12,13,13,13,12,12,12,13,12,12,13,13,13,13,12,13,13,13,13,10,11,11,12,11,11,11,11,12,12,11,12,11,12,12,11,12,12,12,12,11,12,12,12,12,11,11,11,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,12,11,12,12,12,12,12,12,12,11,12,11,12,12,12,12,12,13,13,12,12,12,13,12,12,12,12,12,12,12,12,12,13,13,12,12,12,13,13,12,13,13,13,13,12,13,13,13,13,12,12,12,12,12,12,12,12,13,13,12,13,12,13,12,12,13,13,13,13,13,13,13,13,13,8,10,10,11,11,9,10,10,11,11,9,10,10,11,11,10,11,11,12,12,10,11,11,12,12,9,10,10,11,11,10,10,11,11,12,10,11,11,12,12,11,11,12,12,12,11,11,12,12,12,10,10,10,11,11,10,11,11,12,12,10,11,10,12,11,11,12,11,12,12,11,12,11,12,12,11,11,11,12,12,11,11,12,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,11,11,11,12,11,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,9,10,10,11,11,10,11,11,11,12,10,11,11,12,12,11,11,11,12,12,11,11,11,12,12,10,10,11,11,12,11,11,12,12,12,11,11,11,12,12,11,11,12,12,12,11,12,12,12,12,10,11,11,12,12,11,11,11,12,12,11,12,11,12,12,11,12,12,12,12,11,12,12,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,13,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,9,10,10,11,11,10,11,11,12,12,10,11,11,12,11,11,12,11,12,12,11,12,11,12,12,10,11,11,12,12,11,11,11,12,12,11,12,11,12,12,11,12,12,12,12,12,12,12,12,12,10,11,11,12,12,11,12,11,12,12,11,12,11,12,12,12,12,12,13,12,12,12,12,12,12,11,12,11,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,13,11,12,12,12,12,12,12,12,13,12,11,12,12,12,12,12,12,12,13,12,12,12,12,13,12,10,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,13,12,12,12,13,13,11,11,12,12,12,12,12,12,12,13,12,12,12,12,12,12,12,13,12,13,12,12,13,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,13,12,13,13,12,13,12,13,13,12,12,12,12,12,12,12,13,12,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,13,13,12,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,10,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,13,12,12,12,13,12,12,12,13,13,13,12,13,13,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,13,13,13,13,12,13,12,13,13,12,12,12,12,12,12,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,13,12,12,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,8,10,10,11,11,9,10,10,11,11,9,10,10,11,11,10,11,11,12,12,10,11,11,12,12,10,10,10,11,11,10,11,11,11,12,10,11,11,12,12,11,11,12,12,12,11,11,12,12,12,9,10,10,11,11,10,11,11,12,12,10,11,10,12,11,11,12,11,12,12,11,12,11,12,12,11,11,11,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,11,11,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,9,10,10,11,11,10,11,11,12,12,10,11,11,12,12,11,11,12,12,12,11,12,12,12,12,10,11,11,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,10,11,11,12,12,11,11,12,12,12,11,11,11,12,12,12,12,12,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,13,12,12,12,13,12,11,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,13,12,12,12,12,13,12,9,10,10,11,11,10,11,11,12,12,10,11,11,12,12,11,11,11,12,12,11,12,11,12,12,10,11,11,12,12,11,11,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,10,11,10,12,11,11,11,11,12,12,11,12,11,12,12,11,12,12,12,12,11,12,11,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,13,11,12,11,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,13,12,12,12,12,13,12,10,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,13,12,12,12,13,13,12,12,13,13,13,12,13,13,13,13,11,12,12,12,12,12,12,12,12,13,12,12,12,12,12,12,13,13,13,13,12,13,12,13,13,12,12,12,12,13,12,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,13,13,13,13,12,13,12,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,13,13,12,12,12,13,12,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,12,12,13,13,13,12,13,13,13,13,11,12,11,12,12,12,12,12,13,12,12,12,12,13,12,12,13,12,13,13,12,13,12,13,12,12,12,12,12,13,12,12,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,13,13,13,13,12,13,12,13,12,13,13,13,13,13,13,13,13,13,13,10,11,11,12,12,10,11,11,12,12,10,11,11,12,12,11,12,12,12,12,11,12,12,12,12,11,11,11,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,11,11,12,12,11,12,12,12,12,11,12,11,13,12,12,12,12,13,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,13,12,12,12,13,13,12,12,13,13,13,12,13,12,13,13,11,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,13,13,13,13,12,13,13,13,13,10,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,11,12,12,12,11,12,12,12,13,12,12,12,13,13,12,12,13,13,13,12,12,13,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,12,13,13,13,13,12,13,12,13,13,12,12,12,12,13,12,12,13,12,13,12,12,13,13,13,12,12,13,13,13,12,13,13,13,13,12,12,12,12,13,12,12,13,13,13,12,12,12,13,13,13,13,13,13,13,12,13,13,13,13,10,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,12,12,12,12,11,12,12,12,13,12,12,12,13,13,12,12,13,13,13,12,13,13,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,13,12,13,13,12,13,12,13,13,12,12,12,12,12,12,12,12,13,13,12,13,12,13,13,12,13,13,13,13,13,13,13,13,13,12,12,12,13,12,12,13,13,13,13,12,13,12,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,13,12,12,12,13,13,12,12,13,13,13,12,12,13,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,12,13,13,13,13,12,13,12,13,13,12,12,12,12,12,12,12,13,12,13,12,13,13,13,13,12,13,13,12,13,13,13,13,13,13,12,12,12,12,12,12,13,13,13,13,12,13,12,13,13,13,13,13,13,13,13,13,13,13,13,10,11,11,12,12,11,12,12,12,13,11,12,12,13,12,12,12,12,13,13,12,12,12,13,13,11,12,12,12,12,12,12,12,13,13,12,13,12,13,13,12,12,13,13,13,12,13,13,13,13,11,12,12,12,13,12,12,12,13,13,12,12,12,13,12,12,13,13,13,13,12,13,12,13,13,12,12,12,12,12,12,12,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,13,12,12,13,13,13,13,12,13,12,13,13,13,13,13,13,13,13,13,13,13,13,10,11,11,12,12,10,11,11,12,12,10,11,11,12,12,11,12,12,12,12,11,12,12,12,12,11,11,11,12,12,11,11,12,12,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,10,11,11,12,12,11,12,12,12,12,11,12,11,12,12,12,12,12,13,13,12,12,12,13,12,11,12,12,12,12,12,12,12,12,13,12,12,12,13,13,12,12,13,13,13,12,13,13,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,13,13,13,13,12,13,12,13,13,10,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,13,12,12,12,13,13,12,12,13,13,13,12,12,13,13,13,11,12,12,12,12,12,12,12,13,13,11,12,12,13,12,12,13,13,13,13,12,13,12,13,13,12,12,12,12,13,12,12,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,13,12,12,12,13,13,13,12,12,12,13,13,13,13,13,13,13,12,13,13,13,13,10,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,13,12,12,12,13,13,12,12,13,13,13,12,12,13,13,13,11,12,11,12,12,12,12,12,13,13,11,12,12,13,12,12,13,12,13,13,12,13,12,13,13,12,12,12,12,12,12,12,13,13,13,12,13,12,13,13,12,13,13,13,13,13,13,13,13,13,12,12,12,13,12,12,13,12,13,13,12,13,12,13,13,13,13,13,13,13,12,13,12,13,13,10,11,11,12,12,11,12,12,12,12,11,12,12,13,12,12,12,12,13,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,13,12,12,12,13,13,12,12,13,13,13,12,13,13,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,13,13,13,13,12,13,12,13,13,12,12,12,12,13,12,12,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,13,13,13,13,12,13,12,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,12,12,13,13,13,12,13,13,13,13,11,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,13,12,13,13,12,13,12,13,13,12,12,12,12,12,12,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,13,13,13,13,12,13,12,13,12,13,13,13,13,13,13,13,13,13,12,2,6,6,9,9,5,7,8,10,11,5,8,7,11,10,8,10,11,12,13,8,11,10,13,12,6,7,8,10,11,7,8,10,10,12,8,9,9,12,11,10,10,12,11,14,10,11,12,14,13,6,8,7,11,10,8,9,9,11,12,7,10,8,12,10,10,12,12,13,14,10,12,10,14,11,9,10,11,11,12,10,10,11,11,13,11,12,12,13,13,12,11,13,11,15,13,14,13,14,14,9,11,10,12,11,11,12,12,13,13,10,11,10,13,11,13,13,14,14,14,12,13,11,14,11,7,8,9,11,12,9,9,11,12,13,9,10,10,13,12,11,12,13,13,15,11,12,12,14,14,9,10,10,12,13,10,10,12,12,14,11,11,11,13,13,12,12,13,13,15,12,13,13,15,14,9,10,10,12,13,10,11,11,13,14,10,12,11,14,13,12,13,13,14,15,12,13,13,15,14,12,12,13,13,14,12,13,13,13,15,13,14,14,14,15,14,14,15,14,16,14,15,15,16,16,12,13,13,14,14,13,13,14,15,14,12,13,13,15,14,14,15,15,15,16,14,15,14,16,14,7,9,8,12,11,9,10,10,12,13,9,11,9,13,12,11,12,12,14,14,11,13,12,15,13,9,10,10,13,12,10,11,12,13,14,10,12,11,14,13,12,13,13,14,15,13,13,13,15,14,9,10,10,13,12,11,11,11,13,13,10,12,10,14,12,13,13,13,14,15,12,13,12,15,13,12,13,13,14,14,12,13,13,14,15,13,14,13,15,15,14,14,15,14,16,14,15,15,16,15,12,13,12,14,13,13,13,13,15,14,12,13,13,15,13,14,15,15,16,15,14,15,14,16,14,11,12,12,13,14,12,13,14,14,15,12,13,13,14,15,14,14,15,15,16,14,15,15,16,16,12,13,13,14,15,13,13,14,14,16,13,14,14,15,15,15,15,16,15,17,15,15,15,16,16,12,13,13,14,15,13,14,14,15,16,13,14,14,15,15,15,15,16,16,17,15,15,15,17,16,14,15,15,16,16,15,15,16,15,16,15,16,16,16,17,16,16,17,16,18,16,16,17,18,17,14,15,15,16,16,15,16,16,16,17,15,16,15,17,16,16,17,17,17,18,16,16,16,17,16,11,12,12,14,13,12,13,13,15,14,12,14,13,15,14,14,15,15,16,16,14,15,14,16,15,12,13,13,15,14,13,14,14,15,15,13,14,14,16,15,15,15,15,16,16,15,16,15,17,16,12,13,13,15,14,13,14,14,15,15,13,14,13,16,14,15,15,15,16,16,15,15,15,17,15,14,15,15,16,16,15,15,15,16,16,15,16,16,17,17,16,16,17,17,17,16,17,17,18,17,14,15,15,16,15,15,15,16,16,16,15,15,15,17,15,17,17,17,18,17,16,17,16,18,16,6,9,9,12,12,8,10,10,12,13,9,11,10,13,12,10,12,12,14,14,11,13,12,14,14,8,10,10,12,12,9,10,11,12,14,10,11,11,13,13,12,12,13,13,15,12,13,13,15,14,9,10,10,13,13,10,11,11,13,13,10,12,10,14,13,12,13,13,14,15,12,13,13,15,14,11,12,12,13,14,12,12,13,13,15,12,13,13,14,14,13,13,14,13,16,14,15,15,16,15,11,12,12,14,14,13,13,13,15,14,12,13,13,15,14,14,15,15,16,15,14,14,14,16,14,7,9,10,12,12,9,10,11,13,13,9,11,10,13,13,11,12,13,14,15,12,13,13,15,14,9,10,11,12,13,10,10,12,13,14,11,11,12,14,14,12,12,14,14,15,13,13,13,15,15,9,11,11,13,13,11,12,12,14,14,10,12,10,14,13,13,14,13,15,15,12,14,13,15,14,12,12,13,13,15,12,12,14,13,15,13,14,14,15,15,14,14,15,14,17,14,15,15,16,16,12,13,13,15,14,13,14,14,15,15,12,14,13,15,14,14,15,15,16,16,14,15,14,16,14,7,10,10,12,12,10,11,11,12,13,10,12,10,14,12,12,13,13,14,15,12,13,13,15,14,9,11,10,13,12,10,10,12,12,14,11,13,12,14,13,13,13,14,13,15,13,14,14,15,14,10,11,11,13,13,12,12,12,13,14,10,12,10,14,12,13,14,14,15,15,13,14,13,15,13,12,13,13,14,14,12,12,13,14,15,13,14,14,15,15,13,13,14,13,15,14,15,15,16,16,12,13,13,14,14,13,14,14,15,15,12,13,13,15,13,15,15,15,16,16,13,14,13,16,13,11,12,13,14,14,12,13,14,14,15,12,13,13,15,15,14,14,15,15,17,14,15,15,16,16,12,13,14,14,15,13,13,14,14,16,13,14,14,15,16,14,14,16,15,17,15,15,16,16,16,12,13,13,15,15,13,14,14,15,16,13,14,14,15,16,15,15,16,17,17,15,16,15,17,16,14,15,15,15,16,15,15,16,15,17,15,15,16,16,17,16,16,16,16,18,16,16,17,17,17,14,15,15,16,16,15,16,16,16,17,15,16,15,17,16,16,17,17,17,17,16,17,16,18,17,11,12,12,14,14,13,13,14,14,15,13,14,13,15,14,14,15,15,15,16,14,15,15,17,15,12,13,13,15,14,13,13,14,15,15,14,15,14,16,15,15,15,15,15,16,15,16,15,17,16,12,13,13,15,15,14,14,14,15,16,13,14,13,16,15,15,15,16,16,17,15,16,15,17,15,14,15,15,16,16,14,15,15,16,16,15,16,16,17,16,15,15,16,15,17,16,17,17,18,17,14,15,15,16,16,15,16,16,16,17,14,15,15,17,16,17,17,17,17,18,15,16,16,18,15,6,9,9,12,12,9,10,11,12,13,8,10,10,13,12,11,12,13,14,14,10,12,12,14,13,9,10,10,12,13,10,10,12,13,14,10,11,11,13,13,12,13,13,14,15,12,13,13,15,14,8,10,10,12,12,10,11,11,13,13,9,11,10,13,13,12,13,13,14,15,12,13,12,15,13,11,12,12,14,14,12,13,13,13,15,13,13,13,14,15,14,14,15,14,16,14,15,15,15,15,11,12,12,14,13,12,13,13,15,14,12,13,12,15,13,14,14,15,16,16,13,14,13,16,13,7,10,10,12,12,10,10,12,12,14,10,11,11,13,12,12,13,13,13,15,12,13,13,15,14,10,11,11,13,13,10,10,12,12,14,12,12,12,14,13,13,13,14,13,15,13,14,14,15,14,9,10,11,13,13,11,12,12,13,14,10,12,10,14,12,13,13,14,14,15,13,13,12,15,13,12,13,13,14,14,12,13,13,14,15,13,14,14,15,15,13,13,15,13,16,15,15,15,16,16,12,13,13,14,14,13,14,14,15,15,12,13,12,15,14,15,15,15,16,16,13,14,13,15,13,7,10,9,12,12,9,10,11,13,13,9,11,10,13,13,11,13,13,14,15,11,13,12,15,14,9,11,11,13,13,10,10,12,13,14,11,12,12,14,14,12,13,14,14,15,13,13,13,15,15,9,11,10,13,12,11,12,11,14,14,10,12,10,14,13,13,14,13,15,15,12,14,12,15,14,12,13,13,14,15,13,13,14,14,15,13,14,14,15,15,14,14,15,14,17,14,15,15,16,16,12,13,12,15,13,13,14,14,15,15,12,14,13,15,13,14,15,15,16,16,14,15,14,16,14,11,12,12,14,14,13,13,14,14,15,13,14,13,15,15,14,15,15,16,17,14,15,15,16,15,12,13,13,15,15,13,13,14,15,16,14,14,14,16,15,15,15,16,15,17,15,16,15,17,16,12,13,13,14,15,14,14,15,15,16,13,14,13,15,15,15,15,16,16,17,15,15,15,16,15,14,15,15,16,16,14,15,15,16,17,15,16,16,17,17,16,15,16,15,17,16,17,17,17,17,14,15,15,15,16,15,15,16,16,17,14,15,15,16,16,16,16,17,17,18,15,16,15,17,15,11,13,12,14,14,12,13,13,15,15,12,14,13,15,14,14,15,15,16,16,14,15,14,16,15,12,13,13,15,15,13,14,14,15,16,13,14,14,16,16,15,15,16,16,17,15,16,15,17,16,12,13,13,15,14,13,14,14,16,15,13,14,13,16,14,15,16,15,17,16,15,15,14,18,15,14,15,15,16,16,15,15,16,16,17,15,16,15,17,16,16,16,17,17,18,16,17,17,18,17,14,15,15,16,15,15,16,15,17,16,15,15,15,17,15,16,17,17,18,17,16,17,16,18,15,10,12,12,14,14,12,13,13,14,14,12,13,13,14,14,13,14,14,15,15,13,14,14,16,15,11,12,13,14,14,12,13,13,15,15,12,13,13,15,15,13,14,15,15,16,14,15,15,16,16,12,13,13,14,14,13,13,14,15,15,13,14,13,15,15,14,15,15,16,16,14,15,14,16,15,13,14,14,15,15,13,14,14,15,16,14,14,15,16,16,14,15,15,15,17,15,16,16,17,17,13,14,14,15,15,14,15,15,16,16,14,15,15,16,16,15,16,16,16,17,15,16,15,17,16,11,12,12,14,14,12,13,13,14,15,12,13,13,15,14,13,14,14,15,16,13,14,14,16,15,12,13,13,14,15,13,13,14,15,15,13,14,14,15,15,14,14,15,15,17,14,15,15,16,16,12,13,13,15,15,13,14,14,15,15,13,14,13,15,15,14,15,15,16,17,14,15,15,16,16,13,13,14,15,16,14,14,15,15,16,14,15,15,16,16,15,15,16,15,18,15,16,16,17,17,14,15,15,16,16,15,15,15,16,16,14,15,15,17,16,16,16,16,17,17,15,16,16,17,16,10,12,12,14,14,12,13,13,14,15,12,13,13,15,14,14,14,15,15,16,14,15,14,16,15,12,13,13,15,14,13,13,14,15,15,13,14,14,15,15,14,14,15,15,16,14,15,15,16,16,12,13,13,15,15,13,14,14,15,16,13,14,13,15,14,15,15,15,16,16,14,15,15,16,15,13,14,14,16,15,14,14,14,15,16,14,15,15,16,16,15,15,16,15,17,16,17,16,17,17,14,14,15,15,16,15,15,16,16,16,14,15,14,16,15,16,16,16,17,17,15,16,15,17,15,11,13,13,14,15,13,13,14,15,15,13,14,13,15,15,14,15,15,15,16,14,15,15,17,15,13,13,14,15,15,13,14,15,15,16,14,14,14,16,16,15,14,16,15,17,15,16,16,17,16,13,14,14,15,15,14,14,14,16,16,13,15,14,16,15,15,15,16,17,17,15,16,15,17,16,14,15,15,15,16,15,15,16,15,17,15,16,16,16,17,16,16,17,15,18,16,17,17,17,17,14,15,15,16,16,15,16,16,17,17,15,16,15,17,16,16,17,17,18,18,16,17,15,18,16,10,12,12,14,14,13,13,14,14,15,13,14,13,15,14,14,15,15,15,16,15,15,15,16,15,12,13,13,15,14,12,12,14,14,15,14,15,14,16,15,15,14,15,14,17,15,16,16,17,16,12,13,13,14,15,14,14,15,15,16,13,14,12,16,14,15,16,16,16,17,15,16,14,17,15,14,15,14,16,15,14,14,15,15,15,15,16,15,17,16,15,14,16,14,16,16,17,17,18,17,14,14,15,15,16,15,16,16,16,17,14,15,14,16,15,16,16,17,17,17,15,16,14,17,14,10,12,12,14,13,12,13,13,14,14,11,13,12,14,14,13,14,14,15,16,13,14,14,16,15,12,13,13,14,14,13,13,14,15,15,13,14,13,15,15,14,14,15,15,16,14,15,15,16,16,11,13,12,14,14,12,13,13,15,15,12,13,13,15,15,14,15,15,16,16,13,14,14,16,15,13,14,14,15,15,14,15,15,15,16,14,15,15,16,16,15,16,16,16,17,16,16,16,17,17,13,14,14,15,15,14,15,15,16,16,13,14,14,16,15,15,16,16,17,17,15,15,15,17,15,11,12,12,14,14,12,13,13,14,15,12,13,13,15,14,14,14,15,15,16,14,14,14,16,15,12,13,13,15,14,13,13,14,15,15,13,14,14,16,15,14,15,15,15,16,15,15,15,16,16,12,13,13,14,15,13,13,14,15,15,13,14,13,15,15,15,15,15,16,16,14,15,14,16,15,14,14,15,16,16,14,15,15,15,16,15,16,15,16,16,15,15,16,15,17,16,16,16,17,17,13,14,14,15,16,14,15,15,16,16,14,14,14,16,16,16,16,16,17,17,15,15,15,17,15,11,12,12,14,14,12,13,13,14,15,12,13,13,15,14,14,14,14,15,16,13,14,14,16,15,12,13,13,15,15,13,13,14,15,16,13,14,14,15,15,14,15,15,16,17,14,15,15,17,16,12,13,13,15,14,13,14,14,15,15,13,14,13,15,15,14,15,15,16,16,14,15,14,17,15,14,15,15,16,16,14,15,15,16,17,15,15,15,17,17,15,16,16,16,17,16,17,16,17,17,13,15,14,16,15,14,15,15,16,16,14,15,14,16,15,16,16,16,17,17,15,16,15,17,15,10,12,12,14,14,13,13,14,14,15,13,14,13,15,14,14,15,15,15,17,14,15,15,16,15,12,13,13,15,14,12,12,14,14,15,14,15,14,16,15,15,14,16,15,17,15,16,16,17,16,12,13,13,14,15,14,14,15,15,16,12,14,12,15,14,15,16,16,16,17,15,16,14,17,14,14,15,14,16,16,14,14,15,15,16,15,16,16,17,16,15,14,16,14,17,16,17,17,18,17,14,14,15,15,16,15,15,16,16,17,14,15,14,16,15,16,17,17,17,18,15,16,14,17,14,11,13,13,15,14,13,13,14,15,15,12,14,13,15,15,14,15,15,15,17,14,15,14,16,15,13,14,14,15,15,13,14,15,15,16,14,15,14,16,16,15,15,16,16,17,15,16,16,17,17,13,14,13,15,15,14,14,14,16,16,13,15,14,16,15,15,16,16,17,17,15,16,14,17,15,15,15,15,16,17,15,15,16,16,17,15,16,16,17,17,16,15,17,16,17,17,17,17,18,18,14,15,15,17,15,15,16,16,17,16,15,16,15,17,15,16,17,17,17,17,16,17,15,18,15,2,3,3,3,3,3,3,2,5,6,5,7,8,5,8,7,5,7,7,7,7,9,8,9,9,5,7,7,8,9,9,7,9,7,6,8,8,8,9,10,8,9,9,8,9,10,9,9,11,10,10,11,8,10,9,10,10,11,9,10,10,6,8,8,8,9,9,8,10,9,8,9,10,9,10,10,10,11,10,8,10,9,10,11,10,9,11,9,6,8,8,7,9,9,8,9,9,7,9,9,9,9,10,9,10,10,8,9,9,9,10,10,9,10,9,7,9,9,9,10,10,9,10,10,9,9,10,10,9,11,10,11,11,9,10,10,10,11,11,10,11,10,6,9,8,9,10,10,9,10,9,8,10,10,9,9,10,10,11,11,9,10,10,10,11,11,9,11,9,6,8,8,8,9,9,7,9,9,8,9,9,9,9,10,9,10,10,7,9,9,9,10,10,9,10,9,6,8,9,9,9,10,9,10,10,9,10,10,9,9,11,10,11,11,8,10,10,10,11,11,9,10,9,7,9,9,9,10,10,9,10,10,9,10,10,10,10,11,10,11,11,9,10,9,10,11,11,10,11,9,4,7,7,6,7,8,6,8,7,7,7,8,7,7,8,8,8,8,7,7,7,8,8,8,7,8,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,9,9,8,8,8,8,9,9,8,9,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,9,9,8,8,8,8,9,9,8,9,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,9,9,8,8,8,8,9,9,8,9,8,7,8,8,8,8,9,8,9,8,8,8,8,8,8,9,8,9,9,8,8,8,9,9,9,8,9,9,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,9,9,8,8,8,8,9,9,8,9,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,9,9,8,8,8,8,9,9,8,9,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,9,9,8,8,8,8,9,9,8,9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,8,9,9,8,8,8,9,9,9,8,9,8,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,1,5,5,4,10,10,5,10,10,5,10,10,10,10,10,10,10,10,5,10,10,10,10,10,9,10,10,6,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,6,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,6,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,1,3,2,4,5,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,15,15,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,2,7,14,16,17,17,18,20,6,3,5,8,10,11,13,15,13,5,3,5,8,9,11,12,15,7,4,3,5,7,9,11,16,10,7,5,6,7,9,10,17,11,8,7,7,6,8,8,19,13,11,9,9,8,8,9,20,14,13,11,10,8,9,9,3,9,15,17,20,21,22,23,5,5,7,9,11,13,17,20,9,5,5,6,8,10,15,18,11,7,5,4,6,9,13,17,14,9,7,5,6,7,10,14,17,10,8,6,6,4,5,8,20,14,13,10,8,4,3,4,23,17,16,14,12,6,4,4,2,5,5,4,7,7,4,7,7,5,7,7,7,8,9,7,9,9,5,7,7,7,9,9,7,9,8,6,7,8,8,9,10,8,9,10,8,9,10,10,10,12,10,11,12,8,10,10,10,11,12,10,11,11,6,8,7,8,10,9,8,10,9,8,10,10,10,11,11,10,12,11,8,10,9,10,12,11,10,12,10,5,8,8,8,10,10,8,10,10,7,9,10,9,10,11,9,11,11,8,10,10,10,12,12,10,12,11,7,9,9,9,10,11,9,11,11,9,9,11,10,11,12,10,11,12,9,11,11,11,12,12,11,12,12,7,9,9,10,11,11,10,12,11,9,11,10,11,11,12,11,13,12,10,11,11,12,13,13,11,13,11,5,8,8,8,10,10,8,10,10,8,10,10,10,11,12,10,12,11,7,10,9,9,11,11,9,11,10,7,9,9,10,11,12,10,11,11,10,11,11,11,11,13,12,13,13,9,10,11,12,12,13,11,12,11,7,9,9,9,11,11,9,11,10,9,11,11,11,12,12,11,12,12,9,11,9,10,12,11,10,12,11,4,6,6,9,9,6,8,8,10,10,6,8,8,10,10,8,9,10,12,12,8,10,9,12,12,6,8,8,10,10,8,8,9,10,11,8,9,9,11,11,9,10,11,12,13,10,11,11,13,13,6,8,8,10,10,8,9,9,11,11,8,9,8,11,10,10,11,11,13,13,9,11,10,13,12,9,10,10,12,12,10,10,11,12,13,10,11,11,13,13,12,12,13,12,15,12,13,13,15,14,9,10,10,12,12,10,11,11,13,13,10,11,10,13,12,12,13,13,14,15,12,13,12,15,12,7,8,8,10,11,8,9,10,11,12,8,9,9,11,11,10,11,11,13,14,10,11,11,13,13,8,9,9,11,12,9,10,11,11,13,9,10,10,12,12,11,11,12,13,15,11,12,12,14,14,8,9,9,11,11,9,10,11,12,13,9,10,10,12,12,11,12,12,14,15,11,12,12,14,14,10,11,12,13,13,11,12,12,13,14,12,12,12,14,14,13,13,14,14,16,14,14,14,16,15,10,11,11,13,13,12,12,12,14,14,11,12,12,14,13,14,14,14,15,16,13,14,13,16,14,7,8,8,11,10,8,9,9,11,11,8,10,9,12,11,10,11,11,13,13,10,11,11,14,13,8,9,9,12,11,9,10,10,12,12,9,11,10,13,12,11,12,12,13,14,11,12,12,15,14,8,9,9,12,11,9,10,10,12,12,9,11,10,13,11,11,12,12,14,14,11,12,12,14,13,10,11,11,13,13,11,12,12,13,14,12,13,12,14,14,13,13,14,14,16,13,14,14,16,15,10,11,11,13,13,12,12,12,14,14,11,12,12,14,13,13,14,14,15,15,13,14,13,16,14,9,10,11,12,13,11,11,12,12,14,11,11,12,13,14,13,13,14,14,16,13,13,14,15,15,11,11,12,12,14,12,12,13,13,15,12,12,13,13,15,14,14,15,15,16,14,14,14,15,16,11,12,12,13,14,12,12,13,14,15,12,13,12,14,14,14,14,15,15,16,14,14,14,16,16,13,13,14,15,16,14,14,15,15,16,14,15,15,16,16,15,15,16,16,18,16,16,16,17,17,13,14,14,15,15,14,14,15,16,16,14,15,14,16,16,16,16,16,17,18,15,16,16,17,16,9,11,10,13,12,11,12,11,14,13,11,12,11,14,12,13,14,13,15,14,13,14,13,16,14,11,12,12,14,13,12,12,13,14,14,12,13,12,15,14,14,14,14,16,16,14,15,14,17,15,11,12,11,14,12,12,13,12,15,13,12,13,12,15,13,14,14,14,16,15,14,15,14,16,15,13,14,14,15,15,14,14,15,16,16,14,15,14,16,16,15,15,16,16,17,16,16,16,17,17,13,14,14,16,15,14,15,15,16,16,14,15,14,17,15,16,16,16,17,17,15,16,15,18,16,7,8,8,10,11,8,9,9,11,12,8,9,9,12,11,10,11,11,13,14,10,11,11,14,13,8,9,9,11,11,9,10,10,12,12,9,10,10,12,12,11,12,12,13,14,11,12,12,14,14,8,9,9,12,11,9,10,11,12,13,9,11,10,13,12,11,12,12,14,14,11,12,12,14,13,10,11,11,13,13,11,12,12,13,14,11,12,12,14,14,13,13,14,14,16,13,14,14,16,15,10,12,11,13,13,12,12,12,14,14,11,12,12,14,13,14,14,14,15,16,13,14,14,16,14,8,9,9,11,11,9,10,10,12,12,9,10,10,12,12,11,11,12,13,14,11,12,12,14,14,9,9,10,11,12,10,10,11,12,13,10,10,11,12,13,12,12,13,14,15,12,12,13,14,15,9,10,10,12,12,10,11,11,13,13,10,11,11,13,13,12,13,13,15,15,12,13,13,15,14,11,11,12,13,14,12,12,13,13,15,12,12,13,14,15,14,14,15,14,16,14,14,15,15,16,11,12,12,14,14,12,13,13,15,15,12,13,13,15,14,14,15,15,16,16,14,15,14,17,15,8,9,9,11,11,9,10,10,12,12,9,11,10,13,12,11,12,12,14,14,11,13,12,15,13,9,10,10,12,12,10,10,11,12,13,10,12,11,13,13,12,12,13,13,15,12,13,13,15,14,9,10,10,12,12,11,11,12,13,13,10,12,10,13,12,12,13,13,15,15,12,13,13,15,13,11,12,12,14,14,12,12,13,14,14,12,13,13,15,14,13,13,14,13,16,14,15,14,16,16,11,12,12,14,14,13,13,13,15,15,12,13,12,15,14,14,15,15,16,17,14,15,13,16,13,10,11,11,13,14,11,12,12,13,15,11,12,12,14,14,13,14,14,15,16,13,14,14,16,16,11,11,12,12,14,12,12,13,13,15,12,13,13,13,15,14,14,15,14,17,14,14,15,15,16,11,12,12,14,14,12,13,13,15,15,12,13,13,15,15,14,15,15,16,17,14,15,15,16,16,13,14,14,14,16,14,14,15,14,17,14,15,15,14,17,16,16,17,15,18,16,16,17,16,18,13,14,14,16,16,14,15,15,17,16,14,15,15,17,16,16,17,17,18,18,16,17,16,18,17,10,11,11,14,13,11,12,12,14,14,11,13,12,15,14,14,14,14,16,15,14,15,14,16,15,11,12,12,14,13,12,13,13,15,14,13,14,13,15,14,14,15,15,16,16,14,15,15,17,15,11,12,12,14,14,13,13,13,15,15,12,13,13,15,14,15,15,15,17,17,14,15,15,17,15,13,14,14,16,15,14,15,15,16,16,15,15,15,17,16,16,16,16,16,17,16,17,16,18,17,14,14,14,16,16,15,15,15,16,16,14,15,14,17,16,16,17,17,17,18,16,17,16,18,16,7,8,8,11,11,8,9,9,11,12,8,9,9,12,11,10,11,11,13,14,10,11,11,14,13,8,9,9,11,12,9,10,11,12,13,9,11,10,13,12,11,12,12,13,14,11,12,12,14,14,8,9,9,11,11,9,10,10,12,12,9,10,10,13,12,11,12,12,14,14,11,12,11,14,13,10,11,12,13,13,11,12,12,13,14,12,13,12,14,14,13,13,14,14,16,13,14,14,16,15,10,11,11,13,13,11,12,12,14,14,11,12,12,14,13,13,14,14,15,16,13,14,13,16,14,8,9,9,11,11,9,10,11,12,13,9,10,10,12,12,11,12,13,13,14,11,12,12,14,14,9,10,10,12,12,10,10,11,12,13,11,12,11,13,13,12,12,13,13,15,12,13,13,15,15,9,10,10,12,12,10,11,12,13,14,10,11,10,13,12,12,13,13,14,15,12,13,12,15,13,12,12,12,14,14,12,12,13,14,15,13,13,13,15,15,14,14,15,13,16,14,15,15,16,16,11,12,12,14,14,12,13,13,14,15,12,13,12,14,14,14,14,15,16,16,13,14,13,16,14,8,9,9,11,11,9,10,10,12,12,9,10,10,12,12,11,12,12,14,14,11,12,11,14,14,9,10,10,12,12,10,11,11,13,13,10,11,11,13,13,12,13,13,14,15,12,13,13,15,14,9,10,9,12,11,10,11,10,13,12,10,11,10,13,12,12,13,12,15,14,12,13,12,15,14,11,12,12,14,14,12,13,13,14,15,12,13,13,15,15,14,14,15,15,17,14,15,15,16,16,11,12,11,14,13,12,13,12,15,14,12,13,12,15,13,14,15,14,16,15,13], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+423156);
/* memory initializer */ allocate([15,14,17,14,10,11,11,13,14,11,12,13,13,15,11,12,12,14,14,14,14,15,15,17,13,14,14,15,16,11,12,12,14,14,12,12,13,14,15,13,13,13,15,15,14,15,15,15,17,15,15,15,16,16,11,12,12,13,14,13,13,14,14,15,12,13,13,14,15,14,15,15,16,17,14,15,15,16,16,14,14,14,16,16,14,14,15,15,17,15,15,15,17,16,16,16,17,16,18,16,17,17,18,17,13,14,14,15,16,14,15,15,16,17,14,15,15,16,16,16,17,17,17,18,16,16,16,17,16,10,11,11,14,13,11,12,12,14,14,11,12,12,15,13,13,14,14,16,15,13,14,14,16,15,11,12,12,14,14,12,13,13,15,15,12,13,13,15,15,14,15,15,16,17,14,15,15,17,16,11,12,11,14,12,12,13,13,15,13,12,13,12,15,13,14,15,15,16,15,14,15,14,17,14,13,14,14,16,16,14,15,15,16,17,14,15,15,16,17,16,16,17,17,18,16,17,17,18,18,13,14,14,16,13,14,15,15,17,14,14,15,14,17,14,16,17,16,17,16,16,17,16,18,15,8,11,11,13,13,10,12,12,14,14,11,12,12,14,14,13,13,14,15,16,13,14,14,16,15,10,11,11,14,14,11,12,12,14,15,11,12,12,15,14,13,14,14,15,16,13,14,14,16,16,11,12,12,14,14,12,13,13,15,15,12,13,12,15,14,14,14,15,16,16,14,15,14,16,16,12,13,13,15,15,12,13,14,15,16,13,14,14,16,16,14,15,15,16,17,15,15,16,17,17,13,14,14,16,15,14,15,15,16,16,14,15,14,16,16,16,16,16,17,17,15,16,16,18,16,10,11,11,13,14,11,12,12,14,15,11,12,12,15,14,13,14,14,16,16,13,14,14,16,16,11,11,12,14,14,12,12,13,14,15,12,13,13,15,15,14,14,15,15,17,14,14,15,16,16,11,12,12,15,14,12,13,13,15,15,12,13,13,15,15,14,15,15,17,17,14,15,15,17,16,13,12,14,14,16,13,13,15,14,17,14,13,15,15,17,15,14,16,15,18,16,15,16,16,18,13,14,14,16,16,14,15,15,17,17,14,15,15,17,16,16,17,17,18,18,16,17,16,18,17,10,11,11,14,13,11,12,12,14,14,11,13,12,15,14,13,14,14,15,16,13,14,14,16,16,11,12,12,14,14,12,13,13,14,15,12,13,13,15,15,14,14,15,15,16,14,15,15,17,16,11,12,12,14,14,13,13,13,15,15,12,13,13,15,14,14,15,15,16,17,14,15,14,17,15,13,14,13,16,15,14,14,14,15,16,14,15,14,16,16,15,15,16,16,17,16,16,16,18,17,14,14,14,16,16,15,15,15,17,16,14,15,14,17,16,16,16,17,17,18,16,17,16,18,16,11,13,13,15,15,12,13,14,15,16,12,14,14,15,15,14,15,15,16,17,14,15,15,17,17,12,13,14,14,16,13,14,14,14,16,14,14,14,15,16,15,15,16,15,18,15,16,16,17,17,13,14,14,16,16,14,14,15,16,16,14,15,14,16,16,15,16,16,17,18,15,16,16,18,17,14,14,16,13,17,15,15,16,14,18,15,15,16,14,18,16,16,18,15,19,17,17,18,16,18,15,16,15,17,17,15,16,17,18,18,16,16,16,18,17,17,18,18,19,19,17,18,17,19,18,11,12,12,15,14,13,13,14,15,16,13,14,13,16,14,15,15,15,16,17,15,16,15,17,16,12,13,13,15,14,13,13,14,15,15,14,15,14,16,15,15,15,16,16,17,16,16,16,18,17,12,13,13,15,15,14,14,15,16,16,13,14,13,16,15,16,16,16,17,18,15,16,15,17,16,14,15,14,17,15,14,15,15,16,16,15,16,15,17,16,16,15,16,15,17,17,18,17,18,17,15,15,15,16,17,16,16,16,17,17,15,16,15,17,16,17,18,18,18,18,16,17,16,18,15,8,11,11,13,13,11,12,12,14,14,10,12,12,14,14,13,14,14,15,16,13,14,13,16,15,11,12,12,14,14,12,12,13,14,15,12,13,13,15,15,14,14,15,15,16,14,14,14,16,16,10,11,11,14,14,11,12,12,14,15,11,12,12,15,14,13,14,14,16,16,13,14,14,16,15,13,14,14,15,16,14,14,15,16,16,14,15,15,16,16,15,16,16,16,18,16,16,16,17,17,12,13,13,15,15,13,14,14,16,16,12,14,13,16,15,15,16,15,17,17,14,16,15,17,16,10,11,11,13,14,11,12,13,14,15,11,13,12,14,14,14,14,15,16,16,13,14,14,16,16,11,12,12,14,14,12,13,13,14,15,13,14,13,15,15,14,15,15,16,17,14,15,15,17,16,11,12,12,14,14,12,13,13,15,15,12,13,12,15,14,14,15,15,16,17,14,15,15,16,16,14,14,14,16,16,14,14,15,16,16,15,15,15,16,16,16,16,17,16,18,16,17,17,18,18,13,13,14,15,16,14,14,15,16,17,13,14,14,16,16,16,16,17,17,18,15,16,15,17,16,10,11,11,14,13,11,12,12,14,14,11,12,12,15,14,13,14,14,16,16,13,14,14,16,16,11,12,12,14,14,12,13,13,15,15,12,13,13,15,15,14,15,15,16,17,14,15,15,17,16,11,12,11,14,14,12,13,13,15,15,12,13,12,15,14,14,15,14,16,16,14,15,14,17,16,14,14,14,16,16,14,15,15,16,17,14,15,15,17,17,16,16,17,17,18,16,17,17,18,18,13,14,12,16,14,14,15,13,17,15,13,15,13,17,14,16,16,15,18,16,15,17,14,18,15,11,12,12,14,15,13,13,14,14,16,13,14,13,15,14,15,15,16,16,17,15,16,15,17,16,12,13,13,15,15,13,13,14,15,16,14,15,14,16,16,15,15,16,15,18,16,16,16,18,17,12,13,13,15,15,14,14,15,15,16,13,14,13,15,15,16,16,16,16,18,15,16,15,17,16,15,15,15,17,16,15,15,16,16,17,16,16,16,18,17,16,16,17,15,18,17,18,17,19,18,14,14,15,15,17,15,15,16,16,17,14,15,15,16,16,17,17,18,17,19,16,17,15,17,15,11,13,12,15,15,12,14,14,15,15,12,14,13,16,15,15,15,15,17,17,14,15,15,17,16,12,14,14,16,16,14,14,15,16,16,14,14,14,16,16,15,16,17,17,18,15,16,16,18,17,12,14,13,16,14,13,14,14,16,15,13,15,14,16,14,15,16,16,17,17,15,16,15,18,15,15,15,16,17,17,15,16,16,17,18,16,16,16,18,18,17,17,18,18,19,17,17,18,19,19,14,15,14,17,13,15,16,15,18,14,15,16,15,18,14,17,18,17,18,16,16,18,16,19,15,2,5,5,5,7,7,5,7,7,5,7,7,7,8,9,7,9,9,5,7,7,7,9,9,7,9,8,5,7,8,7,9,10,8,9,9,8,9,10,9,10,12,10,11,11,8,10,9,10,11,12,9,11,10,5,8,7,8,10,9,7,10,9,8,9,10,9,10,11,10,12,11,8,10,9,10,11,11,9,12,10,5,8,8,7,9,10,8,10,9,7,9,10,9,10,11,9,11,11,8,10,9,10,11,11,10,12,10,7,9,10,9,10,12,9,11,11,9,9,12,11,10,13,11,11,13,10,12,11,11,13,13,11,13,12,7,9,9,9,11,11,9,12,11,9,11,10,10,11,12,11,13,12,9,11,11,12,13,13,11,13,11,5,8,8,8,9,10,7,10,9,8,9,10,10,10,12,10,11,11,7,10,9,9,11,11,9,11,10,7,9,9,9,11,12,9,11,11,9,11,11,11,11,13,12,13,13,9,10,11,11,12,13,10,12,11,7,10,9,9,11,11,9,12,10,10,11,12,11,12,13,12,13,13,9,12,9,11,13,11,10,13,10,6,7,7,7,7,8,7,8,7,7,7,8,7,8,8,8,8,8,7,8,7,7,8,8,7,8,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,8,9,8,8,8,8,9,9,8,9,9,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,8,8,8,8,9,9,8,9,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,9,9,8,8,8,8,8,9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,8,9,9,8,8,8,8,9,8,8,9,8,2,5,5,4,7,8,4,8,7,5,7,8,7,7,10,8,9,9,5,7,7,8,9,9,7,10,7,5,7,8,8,9,11,8,10,10,8,9,10,10,10,12,11,12,12,8,10,10,10,12,12,10,12,11,5,8,7,8,10,10,8,11,9,8,10,10,10,11,12,10,12,12,8,10,9,11,12,12,10,12,10,5,8,8,7,10,10,8,11,10,7,9,10,9,10,12,10,12,12,8,10,10,10,12,12,10,12,11,7,9,10,9,11,12,10,12,11,9,9,12,10,10,13,12,12,13,10,12,11,12,13,13,11,13,11,7,10,9,10,11,12,10,13,11,9,11,11,11,11,13,12,14,13,10,11,11,12,14,14,11,14,11,5,8,8,8,10,11,7,10,10,8,10,10,10,11,12,10,12,12,7,10,9,10,12,12,9,12,10,7,9,10,10,11,13,10,12,11,10,11,11,11,11,14,12,14,14,9,11,11,12,13,14,11,13,11,7,10,9,10,11,12,9,12,10,10,11,12,11,11,13,12,13,13,9,12,9,12,13,12,10,13,10,7,9,9,10,10,9,10,10,10,11,9,10,10,11,10,9,10,10,11,11,9,10,10,11,11,9,10,10,11,11,10,10,10,11,11,10,10,10,11,11,10,11,11,11,11,10,11,11,11,11,9,10,10,11,11,10,10,10,11,11,9,10,10,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,9,10,10,11,11,10,10,11,11,11,10,10,11,11,11,10,11,11,11,12,10,11,11,12,12,10,10,11,11,11,10,11,11,11,12,11,11,11,12,12,11,11,12,12,12,11,11,12,12,12,10,11,11,11,11,11,11,11,12,12,10,11,11,12,12,11,12,11,12,12,11,12,11,12,12,11,11,11,11,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,9,10,10,11,11,10,11,10,11,11,10,11,10,11,11,10,11,11,12,12,10,11,11,12,11,10,11,11,11,11,10,11,11,11,12,11,11,11,12,12,11,11,12,12,12,11,11,11,12,12,10,11,10,11,11,11,11,11,12,12,10,11,11,12,11,11,12,11,12,12,11,12,11,12,12,11,11,11,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,11,11,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,10,11,11,11,11,11,11,11,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,11,11,11,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,13,12,12,12,12,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,10,11,11,11,11,11,11,11,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,13,12,13,12,9,10,10,11,11,10,10,11,11,11,10,11,10,11,11,10,11,11,12,12,10,11,11,12,12,10,10,11,11,11,10,11,11,11,12,10,11,11,12,12,11,11,12,12,12,11,11,11,12,12,10,11,10,11,11,11,11,11,12,12,10,11,11,12,11,11,12,11,12,12,11,12,11,12,12,11,11,11,11,12,11,11,12,12,12,11,12,12,12,12,11,12,12,12,12,11,12,12,12,12,11,11,11,12,11,11,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,10,10,11,11,11,10,11,11,12,12,10,11,11,12,12,11,11,11,12,12,11,11,12,12,12,10,11,11,11,12,11,11,12,12,12,11,11,12,12,12,11,11,12,12,12,11,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,11,12,12,11,12,12,12,12,11,12,12,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,9,10,10,11,11,10,11,11,11,12,10,11,11,12,11,11,12,11,12,12,11,12,11,12,12,10,11,11,12,11,11,11,11,12,12,11,12,11,12,12,11,12,12,12,12,11,12,12,12,12,10,11,11,12,12,11,12,11,12,12,11,12,11,12,12,12,12,12,12,12,11,12,12,12,12,11,12,11,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,12,12,13,13,12,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,13,12,13,12,13,13,13,13,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,13,13,13,13,12,13,13,13,13,10,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,13,13,12,12,12,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,13,13,12,13,12,13,13,13,13,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,13,13,13,13,12,13,13,13,13,9,10,10,11,11,10,10,11,11,11,10,11,10,11,11,10,11,11,12,12,10,11,11,12,12,10,11,11,11,11,10,11,11,12,12,11,11,11,12,12,11,11,12,12,12,11,11,12,12,12,10,11,10,11,11,10,11,11,12,12,10,11,11,12,11,11,12,11,12,12,11,11,11,12,12,11,11,11,11,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,11,11,12,12,12,12,11,12,11,12,12,12,12,12,12,12,11,12,12,12,12,9,10,10,11,11,10,11,11,11,12,10,11,11,12,11,11,11,12,12,12,11,11,12,12,12,10,11,11,12,12,11,11,12,12,12,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,10,11,11,12,12,11,11,11,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,10,11,10,11,11,10,11,11,12,12,10,11,11,12,12,11,11,11,12,12,11,12,11,12,12,11,11,11,12,12,11,11,12,12,12,11,11,12,12,12,11,12,12,12,12,11,12,12,12,12,10,11,11,12,11,11,12,11,12,12,11,12,11,12,12,11,12,12,12,12,11,12,11,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,13,12,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,12,12,12,12,12,12,12,12,13,12,13,12,12,12,13,13,12,13,13,12,13,12,13,13,13,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,12,13,12,13,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,12,12,12,12,12,12,12,13,13,12,12,12,12,13,12,13,13,13,13,12,13,13,13,13,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,13,13,13,13,12,13,13,13,12,10,11,11,12,12,11,11,11,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,11,11,11,12,12,11,11,12,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,11,12,12,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,12,12,13,13,12,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,13,12,13,12,12,13,13,13,12,12,12,12,12,12,12,12,12,13,12,12,12,13,12,12,13,13,13,13,12,13,13,13,13,10,11,11,12,12,11,12,12,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,13,13,11,12,11,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,12,13,12,13,12,13,13,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,13,12,13,13,12,13,12,13,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,13,12,12,13,13,13,11,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,13,13,12,12,12,13,12,12,12,12,12,12,12,12,13,12,13,12,12,12,12,13,12,12,13,12,13,12,13,13,12,13,12,12,12,12,12,12,13,13,13,12,12,12,12,13,12,12,13,13,13,13,12,13,13,13,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,13,13,13,11,12,12,12,12,12,12,12,12,13,12,12,12,13,12,12,13,12,13,13,12,13,12,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,13,12,13,13,13,12,12,12,12,12,12,12,13,12,13,12,12,12,12,13,12,12,13,13,13,12,12,13,12,13,12,10,11,11,12,12,11,11,11,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,11,11,11,12,12,11,11,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,11,12,12,12,12,12,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,10,11,11,12,12,11,11,12,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,13,13,11,11,11,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,13,13,12,12,12,13,13,12,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,13,12,13,12,12,13,13,13,12,12,12,12,12,12,12,12,12,13,12,12,12,12,12,12,12,13,13,13,12,12,12,13,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,12,12,13,13,11,12,11,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,12,12,12,12,12,12,12,12,13,12,12,12,13,13,12,13,13,13,13,12,13,13,13,13,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,13,12,13,13,12,13,12,13,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,13,12,12,12,13,13,12,12,13,12,13,12,12,13,13,13,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,12,12,12,13,12,12,12,12,12,12,12,12,12,12,13,12,12,12,13,13,12,12,13,12,13,12,13,13,13,13,12,12,12,12,12,12,12,13,12,13,12,12,12,12,12,12,13,13,12,12,12,13,12,12,12,11,11,11,12,12,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,13,12,12,12,12,13,12,12,13,13,13,12,12,12,13,13,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,13,13,12,13,12,13,12,12,12,12,12,12,12,12,12,12,13,12,13,12,13,13,12,13,13,12,13,12,13,13,13,13,12,12,12,12,12,12,12,12,13,12,12,13,12,13,12,12,13,12,13,12,12,13,12,13,12,2,6,6,9,9,5,7,8,10,11,5,8,7,11,10,8,10,11,12,13,8,11,10,13,12,6,7,8,10,11,7,8,10,10,12,8,9,9,12,12,10,10,12,12,14,10,12,12,14,13,6,8,7,11,10,8,9,9,12,12,7,10,8,12,11,10,12,12,13,14,10,12,10,14,12,9,10,11,11,13,10,10,11,11,13,11,12,12,13,14,12,12,13,11,15,13,14,14,15,14,9,11,10,13,11,11,12,12,13,13,10,11,10,13,11,13,14,14,15,15,12,13,12,15,11,6,8,9,11,12,8,9,11,12,13,8,10,10,13,13,11,12,13,14,15,11,12,13,14,14,9,9,10,12,13,10,10,12,12,14,10,11,11,13,14,12,12,14,14,15,13,13,14,15,15,9,10,10,13,13,10,11,11,13,14,10,11,10,14,13,13,13,14,15,15,12,14,13,15,14,12,12,13,13,14,12,13,14,13,15,13,14,14,15,15,14,14,15,14,16,15,15,15,16,16,12,13,13,14,14,13,14,14,15,15,12,14,13,15,14,14,15,15,16,16,14,15,14,16,14,6,9,8,12,11,8,10,10,13,13,8,11,9,13,12,11,12,12,14,14,11,13,12,15,14,9,10,10,13,13,10,10,11,13,14,10,12,11,14,13,12,13,14,14,15,13,13,13,15,14,9,10,9,13,12,10,11,11,14,13,10,12,10,14,12,13,14,13,15,15,12,14,12,15,14,12,13,13,14,14,13,13,13,14,15,13,14,14,15,15,14,14,15,14,16,14,15,15,16,16,12,13,12,14,13,13,14,14,15,15,12,14,13,15,13,15,15,15,16,16,14,15,14,16,14,11,12,12,13,14,12,13,14,14,16,12,13,13,15,15,14,14,16,15,17,14,15,15,16,16,12,13,14,14,15,13,13,15,15,16,14,14,14,15,16,15,15,16,16,17,15,15,16,16,17,13,13,13,15,15,14,14,15,15,16,13,14,14,15,16,15,15,16,16,17,15,16,15,17,16,14,15,15,16,16,15,15,16,16,17,15,16,16,17,17,16,16,17,16,18,16,17,17,17,17,15,15,15,16,16,15,16,16,17,17,15,16,16,17,16,16,17,17,18,18,16,17,16,17,16,11,12,12,15,13,13,13,13,15,15,12,14,13,16,14,14,15,15,16,16,14,15,14,17,15,13,13,13,15,14,13,14,14,16,15,14,14,14,16,15,15,15,16,16,17,15,16,15,17,16,12,14,13,15,14,14,14,14,16,15,13,14,13,16,15,15,16,16,17,16,15,16,15,17,16,15,15,15,16,16,15,15,16,16,17,15,16,16,17,17,16,16,17,17,17,17,17,17,18,17,14,15,15,16,16,15,16,16,17,16,15,16,15,17,16,17,17,17,18,17,16,17,16,18,16,6,9,9,12,12,8,10,10,12,13,8,10,10,13,12,10,12,12,14,15,11,13,12,15,14,8,9,10,12,13,9,10,11,13,14,10,11,11,14,13,12,12,13,14,15,12,13,13,15,15,8,10,10,13,13,10,11,11,13,14,10,12,10,14,13,12,13,13,15,15,12,14,13,15,14,11,12,12,13,14,12,12,13,13,15,12,13,13,15,15,14,13,15,14,16,14,15,15,16,16,12,13,13,14,14,13,13,14,15,14,12,14,13,15,14,14,15,15,16,15,14,15,14,16,14,7,9,10,12,12,9,10,11,13,14,9,11,10,13,13,11,12,13,14,15,12,13,13,15,14,9,10,11,12,13,10,10,12,13,14,11,11,12,14,14,12,12,14,14,15,13,13,14,15,15,9,11,11,13,13,11,12,12,14,14,10,12,10,14,13,13,14,14,15,15,13,14,13,16,14,12,12,13,14,15,13,13,14,14,16,13,14,14,15,15,14,14,15,14,17,14,15,15,16,16,12,13,13,15,14,13,14,14,15,15,13,14,13,16,14,15,15,15,16,16,14,15,14,16,14,7,10,9,13,12,10,11,12,12,14,10,12,11,14,12,12,13,13,14,15,12,14,13,15,14,9,11,10,13,13,10,11,12,13,14,12,13,12,15,13,13,13,14,13,15,13,14,14,16,15,10,11,11,13,13,12,12,13,14,14,11,12,11,14,13,14,14,14,15,16,13,14,13,16,13,12,13,13,14,14,12,13,13,14,15,14,14,14,15,15,14,13,15,13,16,15,15,15,17,16,13,13,13,14,14,14,14,14,15,15,12,13,13,15,14,15,16,16,16,16,14,15,14,16,13,11,12,13,14,15,12,13,14,15,16,13,14,14,15,15,14,14,15,15,17,14,15,15,16,16,13,13,14,14,15,13,13,15,14,16,14,14,15,15,16,15,14,16,15,17,15,16,16,16,17,13,14,14,15,15,14,14,15,16,16,13,15,14,16,16,15,16,16,17,17,15,16,15,17,16,14,15,15,15,17,15,15,16,15,17,15,16,16,16,17,16,16,17,16,18,17,17,17,17,18,15,15,15,17,16,15,16,16,17,17,15,16,16,17,16,16,17,17,18,18,16,17,16,18,17,11,13,12,15,14,13,13,14,15,15,13,14,13,16,14,15,15,15,16,16,15,16,15,17,16,13,14,13,15,14,13,13,14,15,15,14,15,14,16,15,15,15,16,16,16,15,16,15,18,16,13,14,14,15,15,14,15,15,15,16,13,15,13,16,15,15,16,16,17,17,15,16,15,17,16,15,15,15,16,16,15,15,15,16,17,16,16,16,17,16,16,16,17,16,17,17,17,17,18,17,15,15,15,16,16,16,16,16,17,17,15,16,15,17,16,17,17,17,18,18,16,17,16,17,15,6,9,9,12,12,8,10,10,12,13,8,10,10,13,12,11,12,13,14,15,10,12,12,14,14,9,10,10,13,13,10,10,12,13,14,10,11,11,14,13,12,13,14,14,15,12,13,13,15,15,8,10,9,13,12,10,11,11,13,14,9,11,10,14,13,12,13,13,15,15,12,13,12,15,14,12,13,13,14,14,12,13,13,14,15,13,14,14,14,15,14,14,15,14,16,14,15,15,16,16,11,12,12,14,13,13,13,13,15,15,12,13,12,15,13,14,15,15,16,16,14,15,14,16,14,7,9,10,12,13,10,10,12,12,14,10,12,11,14,13,12,13,14,14,15,12,13,13,15,14,10,11,11,13,13,11,11,12,13,14,12,13,12,14,14,13,13,14,13,16,14,14,14,15,15,9,10,11,13,14,12,12,13,13,15,10,12,10,14,13,13,14,14,15,16,13,14,13,15,13,13,14,13,14,15,12,13,13,14,15,14,14,14,15,15,14,13,15,13,16,15,16,16,16,16,12,13,13,14,14,14,14,14,15,15,12,13,13,15,14,15,15,16,16,16,14,15,13,16,13,7,10,9,12,12,9,10,11,13,13,9,11,10,14,13,12,13,13,14,15,11,13,12,15,14,9,11,11,13,13,10,10,12,13,14,11,12,12,14,14,13,13,14,14,16,13,14,14,16,15,9,11,10,13,12,11,12,11,14,14,10,12,10,14,13,13,14,13,15,15,12,14,12,16,14,12,13,13,14,15,13,13,14,14,16,13,14,14,15,15,14,14,15,14,16,15,15,15,16,16,12,13,12,15,14,13,14,14,15,15,12,14,13,16,14,14,15,15,16,16,14,15,14,17,14,11,12,13,14,15,13,13,14,14,16,13,14,13,15,15,15,15,16,16,17,15,15,15,16,16,13,14,13,15,15,13,13,15,15,16,14,15,15,16,16,15,15,16,15,17,16,16,16,17,17,13,13,14,14,15,14,14,15,15,16,13,14,13,15,15,15,16,16,16,17,15,16,15,16,16,15,15,15,16,16,15,15,16,16,17,16,16,16,17,17,16,16,17,16,18,17,17,17,18,18,15,15,15,16,16,16,16,16,17,17,15,15,15,16,16,17,17,17,17,18,16,16,16,17,15,11,13,12,15,14,13,13,14,15,15,12,14,13,16,14,14,15,15,16,16,14,15,14,16,15,13,14,14,15,15,13,14,14,16,16,14,15,14,16,16,15,15,16,17,17,15,16,16,17,17,13,14,13,15,14,14,14,14,16,15,13,15,13,16,14,15,16,15,17,16,15,16,14,17,15,14,16,15,16,17,15,16,16,16,17,15,16,16,17,17,16,16,17,17,18,16,17,17,18,17,14,15,15,17,15,15,16,16,17,16,15,16,15,17,15,16,17,17,18,17,16,17,16,18,15,10,12,12,14,14,12,13,13,15,15,12,13,13,15,15,13,14,14,15,16,14,15,14,16,16,12,13,13,15,15,12,13,14,15,15,13,14,14,15,15,14,14,15,16,17,14,15,15,17,16,12,13,13,15,15,13,14,14,15,16,13,14,14,16,15,14,15,15,16,17,14,15,15,17,16,13,14,14,15,16,14,14,15,15,16,14,15,15,16,16,15,15,16,16,17,15,16,16,17,17,14,15,15,16,16,15,15,15,16,16,15,15,15,16,16,16,17,16,17,17,16,16,16,18,16,11,12,12,14,14,12,13,14,15,15,12,13,13,15,15,13,14,15,16,16,14,15,15,16,16,12,13,13,15,15,13,13,14,15,16,13,14,14,15,16,14,14,15,16,17,15,15,15,16,17,12,13,13,15,15,13,14,14,15,16,13,14,14,16,15,15,15,15,16,17,15,16,15,17,16,14,14,15,15,16,14,14,15,15,17,15,15,16,16,17,15,15,16,15,18,16,16,16,17,17,14,15,15,16,16,15,16,16,17,17,15,15,15,17,16,16,17,16,17,17,16,16,16,18,16,11,12,12,14,14,13,13,14,15,15,13,14,13,15,15,14,15,15,16,16,14,15,15,16,16,12,13,13,15,15,13,13,14,15,15,14,14,14,16,15,15,15,15,15,16,15,16,15,17,16,12,13,13,15,15,14,14,15,15,16,13,14,13,16,15,15,15,16,16,17,15,16,15,17,15,14,15,14,16,16,14,15,15,16,16,15,16,15,17,16,15,15,16,15,17,16,17,16,17,17,14,15,15,16,16,15,16,16,16,17,14,15,15,16,16,16,17,17,17,18,16,16,16,17,16,12,13,13,15,15,13,13,14,15,16,13,14,14,16,15,14,15,15,16,17,14,15,15,17,16,13,14,14,15,16,14,14,15,15,17,14,15,15,16,16,15,14,16,15,17,15,16,16,17,17,13,14,14,16,16,14,15,15,16,16,14,15,14,16,16,15,16,16,17,17,15,16,15,17,16,15,15,16,15,17,15,15,16,15,17,15,16,16,16,17,16,15,17,15,18,17,17,17,17,17,15,15,15,17,17,16,16,16,17,17,15,16,15,17,17,16,17,17,18,18,16,17,15,18,15,11,12,12,15,15,13,13,15,14,16,13,14,13,16,14,15,15,16,16,17,15,16,15,17,15,12,14,13,16,14,13,13,14,14,16,14,15,14,16,15,15,15,16,15,17,16,16,16,17,16,12,13,14,15,16,15,15,15,15,16,13,15,13,16,14,16,16,16,17,17,15,16,15,17,15,15,16,15,16,15,14,14,15,16,16,16,16,16,17,16,15,15,16,15,17,17,17,17,18,17,15,15,15,16,16,16,16,16,16,17,14,15,15,17,16,17,17,17,17,18,15,16,15,18,14,10,12,12,14,14,12,13,13,15,15,12,13,13,15,15,14,14,15,15,16,13,15,14,16,16,12,13,13,15,15,13,14,14,15,16,13,14,14,15,15,14,15,15,16,17,14,15,15,17,16,12,13,13,15,15,13,14,14,15,15,12,14,13,15,15,14,15,15,16,17,14,15,14,17,15,14,15,15,16,16,14,15,15,16,17,15,15,15,17,16,16,16,16,16,17,16,16,16,17,17,13,14,14,16,15,14,15,15,16,16,14,15,14,16,16,15,16,16,17,17,15,16,15,17,16,11,12,12,14,15,13,13,14,14,15,13,14,13,15,15,14,15,15,16,16,14,15,15,16,16,12,14,13,15,15,13,13,14,15,16,14,15,14,16,15,15,15,16,15,17,15,16,16,17,16,12,13,13,15,15,14,14,15,15,16,13,14,13,16,15,15,15,16,16,17,15,15,15,16,16,14,15,15,16,16,14,15,15,16,16,15,16,16,17,17,16,16,16,16,17,16,17,17,18,17,14,14,15,15,16,15,15,16,16,17,14,15,15,16,16,16,16,16,17,17,15,16,15,17,15,11,12,12,14,14,12,13,14,15,15,12,13,13,15,15,14,15,15,16,16,13,15,14,16,16,12,13,13,15,15,13,14,14,15,16,13,14,14,16,16,15,15,15,16,17,15,15,15,17,16,12,13,13,15,15,13,14,14,16,15,13,14,13,16,15,15,16,15,17,17,14,15,14,17,16,14,15,15,16,16,15,15,16,16,17,15,16,16,17,17,16,16,16,16,18,16,17,16,18,17,14,15,14,16,15,15,15,15,17,16,14,15,14,17,15,16,17,16,17,17,15,16,15,17,15,11,12,12,15,15,13,13,15,14,16,13,15,13,16,14,15,15,16,15,17,15,16,15,17,16,12,14,13,15,15,13,13,15,15,16,15,15,15,16,15,15,15,16,15,17,16,16,16,17,16,12,13,14,15,16,14,14,15,15,16,13,14,13,16,14,16,16,16,16,17,15,16,15,17,15,15,16,15,16,16,14,15,15,16,16,16,16,16,17,16,15,15,16,15,17,17,17,17,18,17,15,15,15,15,16,16,16,16,16,17,14,15,14,16,15,17,17,17,17,18,15,16,15,17,15,12,13,13,15,15,13,14,14,15,16,13,14,14,16,15,14,15,15,16,17,14,15,15,17,16,13,14,14,16,15,13,14,15,16,16,14,15,15,16,16,15,15,16,16,17,15,16,16,17,17,13,14,13,16,15,14,15,15,16,16,13,15,14,16,15,15,16,16,17,17,15,16,14,17,15,15,15,16,17,17,15,15,16,16,17,16,16,16,17,17,16,15,17,16,18,17,17,17,18,18,15,15,15,17,14,16,16,16,17,16,15,16,15,17,15,16,17,17,18,17,16,17,15,18,15,2,3,3,3,3,3,3,2,6,6,5,7,7,5,7,7,5,7,7,7,7,9,7,9,9,6,7,7,8,9,9,7,9,7,6,8,8,8,9,10,8,9,9,8,9,10,9,9,10,10,10,10,8,9,9,10,10,11,9,10,10,6,8,8,8,9,9,8,10,9,8,9,9,9,10,10,10,11,10,8,10,9,10,11,10,9,11,9,6,8,8,7,9,9,7,9,9,7,9,9,8,9,10,9,10,10,8,9,9,9,10,10,9,10,9,7,9,9,9,9,10,9,10,10,9,9,10,10,9,11,10,11,11,9,10,10,10,11,11,10,11,10,6,9,8,9,9,10,9,10,9,8,10,10,9,9,10,10,11,11,9,10,10,10,11,11,9,11,9,6,8,8,7,9,9,7,9,9,8,9,9,9,9,10,9,10,10,7,9,9,9,10,10,8,10,9,6,8,9,9,9,10,9,10,9,9,10,10,9,9,11,10,11,11,8,9,10,10,11,11,9,10,9,7,9,9,9,10,10,9,10,9,9,10,10,10,10,11,10,11,11,9,10,9,10,11,11,10,11,9,4,7,7,7,7,8,7,8,7,7,7,8,7,8,8,8,8,8,7,8,7,8,8,8,7,8,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,8,9,8,8,8,8,9,8,8,8,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,8,9,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,8,9,8,8,8,8,9,9,8,9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,9,9,8,8,8,8,9,9,8,9,9,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,9,8,8,8,8,8,9,9,8,9,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,9,9,8,8,8,8,9,8,8,9,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,9,9,8,8,8,8,9,9,8,9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,8,9,9,8,8,8,8,9,9,8,9,8,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,1,7,7,12,12,5,11,12,12,12,5,12,11,12,12,12,12,12,12,12,12,13,13,13,13,7,11,11,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,7,13,10,13,13,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,7,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,8,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,8,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,10,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+433396);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+443636);
/* memory initializer */ allocate([13,13,15,12,12,13,14,14,9,10,10,12,12,10,11,11,13,13,10,11,11,13,13,12,13,13,14,15,12,13,12,14,14,11,11,12,12,14,12,12,13,13,14,12,12,13,13,14,13,13,14,14,16,14,14,14,15,15,11,12,12,14,13,12,13,13,14,14,12,13,13,15,14,14,14,14,16,16,13,14,14,16,14,7,9,9,12,11,9,10,10,12,12,9,11,10,13,12,11,12,12,13,14,11,13,12,14,13,9,10,10,12,12,10,10,11,12,13,10,12,11,13,13,12,12,13,13,14,12,13,13,15,14,9,10,10,12,12,11,11,11,13,13,10,12,10,13,12,12,13,13,14,15,12,13,12,15,13,11,12,12,14,13,12,12,13,13,14,12,13,13,15,14,13,13,14,13,16,14,15,14,16,15,12,12,12,14,14,13,13,13,14,14,12,13,12,14,13,14,15,15,16,16,13,14,13,16,13,10,11,12,13,14,11,12,13,13,15,12,12,13,14,14,13,14,14,15,16,13,14,14,16,15,12,12,13,12,14,12,12,13,13,15,13,13,13,13,15,14,14,15,14,16,14,15,15,15,16,12,13,12,14,14,13,13,13,15,15,12,13,13,15,15,14,15,15,16,16,14,15,15,16,16,13,14,14,13,16,14,14,15,14,16,14,14,15,14,16,15,15,16,15,18,16,16,16,16,17,14,14,14,16,15,14,15,15,16,16,14,15,15,16,16,16,16,16,17,17,15,16,16,17,16,10,12,11,14,13,12,13,13,14,14,12,13,12,15,14,14,14,14,15,15,14,15,14,16,15,12,13,12,14,13,12,13,13,15,14,13,14,13,15,14,14,15,15,16,16,14,15,15,17,15,12,13,12,14,14,13,14,14,15,15,13,14,13,15,14,15,15,15,16,16,14,15,15,17,15,14,14,14,16,15,14,15,15,16,16,14,15,15,16,15,16,16,16,16,17,16,17,16,18,17,14,14,14,16,15,15,15,15,16,16,14,15,14,16,15,16,16,17,17,17,15,16,15,17,16,6,8,8,11,11,8,9,10,12,12,8,10,9,12,11,10,11,12,13,13,10,11,11,13,13,8,9,10,11,12,9,10,11,12,13,10,11,11,12,12,11,12,12,13,14,11,12,12,14,14,8,9,9,12,11,9,10,10,12,12,9,10,10,12,12,11,12,12,14,14,11,12,11,14,13,11,11,12,13,13,11,12,12,13,14,12,12,12,14,14,13,13,14,14,15,13,14,14,15,15,10,11,11,13,13,11,12,12,14,14,11,12,12,14,13,13,14,14,15,15,13,14,13,15,13,7,9,9,11,12,9,10,11,12,13,9,10,10,12,12,11,12,13,13,14,11,12,12,14,14,9,10,10,12,12,10,10,11,12,13,11,12,11,13,13,12,12,13,13,15,12,13,13,15,14,9,10,10,12,12,10,11,12,13,13,10,11,10,13,12,12,13,13,14,15,12,13,12,14,13,12,12,12,14,14,12,12,13,13,14,13,13,13,15,14,14,13,14,13,16,14,15,15,16,16,11,12,12,13,14,12,13,13,14,15,12,13,12,14,13,14,14,15,15,16,13,14,13,15,13,8,9,9,11,11,9,10,10,12,12,9,10,10,12,12,11,12,12,14,14,11,12,11,14,13,9,10,10,12,12,10,11,11,13,13,10,11,11,13,13,12,12,13,14,15,12,13,13,15,14,9,10,9,12,11,10,11,10,13,12,10,11,10,13,12,12,13,12,14,14,12,13,12,15,13,11,12,12,13,14,12,13,13,14,14,12,13,13,14,14,14,14,14,14,16,14,14,14,16,15,11,12,11,14,12,12,13,12,15,13,12,13,12,15,13,14,14,14,16,15,13,14,13,16,14,10,11,12,13,14,12,12,13,13,15,12,13,13,14,14,14,14,15,15,16,14,14,14,15,16,12,12,13,14,14,12,13,14,14,15,13,14,14,15,15,14,15,15,15,17,15,15,15,16,16,12,12,13,13,14,13,13,14,14,15,12,13,13,14,15,15,15,15,15,17,14,15,15,15,15,14,14,14,16,16,14,15,15,15,16,15,15,15,16,16,16,15,16,16,18,16,16,17,17,17,14,14,14,15,16,15,15,15,16,17,14,15,14,16,16,16,16,17,17,18,16,16,15,17,16,10,12,11,14,13,12,12,12,14,14,11,13,12,14,13,13,14,14,15,15,13,14,13,16,15,12,12,13,14,14,12,13,13,15,15,13,13,13,15,15,14,15,15,16,16,14,15,15,17,16,12,13,12,14,12,13,13,13,15,13,12,13,12,15,13,14,15,15,16,15,14,15,14,16,14,14,14,14,16,16,14,15,15,16,16,14,15,15,16,16,15,16,16,16,17,16,17,16,18,17,13,14,14,16,13,14,15,15,16,14,14,15,14,16,14,16,16,16,17,16,15,16,15,18,15,9,11,11,13,13,11,12,12,14,14,11,12,12,14,14,13,14,14,15,15,13,14,14,15,15,11,12,12,14,14,11,12,13,14,15,12,13,13,15,14,13,14,14,15,16,13,14,14,16,16,11,12,12,14,14,12,13,13,15,15,12,13,13,15,14,14,14,14,16,16,14,15,14,16,15,12,13,13,14,15,12,13,14,15,16,13,14,14,16,16,14,14,15,16,17,15,15,15,17,17,13,14,14,15,15,14,15,14,16,16,14,15,14,16,15,15,16,16,17,17,15,16,15,17,16,10,12,12,13,14,11,12,13,14,14,12,13,12,14,14,13,14,14,15,16,13,14,14,16,15,11,12,12,14,14,12,12,13,14,15,12,13,13,15,15,13,13,15,15,17,14,14,15,16,16,12,13,12,14,14,12,13,13,15,15,12,13,13,15,14,14,15,15,16,16,14,15,14,16,16,13,12,14,13,16,13,13,15,14,16,14,13,15,15,16,14,14,16,15,17,15,15,16,16,17,13,14,14,16,15,14,15,15,16,16,14,15,14,16,15,16,16,16,17,17,15,16,16,18,16,10,12,12,14,14,12,12,13,14,14,12,13,12,15,14,13,14,14,15,16,14,15,14,16,15,11,12,12,14,14,12,13,13,14,15,13,14,13,15,15,14,14,15,15,16,14,15,15,17,16,12,13,13,14,14,13,13,14,15,15,12,14,13,15,15,14,15,15,16,16,14,15,15,17,15,13,14,13,15,15,13,14,14,15,16,14,15,14,17,16,15,15,15,15,17,16,16,16,18,17,14,14,14,16,16,15,15,15,16,16,14,15,14,16,16,16,16,17,17,17,16,16,16,17,16,11,12,13,14,14,12,13,13,15,15,12,13,13,15,15,14,15,15,16,16,14,15,15,17,16,12,13,13,14,15,13,13,14,14,16,13,14,14,15,16,15,14,16,15,17,15,15,16,16,17,12,13,13,15,15,13,14,14,16,16,13,14,14,16,15,15,15,16,17,17,15,16,15,17,16,14,14,15,13,16,15,14,16,14,17,15,15,16,14,17,16,15,17,15,18,16,16,17,16,18,14,15,15,17,16,15,16,16,17,17,15,16,15,17,16,16,17,17,18,18,16,17,15,18,16,11,12,12,14,14,13,13,14,14,15,13,14,13,16,14,15,15,15,16,16,15,16,15,17,16,12,13,13,15,14,13,13,14,15,15,14,15,14,16,15,15,15,16,15,16,16,16,16,18,16,12,13,13,15,15,14,14,15,15,16,13,14,13,16,15,16,16,16,17,17,15,16,15,17,15,14,15,14,16,15,14,15,15,16,16,15,16,15,17,16,16,15,16,15,17,17,18,17,18,17,15,15,15,16,16,16,16,16,17,17,14,15,15,17,16,17,17,18,18,18,16,17,15,18,15,9,11,11,13,13,11,12,12,14,14,11,12,12,14,14,13,14,14,15,16,13,14,14,15,15,11,12,12,14,14,12,13,13,14,15,12,13,13,14,14,14,14,15,15,16,14,14,14,16,16,11,12,12,14,14,12,13,13,14,15,11,13,12,14,14,13,14,14,16,16,13,14,14,16,15,13,14,14,15,15,14,14,15,15,16,14,15,14,16,16,15,15,16,16,17,15,16,16,17,17,12,13,13,15,15,13,14,14,16,15,12,14,13,16,15,15,16,15,17,17,14,15,15,17,15,10,12,12,14,14,12,12,13,14,15,12,13,12,14,14,14,14,15,15,16,13,14,14,16,16,12,13,13,14,14,13,13,14,14,15,13,14,13,15,15,14,15,15,15,17,14,15,15,16,16,11,12,12,14,14,13,13,14,15,15,12,13,13,15,14,14,15,15,16,17,14,15,14,16,15,14,14,14,16,16,14,15,15,16,16,15,15,15,16,16,15,16,16,16,18,16,17,16,18,17,13,13,14,15,15,14,14,15,16,16,13,14,14,16,15,16,16,17,17,17,15,15,15,17,15,10,12,12,14,13,12,12,13,14,14,11,13,12,14,14,13,14,14,16,16,13,14,14,16,15,12,12,13,14,14,12,13,13,14,15,13,13,13,15,15,14,14,15,16,16,14,15,15,16,16,11,12,12,14,14,12,13,13,15,15,12,13,12,15,14,14,15,14,16,16,13,15,13,16,15,13,14,14,15,16,14,15,15,15,17,14,15,15,16,16,16,15,16,16,17,16,16,16,17,17,13,14,12,16,13,14,15,13,16,15,13,15,13,16,14,15,16,15,17,16,15,16,14,17,15,11,12,12,14,15,13,13,14,14,16,13,14,13,15,14,15,15,16,16,17,15,15,15,16,16,12,13,13,15,15,13,13,14,15,16,14,15,14,16,15,15,15,16,15,17,16,16,16,17,17,12,13,13,14,15,14,14,15,15,16,13,14,13,15,15,16,16,16,17,17,15,16,15,16,15,15,15,15,16,16,14,15,15,16,17,16,16,16,17,17,16,15,17,15,18,17,18,17,18,18,14,14,15,15,17,15,15,16,16,17,14,15,15,16,16,17,17,17,17,18,16,16,15,17,15,11,12,12,14,14,12,13,13,15,15,12,13,13,15,15,14,15,15,16,16,14,15,14,17,16,13,13,13,15,15,13,14,14,15,16,13,14,14,16,16,15,15,16,16,17,15,16,16,17,17,12,13,13,15,14,13,14,14,16,15,13,14,13,16,14,15,16,16,17,16,15,16,14,17,15,14,15,15,16,17,15,15,16,16,17,15,16,16,17,17,16,15,17,16,18,16,17,17,18,18,14,15,14,16,13,15,16,15,17,14,15,16,14,17,14,16,17,16,18,16,16,17,15,18,15,2,3,3,3,3,3,3,2,5,5,5,7,7,5,7,7,5,7,7,7,8,9,7,9,9,5,7,7,7,9,9,7,9,8,5,7,8,8,9,10,8,9,10,8,9,10,10,10,12,10,11,11,8,10,10,10,11,12,10,11,10,5,8,7,8,10,10,8,10,9,8,10,10,10,10,11,10,12,11,8,10,9,10,11,11,10,12,10,5,8,8,7,9,10,8,10,9,7,9,10,9,10,11,9,11,11,8,10,9,10,11,11,9,11,10,7,9,9,9,10,11,9,11,11,9,9,11,10,10,13,11,12,12,9,11,11,11,12,13,11,13,11,7,9,9,9,10,11,9,11,10,9,11,10,10,10,12,11,13,12,9,11,11,11,12,12,10,12,10,5,8,8,8,9,10,7,10,9,8,9,10,9,10,11,10,11,11,7,10,9,9,11,11,9,11,10,7,9,9,9,10,11,9,11,10,9,11,11,10,10,12,11,12,12,9,10,11,11,12,13,10,12,10,7,9,9,9,11,11,9,11,10,9,11,11,11,11,13,11,13,12,9,11,9,11,12,12,10,13,10,6,7,7,7,7,7,7,7,7,7,7,8,7,8,8,7,8,8,7,8,7,7,8,8,7,8,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,8,9,8,8,8,8,8,8,8,8,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,8,9,8,8,8,8,9,9,8,9,9,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,8,8,8,8,9,9,8,9,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,8,8,8,8,8,8,8,8,8,8,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,9,9,8,8,8,8,8,9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,8,9,9,8,8,8,8,9,8,8,9,8,1,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,1,4,4,16,16,4,9,11,15,16,4,12,8,16,16,12,16,16,16,16,13,16,16,16,16,5,8,10,16,16,9,9,14,15,16,12,14,14,16,16,16,16,16,16,16,16,16,16,16,16,5,11,8,16,15,12,14,16,16,16,9,15,9,16,16,16,16,16,16,16,16,16,16,16,16,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,6,11,11,16,16,12,13,16,16,16,12,16,14,16,16,16,16,16,16,16,16,16,16,16,16,11,15,15,16,16,14,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,12,15,16,16,16,16,16,16,16,16,14,16,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,5,11,11,16,16,12,15,16,16,16,12,16,14,16,16,16,16,16,16,16,16,16,16,16,16,12,15,15,16,16,14,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,11,15,15,16,16,16,16,16,16,16,15,16,14,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,6,11,12,16,16,11,15,16,16,16,13,16,14,16,16,16,16,16,16,16,16,16,16,16,16,11,16,14,16,16,14,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,12,14,14,16,16,16,16,16,16,16,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,8,13,15,16,16,15,15,16,16,16,14,16,16,16,16,16,16,16,16,16,16,16,16,16,16,14,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,7,12,12,16,16,13,12,16,16,16,14,16,14,16,16,16,16,16,16,16,16,16,16,16,16,13,16,16,16,16,14,14,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,12,14,16,16,16,16,16,16,16,16,14,16,14,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,6,11,11,16,16,13,15,16,16,16,11,15,14,16,16,16,16,16,16,16,14,16,16,16,16,11,16,16,16,16,16,16,16,16,16,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,11,16,14,16,16,14,16,16,16,16,13,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,7,11,11,16,16,13,13,16,16,16,13,16,13,16,16,16,16,16,16,16,16,16,16,16,16,12,16,15,16,16,14,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,12,14,16,16,16,16,16,16,16,16,14,16,13,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,8,13,14,16,16,15,16,16,16,16,14,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,16,15,16,16,16,16,16,16,16,16,16,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,1,3,2,5,4,7,7,8,8,9,10,10,10,11,11,11,12,12,12,13,13,13,13,13,13,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,3,3,3,3,3,3,3,12,12,14,12,14,14,14,14,12,6,6,8,9,9,11,14,12,4,2,6,6,7,11,14,13,6,5,7,8,9,11,14,13,8,5,8,6,8,12,14,12,7,7,8,8,8,10,14,12,6,3,4,4,4,7,14,11,7,4,6,6,6,8,14,1,4,4,5,8,7,5,7,8,5,8,8,8,10,11,8,10,11,5,8,8,8,11,10,8,11,10,4,9,9,8,11,11,8,11,11,8,12,11,10,12,14,11,13,13,7,11,11,10,13,11,11,13,14,4,8,9,8,11,11,8,11,12,7,11,11,11,14,13,10,11,13,8,11,12,11,13,13,10,14,12,2,4,4,5,6,6,5,6,6,5,7,7,7,8,8,6,7,9,5,7,7,6,8,7,7,9,8,4,7,7,7,9,8,7,8,8,7,9,8,8,8,10,9,10,10,6,8,8,7,10,8,9,10,10,5,7,7,7,8,8,7,8,9,6,8,8,9,10,10,7,8,10,6,8,9,9,10,10,8,10,8,1,5,5,8,8,5,8,7,9,9,5,7,8,9,9,9,10,9,12,12,9,9,10,11,12,6,8,8,10,10,8,10,10,11,11,8,9,10,11,11,10,11,11,13,13,10,11,11,12,13,6,8,8,10,10,8,10,9,11,11,8,10,10,11,11,10,11,11,13,12,10,11,11,13,12,9,11,11,15,13,10,12,11,15,13,10,11,11,15,14,12,14,13,16,15,12,13,13,17,16,9,11,11,13,15,10,11,12,14,15,10,11,12,14,15,12,13,13,15,16,12,13,13,16,16,5,8,8,11,11,8,10,10,12,12,8,10,10,12,12,11,12,12,14,14,11,12,12,14,14,8,11,10,13,12,10,11,12,12,13,10,12,12,13,13,12,12,13,13,15,11,12,13,15,14,7,10,10,12,12,9,12,11,13,12,10,12,12,13,14,12,13,12,15,13,11,13,12,14,15,10,12,12,16,14,11,12,12,16,15,11,13,12,17,16,13,13,15,15,17,13,15,15,20,17,10,12,12,14,16,11,12,12,15,15,11,13,13,15,18,13,14,13,15,15,13,15,14,16,16,5,8,8,11,11,8,10,10,12,12,8,10,10,12,12,11,12,12,14,14,11,12,12,14,15,7,10,10,13,12,10,12,12,14,13,9,10,12,12,13,11,13,13,15,15,11,12,13,13,15,8,10,10,12,13,10,12,12,13,13,10,12,11,13,13,11,13,12,15,15,12,13,12,15,13,10,12,12,16,14,11,12,12,16,15,10,12,12,16,14,14,15,14,18,16,13,13,14,15,16,10,12,12,14,16,11,13,13,16,16,11,13,12,14,16,13,15,15,18,18,13,15,13,16,14,8,11,11,16,16,10,13,13,17,16,10,12,12,16,15,14,16,15,20,17,13,14,14,17,17,9,12,12,16,16,11,13,14,16,17,11,13,13,16,16,15,15,19,18,0,14,15,15,18,18,9,12,12,17,16,11,13,12,17,16,11,12,13,15,17,15,16,15,0,19,14,15,14,19,18,12,14,14,0,16,13,14,14,19,18,13,15,16,17,16,15,15,17,18,0,14,16,16,19,0,12,14,14,16,18,13,15,13,17,18,13,15,14,17,18,15,18,14,18,18,16,17,16,0,17,8,11,11,15,15,10,12,12,16,16,10,13,13,16,16,13,15,14,17,17,14,15,17,17,18,9,12,12,16,15,11,13,13,16,16,11,12,13,17,17,14,14,15,17,17,14,15,16,0,18,9,12,12,16,17,11,13,13,16,17,11,14,13,18,17,14,16,14,17,17,15,17,17,18,18,12,14,14,0,16,13,15,15,19,0,12,13,15,0,0,14,17,16,19,0,16,15,18,18,0,12,14,14,17,0,13,14,14,17,0,13,15,14,0,18,15,16,16,0,18,15,18,15,0,17,3,5,5,9,9,5,6,6,10,9,5,6,6,9,10,10,10,10,12,11,9,10,10,12,12,5,7,7,10,10,7,7,8,10,11,7,7,8,10,11,10,10,11,11,13,10,10,11,11,13,6,7,7,10,10,7,8,7,11,10,7,8,7,10,10,10,11,9,13,11,10,11,10,13,11,10,10,10,14,13,10,11,11,14,13,10,10,11,13,14,12,12,13,15,15,12,12,13,13,14,10,10,10,12,13,10,11,10,13,13,10,11,11,13,13,12,13,12,14,13,12,13,13,14,13,5,7,7,10,10,7,8,8,11,10,7,8,8,10,10,11,11,11,13,13,10,11,11,12,12,7,8,8,11,11,7,8,9,10,12,8,9,9,11,11,11,10,12,11,14,11,11,12,13,13,6,8,8,10,11,7,9,7,12,10,8,9,10,11,12,10,12,10,14,11,11,12,11,13,13,10,11,11,14,14,10,10,11,13,14,11,12,12,15,13,12,11,14,12,16,12,13,14,15,16,10,10,11,13,14,10,11,10,14,12,11,12,12,13,14,12,13,11,15,12,14,14,14,15,15,5,7,7,10,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+453876);
/* memory initializer */ allocate([7,8,8,10,10,7,8,8,10,11,10,11,10,12,12,10,11,11,12,13,6,8,8,11,11,8,9,9,12,11,7,7,9,10,12,11,11,11,12,13,11,10,12,11,15,7,8,8,11,11,8,9,9,11,11,7,9,8,12,10,11,12,11,13,12,11,12,10,15,11,10,11,10,14,12,11,12,11,14,13,10,10,11,13,14,13,13,13,17,15,12,11,14,12,15,10,10,11,13,14,11,12,12,14,14,10,11,10,14,13,13,14,13,16,17,12,14,11,16,12,9,10,10,14,13,10,11,10,14,14,10,11,11,13,13,13,14,14,16,15,12,13,13,14,14,9,11,10,14,13,10,10,12,13,14,11,12,11,14,13,13,14,14,14,15,13,14,14,15,15,9,10,11,13,14,10,11,10,15,13,11,11,12,12,15,13,14,12,15,14,13,13,14,14,15,12,13,12,16,14,11,11,12,15,14,13,15,13,16,14,13,12,15,12,17,15,16,15,16,16,12,12,13,13,15,11,13,11,15,14,13,13,14,15,17,13,14,12,0,13,14,15,14,15,0,9,10,10,13,13,10,11,11,13,13,10,11,11,13,13,12,13,12,14,14,13,14,14,15,17,9,10,10,13,13,11,12,11,15,12,10,10,11,13,16,13,14,13,15,14,13,13,14,15,16,10,10,11,13,14,11,11,12,13,14,10,12,11,14,14,13,13,13,14,15,13,15,13,16,15,12,13,12,15,13,12,15,13,15,15,11,11,13,14,15,15,15,15,15,17,13,12,14,13,17,12,12,14,14,15,13,13,14,14,16,11,13,11,16,15,14,16,16,17,0,14,13,11,16,12,1,4,4,7,7,8,8,9,9,4,6,5,8,7,8,8,10,9,4,6,6,8,8,8,8,10,10,7,8,7,9,9,9,9,11,10,7,8,8,9,9,9,9,10,11,8,8,8,9,9,10,10,11,11,8,8,8,9,9,10,10,11,11,9,10,10,11,10,11,11,12,12,9,10,10,10,11,11,11,12,12,1,4,4,6,6,8,8,10,10,11,11,15,15,4,5,5,8,8,9,9,11,11,12,12,16,16,4,5,6,8,8,9,9,11,11,12,12,14,14,7,8,8,9,9,10,10,11,12,13,13,16,17,7,8,8,9,9,10,10,12,12,12,13,15,15,9,10,10,10,10,11,11,12,12,13,13,15,16,9,9,9,10,10,11,11,13,12,13,13,17,17,10,11,11,11,12,12,12,13,13,14,15,0,18,10,11,11,12,12,12,13,14,13,14,14,17,16,11,12,12,13,13,14,14,14,14,15,16,17,16,11,12,12,13,13,14,14,14,14,15,15,17,17,14,15,15,16,16,16,17,17,16,0,17,0,18,14,15,15,16,16,0,15,18,18,0,16,0,0,2,4,4,5,5,4,5,5,5,5,4,5,5,6,5,5,6,5,6,6,5,6,6,6,6,1,5,3,11,11,11,11,11,11,11,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,7,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,1,4,4,6,6,6,6,9,8,9,8,8,8,5,7,7,7,7,8,8,8,10,8,10,8,9,5,7,7,8,7,7,8,10,10,11,10,12,11,7,8,8,9,9,9,10,11,11,11,11,11,11,7,8,8,8,9,9,9,10,10,10,11,11,12,7,8,8,9,9,10,11,11,12,11,12,11,11,7,8,8,9,9,10,10,11,11,11,12,12,11,8,10,10,10,10,11,11,14,11,12,12,12,13,9,10,10,10,10,12,11,14,11,14,11,12,13,10,11,11,11,11,13,11,14,14,13,13,13,14,11,11,11,12,11,12,12,12,13,14,14,13,14,12,11,12,12,12,12,13,13,13,14,13,14,14,11,12,12,14,12,13,13,12,13,13,14,14,14,3,4,4,6,6,7,7,8,8,9,9,9,8,4,5,5,6,6,8,8,9,8,9,9,9,9,4,5,5,7,6,8,8,8,8,9,8,9,8,6,7,7,7,8,8,8,9,9,9,9,9,9,6,7,7,7,7,8,8,9,9,9,9,9,9,7,8,8,8,8,9,8,9,9,10,9,9,10,7,8,8,8,8,9,9,9,9,9,9,10,10,8,9,9,9,9,9,9,9,9,10,10,9,10,8,9,9,9,9,9,9,9,9,9,9,10,10,9,9,9,10,9,9,10,9,9,10,10,10,10,9,9,9,9,9,9,9,10,9,10,10,10,10,9,9,9,10,9,9,10,10,9,10,10,10,10,9,9,9,10,9,9,9,10,10,10,10,10,10,5,6,12,9,14,9,9,19,6,1,5,5,8,7,9,19,12,4,4,7,7,9,11,18,9,5,6,6,8,7,8,17,14,8,7,8,8,10,12,18,9,6,8,6,8,6,8,18,9,8,11,8,11,7,5,15,16,18,18,18,17,15,11,18,12,13,14,13,17,12,15,17,5,5,6,10,10,11,15,16,4,3,3,7,5,7,10,16,7,7,7,10,9,11,12,16,6,5,5,9,5,6,10,16,8,7,7,9,6,7,9,16,11,7,3,6,4,5,8,16,12,9,4,8,5,7,9,16,1,4,4,5,8,7,5,7,8,5,8,8,8,11,11,8,10,10,5,8,8,8,11,10,8,11,11,4,8,8,8,11,11,8,11,11,8,12,11,11,13,13,11,13,14,7,11,11,10,13,12,11,13,14,4,8,8,8,11,11,8,11,12,8,11,11,11,13,13,10,12,13,8,11,11,11,14,13,11,14,13,2,4,4,5,6,6,5,6,6,5,7,7,7,8,8,6,8,8,5,7,7,6,8,8,7,8,8,4,7,7,7,8,8,7,8,8,7,8,8,8,9,10,8,10,10,6,8,8,8,10,8,8,10,10,5,7,7,7,8,8,7,8,8,6,8,8,8,10,10,8,8,10,6,8,8,8,10,10,8,10,9,1,5,5,8,8,5,8,7,9,9,5,7,8,9,9,9,10,9,12,12,9,9,10,12,12,6,8,8,11,10,8,10,10,11,11,8,9,10,11,11,10,11,11,14,13,10,11,11,13,13,5,8,8,10,10,8,10,10,11,11,8,10,10,11,11,10,11,11,13,13,10,11,11,13,13,9,11,11,15,14,10,12,12,15,14,10,12,11,15,14,13,14,14,16,16,12,14,13,17,15,9,11,11,14,15,10,11,12,14,16,10,11,12,14,16,12,13,14,16,16,13,13,15,15,18,5,8,8,11,11,8,10,10,12,12,8,10,10,12,13,11,12,12,14,14,11,12,12,15,15,8,10,10,13,13,10,12,12,13,13,10,12,12,14,14,12,13,13,15,15,12,13,13,16,16,7,10,10,12,12,10,12,11,13,13,10,12,12,13,14,12,13,12,15,14,12,13,13,16,16,10,12,12,17,16,12,13,13,16,15,11,13,13,17,17,15,15,15,16,17,14,15,15,19,19,10,12,12,15,16,11,13,12,15,18,11,13,13,16,16,14,15,15,17,17,14,15,15,17,19,5,8,8,11,11,8,10,10,12,12,8,10,10,12,12,11,12,12,16,15,11,12,12,14,15,7,10,10,13,13,10,12,12,14,13,10,11,12,13,13,12,13,13,16,16,12,12,13,15,15,8,10,10,13,13,10,12,12,14,14,10,12,12,13,13,12,13,13,16,16,12,13,13,15,15,10,12,12,16,15,11,13,13,17,16,11,12,13,16,15,13,15,15,19,17,14,15,14,17,16,10,12,12,16,16,11,13,13,16,17,12,13,13,15,17,14,15,15,17,19,14,15,15,17,17,8,11,11,16,16,10,13,12,17,17,10,12,13,16,16,15,17,16,20,19,14,15,17,18,19,9,12,12,16,17,11,13,14,17,18,11,13,13,19,18,16,17,18,19,19,15,16,16,19,19,9,12,12,16,17,11,14,13,18,17,11,13,13,17,17,16,17,16,20,19,14,16,16,18,18,12,15,15,19,17,14,15,16,0,20,13,15,16,20,17,18,16,20,0,0,15,16,19,20,0,12,15,14,18,19,13,16,15,20,19,13,16,15,20,18,17,18,17,0,20,16,17,16,0,0,8,11,11,16,15,10,12,12,17,17,10,13,13,17,16,14,16,15,18,20,15,16,16,19,19,9,12,12,16,16,11,13,13,17,16,11,13,14,17,18,15,15,16,20,20,16,16,17,19,19,9,13,12,16,17,11,14,13,17,17,11,14,14,18,17,14,16,15,18,19,16,17,18,18,19,12,14,15,19,18,13,15,16,18,0,13,14,15,0,0,16,16,17,20,0,17,17,20,20,0,12,15,15,19,20,13,15,15,0,0,14,16,15,0,0,15,18,16,0,0,17,18,16,0,19,4,5,5,9,9,5,6,6,9,9,5,6,6,9,9,9,10,9,12,12,9,9,10,12,12,5,7,7,10,10,7,7,8,10,10,6,7,8,10,10,10,10,10,11,13,10,9,10,12,13,5,7,7,10,10,6,8,7,10,10,7,8,7,10,10,9,10,10,12,12,10,10,10,13,11,9,10,10,13,13,10,11,10,13,13,10,10,10,13,13,12,12,13,14,14,12,12,13,14,14,9,10,10,13,13,10,10,10,13,13,10,10,10,13,13,12,13,12,15,14,12,13,12,15,15,5,7,6,10,10,7,8,8,10,10,7,8,8,10,10,10,11,10,13,13,10,10,10,12,12,7,8,8,11,10,8,8,9,10,11,8,9,9,11,11,11,10,11,11,14,11,11,11,13,13,6,8,8,10,10,7,9,8,11,10,8,9,9,11,11,10,11,10,14,11,10,11,11,13,13,10,11,11,14,13,10,10,11,14,13,10,11,11,14,14,12,11,13,12,16,13,14,14,15,15,10,10,11,13,14,10,11,10,14,13,10,11,11,14,14,12,13,12,15,13,13,13,14,15,16,5,7,7,10,10,7,8,8,10,10,7,8,8,10,10,10,10,10,13,13,10,10,11,12,13,6,8,8,11,10,8,9,9,11,11,7,8,9,10,11,10,11,11,13,13,10,10,11,11,13,6,8,8,10,11,8,9,9,11,11,8,9,8,12,10,10,11,11,13,13,10,11,10,14,11,10,10,10,14,13,10,11,11,14,13,10,10,11,13,13,12,14,14,16,16,12,12,13,13,15,10,11,11,13,14,10,11,11,14,15,10,11,10,13,13,13,14,13,16,16,12,13,11,15,12,9,10,10,13,13,10,11,11,14,13,10,10,11,13,14,13,14,13,16,16,13,13,13,15,16,9,10,10,13,13,10,10,11,13,14,10,11,11,15,13,13,13,14,14,18,13,13,14,16,15,9,10,10,13,14,10,11,10,14,13,10,11,11,13,14,13,14,13,16,15,13,13,14,15,16,12,13,12,16,14,11,11,13,15,15,13,14,13,16,15,15,12,16,12,17,14,15,15,17,17,12,13,13,14,16,11,13,11,16,15,12,13,14,15,16,14,15,13,0,14,14,16,16,0,0,9,10,10,13,13,10,11,10,14,14,10,11,11,13,13,12,13,13,14,16,13,14,14,16,16,9,10,10,14,14,11,11,11,14,13,10,10,11,14,14,13,13,13,16,16,13,13,14,14,17,9,10,10,13,14,10,11,11,13,15,10,11,10,14,14,13,13,13,14,17,13,14,13,17,14,12,13,13,16,14,13,14,13,16,15,12,12,13,15,16,15,15,16,18,16,15,13,15,14,0,12,12,13,14,16,13,13,14,15,16,11,12,11,16,14,15,16,16,17,17,14,15,12,17,12,1,4,4,7,7,7,7,9,9,4,6,6,8,8,8,8,9,9,4,6,6,8,8,8,8,9,9,7,8,8,9,9,9,9,11,10,7,8,8,9,9,9,9,10,10,7,8,8,9,9,10,10,11,11,7,8,8,9,9,10,10,11,11,9,9,9,10,10,11,11,12,12,9,9,9,10,11,11,11,12,12,1,4,4,6,6,8,8,10,9,11,10,14,13,4,6,5,8,8,9,9,11,10,11,11,14,14,4,5,6,8,8,9,9,10,10,11,11,14,14,6,8,8,9,9,10,10,11,11,12,12,16,15,7,8,8,9,9,10,10,11,11,12,12,15,15,9,10,10,10,10,11,11,12,12,12,12,15,15,9,10,9,10,11,11,11,12,12,12,13,15,15,10,10,11,11,11,12,12,13,12,13,13,16,15,10,11,11,11,11,12,12,13,12,13,13,16,17,11,11,12,12,12,13,13,13,14,14,15,17,17,11,11,12,12,12,13,13,13,14,14,14,16,18,14,15,15,15,15,16,16,16,16,17,18,0,0,14,15,15,15,15,17,16,17,18,17,17,18,0,2,4,4,5,5,4,5,5,5,5,4,5,5,5,5,5,6,6,6,6,5,6,6,6,6,1,4,4,11,11,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,1,4,4,6,6,6,6,7,7,8,8,9,9,5,7,7,8,7,7,7,9,8,10,9,10,11,5,7,7,8,8,7,7,8,9,10,10,11,11,6,8,8,9,9,9,9,11,10,12,12,15,12,6,8,8,9,9,9,9,11,11,12,11,14,12,7,8,8,10,10,12,12,13,13,13,15,13,13,7,8,8,10,10,11,11,13,12,14,15,15,15,9,10,10,11,12,13,13,14,15,14,15,14,15,8,10,10,12,12,14,14,15,14,14,15,15,14,10,12,12,14,14,15,14,15,15,15,14,15,15,10,12,12,13,14,15,14,15,15,14,15,15,15,12,15,13,15,14,15,15,15,15,15,15,15,15,13,13,15,15,15,15,15,15,15,15,15,15,15,2,5,4,6,6,7,7,8,8,8,8,9,8,5,5,6,7,7,8,8,8,8,9,9,9,9,5,6,5,7,7,8,8,8,8,9,9,9,9,6,7,7,8,8,8,8,9,8,9,9,9,9,6,7,7,8,7,8,8,9,9,9,9,9,9,7,8,8,8,8,9,9,9,9,9,9,9,9,7,8,8,9,8,9,8,9,9,9,9,9,9,8,9,8,9,9,9,9,9,9,9,9,10,10,8,8,9,9,9,9,9,9,9,9,10,9,10,9,9,9,9,9,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,9,9,9,9,9,9,9,9,10,9,9,10,10,9,5,8,13,10,17,11,11,15,7,2,4,5,8,7,9,16,13,4,3,5,6,8,11,20,10,4,5,5,7,6,8,18,15,7,6,7,8,10,14,20,10,6,7,6,9,7,8,17,9,8,10,8,10,5,4,11,12,17,19,14,16,10,7,12,12,13,14,13,17,12,15,17,5,5,6,10,10,11,15,16,4,3,3,7,5,7,10,16,7,7,7,10,9,11,12,16,6,5,5,9,5,6,10,16,8,7,7,9,6,7,9,16,11,7,3,6,4,5,8,16,12,9,4,8,5,7,9,16,1,4,4,5,8,7,5,7,8,5,8,8,8,11,11,8,10,10,5,8,8,8,11,10,8,11,11,4,8,8,8,11,11,8,11,11,8,12,11,11,13,13,11,13,14,7,11,11,10,13,12,11,13,14,4,8,8,8,11,11,8,11,12,8,11,11,11,13,13,10,12,13,8,11,11,11,14,13,11,14,13,2,4,4,5,6,6,5,6,6,5,7,7,7,8,8,6,8,8,5,7,7,6,8,8,7,8,8,4,7,7,7,8,8,7,8,8,7,8,8,8,9,10,8,10,10,6,8,8,8,10,8,8,10,10,5,7,7,7,8,8,7,8,8,6,8,8,8,10,10,8,8,10,6,8,8,8,10,10,8,10,9,1,5,5,8,8,5,8,7,9,9,5,7,8,9,9,9,10,9,12,12,9,9,10,12,12,6,8,8,11,10,8,10,10,11,11,8,9,10,11,11,10,11,11,14,13,10,11,11,13,13,5,8,8,10,10,8,10,10,11,11,8,10,10,11,11,10,11,11,13,13,10,11,11,13,13,9,11,11,15,14,10,12,12,15,14,10,12,11,15,14,13,14,14,16,16,12,14,13,17,15,9,11,11,14,15,10,11,12,14,16,10,11,12,14,16,12,13,14,16,16,13,13,15,15,18,5,8,8,11,11,8,10,10,12,12,8,10,10,12,13,11,12,12,14,14,11,12,12,15,15,8,10,10,13,13,10,12,12,13,13,10,12,12,14,14,12,13,13,15,15,12,13,13,16,16,7,10,10,12,12,10,12,11,13,13,10,12,12,13,14,12,13,12,15,14,12,13,13,16,16,10,12,12,17,16,12,13,13,16,15,11,13,13,17,17,15,15,15,16,17,14,15,15,19,19,10,12,12,15,16,11,13,12,15,18,11,13,13,16,16,14,15,15,17,17,14,15,15,17,19,5,8,8,11,11,8,10,10,12,12,8,10,10,12,12,11,12,12,16,15,11,12,12,14,15,7,10,10,13,13,10,12,12,14,13,10,11,12,13,13,12,13,13,16,16,12,12,13,15,15,8,10,10,13,13,10,12,12,14,14,10,12,12,13,13,12,13,13,16,16,12,13,13,15,15,10,12,12,16,15,11,13,13,17,16,11,12,13,16,15,13,15,15,19,17,14,15,14,17,16,10,12,12,16,16,11,13,13,16,17,12,13,13,15,17,14,15,15,17,19,14,15,15,17,17,8,11,11,16,16,10,13,12,17,17,10,12,13,16,16,15,17,16,20,19,14,15,17,18,19,9,12,12,16,17,11,13,14,17,18,11,13,13,19,18,16,17,18,19,19,15,16,16,19,19,9,12,12,16,17,11,14,13,18,17,11,13,13,17,17,16,17,16,20,19,14,16,16,18,18,12,15,15,19,17,14,15,16,0,20,13,15,16,20,17,18,16,20,0,0,15,16,19,20,0,12,15,14,18,19,13,16,15,20,19,13,16,15,20,18,17,18,17,0,20,16,17,16,0,0,8,11,11,16,15,10,12,12,17,17,10,13,13,17,16,14,16,15,18,20,15,16,16,19,19,9,12,12,16,16,11,13,13,17,16,11,13,14,17,18,15,15,16,20,20,16,16,17,19,19,9,13,12,16,17,11,14,13,17,17,11,14,14,18,17,14,16,15,18,19,16,17,18,18,19,12,14,15,19,18,13,15,16,18,0,13,14,15,0,0,16,16,17,20,0,17,17,20,20,0,12,15,15,19,20,13,15,15,0,0,14,16,15,0,0,15,18,16,0,0,17,18,16,0,19,4,5,5,9,9,5,6,6,9,9,5,6,6,9,9,9,10,9,12,12,9,9,10,12,12,5,7,7,10,10,7,7,8,10,10,6,7,8,10,10,10,10,10,11,13,10,9,10,12,13,5,7,7,10,10,6,8,7,10,10,7,8,7,10,10,9,10,10,12,12,10,10,10,13,11,9,10,10,13,13,10,11,10,13,13,10,10,10,13,13,12,12,13,14,14,12,12,13,14,14,9,10,10,13,13,10,10,10,13,13,10,10,10,13,13,12,13,12,15,14,12,13,12,15,15,5,7,6,10,10,7,8,8,10,10,7,8,8,10,10,10,11,10,13,13,10,10,10,12,12,7,8,8,11,10,8,8,9,10,11,8,9,9,11,11,11,10,11,11,14,11,11,11,13,13,6,8,8,10,10,7,9,8,11,10,8,9,9,11,11,10,11,10,14,11,10,11,11,13,13,10,11,11,14,13,10,10,11,14,13,10,11,11,14,14,12,11,13,12,16,13,14,14,15,15,10,10,11,13,14,10,11,10,14,13,10,11,11,14,14,12,13,12,15,13,13,13,14,15,16,5,7,7,10,10,7,8,8,10,10,7,8,8,10,10,10,10,10,13,13,10,10,11,12,13,6,8,8,11,10,8,9,9,11,11,7,8,9,10,11,10,11,11,13,13,10,10,11,11,13,6,8,8,10,11,8,9,9,11,11,8,9,8,12,10,10,11,11,13,13,10,11,10,14,11,10,10,10,14,13,10,11,11,14,13,10,10,11,13,13,12,14,14,16,16,12,12,13,13,15,10,11,11,13,14,10,11,11,14,15,10,11,10,13,13,13,14,13,16,16,12,13,11,15,12,9,10,10,13,13,10,11,11,14,13,10,10,11,13,14,13,14,13,16,16,13,13,13,15,16,9,10,10,13,13,10,10,11,13,14,10,11,11,15,13,13,13,14,14,18,13,13,14,16,15,9,10,10,13,14,10,11,10,14,13,10,11,11,13,14,13,14,13,16,15,13,13,14,15,16,12,13,12,16,14,11,11,13,15,15,13,14,13,16,15,15,12,16,12,17,14,15,15,17,17,12,13,13,14,16,11,13,11,16,15,12,13,14,15,16,14,15,13,0,14,14,16,16,0,0,9,10,10,13,13,10,11,10,14,14,10,11,11,13,13,12,13,13,14,16,13,14,14,16,16,9,10,10,14,14,11,11,11,14,13,10,10,11,14,14,13,13,13,16,16,13,13,14,14,17,9,10,10,13,14,10,11,11,13,15,10,11,10,14,14,13,13,13,14,17,13,14,13,17,14,12,13,13,16,14,13,14,13,16,15,12,12,13,15,16,15,15,16,18,16,15,13,15,14,0,12,12,13,14,16,13,13,14,15,16,11,12,11,16,14,15,16,16,17,17,14,15,12,17,12,1,4,4,7,7,7,7,9,9,4,6,6,8,8,8,8,9,9,4,6,6,8,8,8,8,9,9,7,8,8,9,9,9,9,11,10,7,8,8,9,9,9,9,10,10,7,8,8,9,9,10,10,11,11,7,8,8,9,9,10,10,11,11,9,9,9,10,10,11,11,12,12,9,9,9,10,11,11,11,12,12,1,4,4,6,6,8,8,10,9,11,10,14,13,4,6,5,8,8,9,9,11,10,11,11,14,14,4,5,6,8,8,9,9,10,10,11,11,14,14,6,8,8,9,9,10,10,11,11,12,12,16,15,7,8,8,9,9,10,10,11,11,12,12,15,15,9,10,10,10,10,11,11,12,12,12,12,15,15,9,10,9,10,11,11,11,12,12,12,13,15,15,10,10,11,11,11,12,12,13,12,13,13,16,15,10,11,11,11,11,12,12,13,12,13,13,16,17,11,11,12,12,12,13,13,13,14,14,15,17,17,11,11,12,12,12,13,13,13,14,14,14,16,18,14,15,15,15,15,16,16,16,16,17,18,0,0,14,15,15,15,15,17,16,17,18,17,17,18,0,2,4,4,5,5,4,5,5,5,5,4,5,5,5,5,5,6,6,6,6,5,6,6,6,6,1,3,2,9,9,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,4,4,6,6,6,6,7,7,8,8,9,9,5,7,7,8,7,7,7,9,8,10,9,10,11,5,7,7,8,8,7,7,8,9,10,10,11,11,6,8,8,9,9,9,9,11,10,12,12,15,12,6,8,8,9,9,9,9,11,11,12,11,14,12,7,8,8,10,10,12,12,13,13,13,15,13,13,7,8,8,10,10,11,11,13,12,14,15,15,15,9,10,10,11,12,13,13,14,15,14,15,14,15,8,10,10,12,12,14,14,15,14,14,15,15,14,10,12,12,14,14,15,14,15,15,15,14,15,15,10,12,12,13,14,15,14,15,15,14,15,15,15,12,15,13,15,14,15,15,15,15,15,15,15,15,13,13,15,15,15,15,15,15,15,15,15,15,15,2,5,4,6,6,7,7,8,8,8,8,9,8,5,5,6,7,7,8,8,8,8,9,9,9,9,5,6,5,7,7,8,8,8,8,9,9,9,9,6,7,7,8,8,8,8,9,8,9,9,9,9,6,7,7,8,7,8,8,9,9,9,9,9,9,7,8,8,8,8,9,9,9,9,9,9,9,9,7,8,8,9,8,9,8,9,9,9,9,9,9,8,9,8,9,9,9,9,9,9,9,9,10,10,8,8,9,9,9,9,9,9,9,9,10,9,10,9,9,9,9,9,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,9,9,9,9,9,9,9,9,10,9,9,10,10,9,5,8,13,10,17,11,11,15,7,2,4,5,8,7,9,16,13,4,3,5,6,8,11,20,10,4,5,5,7,6,8,18,15,7,6,7,8,10,14,20,10,6,7,6,9,7,8,17,9,8,10,8,10,5,4,11,12,17,19,14,16,10,7,12,13,15,17,17,15,15,12,17,11,9,7,10,10,9,12,17,10,6,3,6,5,7,10,17,15,10,6,9,8,9,11,17,15,8,4,7,3,5,9,16,16,10,5,8,4,5,8,16,13,11,5,8,3,3,5,14,13,12,7,10,5,5,7,14,1,4,4,5,8,7,5,7,8,5,8,8,8,11,11,8,10,11,5,8,8,8,11,10,8,11,11,4,8,8,8,11,11,8,11,11,8,11,11,11,13,14,11,13,13,7,11,11,10,13,12,11,14,14,4,8,8,8,11,11,8,11,11,8,11,11,11,14,13,10,12,13,8,11,11,11,13,13,11,13,13,2,5,5,5,6,6,5,6,6,5,6,6,7,8,8,6,8,8,5,6,6,6,8,7,7,8,8,5,6,6,7,8,8,6,8,8,6,8,8,8,9,10,8,10,10,6,8,8,7,10,8,8,10,10,5,6,6,6,8,8,7,8,8,6,8,8,8,10,10,8,8,10,6,8,8,8,10,10,8,10,9,2,4,4,7,8,5,7,7,9,9,5,7,7,9,9,8,9,9,12,11,8,9,9,11,12,5,7,7,10,10,7,9,9,11,11,7,9,9,10,11,10,11,11,13,13,9,10,11,12,13,5,7,7,10,10,7,9,9,11,10,7,9,9,11,11,9,11,10,13,13,10,11,11,13,13,8,10,10,14,13,10,11,11,15,14,9,11,11,15,14,13,14,13,16,14,12,13,13,15,16,8,10,10,13,14,9,11,11,14,15,10,11,11,14,15,12,13,13,15,15,12,13,14,15,16,5,7,7,10,10,7,9,9,11,11,7,9,9,11,12,10,11,11,14,13,10,11,11,14,14,7,9,9,12,12,9,11,11,13,13,9,11,11,13,13,12,13,12,14,14,11,12,13,15,15,7,9,9,12,12,8,11,10,13,12,9,11,11,13,13,11,13,12,15,13,11,13,13,15,16,9,12,11,15,15,11,12,12,16,15,11,12,13,16,16,13,14,15,16,15,13,15,15,17,17,9,11,11,14,15,10,12,12,15,15,11,13,12,15,16,13,15,14,16,16,13,15,15,17,19,5,7,7,10,10,7,9,9,12,11,7,9,9,11,11,10,11,11,14,14,10,11,11,13,14,7,9,9,12,12,9,11,11,13,13,9,10,11,12,13,11,13,12,16,15,11,12,12,14,15,7,9,9,12,12,9,11,11,13,13,9,11,11,13,12,11,13,12,15,16,12,13,13,15,14,9,11,11,15,14,11,13,12,16,15,10,11,12,15,15,13,14,14,18,17,13,14,14,15,17,10,11,11,14,15,11,13,12,15,17,11,13,12,15,16,13,15,14,18,17,14,15,15,16,18,7,10,10,14,14,10,12,12,15,15,10,12,12,15,15,14,15,15,18,17,13,15,15,16,16,9,11,11,16,15,11,13,13,16,18,11,13,13,16,16,15,16,16,0,0,14,15,16,18,17,9,11,11,15,15,10,13,12,17,16,11,12,13,16,17,14,15,16,19,19,14,15,15,0,20,12,14,14,0,0,13,14,16,19,18,13,15,16,20,17,16,18,0,0,0,15,16,17,18,19,11,14,14,0,19,12,15,14,17,17,13,15,15,0,0,16,17,15,20,19,15,17,16,19,0,8,10,10,14,15,10,12,11,15,15,10,11,12,16,15,13,14,14,19,17,14,15,15,0,0,9,11,11,16,15,11,13,13,17,16,10,12,13,16,17,14,15,15,18,18,14,15,16,20,19,9,12,12,0,15,11,13,13,16,17,11,13,13,19,17,14,16,16,18,17,15,16,16,17,19,11,14,14,18,18,13,14,15,0,0,12,14,15,19,18,15,16,19,0,19,15,16,19,19,17,12,14,14,16,19,13,15,15,0,17,13,15,14,18,18,15,16,15,0,18,16,17,17,0,0,4,5,5,8,8,5,7,6,9,9,5,6,7,9,9,9,9,9,11,11,9,9,9,11,11,5,7,7,9,9,7,8,8,10,10,7,7,8,10,10,10,10,10,11,12,9,10,10,11,12,5,7,7,9,9,6,8,7,10,10,7,8,8,10,10,9,10,10,12,11,9,10,10,12,11,9,10,10,12,12,10,10,10,13,12,9,10,10,12,13,12,12,12,14,14,11,12,12,13,14,9,10,10,12,12,9,10,10,12,13,10,10,10,12,13,11,12,12,14,13,12,12,12,14,13,5,7,7,10,9,7,8,8,10,10,7,8,8,10,10,10,10,10,12,12,10,10,10,12,12,7,8,8,11,10,8,8,9,11,11,8,9,9,11,11,10,11,11,12,13,10,11,11,13,13,6,8,8,10,10,7,9,8,11,10,8,9,9,11,11,10,11,10,13,11,10,11,11,13,13,9,10,10,13,13,10,11,11,13,13,10,11,11,14,13,12,11,13,12,15,12,13,13,15,15,9,10,10,12,13,10,11,10,13,13,10,11,11,13,13,12,13,11,15,13,12,13,13,15,15,5,7,7,9,10,7,8,8,10,10,7,8,8,10,10,10,10,10,12,12,10,10,11,12,12,6,8,8,10,10,8,9,9,11,11,7,8,9,10,11,10,11,11,13,13,10,10,11,11,13,7,8,8,10,11,8,9,9,11,11,8,9,8,11,11,10,11,11,13,13,10,11,11,13,12,9,10,10,13,12,10,11,11,14,13,10,10,11,13,13,12,13,13,15,15,12,11,13,12,14,9,10,10,12,13,10,11,11,13,14,10,11,11,13,13,12,13,13,15,15,12,13,12,15,12,8,9,9,12,12,9,11,10,13,13,9,10,10,13,13,12,13,13,15,15,12,12,12,14,14,9,10,10,13,13,10,11,11,13,14,10,11,11,14,12,13,13,14,14,16,12,13,13,15,14,9,10,10,13,13,10,11,10,14,13,10,11,11,13,14,12,14,13,16,14,13,13,13,14,15,11,13,12,15,14,11,12,13,14,15,12,13,13,16,15,14,12,15,12,16,14,15,15,17,16,11,12,12,14,15,11,13,11,15,14,12,13,13,15,16,13,15,12,17,13,14,15,15,16,16,8,9,9,12,12,9,10,10,13,13,9,10,10,13,13,12,13,12,14,14,12,13,13,15,15,9,10,10,13,13,10,11,11,14,13,10,10,11,13,14,12,13,13,15,14,12,12,14,14,16,9,10,10,13,13,10,11,11,13,14,10,11,11,14,13,13,13,13,15,15,13,14,13,16,14,11,12,12,14,14,12,13,13,16,15,11,12,13,14,15,14,15,15,16,16,14,13,15,13,17,11,12,12,14,15,12,13,13,15,16,11,13,12,15,15,14,15,14,16,16,14,15,12,17,13,1,4,4,7,7,8,8,9,9,4,6,5,8,8,8,8,10,10,4,5,6,8,8,8,8,10,10,7,8,8,9,9,9,9,11,11,7,8,8,9,9,9,9,11,11,8,8,8,9,9,10,11,12,12,8,8,8,9,9,10,10,12,12,10,10,10,11,11,12,12,13,13,10,10,10,11,11,12,12,13,13,1,4,4,6,6,8,8,10,10,11,11,14,13,4,6,5,8,8,9,9,11,10,12,11,15,14,4,5,6,8,8,9,9,11,11,11,11,14,14,6,8,8,10,9,11,11,11,11,12,12,15,15,6,8,8,9,9,11,11,11,12,12,12,15,15,8,10,10,11,11,11,11,12,12,13,13,15,16,8,10,10,11,11,11,11,12,12,13,13,16,16,10,11,11,12,12,12,12,13,13,13,13,17,16,10,11,11,12,12,12,12,13,13,13,14,16,17,11,12,12,13,13,13,13,14,14,15,14,18,17,11,12,12,13,13,13,13,14,14,14,15,19,18,14,15,15,15,15,16,16,18,19,18,18,0,0,14,15,15,16,15,17,17,16,18,17,18,0,0,2,4,4,5,5,4,5,5,6,5,4,5,5,5,6,5,6,5,6,6,5,5,6,6,6,1,3,2,12,12,12,12,12,12,4,12,12,12,12,12,12,12,12,5,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,1,4,4,7,6,7,6,8,7,9,7,9,8,4,7,6,8,8,9,8,10,9,10,10,11,11,4,7,7,8,8,8,8,9,10,11,11,11,11,6,8,8,10,10,10,10,11,11,12,12,12,12,7,8,8,10,10,10,10,11,11,12,12,13,13,7,9,9,11,10,12,12,13,13,14,13,14,14,7,9,9,10,11,11,12,13,13,13,13,16,14,9,10,10,12,12,13,13,14,14,15,16,15,16,9,10,10,12,12,12,13,14,14,14,15,16,15,10,12,12,13,13,15,13,16,16,15,17,17,17,10,11,11,12,14,14,14,15,15,17,17,15,17,11,12,12,14,14,14,15,15,15,17,16,17,17,10,12,12,13,14,14,14,17,15,17,17,17,17,2,5,5,6,6,7,7,8,7,8,8,8,8,5,6,6,7,7,8,8,8,8,8,8,8,8,5,6,6,7,7,8,7,8,8,8,8,8,8,6,7,7,7,8,8,8,8,8,9,9,9,9,6,7,7,8,7,8,8,9,9,9,9,9,9,7,8,8,8,8,8,8,9,9,9,9,9,9,7,8,8,8,8,8,8,9,9,9,9,9,9,8,8,8,8,9,9,9,9,9,9,9,9,9,8,8,8,9,9,9,9,9,9,9,9,9,9,8,8,9,9,9,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,5,9,14,12,15,13,10,13,7,4,5,6,8,7,8,12,13,4,3,5,5,6,9,15,12,6,5,6,6,6,7,14,14,7,4,6,4,6,8,15,12,6,6,5,5,5,6,14,9,7,8,6,7,5,4,10,10,13,14,14,15,10,6,8,14,14,14,15,13,15,12,16,10,8,7,9,9,8,12,16,10,5,4,6,5,6,9,16,14,8,6,8,7,8,10,16,14,7,4,6,3,5,8,16,15,9,5,7,4,4,7,16,13,10,6,7,4,3,4,13,13,12,7,9,5,5,6,12,1,4,4,5,8,7,5,7,8,5,8,8,8,10,11,8,10,11,5,8,8,8,11,10,8,11,11,4,8,8,8,11,11,8,11,11,8,11,11,11,13,14,11,14,14,8,11,11,10,14,12,11,14,14,4,8,8,8,11,11,8,11,11,7,11,11,11,14,14,10,12,14,8,11,11,11,14,14,11,14,13,2,5,4,5,6,6,5,6,6,5,6,6,7,8,8,6,8,8,5,6,6,6,8,8,7,8,8,5,7,6,7,8,8,6,8,8,7,8,8,8,9,10,8,10,10,6,8,8,8,10,8,8,10,10,5,6,6,6,8,8,7,8,8,6,8,8,8,10,10,8,8,10,7,8,8,8,10,10,8,10,9,2,4,4,7,7,5,7,7,9,9,5,7,7,9,9,8,9,9,12,12,8,9,9,11,12,5,7,7,10,10,7,9,9,11,11,7,9,9,10,11,10,11,11,13,13,9,10,11,13,13,5,7,7,10,10,7,9,9,11,10,7,9,9,11,11,9,11,10,13,13,10,11,11,14,13,8,10,10,14,13,10,11,11,15,14,9,11,11,14,14,13,14,13,16,16,12,13,13,15,15,8,10,10,13,14,9,11,11,14,14,10,11,11,14,15,12,13,13,15,15,13,14,14,15,16,5,7,7,10,10,7,9,9,11,11,7,9,9,11,12,10,11,11,14,14,10,11,11,14,14,7,9,9,12,12,9,11,11,13,13,9,11,11,13,13,12,12,13,15,15,11,12,13,15,16,7,9,9,11,11,8,11,10,13,12,9,11,11,13,13,11,13,12,15,13,11,13,13,15,16,9,12,11,15,14,11,12,13,16,15,11,13,13,15,16,14,14,15,17,16,13,15,16,0,17,9,11,11,15,15,10,13,12,15,15,11,13,13,15,16,13,15,13,16,15,14,16,15,0,19,5,7,7,10,10,7,9,9,11,11,7,9,9,11,11,10,12,11,14,14,10,11,12,14,14,7,9,9,12,12,9,11,11,14,13,9,10,11,12,13,11,13,13,16,16,11,12,13,13,16,7,9,9,12,12,9,11,11,13,13,9,11,11,13,13,11,13,13,15,15,12,13,12,15,14,9,11,11,15,14,11,13,12,16,16,10,12,12,15,15,13,15,15,17,19,13,14,15,16,17,10,12,12,15,15,11,13,13,16,16,11,13,13,15,16,13,15,15,0,0,14,15,15,16,16,8,10,10,14,14,10,12,12,15,15,10,12,11,15,16,14,15,15,19,20,13,14,14,18,16,9,11,11,15,15,11,13,13,17,16,11,13,13,16,16,15,17,17,20,20,14,15,16,17,20,9,11,11,15,15,10,13,12,16,15,11,13,13,15,17,14,16,15,18,0,14,16,15,18,20,12,14,14,0,0,14,14,16,0,0,13,16,15,0,0,17,17,18,0,0,16,17,19,19,0,12,14,14,18,0,12,16,14,0,17,13,15,15,18,0,16,18,17,0,17,16,18,17,0,0,7,10,10,14,14,10,12,11,15,15,10,12,12,16,15,13,15,15,18,0,14,15,15,17,0,9,11,11,15,15,11,13,13,16,16,11,12,13,16,16,14,15,16,17,17,14,16,16,16,18,9,11,12,16,16,11,13,13,17,17,11,14,13,20,17,15,16,16,19,0,15,16,17,0,19,11,13,14,17,16,14,15,15,20,18,13,14,15,17,19,16,18,18,0,20,16,16,19,17,0,12,15,14,17,0,14,15,15,18,19,13,16,15,19,20,15,18,18,0,20,17,0,16,0,0,4,5,5,8,8,5,7,6,9,9,5,6,7,9,9,9,9,9,11,11,9,9,9,11,11,5,7,7,9,9,7,8,8,10,10,7,7,8,10,10,9,10,10,11,12,9,10,10,11,12,5,7,7,9,9,7,8,7,10,10,7,8,8,10,10,9,10,9,12,11,9,10,10,12,11,9,10,9,12,12,9,10,10,13,12,9,10,10,12,13,12,12,12,14,14,11,12,12,13,14,9,9,10,12,12,9,10,10,12,12,9,10,10,12,13,11,12,11,14,13,12,12,12,14,13,5,7,7,9,9,7,8,8,10,10,7,8,8,10,10,10,10,10,12,12,9,10,10,12,12,7,8,8,11,10,8,8,9,11,11,8,9,9,11,11,11,11,11,12,13,10,11,11,13,13,6,8,8,10,10,7,9,8,11,10,8,9,9,11,11,10,11,10,13,11,10,11,11,13,13,9,11,10,13,12,10,11,11,13,13,10,11,11,13,13,12,12,13,12,15,12,13,13,15,15,9,10,10,12,13,10,11,10,13,12,10,11,11,13,14,12,13,11,15,13,12,13,13,15,15,5,7,7,9,9,7,8,8,10,10,7,8,8,10,10,9,10,10,12,12,10,10,11,12,12,6,8,8,10,10,8,9,9,11,11,7,8,9,10,11,10,11,11,13,13,10,10,11,11,13,7,8,8,10,10,8,9,9,11,11,8,9,9,11,11,10,11,11,13,13,11,11,11,13,12,9,10,10,13,12,10,11,11,14,13,10,10,11,12,13,12,13,13,15,15,12,11,13,13,14,9,10,11,12,13,10,11,11,13,13,10,11,11,13,13,12,13,13,15,15,12,13,12,15,12,8,9,9,12,12,9,11,10,13,13,9,10,10,13,13,12,13,13,15,14,12,12,12,14,13,9,10,10,13,12,10,11,11,13,13,10,11,11,14,12,13,13,14,14,16,12,13,13,15,15,9,10,10,13,13,10,11,10,14,13,10,11,11,13,14,12,14,13,15,14,13,13,13,15,15,11,13,12,15,14,11,12,13,14,15,12,13,13,16,14,14,12,15,12,16,14,15,15,17,15,11,12,12,14,14,11,13,11,15,14,12,13,13,15,15,13,15,12,17,13,14,15,15,16,16,8,9,9], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+464116);
/* memory initializer */ allocate([12,12,9,10,10,12,13,9,10,10,13,13,12,12,12,14,14,12,13,13,15,15,9,10,10,13,12,10,11,11,14,13,10,10,11,13,14,12,13,13,15,15,12,12,13,14,16,9,10,10,13,13,10,11,11,13,14,10,11,11,14,13,12,13,13,14,15,13,14,13,16,14,11,12,12,14,14,12,13,13,15,14,11,12,13,14,15,14,15,15,16,16,13,13,15,13,16,11,12,12,14,15,12,13,13,14,15,11,13,12,15,14,14,15,15,16,16,14,15,12,16,13,2,3,3,6,6,7,7,9,9,4,5,5,7,7,8,8,10,10,4,5,5,7,7,8,8,10,10,6,7,7,8,8,9,9,11,10,6,7,7,8,8,9,9,10,10,7,8,8,9,9,10,10,11,11,7,8,8,9,9,10,10,11,11,9,10,10,11,10,11,11,12,12,9,10,10,10,10,11,11,12,12,1,4,4,6,6,8,8,9,9,10,11,13,14,4,6,5,8,8,9,9,10,10,11,11,14,14,4,6,6,8,8,9,9,10,10,11,11,14,14,6,8,8,9,9,10,10,11,11,12,12,15,15,6,8,8,9,9,10,11,11,11,12,12,15,15,8,9,9,11,10,11,11,12,12,13,13,15,16,8,9,9,10,11,11,11,12,12,13,13,16,16,10,10,11,11,11,12,12,13,13,13,14,17,16,9,10,11,12,11,12,12,13,13,13,13,16,18,11,12,11,12,12,13,13,13,14,15,14,17,17,11,11,12,12,12,13,13,13,14,14,15,18,17,14,15,15,15,15,16,16,17,17,19,18,0,20,14,15,14,15,15,16,16,16,17,18,16,20,18,2,4,4,5,5,4,5,5,6,5,4,5,5,5,6,5,6,5,6,6,5,5,6,6,6,1,3,3,10,10,10,10,10,10,4,10,10,10,10,10,10,10,10,4,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,1,4,4,6,6,7,6,8,7,9,8,10,9,11,11,4,7,7,8,7,9,9,10,10,11,11,11,11,12,12,4,7,7,7,7,9,9,10,10,11,11,12,12,12,11,6,8,8,9,9,10,10,11,11,12,12,13,12,13,13,6,8,8,9,9,10,11,11,11,12,12,13,14,13,13,8,9,9,11,11,12,12,12,13,14,13,14,14,14,15,8,9,9,11,11,11,12,13,14,13,14,15,17,14,15,9,10,10,12,12,13,13,13,14,15,15,15,16,16,16,9,11,11,12,12,13,13,14,14,14,15,16,16,16,16,10,12,12,13,13,14,14,15,15,15,16,17,17,17,17,10,12,11,13,13,15,14,15,14,16,17,16,16,16,16,11,13,12,14,14,14,14,15,16,17,16,17,17,17,17,11,13,12,14,14,14,15,17,16,17,17,17,17,17,17,12,13,13,15,16,15,16,17,17,16,16,17,17,17,17,12,13,13,15,15,15,16,17,17,17,16,17,16,17,17,2,5,5,7,6,7,7,8,8,8,8,9,9,9,9,9,9,5,6,6,7,7,8,8,8,8,9,9,9,9,9,9,10,10,5,6,6,7,7,8,8,8,8,9,8,9,9,9,9,10,9,7,7,7,8,8,8,8,9,9,9,9,9,9,10,10,10,10,7,7,7,8,8,8,8,9,9,9,9,10,9,10,10,10,10,7,8,8,8,8,9,9,9,9,9,9,10,10,10,10,10,10,7,8,8,9,8,9,9,9,9,10,9,10,10,10,10,10,10,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,8,9,8,9,9,9,9,10,9,10,10,10,10,10,10,10,10,9,9,9,9,9,9,10,9,10,10,10,10,10,10,10,10,10,9,9,9,9,9,10,9,10,10,10,10,10,10,10,10,10,10,9,9,9,10,9,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,11,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,10,10,10,10,10,10,10,10,10,10,10,11,11,11,10,11,6,9,13,12,14,11,10,13,8,4,5,7,8,7,8,12,11,4,3,5,5,7,9,14,11,6,5,6,6,6,7,13,13,7,5,6,4,5,7,14,11,7,6,6,5,5,6,13,9,7,8,6,7,5,3,9,9,12,13,12,14,10,6,7,14,17,15,17,16,14,13,16,10,7,7,10,13,10,15,16,9,4,4,6,5,7,9,16,12,8,7,8,8,8,11,16,14,7,4,6,3,5,8,15,13,8,5,7,4,5,7,16,12,9,6,8,3,3,5,16,14,13,7,10,5,5,7,15,1,4,4,5,8,7,5,7,8,5,8,8,8,10,11,8,10,11,5,8,8,8,11,10,8,11,11,4,8,8,8,11,11,8,11,11,8,11,11,11,13,14,11,15,14,8,11,11,10,13,12,11,14,14,4,8,8,8,11,11,8,11,11,7,11,11,11,15,14,10,12,14,8,11,11,11,14,14,11,14,13,2,5,5,5,6,6,5,6,6,5,6,6,7,8,8,6,8,8,5,6,6,6,8,8,7,8,8,5,7,6,6,8,8,6,8,8,6,8,8,8,9,10,8,10,10,6,8,8,8,10,8,8,10,10,5,6,6,6,8,8,6,8,8,6,8,8,8,10,10,8,8,10,6,8,8,8,10,10,8,10,9,2,4,4,8,8,5,7,7,9,9,5,7,7,9,9,8,10,9,12,12,8,9,10,12,12,5,7,7,10,10,7,9,9,11,11,7,9,9,11,11,10,12,11,14,14,9,10,11,13,14,5,7,7,10,10,7,9,9,11,11,7,9,9,11,11,9,11,10,14,13,10,11,11,14,14,8,10,10,14,13,10,12,12,15,14,9,11,11,15,14,13,14,14,17,17,12,14,14,16,16,8,10,10,14,14,9,11,11,14,15,10,12,12,14,15,12,14,13,16,16,13,14,15,15,18,4,7,7,10,10,7,9,9,12,11,7,9,9,11,12,10,12,11,15,14,10,11,12,14,15,7,9,9,12,12,9,11,12,13,13,9,11,12,13,13,12,13,13,15,16,11,13,13,15,16,7,9,9,12,12,9,11,10,13,12,9,11,12,13,14,11,13,12,16,14,12,13,13,15,16,10,12,12,16,15,11,13,13,17,16,11,13,13,17,16,14,15,15,17,17,14,16,16,18,20,9,11,11,15,16,11,13,12,16,16,11,13,13,16,17,14,15,14,18,16,14,16,16,17,20,5,7,7,10,10,7,9,9,12,11,7,9,10,11,12,10,12,11,15,15,10,12,12,14,14,7,9,9,12,12,9,12,11,14,13,9,10,11,12,13,12,13,14,16,16,11,12,13,14,16,7,9,9,12,12,9,12,11,13,13,9,12,11,13,13,11,13,13,16,16,12,13,13,16,15,9,11,11,16,14,11,13,13,16,16,11,12,13,16,16,14,16,16,17,17,13,14,15,16,17,10,12,12,15,15,11,13,13,16,17,11,13,13,16,16,14,16,15,19,19,14,15,15,17,18,8,10,10,14,14,10,12,12,15,15,10,12,12,16,16,14,16,15,20,19,13,15,15,17,16,9,12,12,16,16,11,13,13,16,18,11,14,13,16,17,16,17,16,20,0,15,16,18,18,20,9,11,11,15,15,11,14,12,17,16,11,13,13,17,17,15,17,15,20,20,14,16,16,17,0,13,15,14,18,16,14,15,16,0,18,14,16,16,0,0,18,16,0,0,20,16,18,18,0,0,12,14,14,17,18,13,15,14,20,18,14,16,15,19,19,16,20,16,0,18,16,19,17,19,0,8,10,10,14,14,10,12,12,16,15,10,12,12,16,16,13,15,15,18,17,14,16,16,19,0,9,11,11,16,15,11,14,13,18,17,11,12,13,17,18,14,17,16,18,18,15,16,17,18,18,9,12,12,16,16,11,13,13,16,18,11,14,13,17,17,15,16,16,18,20,16,17,17,20,20,12,14,14,18,17,14,16,16,0,19,13,14,15,18,0,16,0,0,0,0,16,16,0,19,20,13,15,14,0,0,14,16,16,18,19,14,16,15,0,20,16,20,18,0,20,17,20,17,0,0,4,5,5,8,8,5,7,6,9,9,5,6,7,9,9,9,9,9,11,11,8,9,9,11,11,5,7,7,9,9,7,8,8,10,10,7,7,8,10,10,9,10,10,11,12,9,10,10,11,12,5,7,7,9,9,7,8,7,10,10,7,8,8,10,10,9,10,10,12,11,9,10,10,12,11,9,10,9,12,12,9,10,10,13,12,9,10,10,12,12,12,12,12,14,14,11,12,12,13,14,9,9,10,12,12,9,10,10,13,13,9,10,10,12,13,11,12,12,14,13,11,12,12,14,14,5,7,7,9,9,7,8,8,10,10,7,8,8,10,10,10,10,10,12,12,9,10,10,12,12,7,8,8,11,10,8,8,9,11,11,8,9,9,11,11,11,11,11,12,13,10,11,11,13,13,6,8,8,10,10,7,9,8,11,10,8,9,9,11,11,10,11,10,13,11,10,11,11,13,13,9,11,10,13,12,10,11,11,13,14,10,11,11,14,13,12,12,13,12,15,12,13,13,15,15,9,10,10,12,13,10,11,10,13,12,10,11,11,13,14,12,13,11,15,13,13,13,13,15,15,5,7,7,9,9,7,8,8,10,10,7,8,8,10,10,9,10,10,12,12,10,10,11,12,13,6,8,8,10,10,8,9,9,11,11,7,8,9,10,11,10,11,11,13,13,10,10,11,11,13,7,8,8,10,11,8,9,9,11,11,8,9,8,11,11,10,11,11,13,13,11,12,11,13,12,9,10,10,13,12,10,11,11,14,13,10,10,11,12,13,12,13,13,15,15,12,11,13,13,14,9,10,11,12,13,10,11,11,13,14,10,11,11,13,13,12,13,13,15,15,12,13,12,15,12,8,9,9,12,12,9,11,10,13,13,9,10,10,13,13,12,13,13,15,15,12,12,12,14,14,9,10,10,13,13,10,11,11,13,14,10,11,11,14,13,13,13,14,14,16,13,13,13,15,15,9,10,10,13,13,10,11,10,14,13,10,11,11,13,14,12,14,13,16,14,12,13,13,14,15,11,12,12,15,14,11,12,13,14,15,12,13,13,16,15,14,12,15,12,16,14,15,15,16,16,11,12,12,14,14,11,13,12,15,14,12,13,13,15,16,13,15,13,17,13,14,15,15,16,17,8,9,9,12,12,9,10,10,12,13,9,10,10,13,13,12,12,12,14,14,12,13,13,15,15,9,10,10,13,12,10,11,11,14,13,10,10,11,13,14,13,13,13,15,15,12,13,14,14,16,9,10,10,13,13,10,11,11,13,14,10,11,11,14,14,13,13,13,15,15,13,14,13,16,14,11,12,12,15,14,12,13,13,16,15,11,12,13,14,15,14,15,15,17,16,13,13,15,13,16,11,12,13,14,15,13,13,13,15,16,11,13,12,15,14,14,15,15,16,16,14,15,12,17,13,2,3,3,6,6,7,7,9,9,4,5,5,7,7,8,8,10,9,4,5,5,7,7,8,8,10,10,6,7,7,8,8,9,9,11,10,6,7,7,8,8,9,9,10,11,7,8,8,9,9,10,10,11,11,7,8,8,9,9,10,10,11,11,9,10,10,11,10,11,11,12,12,9,10,10,10,11,11,11,12,12,1,4,4,6,6,8,8,9,9,11,10,13,13,4,6,5,8,8,9,9,10,10,11,11,14,14,4,6,6,8,8,9,9,10,10,11,11,14,14,6,8,8,9,9,10,10,11,11,12,12,15,15,6,8,8,9,9,10,11,11,11,12,12,15,15,8,9,9,11,10,11,11,12,12,13,13,16,16,8,9,9,10,10,11,11,12,12,13,13,16,16,10,10,10,12,11,12,12,13,13,14,14,16,16,10,10,10,11,12,12,12,13,13,13,14,16,17,11,12,11,12,12,13,13,14,14,15,14,18,17,11,11,12,12,12,13,13,14,14,14,15,19,18,14,15,14,15,15,17,16,17,17,17,17,21,0,14,15,15,16,16,16,16,17,17,18,17,20,21,2,4,4,5,5,4,5,5,6,5,4,5,5,5,6,5,6,5,6,6,5,5,6,6,6,1,3,3,12,12,12,12,12,12,12,12,12,12,3,12,11,12,12,12,12,12,12,12,12,12,12,4,11,10,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,1,4,4,6,6,7,7,9,8,10,8,10,9,11,11,4,7,6,8,7,9,9,10,10,11,10,11,10,12,10,4,6,7,8,8,9,9,10,10,11,11,11,11,12,12,6,8,8,10,9,11,10,12,11,12,12,12,12,13,13,6,8,8,10,10,10,11,11,11,12,12,13,12,13,13,8,9,9,11,11,12,11,12,12,13,13,13,13,13,13,8,9,9,11,11,11,12,12,12,13,13,13,13,13,13,9,10,10,12,11,13,13,13,13,14,13,13,14,14,14,9,10,11,11,12,12,13,13,13,13,13,14,15,14,14,10,11,11,12,12,13,13,14,14,14,14,14,15,16,16,10,11,11,12,13,13,13,13,15,14,14,15,16,15,16,10,12,12,13,13,14,14,14,15,15,15,15,15,15,16,11,12,12,13,13,14,14,14,15,15,15,16,15,17,16,11,12,12,13,13,13,15,15,14,16,16,16,16,16,17,11,12,12,13,13,14,14,15,14,15,15,17,17,16,16,2,5,5,7,7,7,7,8,8,8,8,9,9,9,9,9,9,5,6,6,7,7,8,8,8,8,9,9,9,9,9,9,9,9,5,6,6,7,7,8,8,8,8,9,9,9,9,9,9,9,9,7,7,7,8,8,8,8,9,9,9,9,9,9,10,10,10,10,7,7,7,8,8,8,8,9,9,9,9,10,9,10,9,10,10,7,8,8,8,8,9,9,9,9,9,9,10,10,10,10,10,10,7,8,8,8,8,9,9,9,9,9,9,10,10,10,10,10,10,8,9,8,9,9,9,9,9,9,10,10,10,10,10,10,10,10,8,8,8,9,9,9,9,9,10,10,10,10,10,10,10,10,10,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,10,10,10,10,10,10,10,10,10,11,10,10,10,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,10,9,10,10,10,10,10,10,10,10,10,10,11,10,10,10,3,8,12,12,13,12,11,13,5,4,6,7,8,8,9,13,9,5,4,5,5,7,9,13,9,6,5,6,6,7,8,12,12,7,5,6,4,5,8,13,11,7,6,6,5,5,6,12,10,8,8,7,7,5,3,8,10,12,13,12,12,9,6,7,4,10,17,13,17,13,17,17,17,17,3,6,8,9,11,9,15,12,16,17,6,5,5,7,7,8,10,11,17,17,7,8,7,9,9,10,13,13,17,17,8,6,5,7,4,7,5,8,14,17,9,9,8,9,7,9,8,10,16,17,12,10,7,8,4,7,4,7,16,17,12,11,9,10,6,9,5,7,14,17,14,13,10,15,4,8,3,5,14,17,17,14,11,15,6,10,6,8,15,17,1,4,4,5,8,7,5,7,7,5,8,8,8,10,10,7,9,10,5,8,8,7,10,9,8,10,10,5,8,8,8,10,10,8,10,10,8,10,10,10,12,13,10,13,13,7,10,10,10,13,11,10,13,13,4,8,8,8,11,10,8,10,10,7,10,10,10,13,13,10,11,13,8,10,11,10,13,13,10,13,12,3,4,4,5,6,6,5,6,6,5,6,6,6,8,8,6,7,8,5,6,6,6,8,7,6,8,8,5,6,6,6,8,8,6,8,8,6,8,8,8,9,9,8,9,9,6,8,7,7,9,8,8,9,9,5,6,6,6,8,7,6,8,8,6,8,7,8,9,9,7,8,9,6,8,8,8,9,9,8,9,9,2,4,5,8,8,5,7,6,9,9,5,6,7,9,9,8,10,9,13,12,8,9,10,12,12,5,7,7,10,10,7,9,9,11,11,6,8,9,11,11,10,11,11,14,14,9,10,11,13,14,5,7,7,9,10,7,9,8,11,11,7,9,9,11,11,9,11,10,14,13,10,11,11,14,14,8,10,10,13,13,10,11,11,15,14,9,11,11,14,14,13,14,14,17,16,12,13,13,15,16,8,10,10,13,13,9,11,11,14,15,10,11,11,14,15,12,14,13,16,16,13,15,14,15,17,5,7,7,10,10,7,9,9,11,11,7,9,9,11,11,10,11,11,14,14,10,11,12,14,14,7,9,9,12,11,9,11,11,13,13,9,11,11,13,13,12,13,13,15,16,11,12,13,15,16,6,9,9,11,11,8,11,10,13,12,9,11,11,13,14,11,13,12,16,14,11,13,13,16,17,10,12,11,15,15,11,13,13,16,16,11,13,13,17,16,14,15,15,17,17,14,16,16,17,18,9,11,11,14,15,10,12,12,15,15,11,13,13,16,17,13,15,13,17,15,14,15,16,18,0,5,7,7,10,10,7,9,9,11,11,7,9,9,11,11,10,11,11,14,14,10,11,12,14,15,6,9,9,12,11,9,11,11,13,13,8,10,11,12,13,11,13,13,16,15,11,12,13,14,15,7,9,9,11,12,9,11,11,13,13,9,11,11,13,13,11,13,13,15,16,11,13,13,15,14,9,11,11,15,14,11,13,13,17,15,10,12,12,15,15,14,16,16,17,17,13,13,15,15,17,10,11,12,15,15,11,13,13,16,16,11,13,13,15,15,14,15,15,18,18,14,15,15,17,17,8,10,10,13,13,10,12,11,15,15,10,11,12,15,15,14,15,15,18,18,13,14,14,18,18,9,11,11,15,16,11,13,13,17,17,11,13,13,16,16,15,15,16,17,0,14,15,17,0,0,9,11,11,15,15,10,13,12,18,16,11,13,13,15,16,14,16,15,20,20,14,15,16,17,0,13,14,14,20,16,14,15,16,19,18,14,15,15,19,0,18,16,0,20,20,16,18,18,0,0,12,14,14,18,18,13,15,14,18,16,14,15,16,18,20,16,19,16,0,17,17,18,18,19,0,8,10,10,14,14,10,11,11,14,15,10,11,12,15,15,13,15,14,19,17,13,15,15,17,0,9,11,11,16,15,11,13,13,16,16,10,12,13,15,17,14,16,16,18,18,14,15,15,18,0,9,11,11,15,15,11,13,13,16,17,11,13,13,18,17,14,18,16,18,18,15,17,17,18,0,12,14,14,18,18,14,15,15,20,0,13,14,15,17,0,16,18,17,0,0,16,16,0,17,20,12,14,14,18,18,14,16,15,0,18,14,16,15,18,0,16,19,17,0,0,17,18,16,0,0,4,5,5,8,8,6,7,6,9,9,6,6,7,9,9,8,9,9,11,11,8,9,9,11,11,6,7,7,9,9,7,8,8,10,10,6,7,8,9,10,9,10,10,11,12,9,9,10,11,12,6,7,7,9,9,6,8,7,10,9,7,8,8,10,10,9,10,9,12,11,9,10,10,12,11,8,9,9,12,11,9,10,10,12,12,9,10,10,12,12,11,12,12,13,14,11,11,12,13,14,8,9,9,11,12,9,10,10,12,12,9,10,10,12,12,11,12,11,14,13,11,12,12,13,13,5,7,7,9,9,7,8,8,10,10,7,8,8,10,10,9,10,10,12,12,9,10,10,12,12,7,8,8,10,10,8,8,9,10,11,8,9,9,11,11,10,10,11,11,13,10,11,11,12,13,6,7,8,10,10,7,9,8,11,10,8,9,9,11,11,10,11,10,13,11,10,11,11,12,12,9,10,10,12,12,10,10,11,12,13,10,11,11,13,13,12,11,13,12,15,12,13,13,14,15,9,10,10,12,12,9,11,10,13,12,10,11,11,13,13,11,13,11,14,12,12,13,13,14,15,5,7,7,9,9,7,8,8,10,10,7,8,8,10,10,9,10,10,12,12,9,10,10,12,12,6,8,7,10,10,8,9,9,11,11,7,8,9,10,11,10,11,11,12,12,10,10,11,11,13,7,8,8,10,10,8,9,9,11,11,8,9,8,11,10,10,11,11,13,12,10,11,10,13,11,9,10,10,12,12,10,11,11,13,12,9,10,10,12,13,12,13,13,14,15,11,11,13,12,14,9,10,10,12,12,10,11,11,13,13,10,11,10,13,12,12,13,13,14,14,12,13,11,14,12,8,9,9,12,12,9,10,10,12,12,9,10,10,12,12,12,12,12,14,14,11,12,12,14,13,9,10,10,12,12,10,11,11,13,13,10,11,11,13,12,12,12,13,14,15,12,13,13,15,14,9,10,10,12,12,10,11,10,13,12,10,11,11,12,13,12,13,12,15,13,12,13,13,14,15,11,12,12,14,13,11,12,12,14,15,12,13,13,15,14,13,12,14,12,16,13,14,14,15,15,11,11,12,14,14,11,12,11,14,13,12,13,13,14,15,13,14,12,16,12,14,14,15,16,16,8,9,9,11,12,9,10,10,12,12,9,10,10,12,13,11,12,12,13,13,12,12,13,14,14,9,10,10,12,12,10,11,10,13,12,10,10,11,12,13,12,13,13,15,14,12,12,13,13,15,9,10,10,12,13,10,11,11,12,13,10,11,11,13,13,12,13,13,14,15,12,13,12,15,14,11,12,11,14,13,12,13,13,15,14,11,11,12,13,14,14,15,14,16,15,13,12,14,13,16,11,12,12,13,14,12,13,13,14,15,11,12,11,14,14,14,14,14,15,16,13,15,12,16,12,2,3,3,6,6,8,8,10,10,4,5,5,8,7,8,8,11,10,3,5,5,7,8,8,8,10,11,6,8,7,10,9,10,10,11,11,6,7,8,9,9,9,10,11,12,8,8,8,10,10,11,11,13,12,8,8,9,9,10,11,11,12,13,10,11,10,12,11,13,12,14,14,10,10,11,11,12,12,13,14,14,3,4,4,5,5,7,7,9,9,4,5,4,6,6,7,7,9,9,4,4,5,6,6,7,7,9,9,5,6,6,7,7,8,8,10,10,6,6,6,7,7,8,8,10,10,7,7,7,8,8,9,9,11,10,7,7,7,8,8,9,9,10,11,9,9,9,10,10,11,10,11,11,9,9,9,10,10,11,10,11,11,1,4,4,5,7,7,5,7,7,5,9,9,8,11,10,7,11,10,5,9,9,7,10,10,8,10,11,4,9,9,9,12,12,9,12,12,8,12,12,11,12,12,10,12,13,7,12,12,11,12,12,10,12,13,4,9,9,9,12,12,9,12,12,7,12,11,10,13,13,11,12,12,7,12,12,10,13,13,11,12,12,2,4,4,6,6,7,7,8,8,8,8,4,5,5,7,7,8,8,9,8,8,9,4,5,5,7,7,8,8,9,9,8,9,6,7,7,8,8,9,8,9,9,9,9,6,7,7,8,8,9,9,9,9,9,9,7,8,8,9,9,9,9,9,9,9,9,7,8,8,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,10,10,10,10,8,9,9,9,9,9,9,10,10,10,10,8,9,9,9,9,9,9,10,10,10,10,8,9,9,9,9,9,9,10,10,10,10,1,4,4,6,6,8,8,9,9,10,10,4,6,6,7,7,9,9,10,10,11,11,4,6,6,7,7,9,9,10,10,11,11,6,8,7,9,9,10,10,11,11,13,12,6,8,8,9,9,10,10,11,11,12,13,8,9,9,10,10,12,12,13,12,14,13,8,9,9,10,10,12,12,13,13,14,14,9,11,11,12,12,13,13,14,14,15,14,9,11,11,12,12,13,13,14,14,15,14,11,12,12,13,13,14,14,15,14,15,14,11,11,12,13,13,14,14,14,14,15,15,3,5,5,6,6,7,7,7,7,7,7,5,6,5,7,6,7,7,8,8,8,8,5,5,5,6,6,7,7,8,8,8,8,6,7,6,7,7,8,8,8,8,8,8,6,6,7,7,7,8,8,8,8,8,8,7,7,7,8,8,8,8,8,8,8,8,7,7,7,8,8,8,8,8,8,8,8,7,8,8,8,8,8,8,8,8,8,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,3,2,12,10,13,13,13,13,13,13,13,13,4,9,9,13,13,13,13,13,13,13,13,13,13,5,10,9,13,13,13,13,13,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,1,4,4,7,7,8,8,8,7,8,7,9,8,9,9,4,7,6,9,8,10,10,9,8,9,9,9,9,9,8,5,6,6,8,9,10,10,9,9,9,10,10,10,10,11,7,8,8,10,10,11,11,10,10,11,11,11,12,11,11,7,8,8,10,10,11,11,10,10,11,11,12,11,11,11,8,9,9,11,11,12,12,11,11,12,11,12,12,12,12,8,9,10,11,11,12,12,11,11,12,12,12,12,12,12,8,9,9,10,10,12,11,12,12,12,12,12,12,12,13,8,9,9,11,11,11,11,12,12,12,12,13,12,13,13,9,10,10,11,11,12,12,12,13,12,13,13,13,14,13,9,10,10,11,11,12,12,12,13,13,12,13,13,14,13,9,11,10,12,11,13,12,12,13,13,13,13,13,13,14,9,10,10,12,12,12,12,12,13,13,13,13,13,14,14,10,11,11,12,12,12,13,13,13,14,14,13,14,14,14,10,11,11,12,12,12,12,13,12,13,14,13,14,14,14,2,5,5,7,7,8,8,8,8,8,8,9,9,9,9,9,9,5,6,6,7,7,8,8,9,8,9,9,9,9,9,9,9,9,5,6,6,7,7,8,8,9,8,9,9,9,9,9,9,9,9,7,7,7,8,8,9,8,9,9,9,9,9,9,9,9,9,9,7,7,7,8,8,9,8,9,9,9,9,9,9,9,9,9,9,8,8,8,8,9,9,9,9,9,9,9,9,10,9,10,10,10,8,8,8,9,8,9,9,9,9,9,9,9,10,9,10,9,10,8,9,9,9,9,9,9,9,9,9,10,9,10,10,10,10,10,8,9,9,9,9,9,9,10,9,10,9,10,10,10,10,10,10,9,9,9,9,9,10,9,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,10,9,10,9,10,10,10,10,10,10,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,10,10,9,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,10,9,10,10,10,10,10,10,10,10,10,10,10,10,3,8,13,12,14,12,16,11,13,14,5,4,5,6,7,8,10,9,12,15,10,5,5,5,6,8,9,9,13,15,10,5,5,6,6,7,8,8,11,13,12,7,5,6,4,6,7,7,11,14,11,7,7,6,6,6,7,6,10,14,14,9,8,8,6,7,7,7,11,16,11,8,8,7,6,6,7,4,7,12,10,10,12,10,10,9,10,5,6,9,10,12,15,13,14,14,14,8,7,8,4,11,16,13,17,13,17,16,17,17,4,7,9,9,13,10,16,12,16,17,7,6,5,7,8,9,12,12,16,17,6,9,7,9,10,10,15,15,17,17,6,7,5,7,5,7,7,10,16,17,7,9,8,9,8,10,11,11,15,17,7,7,7,8,5,8,8,9,15,17,8,7,9,9,7,8,7,2,7,15,14,13,13,15,5,10,4,3,6,17,17,15,13,17,7,11,7,6,9,16,1,4,4,4,8,7,5,7,7,5,8,8,8,10,10,7,9,10,5,8,8,7,10,9,8,10,10,5,8,8,8,10,10,8,10,10,8,10,10,10,12,13,10,13,13,7,10,10,10,13,11,10,13,13,5,8,8,8,11,10,8,10,10,7,10,10,10,13,13,10,11,13,8,10,11,10,13,13,10,13,12,3,4,4,5,6,6,5,6,6,5,6,6,6,8,8,6,7,8,5,6,6,6,8,7,6,8,8,5,6,6,6,8,8,6,8,8,6,8,8,8,9,9,8,9,9,6,7,7,7,9,8,8,9,9,5,6,6,6,8,7,6,8,8,6,8,8,8,9,9,7,8,9,6,8,8,8,9,9,8,9,9,2,5,4,8,8,5,7,6,9,9,5,6,7,9,9,8,9,9,13,12,8,9,10,12,13,5,7,7,10,9,7,9,9,11,11,7,8,9,11,11,10,11,11,14,14,9,10,11,13,14,5,7,7,9,10,6,9,8,11,11,7,9,9,11,11,9,11,10,14,13,10,11,11,14,13,8,10,10,13,13,10,11,11,15,15,9,11,11,14,14,13,14,14,17,16,12,13,14,16,16,8,10,10,13,14,9,11,11,14,15,10,11,12,14,15,12,14,13,16,15,13,14,14,15,17,5,7,7,10,10,7,9,9,11,11,7,9,9,11,11,10,12,11,14,14,10,11,11,14,14,7,9,9,12,11,9,11,11,13,13,9,11,11,13,13,11,13,13,14,15,11,12,13,15,16,6,9,9,11,12,8,11,10,13,12,9,11,11,13,14,11,13,12,16,14,11,13,13,15,16,10,12,11,14,15,11,13,13,15,17,11,13,13,17,16,15,15,16,17,16,14,15,16,18,0,9,11,11,14,15,10,12,12,16,15,11,13,13,16,16,13,15,14,18,15,14,16,16,0,0,5,7,7,10,10,7,9,9,11,11,7,9,9,11,11,10,11,11,14,14,10,11,12,14,14,6,9,9,11,11,9,11,11,13,13,8,10,11,12,13,11,13,13,16,15,11,12,13,14,16,7,9,9,11,12,9,11,11,13,13,9,11,11,13,13,11,13,13,16,15,11,13,12,15,15,9,11,11,15,14,11,13,13,17,16,10,12,13,15,16,14,16,16,0,18,14,14,15,15,17,10,11,12,15,15,11,13,13,16,16,11,13,13,16,16,14,16,16,19,17,14,15,15,17,17,8,10,10,14,14,10,12,11,15,15,10,11,12,16,15,14,15,15,18,20,13,14,16,17,18,9,11,11,15,16,11,13,13,17,17,11,13,13,17,16,15,16,16,0,0,15,16,16,0,0,9,11,11,15,15,10,13,12,17,15,11,13,13,17,16,15,17,15,20,19,15,16,16,19,0,13,15,14,0,17,14,15,16,0,20,15,16,16,0,19,17,18,0,0,0,16,17,18,0,0,12,14,14,19,18,13,15,14,0,17,14,15,16,19,19,16,18,16,0,19,19,20,17,20,0,8,10,10,13,14,10,11,11,15,15,10,12,12,15,16,14,15,14,19,16,14,15,15,0,18,9,11,11,16,15,11,13,13,0,16,11,12,13,16,17,14,16,17,0,19,15,16,16,18,0,9,11,11,15,16,11,13,13,16,16,11,14,13,18,17,15,16,16,18,20,15,17,19,0,0,12,14,14,17,17,14,16,15,0,0,13,14,15,19,0,16,18,20,0,0,16,16,18,18,0,12,14,14,17,20,14,16,16,19,0,14,16,14,0,20,16,20,17,0,0,17,0,15,0,19,4,5,5,8,8,6,7,6,9,9,6,6,7,9,9,8,9,9,11,11,8,9,9,11,11,6,7,7,9,9,7,8,8,10,10,7,7,8,9,10,9,10,10,11,11,9,9,10,11,12,6,7,7,9,9,7,8,7,10,9,7,8,8,10,10,9,10,9,12,11,9,10,10,12,11,8,9,9,11,11,9,10,10,12,12,9,10,10,12,12,11,12,12,14,13,11,11,12,13,13,8,9,9,11,11,9,10,10,12,12,9,10,10,12,12,11,12,11,13,12,11,12,12,13,13,5,7,7,9,9,7,8,7,10,10,7,7,8,10,10,9,10,10,12,11,9,10,10,11,12,7,8,8,10,10,8,8,9,11,11,8,9,9,11,11,10,10,11,12,13,10,10,11,12,12,6,7,7,10,10,7,9,8,11,10,8,8,9,10,11,10,11,10,13,11,10,11,11,12,12,9,10,10,12,12,10,10,11,13,13,10,11,11,12,13,12,12,12,13,14,12,12,13,14,14,9,10,10,12,12,9,10,10,13,12,10,11,11,13,13,11,12,11,14,12,12,13,13,14,14,6,7,7,9,9,7,8,7,10,10,7,8,8,10,10,9,10,10,12,11,9,10,10,11,12,6,7,7,10,10,8,9,8,11,10,7,8,9,10,11,10,11,11,12,12,10,10,11,11,13,7,8,8,10,10,8,9,9,11,11,8,9,8,11,11,10,11,10,13,12,10,11,11,13,12,9,10,10,12,12,10,11,11,13,12,9,10,10,12,13,12,13,12,14,14,11,11,12,12,14,9,10,10,12,12,10,11,11,13,13,10,11,10,13,12,12,12,12,14,14,12,13,12,14,13,8,9,9,11,11,9,10,10,12,12,9,10,10,12,12,11,12,12,14,13,11,12,12,13,14,9,10,10,12,12,10,11,11,13,13,10,11,11,13,13,12,12,13,14,15,12,12,13,14,14,9,10,10,12,12,9,11,10,13,12,10,10,11,12,13,12,13,12,14,13,12,12,13,14,15,11,12,12,14,13,11,12,12,14,14,12,13,13,14,14,13,13,14,14,16,13,14,14,15,15,11,12,11,13,13,11,12,11,14,13,12,12,13,14,15,12,14,12,15,12,13,14,15,15,16,8,9,9,11,11,9,10,10,12,12,9,10,10,12,12,11,12,12,14,13,11,12,12,13,13,9,10,10,12,12,10,11,10,13,12,9,10,11,12,13,12,13,12,14,14,12,12,13,13,14,9,10,10,12,12,10,11,11,13,13,10,11,11,13,13,12,13,12,14,14,12,13,13,14,14,11,11,11,13,13,12,13,12,14,14,11,11,12,13,14,14,14,14,16,15,12,12,14,12,15,11,12,12,13,14,12,13,13,14,15,11,12,12,14,14,13,14,14,16,16,13,14,13,16,13,2,3,3,6,6,8,8,10,10,4,5,5,8,7,8,8,11,11,3,5,5,7,8,8,8,11,11,6,8,7,9,9,10,9,12,11,6,7,8,9,9,9,10,11,12,8,8,8,10,9,12,11,13,13,8,8,9,9,10,11,12,13,13,10,11,11,12,12,13,13,14,14,10,10,11,11,12,13,13,14,14,3,4,4,5,5,7,7,9,9,4,5,4,6,6,7,7,9,9,4,4,5,6,6,7,8,9,9,5,6,6,7,7,8,8,10,10,5,6,6,7,7,8,8,10,10,7,8,7,8,8,10,9,11,11,7,7,8,8,8,9,10,10,11,9,9,9,10,10,11,11,12,11,9,9,9,10,10,11,11,11,12,1,4,4,5,7,7,5,7,7,5,9,8,7,10,10,8,10,10,5,8,9,7,10,10,7,10,9,4,8,8,9,11,11,8,11,11,7,11,11,10,10,13,10,13,13,7,11,11,10,13,12,10,13,13,5,9,8,8,11,11,9,11,11,7,11,11,10,13,13,10,12,13,7,11,11,10,13,13,9,13,10,3,4,4,6,6,7,7,8,8,8,8,4,5,5,7,6,8,8,8,8,8,8,4,5,5,6,7,8,8,8,8,8,8,6,7,7,7,7,8,8,8,8,8,8,6,7,7,7,7,8,8,8,8,8,8,7,8,8,8,8,8,8,9,9,9,9,7,8,8,8,8,8,8,9,9,9,9,8,8,8,8,8,9,9,9,9,9,9,8,8,8,8,8,9,9,9,9,9,9,8,8,8,8,8,9,9,9,9,9,9,8,8,8,8,8,9,9,9,9,9,9,1,4,4,6,6,8,8,9,9,10,10,4,6,6,7,7,9,9,10,10,11,11,4,6,6,7,7,9,9,10,10,11,11,6,8,8,9,9,10,10,11,11,12,12,6,8,8,9,9,10,10,11,11,12,12,8,9,9,10,10,11,11,12,12,13,13,8,9,9,10,10,11,11,12,12,13,13,10,10,10,11,11,13,13,13,13,15,14,9,10,10,12,11,12,13,13,13,14,15,11,12,12,13,13,13,13,15,14,15,15,11,11,12,13,13,14,14,14,15,15,15,3,5,5,6,6,7,7,7,7,7,7,5,6,5,7,7,7,7,8,7,8,8,5,5,6,6,7,7,7,7,7,8,8,6,7,7,7,7,8,7,8,8,8,8,6,6,7,7,7,7,8,8,8,8,8,7,7,7,8,8,8,8,8,8,8,8,7,7,7,7,8,8,8,8,8,8,8,7,7,7,8,8,8,8,8,8,8,8,7,8,8,8,8,8,8,8,8,8,8,7,8,8,8,8,8,8,8,8,8,8,7,8,8,8,8,8,8,8,8,8,8,1,3,2,9,8,15,15,15,15,15,15,15,15,15,15,4,8,9,13,14,14,14,14,14,14,14,14,14,14,14,5,8,9,14,14,14,14,14,14,14,14,14,14,14,14,11,14,14,14,14,14,14,14,14,14,14,14,14,14,14,11,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,4,4,7,7,8,9,8,8,9,8,9,8,9,9,4,7,6,8,8,9,9,9,9,9,9,9,9,9,9,4,7,6,9,9,10,10,9,9,10,10,10,10,11,11,7,9,8,10,10,11,11,10,10,11,11,11,11,11,11,7,8,9,10,10,11,11,10,10,11,11,11,11,11,12,8,10,10,11,11,12,12,11,11,12,12,12,12,13,12,8,10,10,11,11,12,11,11,11,11,12,12,12,12,13,8,9,9,11,10,11,11,12,12,12,12,13,12,13,12,8,9,9,11,11,11,11,12,12,12,12,12,13,13,13,9,10,10,11,12,12,12,12,12,13,13,13,13,13,13,9,10,10,11,11,12,12,12,12,13,13,13,13,14,13,10,10,10,12,11,12,12,13,13,13,13,13,13,13,13,10,10,11,11,11,12,12,13,13,13,13,13,13,13,13,10,11,11,12,12,13,12,12,13,13,13,13,13,13,14,10,11,11,12,12,13,12,13,13,13,14,13,13,14,13,3,5,5,7,7,8,8,8,8,8,8,9,8,8,9,9,9,5,6,6,7,7,8,8,8,8,8,8,9,9,9,9,9,9,5,6,6,7,7,8,8,8,8,8,8,9,9,9,9,9,9,7,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,7,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,9,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,9,9,9,9,9,9,9,9,9,9,9,10,9,9,9,10,9,9,9,9,9,9,9,9,9,9,10,9,9,9,10,9,9,10,9,9,9,9,9,9,9,9,9,10,10,10,9,10,9,10,10,9,9,9,9,9,9,9,9,9,10,10,9,10,10,9,9,10,3,9,14,13,14,13,16,12,13,14,5,4,6,6,8,9,11,10,12,15,10,5,5,6,6,8,10,10,13,16,10,6,6,6,6,8,9,9,12,14,13,7,6,6,4,6,6,7,11,14,10,7,7,7,6,6,6,7,10,13,15,10,9,8,5,6,5,6,10,14,10,9,8,8,6,6,5,4,6,11,11,11,12,11,10,9,9,5,5,9,10,12,15,13,13,13,13,8,7,7,5,12,17,16,16,17,17,17,17,17,4,7,11,11,12,9,17,10,17,17,7,7,8,9,7,9,11,10,15,17,7,9,10,11,10,12,14,12,16,17,7,8,5,7,4,7,7,8,16,16,6,10,9,10,7,10,11,11,16,17,6,8,8,9,5,7,5,8,16,17,5,5,8,7,6,7,7,6,6,14,12,10,12,11,7,11,4,4,2,7,17,15,15,15,8,15,6,8,5,9,1,4,4,4,7,7,5,7,7,5,8,8,8,10,10,7,10,10,5,8,8,7,10,10,8,10,10,5,8,8,8,11,10,8,10,10,8,10,10,10,12,13,10,13,13,7,10,10,10,13,12,10,13,13,5,8,8,8,11,10,8,10,11,7,10,10,10,13,13,10,12,13,8,11,11,10,13,13,10,13,12,3,4,4,5,6,6,5,6,6,5,6,6,6,8,8,6,7,8,5,6,6,6,8,7,6,8,8,5,6,6,6,8,7,6,8,8,6,8,8,8,9,9,8,9,9,6,8,7,7,9,8,8,9,9,5,6,6,6,8,7,6,8,8,6,8,8,8,9,9,7,8,9,6,8,8,8,9,9,8,9,9,2,5,4,8,8,5,7,6,9,9,5,6,7,9,9,8,9,9,13,12,8,9,10,12,13,5,7,7,10,9,7,9,9,11,11,6,8,9,11,11,10,11,11,14,14,9,10,11,13,14,5,7,7,9,9,7,9,8,11,11,7,9,9,11,11,9,11,10,14,13,10,11,11,14,14,8,10,10,14,13,10,11,12,15,14,9,11,11,15,14,13,14,14,16,16,12,13,14,17,16,8,10,10,13,13,9,11,11,14,15,10,11,12,14,15,12,14,13,16,16,13,14,15,15,17,5,7,7,10,10,7,9,9,11,11,7,9,9,11,11,10,12,11,15,14,10,11,12,14,14,7,9,9,12,12,9,11,11,13,13,9,11,11,13,13,11,13,13,14,17,11,13,13,15,16,6,9,9,11,11,8,11,10,13,12,9,11,11,13,13,11,13,12,16,14,11,13,13,16,16,10,12,12,15,15,11,13,13,16,16,11,13,13,16,15,14,16,17,17,19,14,16,16,18,0,9,11,11,14,15,10,13,12,16,15,11,13,13,16,16,14,15,14,0,16,14,16,16,18,0,5,7,7,10,10,7,9,9,12,11,7,9,9,11,12,10,11,11,15,14,10,11,12,14,14,6,9,9,11,11,9,11,11,13,13,8,10,11,12,13,11,13,13,17,15,11,12,13,14,15,7,9,9,11,12,9,11,11,13,13,9,11,11,13,13,11,13,12,16,16,11,13,13,15,14,9,11,11,14,15,11,13,13,16,15,10,12,13,16,16,15,16,16,0,0,14,13,15,16,18,10,11,11,15,15,11,13,14,16,18,11,13,13,16,15,15,16,16,19,0,14,15,15,16,16,8,10,10,13,13,10,12,11,16,15,10,11,11,16,15,13,15,16,18,0,13,14,15,17,17,9,11,11,15,15,11,13,13,16,18,11,13,13,16,17,15,16,16,0,0,15,18,16,0,17,9,11,11,15,15,11,13,12,17,15,11,13,14,16,17,15,18,15,0,17,15,16,16,18,19,13,15,14,0,18,14,16,16,19,18,14,16,15,19,19,16,18,19,0,0,16,17,0,0,0,12,14,14,17,17,13,16,14,0,18,14,16,15,18,0,16,18,16,19,17,18,19,17,0,0,8,10,10,14,14,9,12,11,15,15,10,11,12,15,17,13,15,15,18,16,14,16,15,18,17,9,11,11,16,15,11,13,13,0,16,11,12,13,16,15,15,16,16,0,17,15,15,16,18,17,9,12,11,15,17,11,13,13,16,16,11,14,13,16,16,15], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+474356);
/* memory initializer */ allocate([15,16,18,19,16,18,16,0,0,12,14,14,0,16,14,16,16,0,18,13,14,15,16,0,17,16,18,0,0,16,16,17,19,0,13,14,14,17,0,14,17,16,0,19,14,15,15,18,19,17,16,18,0,0,15,19,16,0,0,4,5,5,8,8,6,7,6,9,9,6,6,7,9,9,8,9,9,11,11,8,9,9,10,11,6,7,7,9,9,7,8,8,10,10,6,7,8,9,10,9,10,10,12,12,9,9,10,11,12,6,7,7,9,9,6,8,7,10,9,7,8,8,10,10,9,10,9,12,11,9,10,10,12,11,8,9,9,11,11,9,10,10,12,12,9,10,10,12,12,11,12,12,13,14,11,11,12,13,13,8,9,9,11,11,9,10,10,12,11,9,10,10,12,12,11,12,11,13,13,11,12,12,13,13,6,7,7,9,9,7,8,7,10,10,7,7,8,10,10,9,10,10,12,11,9,10,10,12,12,7,8,8,10,10,8,8,9,11,11,8,9,9,11,11,10,11,11,12,12,10,10,11,12,13,6,7,7,10,10,7,9,8,11,10,8,8,9,10,11,10,11,10,13,11,10,11,11,12,12,9,10,10,12,12,10,10,11,13,13,10,11,11,13,12,12,12,13,13,14,12,12,13,14,14,9,10,10,12,12,9,10,10,12,12,10,11,11,13,13,11,12,11,14,12,12,13,13,14,14,6,7,7,9,9,7,8,7,10,10,7,7,8,10,10,9,10,10,12,11,9,10,10,11,12,6,7,7,10,10,8,9,8,11,10,7,8,9,10,11,10,11,11,13,12,10,10,11,11,13,7,8,8,10,10,8,9,9,11,11,8,9,9,11,11,10,11,10,13,12,10,11,11,12,12,9,10,10,12,12,10,11,11,13,12,9,10,10,12,13,12,13,12,14,14,11,11,12,12,14,9,10,10,12,12,10,11,11,13,13,10,11,11,13,13,12,13,12,14,14,12,13,12,14,13,8,9,9,11,11,9,10,10,12,12,9,10,10,12,12,11,12,12,14,13,11,12,12,13,13,9,10,10,12,12,10,11,11,13,13,10,11,11,13,12,12,13,13,14,14,12,12,13,14,14,9,10,10,12,12,9,11,10,13,12,10,10,11,12,13,11,13,12,14,13,12,12,13,14,14,11,12,12,13,13,11,12,13,14,14,12,13,13,14,14,13,13,14,14,16,13,14,14,16,16,11,11,11,13,13,11,12,11,14,13,12,12,13,14,15,13,14,12,16,13,14,14,14,15,16,8,9,9,11,11,9,10,10,12,12,9,10,10,12,12,11,12,12,14,13,11,12,12,13,14,9,10,10,12,12,10,11,10,13,12,9,10,11,12,13,12,13,12,14,14,12,12,13,13,14,9,10,10,12,12,10,11,11,12,13,10,11,11,13,13,12,13,12,14,14,12,13,13,14,14,11,12,12,13,13,12,13,12,14,14,11,11,12,13,14,13,15,14,16,15,13,12,14,13,16,11,12,12,13,13,12,13,13,14,14,12,12,12,14,14,13,14,14,15,15,13,14,13,16,14,2,3,3,6,6,7,8,10,10,4,5,5,8,7,8,8,11,11,3,5,5,7,7,8,9,11,11,6,8,7,9,9,10,10,12,12,6,7,8,9,10,10,10,12,12,8,8,8,10,10,12,11,13,13,8,8,9,10,10,11,11,13,13,10,11,11,12,12,13,13,14,14,10,11,11,12,12,13,13,14,14,3,4,4,5,5,7,7,9,9,4,5,4,6,6,8,7,9,9,4,4,5,6,6,7,7,9,9,5,6,6,7,7,8,8,10,10,5,6,6,7,7,8,8,10,10,7,8,7,8,8,10,9,11,11,7,7,8,8,8,9,10,11,11,9,9,9,10,10,11,10,12,11,9,9,9,10,10,11,11,11,12,1,4,4,5,7,7,5,7,7,5,9,8,8,9,9,7,10,10,5,8,9,7,9,10,8,9,9,4,9,9,9,11,10,8,10,10,7,11,10,10,10,12,10,12,12,7,10,10,10,12,11,10,12,12,5,9,9,8,10,10,9,11,11,7,11,10,10,12,12,10,11,12,7,10,11,10,12,12,10,12,10,3,4,4,6,6,7,7,8,8,8,8,4,5,5,6,6,8,7,8,8,8,8,4,5,5,6,6,7,8,8,8,8,8,6,7,6,7,7,8,8,9,9,9,9,6,6,7,7,7,8,8,9,9,9,9,7,8,7,8,8,9,9,9,9,9,9,7,7,8,8,8,9,9,9,9,9,9,8,8,8,9,9,9,9,10,9,9,9,8,8,8,9,9,9,9,9,9,9,10,8,8,8,9,9,9,9,10,9,10,10,8,8,8,9,9,9,9,9,10,10,10,1,4,4,6,6,8,8,10,10,11,11,4,6,6,7,7,9,9,11,10,12,12,5,6,5,7,7,9,9,10,11,12,12,6,7,7,8,8,10,10,11,11,13,13,6,7,7,8,8,10,10,11,12,13,13,8,9,9,10,10,11,11,12,12,14,14,8,9,9,10,10,11,11,12,12,14,14,10,10,10,11,11,13,12,14,14,15,15,10,10,10,12,12,13,13,14,14,15,15,11,12,12,13,13,14,14,15,14,16,15,11,12,12,13,13,14,14,15,15,15,16,4,5,5,6,6,7,7,7,7,7,7,5,6,6,7,7,7,7,7,7,7,7,5,6,6,6,7,7,7,7,7,7,7,6,7,7,7,7,7,7,7,7,8,8,6,7,7,7,7,7,7,7,7,8,8,7,7,7,7,7,8,7,8,8,8,8,7,7,7,7,7,7,8,8,8,8,8,7,7,7,7,7,8,8,8,8,8,8,7,7,7,7,7,8,8,8,8,8,8,7,7,7,8,8,8,8,8,8,8,8,7,7,7,8,8,8,8,8,8,8,8,1,3,3,10,10,10,10,10,10,10,10,4,10,10,10,10,10,10,10,10,10,10,4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,1,4,4,6,5,8,6,9,8,10,9,11,10,4,6,6,8,8,9,9,11,10,11,11,11,11,4,6,6,8,8,10,9,11,11,11,11,11,12,6,8,8,10,10,11,11,12,12,13,12,13,13,6,8,8,10,10,11,11,12,12,12,13,14,13,8,10,10,11,11,12,13,14,14,14,14,15,15,8,10,10,11,12,12,13,13,14,14,14,14,15,9,11,11,13,13,14,14,15,14,16,15,17,15,9,11,11,12,13,14,14,15,14,15,15,15,16,10,12,12,13,14,15,15,15,15,16,17,16,17,10,13,12,13,14,14,16,16,16,16,15,16,17,11,13,13,14,15,14,17,15,16,17,17,17,17,11,13,13,14,15,15,15,15,17,17,16,17,16,2,4,4,4,4,5,5,5,5,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,3,9,14,13,15,14,16,13,13,14,5,5,7,7,8,9,11,10,12,15,10,6,5,6,6,9,10,10,13,16,10,6,6,6,6,8,9,9,12,15,14,7,6,6,5,6,6,8,12,15,10,8,7,7,6,7,7,7,11,13,14,10,9,8,5,6,4,5,9,12,10,9,9,8,6,6,5,3,6,11,12,11,12,12,10,9,8,5,5,8,10,11,15,13,13,13,12,8,6,7,6,14,18,18,17,17,17,17,17,17,4,7,9,9,10,13,15,17,17,17,6,7,5,6,8,11,16,17,16,17,5,7,5,4,6,10,14,17,17,17,6,6,6,5,7,10,13,16,17,17,7,6,7,7,7,8,7,10,15,16,12,9,9,6,6,5,3,5,11,15,14,14,13,5,5,7,3,4,8,15,17,17,13,7,7,10,6,6,10,15,17,17,16,10,11,14,10,10,15,17,1,5,5,5,7,7,5,7,7,5,7,7,8,9,9,7,9,9,5,7,7,7,9,9,8,9,9,5,7,7,7,9,9,7,9,9,7,9,9,9,10,11,9,11,10,7,9,9,9,11,10,9,10,11,5,7,7,7,9,9,7,9,9,7,9,9,9,11,10,9,10,10,8,9,9,9,11,11,9,11,10,4,5,5,8,8,5,7,6,9,9,5,6,7,9,9,8,9,9,11,11,8,9,9,11,11,5,7,7,9,9,7,8,8,10,10,7,8,8,10,10,9,10,10,12,12,9,10,10,11,12,5,7,7,9,9,7,8,7,10,10,7,8,8,10,10,9,10,9,12,11,9,10,10,12,12,8,9,9,12,11,9,10,10,12,12,9,10,10,12,12,11,12,12,14,14,11,11,12,13,14,8,9,9,11,11,9,10,10,12,12,9,10,10,12,12,11,12,11,13,13,11,12,12,14,14,5,7,7,9,9,7,8,8,10,10,7,8,8,10,10,9,10,10,12,12,9,10,10,11,12,7,8,8,10,10,8,9,9,11,11,8,9,9,11,11,10,11,11,12,13,10,11,11,12,13,6,8,8,10,10,8,9,8,11,10,8,9,9,11,11,10,11,10,13,12,10,11,11,13,13,9,10,10,12,12,10,11,11,13,13,10,11,11,13,13,12,12,13,13,14,12,13,13,14,14,9,10,10,12,12,10,11,10,13,12,10,11,11,13,13,11,13,12,14,13,12,13,13,14,14,5,7,7,9,9,7,8,8,10,10,7,8,8,10,10,9,10,10,12,12,9,10,10,12,12,7,8,8,10,10,8,9,9,11,11,8,8,9,10,11,10,11,11,13,13,10,10,11,12,13,7,8,8,10,10,8,9,9,11,11,8,9,9,11,11,10,11,11,13,13,10,11,11,13,12,9,10,10,12,12,10,11,11,13,13,10,10,11,12,13,12,13,13,14,14,12,12,13,13,14,9,10,10,12,12,10,11,11,13,13,10,11,11,13,13,12,13,13,15,14,12,13,13,14,13,8,9,9,11,11,9,10,10,12,12,9,10,10,12,12,12,12,12,14,13,11,12,12,14,14,9,10,10,12,12,10,11,11,13,13,10,11,11,13,13,12,13,13,14,15,12,13,13,14,15,9,10,10,12,12,10,11,10,13,12,10,11,11,13,13,12,13,12,15,14,12,13,13,14,15,11,12,12,14,14,12,13,13,14,14,12,13,13,15,14,14,14,14,14,16,14,14,15,16,16,11,12,12,14,14,11,12,12,14,14,12,13,13,14,15,13,14,13,16,14,14,14,14,16,16,8,9,9,11,11,9,10,10,12,12,9,10,10,12,12,11,12,12,14,13,11,12,12,14,14,9,10,10,12,12,10,11,11,13,13,10,10,11,12,13,12,13,13,15,14,12,12,13,13,14,9,10,10,12,12,10,11,11,13,13,10,11,11,13,13,12,13,13,14,14,12,13,13,15,14,11,12,12,14,13,12,13,13,15,14,11,12,12,13,14,14,15,14,16,15,13,13,14,13,16,11,12,12,14,14,12,13,13,14,15,12,13,12,15,14,14,14,14,16,15,14,15,13,16,14,3,4,4,5,5,7,7,9,9,4,5,4,6,6,7,7,9,9,4,4,5,6,6,7,7,9,9,5,6,6,7,7,8,8,10,10,6,6,6,7,7,8,8,10,10,7,7,7,8,8,9,9,11,10,7,7,7,8,8,9,9,10,11,9,9,9,10,10,11,10,12,11,9,9,9,9,10,11,11,11,12,4,4,4,6,6,7,7,8,8,8,8,10,10,11,11,11,11,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,6,6,6,7,7,8,8,9,9,9,9,10,10,11,11,12,12,6,6,6,7,7,8,8,9,9,9,9,10,10,11,11,12,12,7,7,7,8,8,9,8,10,9,10,9,11,10,12,11,13,12,7,7,7,8,8,8,9,9,10,9,10,10,11,11,12,12,13,8,8,8,9,9,9,9,10,10,11,10,11,11,12,12,13,13,8,8,8,9,9,9,10,10,10,10,11,11,11,12,12,12,13,8,9,9,9,9,10,9,11,10,11,11,12,11,13,12,13,13,8,9,9,9,9,9,10,10,11,11,11,11,12,12,13,13,13,10,10,10,10,10,11,10,11,11,12,11,13,12,13,13,14,13,10,10,10,10,10,10,11,11,11,11,12,12,13,13,13,13,14,11,11,11,11,11,12,11,12,12,13,12,13,13,14,13,14,14,11,11,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,11,12,12,12,12,13,12,13,12,13,13,14,13,14,14,14,14,11,12,12,12,12,12,12,13,13,13,13,13,14,14,14,14,14,1,4,4,5,7,7,5,7,7,5,8,8,8,9,9,7,9,9,5,8,8,7,9,9,8,9,9,5,8,8,8,10,10,8,10,10,7,10,10,9,10,12,9,12,11,7,10,10,9,11,10,9,11,12,5,8,8,8,10,10,8,10,10,7,10,10,9,11,11,9,10,11,7,10,10,9,11,11,10,12,10,4,5,5,6,6,7,7,7,7,8,8,5,5,5,6,6,7,7,8,8,8,8,5,5,5,6,6,7,7,7,8,8,8,6,6,6,7,7,7,7,8,8,8,8,6,6,6,7,7,7,7,8,8,8,8,7,7,7,7,7,8,8,8,8,8,8,7,7,7,7,7,8,8,8,8,8,8,7,8,7,8,8,8,8,8,8,8,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,8,8,8,8,8,8,8,8,8,9,9,2,4,4,6,6,7,7,8,8,9,9,10,10,4,6,5,7,7,8,8,8,8,9,9,10,10,4,6,6,7,7,8,8,8,8,9,9,10,10,6,7,7,7,8,8,8,8,9,9,10,10,10,6,7,7,8,8,8,8,9,8,10,9,11,10,7,8,8,8,8,8,9,9,9,10,10,11,11,7,8,8,8,8,9,8,9,9,10,10,11,11,8,8,8,9,9,9,9,9,10,10,10,11,11,8,8,8,9,9,9,9,10,9,10,10,11,11,9,9,9,9,10,10,10,10,10,10,11,11,12,9,9,9,10,9,10,10,10,10,11,10,12,11,10,10,10,10,10,11,11,11,11,11,12,12,12,10,10,10,10,11,11,11,11,11,12,11,12,12,3,4,4,5,5,4,5,5,5,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,4,5,6,6,7,7,8,8,10,10,11,11,5,6,6,7,7,8,8,9,9,11,10,12,11,5,6,6,7,7,8,8,9,9,10,11,11,12,6,7,7,8,8,9,9,10,10,11,11,12,12,6,7,7,8,8,9,9,10,10,11,12,13,12,7,8,8,9,9,10,10,11,11,12,12,13,13,8,8,8,9,9,10,10,11,11,12,12,13,13,9,9,9,10,10,11,11,12,12,13,13,14,14,9,9,9,10,10,11,11,12,12,13,13,14,14,10,11,11,12,11,13,12,13,13,14,14,15,15,10,11,11,11,12,12,13,13,14,14,14,15,15,11,12,12,13,13,14,13,15,14,15,15,16,15,11,11,12,13,13,13,14,14,14,15,15,15,16,4,5,5,6,6,7,7,7,7,7,7,5,6,6,7,7,7,7,7,7,7,7,5,6,6,7,7,7,7,7,7,7,7,6,7,7,7,7,7,7,7,7,8,8,6,7,7,7,7,7,7,7,7,7,8,7,7,7,7,7,7,7,8,8,8,8,7,7,7,7,7,7,7,8,8,8,8,7,7,7,8,7,8,8,8,8,8,8,7,7,7,7,7,8,8,8,8,8,8,7,7,7,8,8,8,8,8,8,8,8,7,7,7,8,8,8,8,8,8,8,8,1,4,4,7,7,8,8,8,7,9,8,10,9,11,10,4,6,6,8,8,10,9,9,9,10,10,11,10,12,10,4,6,6,8,8,10,10,9,9,10,10,11,11,11,12,7,8,8,10,10,11,11,11,10,12,11,12,12,13,11,7,8,8,10,10,11,11,10,10,11,11,12,12,13,13,8,10,10,11,11,12,11,12,11,13,12,13,12,14,13,8,10,9,11,11,12,12,12,12,12,12,13,13,14,13,8,9,9,11,10,12,11,13,12,13,13,14,13,14,13,8,9,9,10,11,12,12,12,12,13,13,14,15,14,14,9,10,10,12,11,13,12,13,13,14,13,14,14,14,14,9,10,10,12,12,12,12,13,13,14,14,14,15,14,14,10,11,11,13,12,13,12,14,14,14,14,14,14,15,15,10,11,11,12,12,13,13,14,14,14,15,15,14,16,15,11,12,12,13,12,14,14,14,13,15,14,15,15,15,17,11,12,12,13,13,14,14,14,15,15,14,15,15,14,17,4,6,6,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,6,6,6,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,5,6,6,7,7,8,8,9,8,9,9,9,9,9,9,9,9,9,9,9,9,7,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,7,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,10,10,9,10,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,10,9,10,10,9,10,8,9,8,9,9,9,9,9,9,9,9,10,9,10,10,10,10,10,10,10,10,8,9,8,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,9,10,10,9,9,9,9,9,9,9,9,9,9,9,10,9,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,10,9,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,10,9,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,10,9,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,1,3,3,9,9,9,9,9,9,4,9,9,9,9,9,9,9,9,5,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,8,8,8,1,4,4,7,7,8,7,8,6,9,7,10,8,11,10,11,11,11,11,4,7,6,9,9,10,9,9,9,10,10,11,10,11,10,11,11,13,11,4,7,7,9,9,9,9,9,9,10,10,11,10,11,11,11,12,11,12,7,9,8,11,11,11,11,10,10,11,11,12,12,12,12,12,12,14,13,7,8,9,10,11,11,11,10,10,11,11,11,11,12,12,14,12,13,14,8,9,9,11,11,11,11,11,11,12,12,14,12,15,14,14,14,15,14,8,9,9,11,11,11,11,12,11,12,12,13,13,13,13,13,13,14,14,8,9,9,11,10,12,11,12,12,13,13,13,13,15,14,14,14,16,16,8,9,9,10,11,11,12,12,12,13,13,13,14,14,14,15,16,15,15,9,10,10,11,12,12,13,13,13,14,14,16,14,14,16,16,16,16,15,9,10,10,11,11,12,13,13,14,15,14,16,14,15,16,16,16,16,15,10,11,11,12,13,13,14,15,15,15,15,15,16,15,16,15,16,15,15,10,11,11,13,13,14,13,13,15,14,15,15,16,15,15,15,16,15,16,10,12,12,14,14,14,14,14,16,16,15,15,15,16,16,16,16,16,16,11,12,12,14,14,14,14,15,15,16,15,16,15,16,15,16,16,16,16,12,12,13,14,14,15,16,16,16,16,16,16,15,16,16,16,16,16,16,12,13,13,14,14,14,14,15,16,15,16,16,16,16,16,16,16,16,16,12,13,14,14,14,16,15,16,15,16,16,16,16,16,16,16,16,16,16,12,14,13,14,15,15,15,16,15,16,16,15,16,16,16,16,16,16,16,2,3,4,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,3,9,13,14,14,15,14,14,15,15,5,4,6,8,10,12,12,14,15,15,9,5,4,5,8,10,11,13,16,16,10,7,4,3,5,7,9,11,13,13,10,9,7,4,4,6,8,10,12,14,13,11,9,6,5,5,6,8,12,14,13,11,10,8,7,6,6,7,10,14,13,11,12,10,8,7,6,6,9,13,12,11,14,12,11,9,8,7,9,11,11,12,14,13,14,11,10,8,8,9,9,16,18,18,17,17,17,17,17,17,5,8,11,12,11,12,17,17,16,16,6,6,8,8,9,10,14,15,16,16,6,7,7,4,6,9,13,16,16,16,6,6,7,4,5,8,11,15,17,16,7,6,7,6,6,8,9,10,14,16,11,8,8,7,6,6,3,4,10,15,14,12,12,10,5,6,3,3,8,13,15,17,15,11,6,8,6,6,9,14,17,15,15,12,8,10,9,9,12,15,1,5,5,5,7,7,5,7,7,5,7,7,7,9,9,7,9,9,5,7,7,7,9,9,7,9,9,5,7,7,7,9,9,7,9,9,8,9,9,9,10,11,9,11,11,7,9,9,9,11,10,9,11,11,5,7,7,7,9,9,8,9,10,7,9,9,9,11,11,9,10,11,7,9,10,9,11,11,9,11,10,3,5,5,8,8,5,7,7,9,9,6,7,7,9,9,8,9,9,11,10,8,9,9,11,11,6,7,7,9,9,7,8,8,10,10,7,8,8,9,10,9,10,10,11,11,9,9,10,11,11,6,7,7,9,9,7,8,8,10,9,7,8,8,10,10,9,10,9,11,11,9,10,10,11,11,8,9,9,11,11,9,10,10,12,11,9,10,10,11,12,11,11,11,13,13,11,11,11,12,13,8,9,9,11,11,9,10,10,11,11,9,10,10,12,11,11,12,11,13,12,11,11,12,13,13,6,7,7,9,9,7,8,8,10,10,7,8,8,10,10,9,10,10,12,11,9,10,10,11,12,7,8,8,10,10,8,9,9,11,11,8,9,9,10,10,10,11,11,12,12,10,10,11,12,12,7,8,8,10,10,8,9,8,10,10,8,9,9,10,10,10,11,10,12,11,10,10,11,12,12,9,10,10,11,12,10,11,11,12,12,10,11,10,12,12,12,12,12,13,13,11,12,12,13,13,9,10,10,11,11,9,10,10,12,12,10,11,11,12,13,11,12,11,13,12,12,12,12,13,14,6,7,7,9,9,7,8,8,10,10,7,8,8,10,10,9,10,10,11,11,9,10,10,11,12,7,8,8,10,10,8,9,9,11,10,8,8,9,10,10,10,11,10,12,12,10,10,11,11,12,7,8,8,10,10,8,9,9,10,10,8,9,9,10,10,10,11,10,12,12,10,11,10,12,12,9,10,10,12,11,10,11,11,12,12,9,10,10,12,12,12,12,12,13,13,11,11,12,12,14,9,10,10,11,12,10,11,11,12,12,10,11,11,12,12,11,12,12,14,14,12,12,12,13,13,8,9,9,11,11,9,10,10,12,11,9,10,10,12,12,11,12,11,13,13,11,11,12,13,13,9,10,10,12,12,10,11,11,12,12,10,11,11,12,12,12,12,12,14,14,12,12,12,13,13,9,10,10,12,11,10,11,10,12,12,10,11,11,12,12,11,12,12,14,13,12,12,12,13,14,11,12,11,13,13,11,12,12,13,13,12,12,12,14,14,13,13,13,13,15,13,13,14,15,15,11,11,11,13,13,11,12,11,13,13,11,12,12,13,13,12,13,12,15,13,13,13,14,14,15,8,9,9,11,11,9,10,10,11,12,9,10,10,11,12,11,12,11,13,13,11,12,12,13,13,9,10,10,11,12,10,11,10,12,12,10,10,11,12,13,12,12,12,14,13,11,12,12,13,14,9,10,10,12,12,10,11,11,12,12,10,11,11,12,12,12,12,12,14,13,12,12,12,14,13,11,11,11,13,13,11,12,12,14,13,11,11,12,13,13,13,13,13,15,14,12,12,13,13,15,11,12,12,13,13,12,12,12,13,14,11,12,12,13,13,13,13,14,14,15,13,13,13,14,14,3,4,4,5,5,7,7,8,8,4,5,5,6,6,7,7,9,9,4,4,5,6,6,7,7,9,9,5,6,6,7,7,8,8,9,9,5,6,6,7,7,8,8,9,9,7,7,7,8,8,9,9,10,10,7,7,7,8,8,9,9,10,10,8,9,9,10,9,10,10,11,11,8,9,9,9,10,10,10,11,11,4,5,5,6,6,7,7,8,8,8,8,9,9,10,10,11,11,5,5,5,6,6,7,7,8,8,8,8,9,9,10,10,11,11,5,5,5,6,6,7,7,8,8,8,8,9,9,10,10,11,11,6,6,6,7,6,7,7,8,8,9,9,10,10,11,11,12,11,6,6,6,6,7,7,7,8,8,9,9,10,10,11,11,11,12,7,7,7,7,7,8,8,9,9,9,9,10,10,11,11,12,12,7,7,7,7,7,8,8,9,9,9,9,10,10,11,11,12,12,8,8,8,8,8,9,8,10,9,10,10,11,10,12,11,13,12,8,8,8,8,8,9,9,9,10,10,10,10,11,11,12,12,12,8,8,8,9,9,9,9,10,10,11,10,12,11,12,12,13,12,8,8,8,9,9,9,9,10,10,10,11,11,11,12,12,12,13,9,9,9,10,10,10,10,11,10,11,11,12,11,13,12,13,13,9,9,10,10,10,10,10,10,11,11,11,11,12,12,13,13,13,10,11,10,11,11,11,11,12,11,12,12,13,12,13,13,14,13,10,10,10,11,11,11,11,11,12,12,12,12,13,13,13,13,14,11,11,11,12,11,12,12,12,12,13,13,13,13,14,13,14,14,11,11,11,11,12,12,12,12,12,12,13,13,13,13,14,14,14,1,4,4,5,7,7,5,7,7,5,8,8,8,9,9,7,9,9,5,8,8,7,9,9,8,9,9,5,8,8,8,10,10,8,10,10,7,10,10,9,10,12,9,11,11,7,10,10,9,11,10,9,11,12,5,8,8,8,10,10,8,10,10,7,10,10,9,12,11,9,10,11,7,10,10,9,11,11,10,12,10,5,5,5,6,6,7,7,7,7,7,7,5,6,6,6,6,7,7,7,7,8,7,5,6,6,6,6,7,7,7,7,7,7,6,6,6,7,7,7,7,7,7,8,8,6,6,6,7,7,7,7,7,7,8,8,7,7,7,7,7,8,7,8,8,8,8,7,7,7,7,7,7,8,8,8,8,8,7,7,7,8,7,8,8,8,8,8,8,7,7,7,7,8,8,8,8,8,8,8,7,8,7,8,8,8,8,8,8,8,8,7,8,8,8,8,8,8,8,8,8,8,2,4,4,6,6,7,7,8,8,9,9,10,10,4,6,5,7,7,8,8,8,8,9,9,10,10,4,5,6,7,7,8,8,8,8,9,9,10,10,6,7,7,8,8,8,8,9,9,10,10,10,10,6,7,7,8,8,8,8,9,9,10,10,10,10,7,8,8,8,8,9,9,9,9,10,10,11,11,7,8,8,8,8,9,9,9,9,10,10,11,11,8,8,8,9,9,9,9,9,10,10,10,11,11,8,8,8,9,9,9,9,10,9,10,10,11,11,9,9,9,10,10,10,10,10,11,11,11,11,12,9,9,9,10,10,10,10,10,10,11,10,12,11,10,10,10,10,10,11,11,11,11,11,12,12,12,10,10,10,10,10,11,11,11,11,12,11,12,12,4,4,4,5,5,4,5,4,5,5,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,1,4,5,6,6,7,7,8,9,10,10,11,11,5,6,6,7,7,8,8,9,9,10,10,11,11,5,6,6,7,7,8,8,9,9,10,10,11,11,6,7,7,8,8,9,9,10,10,11,11,12,12,6,7,7,8,8,9,9,10,10,11,11,12,12,8,8,8,9,9,10,10,11,11,12,12,13,13,8,8,8,9,9,10,10,11,11,12,12,13,13,9,9,9,10,10,11,11,12,12,13,13,13,13,9,9,9,10,10,11,11,12,12,13,13,14,14,10,10,10,11,11,12,12,13,13,14,13,15,14,10,10,10,11,11,12,12,13,13,14,14,14,14,11,11,12,12,12,13,13,14,14,14,14,15,15,11,11,12,12,12,13,13,14,14,14,15,15,15,5,6,6,7,7,7,7,7,7,7,7,6,6,6,7,7,7,7,7,7,7,7,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,7,7,7,7,7,7,7,7,7,7,7,7,8,8,7,7,7,7,7,7,7,8,7,8,8,7,7,7,7,7,7,7,8,8,8,8,1,4,4,7,7,8,8,8,8,9,9,10,9,11,10,4,6,6,8,8,9,9,9,9,10,10,11,10,12,10,4,6,6,8,8,9,10,9,9,10,10,11,11,12,12,7,8,8,10,10,11,11,10,10,11,11,12,12,13,12,7,8,8,10,10,11,11,10,10,11,11,12,12,12,13,8,10,9,11,11,12,12,11,11,12,12,13,13,14,13,8,9,9,11,11,12,12,11,12,12,12,13,13,14,13,8,9,9,10,10,12,11,13,12,13,13,14,13,15,14,8,9,9,10,10,11,12,12,12,13,13,13,14,14,14,9,10,10,12,11,13,12,13,13,14,13,14,14,14,15,9,10,10,11,12,12,12,13,13,14,14,14,15,15,15,10,11,11,12,12,13,13,14,14,14,14,15,14,16,15,10,11,11,12,12,13,13,13,14,14,14,14,14,15,16,11,12,12,13,13,14,13,14,14,15,14,15,16,16,16,11,12,12,13,13,14,13,14,14,15,15,15,16,15,15,4,6,6,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,6,6,6,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,6,6,6,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,7,7,7,8,8,8,8,9,8,9,9,9,9,9,9,9,9,9,9,9,9,7,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,10,9,10,10,10,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,8,8,8,9,9,9,9,9,9,9,9,9,9,10,9,10,9,10,10,10,10,8,8,8,9,9,9,9,9,9,9,9,9,9,10,10,9,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,10,9,10,10,10,10,10,10,10,10,8,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,10,9,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,10,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,10,9,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,1,3,3,11,11,11,11,11,11,11,11,11,11,11,11,4,10,11,11,11,11,11,11,11,11,11,11,11,11,11,4,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,1,4,4,7,7,8,7,8,7,9,8,10,9,10,10,11,11,12,12,4,7,6,9,9,10,9,9,8,10,10,11,10,12,10,13,12,13,12,4,6,6,9,9,9,9,9,9,10,10,11,11,11,12,12,12,12,12,7,9,8,11,10,10,10,11,10,11,11,12,12,13,12,13,13,13,13,7,8,9,10,10,11,11,10,10,11,11,11,12,13,13,13,13,14,14,8,9,9,11,11,12,11,12,12,13,12,12,13,13,14,15,14,14,14,8,9,9,10,11,11,11,12,12,13,12,13,13,14,14,14,15,14,16,8,9,9,11,10,12,12,12,12,15,13,13,13,17,14,15,15,15,14,8,9,9,10,11,11,12,13,12,13,13,13,14,15,14,14,14,16,15,9,11,10,12,12,13,13,13,13,14,14,16,15,14,14,14,15,15,17,9,10,10,11,11,13,13,13,14,14,13,15,14,15,14,15,16,15,16,10,11,11,12,12,13,14,15,14,15,14,14,15,17,16,15,15,17,17,10,12,11,13,12,14,14,13,14,15,15,15,15,16,17,17,15,17,16,11,12,12,14,13,15,14,15,16,17,15,17,15,17,15,15,16,17,15,11,11,12,14,14,14,14,14,15,15,16,15,17,17,17,16,17,16,15,12,12,13,14,14,14,15,14,15,15,16,16,17,16,17,15,17,17,16,12,14,12,14,14,15,15,15,14,14,16,16,16,15,16,16,15,17,15,12,13,13,14,15,14,15,17,15,17,16,17,17,17,16,17,16,17,17,12,13,13,14,16,15,15,15,16,15,17,17,15,17,15,17,16,16,17,2,4,4,5,4,5,5,5,5,6,6,6,6,6,6,6,6,6,6,7,6,7,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,3,9,13,13,14,15,14,14,15,15,5,5,9,10,12,12,13,14,16,15,10,6,6,6,8,11,12,13,16,15,11,7,5,3,5,8,10,12,15,15,10,10,7,4,3,5,8,10,12,12,12,12,9,7,5,4,6,8,10,13,13,12,11,9,7,5,5,6,9,12,14,12,12,10,8,6,6,6,7,11,13,12,14,13,10,8,7,7,7,10,11,11,12,13,12,11,10,8,8,9,3,4,19,7,9,7,8,11,9,12,4,1,19,6,7,7,8,10,11,13,18,18,18,18,18,18,18,18,18,18,8,6,18,8,9,9,11,12,14,18,9,6,18,9,7,8,9,11,12,18,7,6,18,8,7,7,7,9,11,17,8,8,18,9,7,6,6,8,11,17,10,10,18,12,9,8,7,9,12,18,13,15,18,15,13,11,10,11,15,18,14,18,18,18,18,18,16,16,18,18,1,4,4,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,8,9,10,0,0,0,0,0,0,7,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,8,10,10,0,0,0,0,0,0,8,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,10,10,0,0,0,0,0,0,9,9,12,0,0,0,0,0,0,10,12,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,10,10,0,0,0,0,0,0,9,12,10,0,0,0,0,0,0,10,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,8,10,10,0,0,0,0,0,0,8,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,10,10,0,0,0,0,0,0,10,12,11,0,0,0,0,0,0,9,10,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,10,10,0,0,0,0,0,0,10,11,12,0,0,0,0,0,0,9,12,9], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+484596);
/* memory initializer */ allocate([1,4,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,6,6,7,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,2,7,8,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,6,6,6,6,8,8,0,0,0,7,7,7,7,8,8,0,0,0,7,7,7,7,8,8,0,0,0,7,7,8,8,9,9,0,0,0,7,7,8,8,9,9,0,0,0,8,9,8,8,10,10,0,0,0,8,8,8,8,10,10,0,0,0,10,10,9,9,10,10,0,0,0,0,0,9,9,10,10,1,3,4,6,6,7,7,8,8,8,8,9,9,10,10,11,11,0,0,0,7,7,8,8,9,9,9,9,10,10,10,11,11,11,0,0,0,6,6,8,8,9,9,9,9,10,10,11,11,11,11,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,8,8,9,9,10,10,10,10,11,11,12,12,12,12,0,0,0,8,8,9,9,10,10,10,10,11,11,12,12,12,13,0,0,0,9,9,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,0,0,10,10,10,10,10,10,11,11,12,12,13,13,0,0,0,0,0,9,9,10,10,11,11,12,12,13,13,13,13,0,0,0,0,0,9,9,10,10,11,11,12,12,13,13,13,14,0,0,0,0,0,10,10,10,11,11,11,12,12,13,13,13,14,0,0,0,0,0,0,0,10,10,11,11,12,12,13,13,14,14,0,0,0,0,0,0,0,11,11,12,12,13,13,13,13,14,14,0,0,0,0,0,0,0,11,11,12,12,12,13,13,14,15,14,0,0,0,0,0,0,0,12,12,12,12,13,13,13,14,14,15,0,0,0,0,0,0,0,0,0,12,12,13,13,14,13,14,14,1,4,4,6,6,6,7,6,6,4,7,7,11,10,10,11,11,10,4,7,7,10,10,10,11,10,10,6,10,10,11,11,11,11,11,10,6,9,9,11,12,12,11,9,9,6,9,10,11,12,12,11,9,10,7,11,11,11,11,11,12,13,12,6,9,10,11,10,10,12,13,13,6,10,9,11,10,10,11,12,13,1,3,4,6,6,7,7,8,8,8,8,10,10,10,7,7,8,8,8,9,9,9,10,10,10,6,7,8,8,8,8,9,8,10,10,10,7,7,8,8,9,9,9,9,10,10,10,7,7,8,8,9,9,8,9,10,10,10,8,8,9,9,9,9,9,9,11,11,11,8,8,9,9,9,9,9,10,10,11,11,9,9,9,9,9,9,9,10,11,11,11,10,11,9,9,9,9,10,9,11,11,11,10,11,10,10,9,9,10,10,11,11,11,11,11,9,9,9,9,10,10,1,4,4,7,7,7,7,7,6,8,8,10,10,6,5,6,8,8,8,8,8,8,8,9,10,10,7,6,6,8,8,8,8,8,8,8,8,10,10,0,8,8,8,8,9,8,9,9,9,10,10,10,0,9,8,8,8,9,9,8,8,9,9,10,10,0,12,11,8,8,9,9,9,9,10,10,11,10,0,12,13,8,8,9,10,9,9,11,11,11,12,0,0,0,8,8,8,8,10,9,12,13,12,14,0,0,0,8,8,8,9,10,10,12,12,13,14,0,0,0,13,13,9,9,11,11,0,0,14,0,0,0,0,14,14,10,10,12,11,12,14,14,14,0,0,0,0,0,11,11,13,13,14,13,14,14,0,0,0,0,0,12,13,13,12,13,14,14,14,1,4,3,5,5,7,7,7,6,6,7,7,7,5,5,7,7,7,6,6,7,7,7,6,6,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,1,5,5,5,5,9,11,11,10,10,10,10,10,10,10,7,6,6,6,6,10,10,10,10,10,10,10,10,10,10,7,6,6,6,6,10,9,10,10,10,10,10,10,10,10,10,7,7,8,9,10,10,10,10,10,10,10,10,10,10,10,8,7,10,10,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,1,5,5,7,8,8,7,9,9,9,12,12,11,12,12,10,10,11,12,12,12,11,12,12,8,9,8,7,9,10,10,11,11,10,11,12,10,12,10,12,12,12,11,12,11,9,8,8,9,10,9,8,9,10,12,12,11,11,12,11,10,11,12,11,12,12,8,9,9,9,10,11,12,11,12,11,11,11,11,12,12,11,11,12,12,11,11,9,9,8,9,9,11,9,9,10,9,11,11,11,11,12,11,11,10,12,12,12,9,12,11,10,11,11,11,11,12,12,12,11,11,11,12,10,12,12,12,10,10,9,10,9,10,10,9,9,9,10,10,12,10,11,11,9,11,11,10,11,11,11,10,10,10,9,9,10,10,9,9,10,11,11,10,11,10,11,10,11,11,10,11,11,11,10,9,10,10,9,10,9,9,11,9,9,11,10,10,11,11,10,10,11,10,11,8,9,11,11,10,9,10,11,11,10,11,11,10,10,10,11,10,9,10,10,11,9,10,10,9,11,10,10,10,10,11,10,11,11,9,11,10,11,10,10,11,11,10,10,10,9,10,10,11,11,11,9,10,10,10,10,10,11,10,10,10,9,10,10,11,10,10,10,10,10,9,10,11,10,10,10,10,11,11,11,10,10,10,10,10,11,10,11,10,11,10,10,10,9,11,11,10,10,10,11,11,10,10,10,10,10,10,10,10,11,11,9,10,10,10,11,10,11,10,10,10,11,9,10,11,10,11,10,10,9,10,10,10,11,10,11,10,10,10,10,10,11,11,10,11,11,10,10,11,11,10,9,9,10,10,10,10,10,9,11,9,10,10,10,11,11,10,10,10,10,11,11,11,10,9,9,10,10,11,10,10,10,10,10,11,11,11,10,10,10,11,11,11,9,10,10,10,10,9,10,9,10,11,10,11,10,10,11,11,10,11,11,11,11,11,10,11,10,10,10,9,11,11,10,11,11,11,11,11,11,11,11,11,10,11,10,10,10,10,11,10,10,11,9,10,10,10,5,6,17,8,12,9,10,10,12,13,5,2,17,4,9,5,7,8,11,13,16,16,16,16,16,16,16,16,16,16,6,4,16,5,10,5,7,10,14,16,13,9,16,11,8,7,8,9,13,16,7,4,16,5,7,4,6,8,11,13,8,6,16,7,8,5,5,7,9,13,9,8,16,9,8,6,6,7,9,13,11,11,16,10,10,7,7,7,9,13,13,13,16,13,13,9,9,9,10,13,1,5,5,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,7,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,7,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,8,0,0,0,0,0,0,7,9,8,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,7,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,9,11,0,0,0,0,0,0,9,11,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,8,11,9,0,0,0,0,0,0,9,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,8,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,11,10,0,0,0,0,0,0,8,9,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,10,11,0,0,0,0,0,0,9,11,9], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+499368);
/* memory initializer */ allocate([1,4,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,7,7,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,7,7,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,8,9,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,5,5,6,6,8,8,0,0,0,7,7,7,7,9,9,0,0,0,7,7,7,7,9,9,0,0,0,8,8,8,8,9,9,0,0,0,8,8,8,8,10,10,0,0,0,9,9,8,8,10,10,0,0,0,9,9,8,8,10,10,0,0,0,10,10,9,9,10,10,0,0,0,0,0,9,9,10,10,1,3,3,6,6,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,8,8,8,9,10,9,10,10,10,10,11,11,12,12,0,0,0,8,8,9,9,10,10,10,10,11,11,11,12,12,12,0,0,0,8,8,9,9,10,10,10,10,11,11,12,12,12,12,0,0,0,8,8,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,9,9,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,0,0,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,0,0,9,9,10,10,11,11,12,12,12,12,13,13,0,0,0,0,0,9,9,10,10,11,11,12,12,12,12,13,13,0,0,0,0,0,10,10,11,10,11,11,12,12,13,13,13,13,0,0,0,0,0,0,0,10,10,11,11,12,12,13,13,13,13,0,0,0,0,0,0,0,11,11,12,12,12,12,13,13,14,14,0,0,0,0,0,0,0,11,11,12,12,12,12,13,13,14,14,0,0,0,0,0,0,0,12,12,12,12,13,13,13,13,14,14,0,0,0,0,0,0,0,0,0,12,12,13,13,13,13,14,14,1,4,4,6,6,6,7,6,6,4,7,7,10,9,10,10,10,9,4,7,7,10,10,10,11,10,10,6,10,10,11,11,11,11,10,10,6,10,9,11,11,11,11,10,10,6,10,10,11,11,11,11,10,10,7,11,11,11,11,11,12,12,11,6,10,10,11,10,10,11,11,11,6,10,10,10,11,10,11,11,11,2,3,3,5,6,7,7,7,7,8,8,10,10,10,6,6,7,7,8,8,8,8,10,10,10,6,6,7,7,8,8,8,8,10,10,10,7,7,7,7,8,8,8,8,10,10,10,7,7,7,7,8,8,8,8,10,10,10,7,7,8,8,8,8,8,8,10,10,10,7,7,8,8,8,8,8,8,10,10,10,8,8,8,8,8,8,9,9,10,10,10,10,10,8,8,8,8,9,9,10,10,10,10,10,9,9,8,8,9,9,10,10,10,10,10,8,8,8,8,9,9,1,4,4,6,6,7,7,7,7,8,8,9,9,6,5,5,7,8,8,9,8,8,9,9,10,11,6,5,5,8,8,9,9,8,8,9,10,10,11,0,8,8,8,9,9,9,9,9,10,10,11,11,0,9,9,9,8,9,9,9,9,10,10,11,11,0,13,13,9,9,10,10,10,10,11,11,12,12,0,14,13,9,9,10,10,10,10,11,11,12,12,0,0,0,10,10,9,9,11,11,12,12,13,12,0,0,0,10,10,9,9,10,10,12,12,13,13,0,0,0,13,14,11,10,11,11,12,12,13,14,0,0,0,14,14,10,10,11,11,12,12,13,13,0,0,0,0,0,12,12,12,12,13,13,14,15,0,0,0,0,0,12,12,12,12,13,13,14,15,2,3,3,5,5,6,6,6,5,5,6,6,6,5,5,6,6,6,5,5,6,6,6,5,5,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,4,4,4,4,8,8,12,13,14,14,14,14,14,14,6,6,6,6,6,10,9,14,14,14,14,14,14,14,14,7,6,5,6,6,10,9,12,13,13,13,13,13,13,13,13,7,7,9,9,11,11,12,13,13,13,13,13,13,13,13,7,7,8,8,11,12,13,13,13,13,13,13,13,13,13,12,12,10,10,13,12,13,13,13,13,13,13,13,13,13,12,12,10,10,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,13,12,13,13,13,13,13,13,13,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,1,4,4,6,6,7,7,8,7,8,8,9,9,9,9,10,10,10,9,10,10,11,12,12,8,8,8,8,9,9,9,9,10,10,10,10,10,11,11,10,12,11,11,13,11,7,7,8,8,8,8,9,9,9,10,10,10,10,9,10,10,11,11,12,11,11,8,8,8,8,9,9,10,10,10,10,11,11,11,11,11,11,11,12,11,12,12,8,8,9,9,9,9,9,10,10,10,10,10,10,11,11,11,11,11,11,12,11,9,9,9,9,10,10,10,10,11,10,11,11,11,11,11,11,12,12,12,12,11,9,9,9,9,10,10,10,10,11,11,11,11,11,11,11,11,11,12,12,12,13,9,10,10,9,11,10,10,10,10,11,11,11,11,11,10,11,12,11,12,12,11,12,11,10,9,10,10,11,10,11,11,11,11,11,11,11,11,11,12,12,11,12,12,12,10,10,10,11,10,11,11,11,11,11,11,11,11,11,11,11,12,13,12,12,11,9,10,10,11,11,10,11,11,11,12,11,11,11,11,11,12,12,13,13,12,13,10,10,12,10,11,11,11,11,11,11,11,11,11,12,12,11,13,12,12,12,12,13,12,11,11,11,11,11,11,12,11,12,11,11,11,11,12,12,13,12,11,12,12,11,11,11,11,11,12,11,11,11,11,12,11,11,12,11,12,13,13,12,12,12,12,11,11,11,11,11,12,11,11,12,11,12,11,11,11,11,13,12,12,12,12,13,11,11,11,12,12,11,11,11,12,11,12,12,12,11,12,13,12,11,11,12,12,11,12,11,11,11,12,12,11,12,11,11,11,12,12,12,12,13,12,13,12,12,12,12,11,11,12,11,11,11,11,11,11,12,12,12,13,12,11,13,13,12,12,11,12,10,11,11,11,11,12,11,12,12,11,12,12,13,12,12,13,12,12,12,12,12,11,12,12,12,11,12,11,11,11,12,13,12,13,13,13,13,13,12,13,13,12,12,13,11,11,11,11,11,12,11,11,12,11,2,5,20,7,10,7,8,10,11,11,4,2,20,5,8,6,7,9,10,10,20,20,20,20,19,19,19,19,19,19,7,5,19,6,10,7,9,11,13,17,11,8,19,10,7,7,8,10,11,15,7,5,19,7,7,5,6,9,11,16,7,6,19,8,7,6,6,7,9,13,9,9,19,11,9,8,6,7,8,13,12,14,19,16,13,10,9,8,9,13,14,17,19,18,18,17,12,11,11,13,7,10,12,11,12,13,15,16,18,15,10,8,8,8,9,10,12,13,14,17,10,7,7,7,7,8,10,12,15,18,10,7,7,5,5,6,8,10,13,15,10,7,6,5,4,4,6,9,12,15,11,7,7,5,4,3,4,7,11,13,12,9,8,7,5,4,4,5,10,13,11,11,11,9,7,5,5,5,9,12,13,12,13,12,10,8,8,7,9,13,14,14,14,14,13,11,11,10,10,13,1,3,3,0,0,0,0,0,0,4,5,5,0,0,0,0,0,0,4,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,4,7,7,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,0,0,0,8,8,4,4,4,8,7,0,0,0,8,8,0,0,0,8,8,0,0,0,9,9,0,0,0,9,9,4,4,4,7,8,0,0,0,8,8,0,0,0,8,8,0,0,0,9,9,0,0,0,9,9,7,8,8,10,9,0,0,0,12,11,0,0,0,11,12,0,0,0,14,13,0,0,0,14,14,7,8,8,9,10,0,0,0,11,12,0,0,0,11,11,0,0,0,14,14,0,0,0,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,11,11,0,0,0,12,11,0,0,0,12,12,0,0,0,13,12,0,0,0,13,13,8,8,8,11,11,0,0,0,11,11,0,0,0,12,12,0,0,0,13,13,0,0,0,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,9,8,12,11,0,0,0,12,12,0,0,0,12,11,0,0,0,13,13,0,0,0,13,13,8,8,8,11,12,0,0,0,11,12,0,0,0,11,12,0,0,0,13,14,0,0,0,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,9,9,14,14,0,0,0,13,13,0,0,0,13,13,0,0,0,13,12,0,0,0,13,13,8,9,9,14,14,0,0,0,13,13,0,0,0,13,13,0,0,0,12,13,0,0,0,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,9,9,14,14,0,0,0,13,13,0,0,0,13,13,0,0,0,13,13,0,0,0,13,12,8,9,9,14,14,0,0,0,13,13,0,0,0,13,13,0,0,0,13,13,0,0,0,12,12,1,3,3,5,5,7,7,8,8,0,0,0,6,6,8,8,9,9,0,0,0,6,6,8,8,9,9,0,0,0,7,7,8,9,10,10,0,0,0,7,7,9,9,10,10,0,0,0,8,8,9,9,11,11,0,0,0,7,7,9,9,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,5,5,6,6,6,6,7,7,8,8,8,8,9,9,0,0,0,6,6,7,7,8,8,8,8,9,9,10,10,11,10,0,0,0,6,6,7,7,8,8,8,8,9,9,10,10,10,10,0,0,0,6,6,8,8,9,9,9,9,10,10,11,11,11,11,0,0,0,7,6,8,8,9,9,9,9,10,10,11,11,11,11,0,0,0,7,7,8,8,9,9,10,10,11,11,11,11,12,12,0,0,0,7,7,8,8,9,9,10,10,11,11,11,11,12,12,0,0,0,7,8,8,8,9,9,10,10,11,11,12,12,13,13,0,0,0,0,0,8,8,9,9,10,10,11,11,12,12,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,4,5,7,7,6,7,7,4,6,6,10,11,10,10,10,11,4,6,6,10,10,11,10,11,10,5,10,10,9,12,11,10,12,12,7,10,10,12,12,12,12,13,13,7,11,10,11,12,12,12,13,13,6,11,10,10,12,12,11,12,12,7,11,10,12,13,13,12,12,12,7,10,11,12,13,13,12,12,12,2,3,3,6,6,6,6,7,7,7,7,11,10,10,6,6,7,7,8,8,8,8,10,10,10,6,6,7,7,8,8,8,8,11,11,11,7,7,8,8,8,8,9,9,11,11,11,6,7,8,8,8,8,9,9,11,11,11,7,7,8,8,8,8,8,8,11,11,11,7,7,8,8,8,8,9,9,11,11,11,8,8,8,8,8,8,8,8,11,11,11,11,11,8,8,8,8,8,8,12,11,11,11,11,8,8,8,8,8,8,12,11,11,11,11,7,7,8,8,8,8,1,4,4,6,6,8,7,8,8,9,9,10,10,5,5,5,7,7,9,9,9,9,11,11,12,12,6,5,5,7,7,9,9,10,9,11,11,12,12,0,7,7,7,7,9,9,10,10,11,11,12,12,0,7,7,7,7,9,9,10,10,11,11,12,12,0,11,11,8,8,10,10,11,11,12,12,13,13,0,12,12,9,9,10,10,11,11,12,12,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,5,5,6,6,6,5,5,6,6,6,5,5,6,6,6,5,5,6,6,6,5,5,1,4,4,7,7,8,8,8,8,10,9,10,10,5,5,5,7,7,9,9,10,10,11,10,12,11,6,5,5,7,7,9,9,10,10,11,11,12,12,20,7,7,7,7,9,9,10,10,11,11,12,12,20,7,7,7,7,9,9,11,10,12,11,12,12,20,11,11,8,8,10,10,11,11,12,12,13,13,20,12,12,8,8,9,9,11,11,12,12,13,13,20,20,21,10,10,10,10,11,11,12,12,13,13,21,21,21,10,10,10,10,11,11,12,12,13,13,21,21,21,14,14,11,11,12,12,13,13,13,14,21,21,21,16,15,11,11,12,11,13,13,14,14,21,21,21,21,21,13,13,12,12,13,13,14,14,21,21,21,21,21,13,13,12,12,13,13,14,14,2,4,4,6,6,7,7,7,7,7,7,9,9,9,6,7,7,7,7,7,8,8,9,9,9,6,6,7,7,7,7,8,8,9,9,9,7,7,7,7,8,8,8,8,9,9,9,7,7,7,7,8,8,8,8,9,9,9,7,7,7,7,8,8,8,8,9,9,9,7,7,7,7,7,7,8,8,9,9,9,7,7,8,8,7,7,8,8,9,9,9,9,9,8,8,7,7,8,8,9,9,9,9,9,8,8,7,7,8,8,9,9,9,9,9,7,7,7,7,8,8,1,4,4,6,6,7,7,7,7,8,8,9,9,10,10,6,6,6,8,8,9,9,8,8,9,9,10,10,11,11,6,5,5,8,7,9,9,8,8,9,9,10,10,11,11,20,8,8,8,8,9,9,9,9,10,10,11,10,12,11,20,8,8,8,8,9,9,9,9,10,10,11,11,12,12,20,12,12,9,9,10,10,10,10,11,11,12,12,13,12,20,13,13,9,9,10,10,10,10,11,11,12,12,13,13,20,20,20,9,9,9,9,10,10,11,11,12,12,13,12,20,20,20,9,9,9,8,10,10,12,11,12,12,13,13,20,20,20,13,13,10,10,11,11,12,12,13,13,13,13,20,20,20,13,13,10,10,11,10,12,11,13,13,14,14,20,20,20,20,20,11,11,11,11,12,12,13,13,14,14,20,20,20,20,20,11,10,11,11,13,11,13,13,14,14,20,20,21,21,21,14,14,11,12,13,13,13,13,14,14,21,21,21,21,21,15,15,12,11,13,12,14,13,15,14,2,4,4,6,6,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,11,11,11,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,10,11,10,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,11,11,11,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,11,11,11,8,8,8,8,9,9,9,9,9,9,9,9,10,9,10,10,10,10,11,11,11,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,11,11,11,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,1,4,3,10,8,10,10,10,10,10,10,10,10,10,10,10,10,6,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,6,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,1,4,4,7,7,7,7,7,7,8,8,10,9,11,10,13,11,14,13,6,6,6,8,8,8,8,8,7,9,8,11,9,13,11,14,12,14,13,5,6,6,8,8,8,8,8,8,9,9,11,11,13,11,14,13,15,15,17,8,8,8,8,9,9,9,8,11,9,12,10,13,11,14,12,14,13,17,8,8,8,8,9,9,9,9,10,10,11,11,13,13,13,14,16,15,17,12,12,8,8,9,9,10,10,11,11,12,11,13,12,13,12,14,13,16,12,12,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,17,17,17,9,9,9,9,11,11,12,12,12,13,13,13,16,14,14,14,17,17,17,9,8,9,8,11,10,12,12,13,13,14,14,15,15,16,16,17,17,17,12,12,10,10,11,12,12,13,13,14,13,15,15,14,16,15,17,17,17,12,12,10,8,12,9,13,12,14,14,15,14,15,16,16,16,17,17,17,17,17,11,11,12,12,14,14,14,16,15,16,15,16,15,17,17,17,17,17,17,11,9,12,10,13,11,15,14,16,16,17,16,16,15,17,17,17,17,17,15,15,12,12,14,14,15,16,16,15,16,16,17,17,17,17,17,17,17,14,14,12,10,14,11,15,12,17,16,15,16,17,16,17,17,17,17,17,17,17,13,13,14,14,14,16,17,17,16,17,17,17,17,17,17,17,17,17,17,13,9,13,12,15,13,16,16,17,17,17,17,17,17,17,17,17,17,17,15,17,14,14,15,16,16,17,16,17,16,17,17,17,17,17,17,17,17,17,17,14,13,15,16,16,17,16,17,17,17,2,4,4,4,4,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,4,7,9,9,9,8,9,10,13,16,5,4,5,6,7,7,8,9,12,16,6,5,5,5,7,7,9,10,12,15,7,6,5,4,5,6,8,9,10,13,8,7,7,5,5,5,7,9,10,12,7,7,7,6,5,5,6,7,10,12,8,8,8,7,7,5,5,6,9,11,8,9,9,8,8,6,6,5,8,11,10,11,12,12,11,9,9,8,9,12,13,14,15,15,14,12,12,11,11,13,3,5,8,7,14,8,9,19,5,2,5,5,9,6,9,19,8,4,5,7,8,9,13,19,7,4,6,5,9,6,9,19,12,8,7,9,10,11,13,19,8,5,8,6,9,6,7,19,8,8,10,7,7,4,5,19,12,17,19,15,18,13,11,18,1,4,4,5,7,7,5,7,8,5,8,8,8,10,10,8,10,11,5,8,8,8,10,10,8,10,10,4,9,9,9,12,11,8,11,11,8,12,11,10,12,14,10,13,13,7,11,11,10,14,12,11,14,14,4,9,9,8,11,11,9,11,12,7,11,11,10,13,14,10,12,14,8,11,12,10,14,14,10,13,12,2,4,4,5,6,6,5,6,6,5,7,7,7,8,9,7,8,9,5,7,7,7,9,8,7,9,7,4,7,7,7,9,9,7,8,8,6,9,8,7,8,11,9,11,10,6,8,9,8,11,8,9,10,11,4,7,7,7,8,8,7,9,9,6,9,8,9,11,10,8,8,11,6,8,9,9,10,11,8,11,8,1,5,5,7,7,6,7,7,8,8,6,7,8,8,8,8,9,9,11,11,8,9,9,11,11,6,9,8,10,10,8,10,10,11,11,8,10,10,11,11,10,11,10,13,12,9,11,10,13,13,6,8,9,10,10,8,10,10,11,11,8,10,10,11,11,9,10,11,13,12,10,10,11,12,12,8,11,11,14,13,10,12,11,15,13,9,12,11,15,14,12,14,13,16,14,12,13,13,17,14,8,11,11,13,14,9,11,12,14,15,10,11,12,13,15,11,13,13,14,16,12,13,14,14,16,5,9,9,11,11,9,11,11,12,12,8,11,11,12,12,11,12,12,15,14,10,12,12,15,15,8,11,11,13,12,10,12,12,13,13,10,12,12,14,13,12,12,13,14,15,11,13,13,17,16,7,11,11,13,13,10,12,12,14,13,10,12,12,13,14,12,13,12,15,14,11,13,13,15,14,9,12,12,16,15,11,13,13,17,16,10,13,13,16,16,13,14,15,15,16,13,15,14,19,17,9,12,12,14,16,11,13,13,15,16,10,13,13,17,16,13,14,13,17,15,12,15,15,16,17,5,9,9,11,11,8,11,11,13,12,9,11,11,12,12,10,12,12,14,15,11,12,12,14,14,7,11,10,13,12,10,12,12,14,13,10,11,12,13,13,11,13,13,15,16,12,12,13,15,15,7,11,11,13,13,10,13,13,14,14,10,12,12,13,13,11,13,13,16,15,12,13,13,15,14,9,12,12,15,15,10,13,13,17,16,11,12,13,15,15,12,15,14,18,18,13,14,14,16,17,9,12,12,15,16,10,13,13,15,16,11,13,13,15,16,13,15,15,17,17,13,15,14,16,15,7,11,11,15,16,10,13,12,16,17,10,12,13,15,17,15,16,16,18,17,13,15,15,17,18,8,12,12,16,16,11,13,14,17,18,11,13,13,18,16,15,17,16,17,19,14,15,15,17,16,8,12,12,16,15,11,14,13,18,17,11,13,14,18,17,15,16,16,18,17,13,16,16,18,18,11,15,14,18,17,13,14,15,18,0,12,15,15,0,17,17,16,17,17,18,14,16,18,18,0,11,14,14,17,0,12,15,14,17,19,12,15,14,18,0,15,18,16,0,17,14,18,16,18,0,7,11,11,16,15,10,12,12,18,16,10,13,13,16,15,13,15,14,17,17,14,16,16,19,18,8,12,12,16,16,11,13,13,18,16,11,13,14,17,16,14,15,15,19,18,15,16,16,0,19,8,12,12,16,17,11,13,13,17,17,11,14,13,17,17,13,15,15,17,19,15,17,17,19,0,11,14,15,19,17,12,15,16,18,18,12,14,15,19,17,14,16,17,0,18,16,16,19,17,0,11,14,14,18,19,12,15,14,17,17,13,16,14,17,16,14,17,16,18,18,15,18,15,0,18,3,5,5,8,8,6,6,6,9,9,6,6,6,9,9,9,10,9,11,11,9,9,9,11,11,6,7,7,10,10,7,7,8,10,10,7,7,8,10,10,10,10,10,11,12,9,10,10,11,12,6,7,7,10,10,7,8,7,10,10,7,8,7,10,10,10,11,10,12,11,10,10,10,13,10,9,10,10,12,12,10,11,10,14,12,9,11,11,13,13,11,12,13,13,13,11,12,12,15,13,9,10,10,12,13,9,11,10,12,13,10,10,11,12,13,11,12,12,12,13,11,12,12,13,13,5,7,7,10,10,7,8,8,10,10,7,8,8,10,10,10,11,10,12,13,10,10,11,12,12,6,8,8,11,10,7,8,9,10,12,8,9,9,11,11,11,10,11,11,12,10,11,11,13,12,7,8,8,10,11,8,9,8,11,10,8,9,9,11,11,10,12,10,13,11,10,11,11,13,13,10,11,10,14,13,10,10,11,13,13,10,12,11,14,13,12,11,13,12,13,13,12,13,14,14,10,11,11,13,13,10,11,10,12,13,10,12,12,12,14,12,12,12,14,12,12,13,12,17,15,5,7,7,10,10,7,8,8,10,10,7,8,8,11,10,10,10,11,12,12,10,11,11,12,13,6,8,8,11,10,8,9,9,11,11,7,8,9,10,11,11,11,11,12,12,10,10,11,12,13,6,8,8,10,11,8,9,9,11,11,7,9,7,11,10,10,12,12,13,13,11,11,10,13,11,9,11,10,14,13,11,11,11,15,13,10,10,11,13,13,12,13,13,14,14,12,11,12,12,13,10,11,11,12,13,10,11,12,13,13,10,11,10,13,12,12,12,13,14,0,12,13,11,13,11,8,10,10,13,13,10,11,11,14,13,10,11,11,13,12,13,14,14,14,15,12,12,12,15,14,9,11,10,13,12,10,10,11,13,14,11,11,11,15,12,13,12,14,15,16,13,13,13,14,13,9,11,11,12,12,10,12,11,13,13,10,11,11,13,14,13,13,13,15,15,13,13,14,17,15,11,12,12,14,14,10,11,12,13,15,12,13,13,0,15,13,11,14,12,16,14,16,14,0,15,11,12,12,14,16,11,13,12,16,15,12,13,13,14,15,12,14,12,15,13,15,14,14,16,16,8,10,10,13,13,10,11,10,13,14,10,11,11,13,13,13,13,12,14,14,14,13,13,16,17,9,10,10,12,14,10,12,11,14,13,10,11,12,13,14,12,12,12,15,15,13,13,13,14,14,9,10,10,13,13,10,11,12,12,14,10,11,10,13,13,13,13,13,14,16,13,13,13,14,14,11,12,13,15,13,12,14,13,14,16,12,12,13,13,14,13,14,14,17,15,13,12,17,13,16,11,12,13,14,15,12,13,14,14,17,11,12,11,14,14,13,16,14,16,0,14,15,11,15,11,1,4,4,7,7,7,7,9,9,4,6,6,8,8,8,8,9,9,4,6,6,8,8,8,8,9,9,7,8,8,9,9,9,9,11,10,7,8,8,9,9,9,9,10,11,7,8,8,9,9,10,10,11,11,7,8,8,9,9,10,10,11,11,9,9,9,10,10,11,11,12,12,9,9,9,10,10,11,11,12,12,1,4,4,7,7,10,10,12,12,13,13,18,17,3,6,6,9,9,11,11,13,13,14,14,18,17,3,6,6,9,9,11,11,13,13,14,14,17,18,7,9,9,11,11,13,13,14,14,15,15,0,0,7,9,9,11,11,13,13,14,14,15,16,19,18,10,11,11,13,13,14,14,16,15,17,18,0,0,10,11,11,13,13,14,14,15,15,16,18,0,0,11,13,13,14,14,15,15,17,17,0,19,0,0,11,13,13,14,14,14,15,16,18,0,19,0,0,13,14,14,15,15,18,17,18,18,0,19,0,0,13,14,14,15,16,16,16,18,18,19,0,0,0,16,17,17,0,17,19,19,0,19,0,0,0,0,16,19,16,17,18,0,19,0,0,0,0,0,0,1,4,5,6,6,4,6,6,6,6,4,6,6,6,6,6,6,6,7,7,6,6,6,7,7,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,1,5,5,6,5,9,10,11,11,10,10,10,10,10,10,5,8,8,8,10,10,10,10,10,10,10,10,10,10,10,5,8,9,9,9,10,10,10,10,10,10,10,10,10,10,5,10,8,10,10,10,10,10,10,10,10,10,10,10,10,4,8,9,10,10,10,10,10,10,10,10,10,10,10,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,1,6,6,7,8,7,7,10,9,10,9,11,10,9,11,10,9,9,9,9,10,6,8,7,9,9,8,8,10,10,9,11,11,12,12,10,9,11,9,12,10,9,6,9,8,9,12,8,8,11,9,11,11,12,11,12,12,10,11,11,10,10,11,7,10,9,9,9,9,9,10,9,10,9,10,10,12,10,10,10,11,12,10,10,7,9,9,9,10,9,9,10,10,9,9,9,11,11,10,10,10,10,9,9,12,7,9,10,9,11,9,10,9,10,11,11,11,10,11,12,9,12,11,10,10,10,7,9,9,9,9,10,12,10,9,11,12,10,11,12,12,11,9,10,11,10,11,7,9,10,10,11,10,9,10,11,11,11,10,12,12,12,11,11,10,11,11,12,8,9,10,12,11,10,10,12,12,12,12,12,10,11,11,9,11,10,12,11,11,8,9,10,10,11,12,11,11,10,10,10,12,12,12,9,10,12,12,12,12,12,8,10,11,10,10,12,9,11,12,12,11,12,12,12,12,10,12,10,10,10,10,8,12,11,11,11,10,10,11,12,12,12,12,11,12,12,12,11,11,11,12,10,9,10,10,12,10,12,10,12,12,10,10,10,11,12,12,12,11,12,12,12,11,10,11,12,12,12,11,12,12,11,12,12,11,12,12,12,12,11,12,12,10,10,10,10,11,11,12,11,12,12,12,12,12,12,12,11,12,11,10,11,11,12,11,11,9,10,10,10,12,10,10,11,9,11,12,11,12,11,12,12,10,11,10,12,9,9,9,12,11,10,11,10,12,10,12,10,12,12,12,11,11,11,11,11,10,9,10,10,11,10,11,11,12,11,10,11,12,12,12,11,11,9,12,10,12,9,10,12,10,10,11,10,11,11,12,11,10,11,10,11,11,11,11,12,11,11,10,9,10,10,10,9,11,11,10,9,12,10,11,12,11,12,12,11,12,11,12,11,10,11,10,12,11,12,11,12,11,12,10,11,10,10,12,11,10,11,11,11,10,5,7,10,9,11,10,15,11,13,16,6,4,6,6,7,7,10,9,12,16,10,6,5,6,6,7,10,11,16,16,9,6,7,6,7,7,10,8,14,16,11,6,5,4,5,6,8,9,15,16,9,6,6,5,6,6,9,8,14,16,12,7,6,6,5,6,6,7,13,16,8,6,7,6,5,5,4,4,11,16,9,8,9,9,7,7,6,5,13,16,14,14,16,15,16,15,16,16,16,16,1,4,4,5,7,7,5,7,7,5,8,7,7,10,10,7,9,10,5,7,8,7,10,9,7,10,10,5,8,8,8,10,10,8,10,10,7,10,10,10,11,12,10,12,13,7,10,10,9,13,11,10,12,13,5,8,8,8,10,10,8,10,10,7,10,10,10,12,12,9,11,12,7,10,11,10,12,12,10,13,11,3,4,4,5,6,6,5,6,6,5,6,6,6,7,8,6,7,8,5,6,6,6,8,7,6,8,7,5,6,6,6,8,8,6,8,8,6,8,8,7,7,10,8,9,9,6,8,8,7,9,8,8,9,10,5,6,6,6,8,8,7,8,8,6,8,8,8,10,9,7,8,9,6,8,8,8,9,9,7,10,8,1,5,5,8,8,6,7,7,9,9,5,7,7,9,9,9,10,9,11,11,9,9,10,11,11,6,8,8,10,10,8,9,10,11,11,8,9,10,11,11,10,11,11,12,13,10,11,11,13,13,6,8,8,10,10,8,10,9,11,11,8,10,9,11,11,10,11,11,13,13,10,11,11,13,12,9,11,11,14,13,10,12,12,15,14,10,12,11,14,13,12,13,13,15,15,12,13,13,16,14,9,11,11,13,14,10,11,12,14,14,10,12,12,14,15,12,13,13,14,15,12,13,14,15,16,5,8,8,11,11,8,10,10,12,12,8,10,10,12,12,11,12,12,14,14,11,12,12,14,14,8,10,10,12,12,9,11,12,12,13,10,12,12,13,13,12,12,13,14,15,11,13,13,15,15,7,10,10,12,12,9,12,11,13,12,10,11,12,13,13,12,13,12,15,14,11,12,13,15,15,10,12,12,15,14,11,13,13,16,15,11,13,13,16,15,14,13,14,15,16,13,15,15,17,17,10,12,12,14,15,11,12,12,15,15,11,13,13,15,16,13,15,13,16,15,13,15,15,16,17,5,8,8,11,11,8,10,10,12,12,8,10,10,12,12,11,12,12,14,14,11,12,12,14,14,7,10,10,12,12,10,12,12,14,13,9,11,12,12,13,12,13,13,15,15,12,12,13,13,15,7,10,10,12,13,10,11,12,13,13,10,12,11,13,13,11,13,13,15,15,12,13,12,15,14,9,12,12,15,14,11,13,13,15,15,11,12,13,15,15,13,14,14,17,19,13,13,14,16,16,10,12,12,14,15,11,13,13,15,16,11,13,12,16,15,13,15,15,17,18,14,15,13,16,15,8,11,11,15,14,10,12,12,16,15,10,12,12,16,16,14,15,15,18,17,13,14,15,16,18,9,12,12,15,15,11,12,14,16,17,11,13,13,16,15,15,15,15,17,18,14,15,16,17,17,9,12,12,15,15,11,14,13,16,16,11,13,13,16,16,15,16,15,17,18,14,16,15,17,16,12,14,14,17,16,12,14,15,18,17,13,15,15,17,17,15,15,18,16,20,15,16,17,18,18,11,14,14,16,17,13,15,14,18,17,13,15,15,17,17,15,17,15,18,17,15,17,16,19,18,8,11,11,14,15,10,12,12,15,15,10,12,12,16,16,13,14,14,17,16,14,15,15,17,17,9,12,12,15,16,11,13,13,16,16,11,12,13,16,16,14,16,15,20,17,14,16,16,17,17,9,12,12,15,16,11,13,13,16,17,11,13,13,17,16,14,15,15,17,18,15,15,15,18,18,11,14,14,17,16,13,15,15,17,17,13,14,14,18,17,15,16,16,18,19,15,15,17,17,19,11,14,14,16,17,13,15,14,17,19,13,15,14,18,17,15,17,16,18,18,15,17,15,18,16,4,5,5,8,8,6,6,7,9,9,6,6,6,9,9,9,10,9,11,11,9,9,10,11,11,6,7,7,10,9,7,7,8,9,10,7,7,8,10,10,10,10,10,10,12,9,9,10,11,12,6,7,7,9,9,7,8,7,10,10,7,8,7,10,10,9,10,9,12,11,10,10,9,12,10,9,10,10,12,11,10,10,10,12,12,9,10,10,12,12,12,11,12,13,13,11,11,12,12,13,9,10,10,11,12,9,10,10,12,12,10,10,10,12,12,11,12,11,14,13,11,12,12,14,13,5,7,7,10,10,7,8,8,10,10,7,8,7,10,10,10,10,10,12,12,10,10,10,12,12,6,8,7,10,10,7,7,9,10,11,8,9,9,11,10,10,10,11,11,13,10,10,11,12,13,6,8,8,10,10,7,9,8,11,10,8,9,9,10,11,10,11,10,13,11,10,11,10,12,12,10,11,10,12,11,10,10,10,12,13,10,11,11,13,12,11,11,13,11,14,12,12,13,14,14,9,10,10,12,13,10,11,10,13,12,10,11,11,12,13,11,12,11,14,12,12,13,13,15,14,5,7,7,10,10,7,7,8,10,10,7,8,8,10,10,10,10,10,11,12,10,10,10,12,12,7,8,8,10,10,8,9,8,11,10,7,8,9,10,11,10,11,11,12,12,10,10,11,11,13,7,7,8,10,10,8,8,9,10,11,7,9,7,11,10,10,11,11,13,12,11,11,10,13,11,9,10,10,12,12,10,11,11,13,12,10,10,11,12,12,12,13,13,14,14,11,11,12,12,14,10,10,11,12,12,10,11,11,12,13,10,10,10,13,12,12,13,13,15,14,12,13,10,14,11,8,10,10,12,12,10,11,10,13,13,9,10,10,12,12,12,13,13,15,14,11,12,12,13,13,9,10,10,13,12,10,10,11,13,13,10,11,10,13,12,12,12,13,14,15,12,13,12,15,13,9,10,10,12,13,10,11,10,13,12,10,10,11,12,13,12,14,12,15,13,12,12,13,14,15,11,12,11,14,13,11,11,12,14,15,12,13,12,15,14,13,11,15,11,16,13,14,14,16,15,11,12,12,14,14,11,12,11,14,13,12,12,13,14,15,13,14,12,16,12,14,14,14,15,15,8,10,10,12,12,9,10,10,12,12,10,10,11,13,13,11,12,12,13,13,12,13,13,14,15,9,10,10,13,12,10,11,11,13,12,10,10,11,13,13,12,13,12,15,14,12,12,13,13,16,9,9,10,12,13,10,10,11,12,13,10,11,10,13,13,12,12,13,13,15,13,13,12,15,13,11,12,12,14,14,12,13,12,15,14,11,11,12,13,14,14,14,14,16,15,13,12,15,12,16,11,11,12,13,14,12,13,13,14,15,10,12,11,14,13,14,15,14,16,16,13,14,11,15,11,1,4,4,7,7,7,7,9,9,4,6,6,8,8,8,8,10,10,4,5,6,8,8,8,8,10,10,7,8,8,9,9,9,9,11,11,7,8,8,9,9,9,9,11,11,7,8,8,10,9,11,11,12,11,7,8,8,9,9,11,11,12,12,9,10,10,11,11,12,12,13,12,9,10,10,11,11,12,12,12,13,3,4,4,6,6,7,7,9,9,4,4,4,6,6,8,8,9,9,4,4,4,6,6,7,7,9,9,6,6,6,7,7,8,8,10,9,6,6,6,7,7,8,8,9,10,7,8,7,8,8,9,9,10,10,7,8,8,8,8,9,9,10,10,9,9,9,10,10,10,10,11,11,9,9,9,10,10,10,10,11,11,1,4,4,4,8,8,4,8,8,5,11,9,8,12,11,8,12,11,5,10,11,8,11,12,8,11,12,4,11,11,11,14,13,10,13,13,8,14,13,12,14,16,12,16,15,8,14,14,13,16,14,12,15,16,4,11,11,10,14,13,11,14,14,8,15,14,12,15,15,12,14,16,8,14,14,11,16,15,12,15,13,2,4,4,6,6,7,7,8,8,8,8,4,6,5,7,7,8,8,8,8,8,8,4,5,6,7,7,8,8,8,8,8,8,6,7,7,8,8,8,8,9,9,9,9,6,7,7,8,8,8,8,9,9,9,9,7,8,8,8,8,9,9,9,10,9,10,7,8,8,8,8,9,9,9,9,10,9,8,8,8,9,9,10,10,10,10,10,10,8,8,8,9,9,9,9,10,10,10,10,8,8,8,9,9,9,10,10,10,10,10,8,8,8,9,9,10,10,10,10,10,10,1,4,4,5,5,8,8,10,10,12,12,4,7,7,8,8,9,9,12,11,14,13,4,7,7,7,8,9,10,11,11,13,12,5,8,8,9,9,11,11,12,13,15,14,5,7,8,9,9,11,11,13,13,17,15,8,9,10,11,11,12,13,17,14,17,16,8,10,9,11,11,12,12,13,15,15,17,10,11,11,12,13,14,15,15,16,16,17,9,11,11,12,12,14,15,17,15,15,16,11,14,12,14,15,16,15,16,16,16,15,11,13,13,14,14,15,15,16,16,15,16,2,5,5,6,6,7,7,8,8,8,8], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+508248);
/* memory initializer */ allocate([4,6,6,7,7,8,7,8,8,8,8,4,6,6,7,7,7,7,8,8,8,8,6,7,7,7,7,8,8,8,8,8,9,6,7,7,7,7,8,8,8,8,9,9,7,7,7,8,8,8,8,9,9,9,9,7,7,7,8,8,8,8,9,9,9,9,8,8,8,8,8,9,9,9,9,9,9,8,8,8,8,8,9,9,9,9,9,9,8,8,8,9,8,9,9,9,9,9,9,8,8,8,9,9,9,9,9,9,9,9,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,6,5,9,9,10,10,6,7,9,9,10,10,10,10,5,10,8,10,8,10,10,8,8,10,9,10,10,10,10,5,8,9,10,10,10,10,8,10,10,10,10,10,10,10,9,10,10,10,10,10,10,9,9,10,10,10,10,10,10,9,9,8,9,10,10,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,6,8,8,10,10,10,8,10,10,10,10,10,10,10,10,5,8,8,10,10,10,9,9,10,10,10,10,10,10,10,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,1,6,6,7,8,8,11,10,9,9,11,9,10,9,11,11,9,6,7,6,11,8,11,9,10,10,11,9,11,10,10,10,11,9,5,7,7,8,8,10,11,8,8,11,9,9,10,11,9,10,11,8,9,6,8,8,9,9,10,10,11,11,11,9,11,10,9,11,8,8,8,9,8,9,10,11,9,9,11,11,10,9,9,11,10,8,11,8,9,8,11,9,10,9,10,11,11,10,10,9,10,10,8,8,9,10,10,10,9,11,9,10,11,11,11,11,10,9,11,9,9,11,11,10,8,11,11,11,9,10,10,11,10,11,11,9,11,10,9,11,10,10,10,10,9,11,10,11,10,9,9,10,11,9,8,10,11,11,10,10,11,9,11,10,11,11,10,11,9,9,8,10,8,9,11,9,8,10,10,9,11,10,11,10,11,9,11,8,10,11,11,11,11,10,10,11,11,11,11,10,11,11,10,9,8,10,10,9,11,10,11,11,11,9,9,9,11,11,11,10,10,9,9,10,9,11,11,11,11,8,10,11,10,11,11,10,11,11,9,9,9,10,9,11,9,11,11,11,11,11,10,11,11,10,11,10,11,11,9,11,10,11,10,9,10,9,10,10,11,11,11,11,9,10,9,10,11,11,10,11,11,11,11,11,11,10,11,11,10,3,6,10,8,12,8,14,8,14,19,5,3,5,5,7,6,11,7,16,19,7,5,6,7,7,9,11,12,19,19,6,4,7,5,7,6,10,7,18,18,8,6,7,7,7,7,8,9,18,18,7,5,8,5,7,5,8,6,18,18,12,9,10,9,9,9,8,9,18,18,8,7,10,6,8,5,6,4,11,18,11,15,16,12,11,8,8,6,9,18,14,18,18,18,16,16,16,13,16,18,8,11,13,13,15,16,19,19,19,19,11,8,8,9,9,11,13,15,19,20,14,8,7,7,8,9,12,13,15,20,15,9,6,5,5,7,10,12,14,18,14,9,7,5,3,4,7,10,12,16,13,10,8,6,3,3,5,8,11,14,11,10,9,7,5,4,4,6,11,14,10,10,10,8,6,5,5,6,10,14,10,10,10,9,8,7,7,7,10,14,11,12,12,12,11,10,10,10,12,16,1,5,5,5,7,7,5,7,7,5,7,7,7,9,9,7,9,9,5,7,7,7,9,9,8,9,9,5,7,7,8,9,9,7,9,9,7,9,9,9,10,11,9,10,10,7,9,9,9,10,9,9,10,11,5,8,7,7,9,9,8,9,9,7,9,9,9,11,10,9,9,10,7,9,9,9,10,10,9,11,10,3,5,5,8,8,5,7,7,9,9,5,7,7,9,9,9,10,9,11,11,9,9,9,11,11,5,7,7,9,9,7,8,8,10,10,7,8,8,10,10,10,10,10,12,12,9,10,10,11,12,5,7,7,9,9,7,8,8,10,10,7,8,8,10,10,9,10,10,12,11,10,10,10,12,12,9,10,10,12,12,10,10,10,12,12,9,10,10,12,12,12,12,12,14,14,11,12,12,13,14,9,10,10,12,12,9,10,10,12,12,10,10,10,12,12,11,12,12,14,13,12,12,12,14,13,5,7,7,9,9,7,8,8,10,10,7,8,8,10,10,10,10,10,12,12,10,10,10,12,12,7,8,8,11,10,8,9,9,11,11,8,9,9,11,11,10,11,11,12,13,10,11,11,12,13,7,8,8,10,10,8,9,8,11,10,8,9,9,11,11,10,11,10,13,12,10,11,11,13,13,10,11,10,13,12,10,11,11,13,13,10,11,11,13,13,12,12,13,13,14,12,13,13,14,14,9,10,10,12,12,10,11,10,13,12,10,11,11,13,13,12,13,12,14,13,12,13,13,14,15,5,7,7,9,10,7,8,8,10,10,7,8,8,10,10,10,10,10,12,12,10,10,11,12,12,7,8,8,10,10,8,9,9,11,11,8,8,9,10,11,10,11,11,13,13,10,10,11,12,13,7,8,8,10,10,8,9,9,11,11,8,9,9,11,11,10,11,11,13,12,10,11,11,13,12,9,10,10,12,12,10,11,11,13,13,10,10,11,12,13,12,13,13,15,14,12,12,13,12,14,9,10,11,12,13,10,11,11,13,13,10,11,11,13,13,12,13,13,14,14,12,13,12,14,13,8,10,10,12,12,9,11,10,13,12,9,10,10,12,13,12,13,13,14,14,12,12,12,14,14,9,10,10,13,13,10,11,11,13,13,10,11,11,13,13,13,13,13,14,15,12,13,13,14,15,9,10,10,12,13,10,11,10,13,13,10,11,11,12,13,12,13,12,15,14,12,13,13,14,15,11,12,12,15,14,12,12,13,14,15,12,13,13,15,14,13,13,15,14,16,14,14,14,16,15,11,12,12,14,14,11,12,12,14,14,12,13,13,14,15,13,14,13,15,13,14,14,14,15,16,8,9,10,12,12,9,10,10,13,12,9,10,11,12,13,12,12,12,14,14,12,13,13,14,14,9,10,10,13,12,10,11,11,13,13,10,10,11,13,13,12,13,13,15,14,12,12,13,14,15,9,10,10,13,13,10,11,11,13,13,10,11,11,13,13,12,13,13,14,14,13,13,13,15,15,11,12,12,14,13,12,13,13,15,14,11,12,12,14,14,14,14,14,16,15,13,13,14,13,16,11,12,12,14,14,12,13,13,14,15,12,13,12,14,14,14,14,14,16,16,14,15,13,16,14,2,4,4,6,6,7,7,9,9,4,5,5,6,6,8,7,9,9,4,5,5,6,6,7,8,9,9,6,6,6,7,7,8,8,10,10,6,6,6,7,7,8,8,10,10,7,8,7,8,8,9,9,11,10,7,7,8,8,8,9,9,10,11,9,9,9,10,10,11,10,11,11,9,9,9,10,10,10,11,11,11,2,5,5,6,6,7,7,8,8,9,9,10,10,11,11,11,11,5,5,5,7,6,8,7,9,9,9,9,10,10,11,11,12,12,5,5,5,6,6,7,8,8,9,9,9,10,10,11,11,12,12,6,7,6,7,7,8,8,9,9,9,9,10,10,11,11,12,12,6,6,7,7,7,8,8,9,9,9,9,10,10,11,11,12,12,7,8,8,8,8,9,9,9,9,10,10,11,11,11,11,12,12,7,7,8,8,8,9,9,9,9,10,10,11,11,11,11,12,12,8,9,9,9,9,9,9,10,10,10,10,11,11,12,12,12,12,8,9,9,9,9,9,9,10,10,10,10,11,11,12,12,12,12,9,9,9,9,9,10,10,10,10,10,11,11,11,12,12,13,13,9,9,9,9,9,10,10,10,10,11,10,11,11,12,12,13,13,10,10,10,10,10,11,11,11,11,11,11,11,12,12,12,13,13,10,10,10,10,10,11,11,11,11,11,11,12,11,12,12,13,13,11,11,11,11,11,11,11,12,12,12,12,12,12,13,13,13,13,11,11,11,11,11,11,11,12,12,12,12,13,12,13,13,13,13,11,12,12,12,12,12,12,12,12,13,13,13,13,13,13,14,14,11,12,12,12,12,12,12,12,13,13,13,13,13,13,13,14,14,1,4,4,5,7,7,5,7,7,5,8,8,7,9,9,7,9,10,5,8,8,7,10,9,7,10,9,5,8,8,8,11,10,8,10,10,7,10,10,9,9,12,10,12,12,7,10,10,9,12,10,10,11,12,5,8,8,8,10,10,8,11,11,7,11,10,10,12,11,9,10,12,7,10,11,10,12,12,9,12,9,2,5,5,6,6,7,7,8,8,8,8,5,6,6,7,7,7,7,8,8,8,8,5,6,6,6,7,7,7,8,8,8,8,6,7,7,7,7,8,8,8,8,8,8,6,7,7,7,7,8,8,8,8,8,8,7,7,7,8,8,8,8,8,8,8,8,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,8,8,8,8,8,8,8,8,8,9,9,8,8,8,8,8,8,8,9,9,9,9,8,8,8,8,8,8,8,9,9,9,9,1,5,4,7,7,8,8,8,8,10,10,11,11,4,6,6,7,7,9,9,9,9,10,10,11,11,4,6,6,7,7,9,9,9,9,10,10,11,11,7,8,8,9,9,9,9,10,10,11,11,12,12,7,7,7,9,8,10,9,10,10,11,11,12,12,8,9,9,9,10,10,10,11,11,12,12,13,13,8,9,9,10,9,10,10,11,11,12,12,13,13,8,9,9,10,10,11,11,11,11,12,12,13,13,8,9,9,10,10,11,11,12,11,12,12,13,13,10,10,10,11,11,12,12,12,12,13,13,14,14,10,10,10,11,11,12,12,12,12,13,13,14,14,11,11,11,12,12,13,13,13,13,14,14,14,14,11,11,11,12,12,13,13,13,13,14,14,14,14,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,4,4,7,7,8,8,8,8,9,9,10,10,4,6,6,8,8,9,9,9,9,10,10,11,10,4,6,6,8,8,9,9,9,9,10,10,11,11,7,8,8,10,9,10,10,10,10,11,11,12,12,7,8,8,10,10,10,10,10,10,11,11,12,12,8,9,9,10,10,11,11,11,11,12,12,13,13,8,9,9,10,10,11,11,11,11,12,12,13,13,8,9,9,11,10,11,11,12,12,13,13,14,13,8,9,9,10,10,11,11,12,12,13,13,13,13,9,10,10,11,11,12,12,13,13,13,13,14,14,9,10,10,11,11,12,12,13,13,13,13,14,14,10,11,11,12,12,13,13,14,13,14,14,15,14,10,11,11,12,12,13,13,14,13,14,14,15,14,2,5,5,7,7,7,7,7,7,8,8,5,6,6,7,7,7,7,8,8,8,8,5,6,6,7,7,7,7,8,8,8,8,7,7,7,7,7,8,8,8,8,8,8,7,7,7,7,7,8,8,8,8,8,8,7,7,7,8,8,8,8,8,8,8,8,7,7,7,8,8,8,8,8,8,8,8,7,8,8,8,8,8,8,8,8,8,8,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,4,4,7,7,8,8,7,7,9,8,10,9,11,11,4,7,6,9,8,9,9,9,9,10,9,11,9,12,9,4,6,7,8,8,9,9,9,9,10,10,10,11,11,12,7,9,8,10,10,11,11,10,10,11,11,12,12,13,12,7,8,8,10,10,10,11,10,10,11,11,11,12,12,13,8,9,9,11,11,11,11,11,11,12,12,13,13,13,13,8,9,9,11,11,11,11,11,11,12,12,13,13,13,14,8,9,9,10,10,11,11,12,11,13,13,14,13,14,14,8,9,9,10,10,11,11,12,12,12,12,13,13,14,14,9,10,10,11,11,12,12,13,12,13,13,14,14,15,15,9,10,10,11,11,12,12,12,13,13,13,14,14,14,15,10,11,11,12,12,13,13,14,13,14,14,15,14,15,15,10,11,11,12,12,13,12,13,14,14,14,14,14,15,15,11,12,12,13,13,13,13,14,14,15,14,15,15,16,16,11,12,12,13,13,13,13,14,14,14,15,15,15,16,16,3,5,5,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,5,6,6,7,7,8,8,9,9,9,9,9,9,9,9,9,9,10,10,10,10,5,6,6,7,7,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,7,7,7,8,8,9,8,9,9,9,9,9,9,10,10,10,10,10,10,10,10,7,7,7,8,8,9,9,9,9,9,9,9,9,10,9,10,10,10,9,10,9,8,8,8,9,8,9,9,9,9,10,9,10,10,10,10,10,10,10,10,10,10,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,1,5,3,9,8,9,9,9,9,9,9,9,9,9,9,5,7,8,9,9,9,9,9,9,9,9,9,9,9,9,5,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,1,4,4,7,7,7,7,7,6,9,7,10,8,12,12,13,13,14,14,4,7,7,9,9,9,8,9,8,10,9,11,9,14,9,14,10,13,11,4,7,7,9,9,9,9,8,9,10,10,11,11,12,13,12,13,14,15,7,9,9,10,11,10,10,10,10,11,12,13,13,13,14,17,14,15,16,7,9,9,10,10,10,10,10,10,11,12,13,13,14,14,15,15,18,18,8,9,9,11,10,11,11,11,12,13,12,14,14,16,15,15,17,18,15,8,9,9,10,10,11,11,11,11,13,13,14,14,15,15,15,16,16,18,7,9,8,10,10,11,11,12,12,14,14,15,15,16,16,15,17,16,18,8,9,9,10,10,11,12,12,12,13,13,16,15,17,16,17,18,17,18,9,10,10,12,11,13,13,14,13,14,14,15,17,16,18,17,18,17,18,9,10,10,12,11,12,13,13,14,15,16,14,15,16,18,18,18,18,17,11,11,11,13,13,14,14,16,15,15,15,16,15,15,18,18,18,17,16,11,11,12,13,13,15,14,15,16,16,16,17,16,15,18,17,18,16,18,12,13,13,15,15,15,16,18,16,17,16,17,16,17,17,17,18,18,17,13,13,13,15,13,16,15,17,16,16,16,18,18,18,18,16,17,17,18,13,15,14,15,15,18,17,18,18,18,16,18,17,18,17,18,16,17,17,14,14,14,15,16,17,16,18,18,18,17,18,17,18,18,18,16,16,16,14,17,16,17,15,16,18,18,17,18,17,18,17,18,18,18,17,18,17,15,16,15,18,15,18,17,16,18,18,18,18,18,18,17,18,16,18,17,2,3,4,4,4,5,5,6,5,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,7,8,8,8,8,8,8,5,8,10,10,10,11,11,12,14,18,7,5,5,6,8,9,10,12,14,17,9,5,4,5,6,8,10,11,13,19,9,5,4,4,5,6,9,10,12,17,8,6,5,4,4,5,7,10,11,15,8,7,7,6,5,5,6,9,11,14,8,9,8,7,6,5,6,7,11,14,9,11,11,9,7,6,6,6,9,14,11,14,15,13,9,8,7,7,9,14,13,15,19,17,12,11,10,9,10,14,4,5,18,7,10,6,7,8,9,10,5,2,18,5,7,5,6,7,8,11,17,17,17,17,17,17,17,17,17,17,7,4,17,6,9,6,8,10,12,15,11,7,17,9,6,6,7,9,11,15,6,4,17,6,6,4,5,8,11,16,6,6,17,8,6,5,6,9,13,16,8,9,17,11,9,8,8,11,13,17,9,12,17,15,14,13,12,13,14,17,12,15,17,17,17,17,17,16,17,17,1,5,4,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,7,8,9,0,0,0,0,0,0,7,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,7,9,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,8,10,10,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,10,9,0,0,0,0,0,0,8,9,11,0,0,0,0,0,0,9,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,10,0,0,0,0,0,0,9,11,10,0,0,0,0,0,0,9,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,8,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,11,11,0,0,0,0,0,0,9,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,10,0,0,0,0,0,0,9,11,11,0,0,0,0,0,0,8,11,9], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+518488);
/* memory initializer */ allocate([1,4,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,6,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,7,7,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,7,7,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,7,7,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,9,8,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,5,5,7,6,8,8,0,0,0,7,7,7,7,8,8,0,0,0,7,7,7,7,8,9,0,0,0,8,8,8,8,9,9,0,0,0,8,8,8,8,9,9,0,0,0,9,9,8,8,10,10,0,0,0,9,9,8,8,10,10,0,0,0,10,10,9,9,10,10,0,0,0,0,0,9,9,10,10,1,3,3,6,6,8,8,9,9,8,8,10,9,10,10,11,11,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,11,12,0,0,0,7,7,8,8,9,9,9,9,10,10,11,11,12,11,0,0,0,8,8,9,9,10,10,9,9,10,10,11,11,12,12,0,0,0,8,8,9,9,10,10,9,9,11,10,11,11,12,12,0,0,0,9,9,9,9,10,10,10,10,11,11,11,12,12,12,0,0,0,9,9,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,10,10,10,10,11,11,10,10,11,11,12,12,13,13,0,0,0,0,0,10,9,10,11,10,10,11,11,12,12,13,13,0,0,0,0,0,9,9,10,9,10,11,12,12,13,13,14,13,0,0,0,0,0,9,9,9,10,10,10,11,11,13,12,13,13,0,0,0,0,0,10,10,10,10,11,11,12,12,13,13,14,14,0,0,0,0,0,0,0,10,10,11,11,12,12,13,13,13,14,0,0,0,0,0,0,0,11,11,11,11,12,12,13,14,14,14,0,0,0,0,0,0,0,11,11,11,11,12,12,13,13,14,13,0,0,0,0,0,0,0,11,11,12,12,13,13,14,14,14,14,0,0,0,0,0,0,0,0,0,12,12,12,12,13,13,14,14,1,4,4,7,6,6,7,6,6,4,7,7,11,9,10,12,9,10,4,7,7,10,10,10,11,9,9,6,11,10,11,11,12,11,11,11,6,10,10,11,11,12,11,10,10,6,9,10,11,11,11,11,10,10,7,10,11,12,11,11,12,11,12,6,9,9,10,9,9,11,10,10,6,9,9,10,10,10,11,10,10,1,3,3,6,6,8,8,9,9,9,9,10,10,10,7,7,8,8,9,9,9,9,10,10,9,7,7,8,8,9,9,9,9,10,10,10,8,8,9,9,9,9,9,9,10,10,10,8,8,9,9,9,9,8,9,10,10,10,8,8,9,9,9,10,10,10,10,10,10,9,9,9,9,9,9,10,10,11,10,11,9,9,9,9,10,10,10,10,11,11,11,10,10,9,9,10,10,10,9,11,10,10,10,10,10,10,9,9,10,10,11,11,10,10,10,9,9,9,10,10,10,1,4,4,7,6,7,7,7,7,8,8,9,9,7,6,6,7,7,8,8,7,7,8,9,10,10,7,6,6,7,7,8,7,7,7,9,9,10,12,0,8,8,8,8,8,9,8,8,9,9,10,10,0,8,8,8,8,8,9,8,9,9,9,11,10,0,0,13,9,8,9,9,9,9,10,10,11,11,0,13,0,9,9,9,9,9,9,11,10,11,11,0,0,0,8,9,10,9,10,10,13,11,12,12,0,0,0,8,9,9,9,10,10,13,12,12,13,0,0,0,12,0,10,10,12,11,10,11,12,12,0,0,0,13,13,10,10,10,11,12,0,13,0,0,0,0,0,0,13,11,0,12,12,12,13,12,0,0,0,0,0,0,13,13,11,13,13,11,12,1,3,4,5,5,7,6,6,6,5,7,7,7,6,6,7,7,7,6,6,7,7,7,6,6,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,1,4,4,5,5,10,8,11,11,11,11,11,11,11,11,6,6,6,7,6,11,10,11,11,11,11,11,11,11,11,7,5,6,6,6,8,7,11,11,11,11,11,11,11,11,11,7,8,8,8,9,9,11,11,11,11,11,11,11,11,11,9,8,7,8,9,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,1,5,5,7,7,8,7,8,8,10,10,9,9,10,10,10,11,11,10,12,11,12,12,12,9,8,8,8,8,8,9,10,10,10,10,11,11,11,10,11,11,12,12,11,12,8,8,7,7,8,9,10,10,10,9,10,10,9,10,10,11,11,11,11,11,11,9,9,9,9,8,9,10,10,11,10,10,11,11,12,10,10,12,12,11,11,10,9,9,10,8,9,10,10,10,9,10,10,11,11,10,11,10,10,10,12,12,12,9,10,9,10,9,9,10,10,11,11,11,11,10,10,10,11,12,11,12,11,12,10,11,10,11,9,10,9,10,9,10,10,9,10,10,11,10,11,11,11,11,12,11,9,10,10,10,10,11,11,11,11,11,10,11,11,11,11,10,12,10,12,12,11,12,10,10,11,10,9,11,10,11,9,10,11,10,10,10,11,11,11,11,12,12,10,9,9,11,10,9,12,11,10,12,12,11,11,11,11,10,11,11,12,11,10,12,9,11,10,11,10,10,11,10,11,9,10,10,10,11,12,11,11,12,11,10,10,11,11,9,10,10,12,10,11,10,10,10,9,10,10,10,10,9,10,10,11,11,11,11,12,11,10,10,10,10,11,11,10,11,11,9,11,10,12,10,12,11,10,11,10,10,10,11,10,10,11,11,10,11,10,10,10,10,11,11,12,10,10,10,11,10,11,12,11,10,11,10,10,11,11,10,12,10,9,10,10,11,11,11,10,12,10,10,11,11,11,10,10,11,10,10,10,11,10,11,10,12,11,11,10,10,10,12,10,10,11,9,10,11,11,11,10,10,11,10,10,9,11,11,12,12,11,12,11,11,11,11,11,11,9,10,11,10,12,10,10,10,10,11,10,10,11,10,10,12,10,10,10,10,10,9,12,10,10,10,10,12,9,11,10,10,11,10,12,12,10,12,12,12,10,10,10,10,9,10,11,10,10,12,10,10,12,11,10,11,10,10,12,11,10,12,10,10,11,9,11,10,9,10,9,10,4,6,18,8,11,8,8,9,9,10,4,4,18,5,9,5,6,7,8,10,18,18,18,18,17,17,17,17,17,17,7,5,17,6,11,6,7,8,9,12,12,9,17,12,8,8,9,10,10,13,7,5,17,6,8,4,5,6,8,10,6,5,17,6,8,5,4,5,7,9,7,7,17,8,9,6,5,5,6,8,8,8,17,9,11,8,6,6,6,7,9,10,17,12,12,10,9,7,7,8,1,5,5,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,5,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,7,0,0,0,0,0,0,7,8,9,0,0,0,0,0,0,7,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,8,0,0,0,0,0,0,7,9,8,0,0,0,0,0,0,7,9,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,8,8,10,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,8,10,9,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,8,8,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,8,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,8,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,9,9,0,0,0,0,0,0,9,10,10,0,0,0,0,0,0,8,10,8], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+529361);
/* memory initializer */ allocate([2,4,4,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,7,7,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,9,8,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,4,5,6,6,8,8,0,0,0,8,8,7,7,9,9,0,0,0,8,8,7,7,9,9,0,0,0,9,10,8,8,9,9,0,0,0,10,10,8,8,9,9,0,0,0,11,10,8,8,10,10,0,0,0,11,11,8,8,10,10,0,0,0,12,12,9,9,10,10,0,0,0,0,0,9,9,10,10,1,3,3,5,5,8,8,8,8,9,9,10,10,11,11,11,11,0,0,0,8,8,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,8,8,8,8,9,9,9,9,10,10,11,11,12,12,0,0,0,9,9,8,8,10,10,10,10,11,11,12,12,12,12,0,0,0,9,9,8,8,10,10,10,10,11,11,12,12,12,12,0,0,0,10,10,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,10,10,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,11,11,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,0,0,9,9,10,10,10,10,11,11,12,12,13,13,0,0,0,0,0,9,9,10,10,11,11,12,12,12,12,13,13,0,0,0,0,0,9,9,10,10,11,11,12,11,12,12,13,13,0,0,0,0,0,10,10,11,11,11,11,12,12,13,12,13,13,0,0,0,0,0,0,0,11,10,11,11,12,12,13,13,13,13,0,0,0,0,0,0,0,11,11,12,12,12,12,13,13,13,14,0,0,0,0,0,0,0,11,11,12,12,12,12,13,13,14,13,0,0,0,0,0,0,0,12,12,12,12,13,13,13,13,14,14,0,0,0,0,0,0,0,0,0,12,12,13,13,13,13,14,14,1,4,4,6,6,6,7,6,6,4,7,7,10,9,9,10,9,9,5,7,7,10,9,9,10,9,9,6,10,10,10,10,10,11,10,10,6,9,9,10,9,10,11,10,10,6,9,9,10,9,9,11,9,10,7,10,10,11,11,11,11,10,10,6,9,9,10,10,10,11,9,9,6,9,9,10,10,10,10,9,9,2,3,3,5,5,7,7,7,7,7,7,10,10,9,7,7,7,7,8,8,8,8,9,9,9,7,7,7,7,8,8,8,8,10,10,10,7,7,7,7,8,8,8,8,10,10,10,7,7,7,7,8,8,8,8,10,10,10,8,8,8,8,8,8,8,8,10,10,10,8,8,8,8,8,8,8,8,10,10,10,8,8,8,8,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,1,4,4,6,6,8,8,8,8,9,9,10,10,7,5,5,7,7,8,8,8,8,9,10,11,11,7,5,5,7,7,8,8,9,9,10,10,11,11,0,8,8,8,8,9,9,9,9,9,10,11,11,0,8,8,8,8,9,9,9,9,10,10,11,11,0,12,12,9,9,9,9,10,9,10,11,11,11,0,13,12,9,8,9,9,10,10,11,11,12,11,0,0,0,9,9,9,9,10,10,11,11,12,12,0,0,0,10,10,9,9,10,10,11,11,12,12,0,0,0,13,13,10,10,11,11,12,11,13,12,0,0,0,14,14,10,10,11,10,11,11,12,12,0,0,0,0,0,12,12,11,11,12,12,13,13,0,0,0,0,0,12,12,11,10,12,11,13,12,2,3,3,5,5,6,6,6,5,5,6,6,6,5,5,6,6,6,5,5,6,6,6,5,5,1,3,3,10,10,10,10,10,10,10,10,10,10,5,6,6,10,10,10,10,10,10,10,10,10,10,6,7,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,1,4,4,5,5,7,7,9,9,11,11,12,12,13,13,6,5,5,6,6,9,9,10,10,12,12,12,13,15,14,6,5,5,7,7,9,9,10,10,12,12,12,13,14,13,17,7,7,8,8,10,10,11,11,12,13,13,13,13,13,17,7,7,8,8,10,10,11,11,13,13,13,13,14,14,17,11,11,9,9,11,11,12,12,12,13,13,14,15,13,17,12,12,9,9,11,11,12,12,13,13,13,13,14,16,17,17,17,11,12,12,12,13,13,13,14,15,14,15,15,17,17,17,12,12,11,11,13,13,14,14,15,14,15,15,17,17,17,15,15,13,13,14,14,15,14,15,15,16,15,17,17,17,15,15,13,13,13,14,14,15,15,15,15,16,17,17,17,17,16,14,15,14,14,15,14,14,15,15,15,17,17,17,17,17,14,14,16,14,15,15,15,15,15,15,17,17,17,17,17,17,16,16,15,17,15,15,14,17,15,17,16,17,17,17,17,16,15,14,15,15,15,15,15,15,2,4,4,6,6,7,7,8,8,8,8,9,8,9,9,9,9,9,9,9,9,11,11,12,7,7,7,7,8,8,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,7,7,7,7,8,8,9,8,9,9,9,9,9,9,10,10,10,10,11,11,12,8,8,8,8,8,8,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,7,7,8,8,8,8,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,8,8,8,8,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,8,8,8,8,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,12,11,9,9,8,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,8,8,9,9,9,9,10,10,10,10,10,10,10,10,10,10,11,12,11,12,11,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,12,11,12,11,11,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,12,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,12,11,11,12,11,10,10,10,10,10,10,10,10,10,10,10,10,11,10,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,12,11,12,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,12,11,12,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,11,11,12,11,11,12,11,11,12,10,10,11,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,12,12,11,12,11,11,12,12,12,11,11,10,10,10,10,10,10,10,10,10,11,12,12,11,12,12,11,12,11,11,11,11,10,10,10,10,10,10,10,10,10,10,4,7,11,9,12,8,7,10,6,4,5,5,7,5,6,16,9,5,5,6,7,7,9,16,7,4,6,5,7,5,7,17,10,7,7,8,7,7,8,18,7,5,6,4,5,4,5,15,7,6,7,5,6,4,5,15,12,13,18,12,17,11,9,17,1,4,4,5,7,7,5,7,7,5,8,8,8,10,10,7,10,10,5,8,8,7,10,10,8,10,10,4,9,8,8,11,11,8,11,11,7,11,11,10,11,13,10,13,13,7,11,11,10,13,12,10,13,13,5,9,8,8,11,11,8,11,11,7,11,11,9,13,13,10,12,13,7,11,11,10,13,13,10,13,11,2,4,4,5,6,6,5,6,6,5,7,7,6,7,8,6,7,8,5,7,7,6,8,8,7,9,7,5,7,7,7,9,9,7,8,8,6,9,8,7,7,10,8,10,10,6,8,8,8,10,8,8,10,10,5,7,7,7,8,8,7,8,9,6,8,8,8,10,10,8,8,10,6,8,9,8,10,10,7,10,8,1,5,5,7,7,6,7,7,9,9,6,7,7,9,9,8,10,9,11,11,8,9,9,11,11,6,8,8,10,10,8,10,10,11,11,8,10,10,11,11,10,11,11,12,12,10,11,11,12,13,6,8,8,10,10,8,10,10,11,11,8,10,10,11,11,9,10,11,12,12,10,11,11,12,12,8,11,11,14,13,10,12,11,15,13,10,12,11,14,14,12,13,12,16,14,12,14,12,16,15,8,11,11,13,14,10,11,12,13,15,10,11,12,13,15,11,12,13,14,15,12,12,14,14,16,5,8,8,11,11,9,11,11,12,12,8,10,11,12,12,11,12,12,15,14,11,12,12,14,14,7,11,10,13,12,10,11,12,13,14,10,12,12,14,13,12,13,13,14,15,12,13,13,15,15,7,10,11,12,13,10,12,11,14,13,10,12,13,13,15,12,13,12,14,14,11,13,13,15,16,9,12,12,15,14,11,13,13,15,16,11,13,13,16,16,13,14,15,15,15,12,14,15,17,16,9,12,12,14,15,11,13,13,15,16,11,13,13,16,18,13,14,14,17,16,13,15,15,17,18,5,8,9,11,11,8,11,11,12,12,8,10,11,12,12,11,12,12,14,14,11,12,12,14,15,7,11,10,12,13,10,12,12,14,13,10,11,12,13,14,11,13,13,15,14,12,13,13,14,15,7,10,11,13,13,10,12,12,13,14,10,12,12,13,13,11,13,13,16,16,12,13,13,15,14,9,12,12,16,15,10,13,13,15,15,11,13,13,17,15,12,15,15,18,17,13,14,14,15,16,9,12,12,15,15,11,13,13,15,16,11,13,13,15,15,12,15,15,16,16,13,15,14,17,15,7,11,11,15,15,10,13,13,16,15,10,13,13,15,16,14,15,15,17,19,13,15,14,15,18,9,12,12,16,16,11,13,14,17,16,11,13,13,17,16,15,15,16,17,19,13,15,16,0,18,9,12,12,16,15,11,14,13,17,17,11,13,14,16,16,15,16,16,19,18,13,15,15,17,19,11,14,14,19,16,12,14,15,0,18,12,16,15,18,17,15,15,18,16,19,14,15,17,19,19,11,14,14,18,19,13,15,14,19,19,12,16,15,18,17,15,17,15,0,16,14,17,16,19,0,7,11,11,14,14,10,12,12,15,15,10,13,13,16,15,13,15,15,17,0,14,15,15,16,19,9,12,12,16,16,11,14,14,16,16,11,13,13,16,16,14,17,16,19,0,14,18,17,17,19,9,12,12,15,16,11,13,13,15,17,12,14,13,19,16,13,15,15,17,19,15,17,16,17,19,11,14,14,19,16,12,15,15,19,17,13,14,15,17,19,14,16,17,19,19,16,15,16,17,19,11,15,14,16,16,12,15,15,19,0,12,14,15,19,19,14,16,16,0,18,15,19,14,18,16,3,5,5,8,8,5,6,7,9,9,6,7,6,9,9,9,9,9,10,11,9,9,9,11,10,6,7,7,10,10,7,7,8,10,10,7,8,8,10,10,10,10,10,10,11,9,10,10,11,12,6,7,7,10,10,7,8,8,10,10,7,8,7,10,10,9,10,10,12,11,10,10,10,11,10,9,10,10,12,11,10,10,10,13,11,9,10,10,12,12,11,11,12,12,13,11,11,11,12,13,9,10,10,12,12,10,10,11,12,12,10,10,11,12,12,11,11,11,13,13,11,12,12,13,13,5,7,7,10,10,7,8,8,10,10,7,8,8,10,10,10,11,11,12,12,10,11,10,12,12,7,8,8,11,11,7,8,9,10,11,8,9,9,11,11,11,10,11,10,12,10,11,11,12,13,7,8,8,10,11,8,9,8,12,10,8,9,9,11,12,10,11,10,13,11,10,11,11,13,12,9,11,10,13,12,10,10,11,12,12,10,11,11,13,13,12,10,13,11,14,11,12,12,15,13,9,11,11,13,13,10,11,11,13,12,10,11,11,12,14,12,13,11,14,12,12,12,12,14,14,5,7,7,10,10,7,8,8,10,10,7,8,8,11,10,10,11,11,12,12,10,11,10,12,12,7,8,8,10,11,8,9,9,12,11,8,8,9,10,11,10,11,11,12,13,11,10,11,11,13,6,8,8,10,11,8,9,9,11,11,7,9,7,11,10,10,11,11,12,12,10,11,10,13,10,9,11,10,13,12,10,12,11,13,13,10,10,11,12,13,11,12,13,15,14,11,11,13,12,13,9,10,11,12,13,10,11,11,12,13,10,11,10,13,12,12,13,13,13,14,12,12,11,14,11,8,10,10,12,13,10,11,11,13,13,10,11,10,13,13,12,13,14,15,14,12,12,12,14,13,9,10,10,13,12,10,10,12,13,13,10,11,11,15,12,12,12,13,15,14,12,13,13,15,13,9,10,11,12,13,10,12,10,13,12,10,11,11,12,13,12,14,12,15,13,12,12,12,15,14,11,12,11,14,13,11,11,12,14,14,12,13,13,14,13,13,11,15,11,15,14,14,14,16,15,11,12,12,13,14,11,13,11,14,14,12,12,13,14,15,12,14,12,15,12,13,15,14,16,15,8,10,10,12,12,10,10,10,12,13,10,11,11,13,13,12,12,12,13,14,13,13,13,15,15,9,10,10,12,12,10,11,11,13,12,10,10,11,13,13,12,12,12,14,14,12,12,13,15,14,9,10,10,13,12,10,10,12,12,13,10,11,10,13,13,12,13,13,14,14,12,13,12,14,13,11,12,12,14,13,12,13,12,14,14,10,12,12,14,14,14,14,14,16,14,13,12,14,12,15,10,12,12,14,15,12,13,13,14,16,11,12,11,15,14,13,14,14,14,15,13,14,11,14,12,1,4,4,7,7,7,7,9,9,4,6,6,8,7,8,8,10,10,4,6,6,8,8,8,8,10,10,6,8,8,9,9,9,9,11,11,7,8,8,9,9,9,9,11,11,7,8,8,9,9,10,10,12,11,7,8,8,9,9,10,10,11,11,9,10,10,11,11,11,12,12,12,9,10,10,11,11,12,12,12,12,1,4,4,7,7,9,9,11,11,12,12,16,16,3,6,6,9,9,11,11,12,12,13,14,18,16,3,6,7,9,9,11,11,13,12,14,14,17,16,7,9,9,11,11,12,12,14,14,14,14,17,16,7,9,9,11,11,13,12,13,13,14,14,17,0,9,11,11,12,13,14,14,14,13,15,14,17,17,9,11,11,12,12,14,14,13,14,14,15,0,0,11,12,12,15,14,15,14,15,14,15,16,17,0,11,12,13,13,13,14,14,15,14,15,15,0,0,12,14,14,15,15,14,16,15,15,17,16,0,18,13,14,14,15,14,15,14,15,16,17,16,0,0,17,17,18,0,16,18,16,0,0,0,17,0,0,16,0,0,16,16,0,15,0,17,0,0,0,0,1,4,4,6,6,4,6,5,7,7,4,5,6,7,7,6,7,7,7,7,6,7,7,7,7,1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,1,5,5,5,5,10,10,11,11,11,11,11,11,11,11,5,7,6,8,8,9,10,11,11,11,11,11,11,11,11,6,6,7,9,7,11,10,11,11,11,11,11,11,11,11,5,6,6,11,8,11,11,11,11,11,11,11,11,11,11,5,6,6,9,10,11,10,11,11,11,11,11,11,11,11,7,10,10,11,11,11,11,11,11,11,11,11,11,11,11,7,11,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,1,6,5,7,7,9,9,9,9,10,12,12,10,11,11,10,11,11,11,10,11,6,8,8,9,9,10,10,9,10,11,11,10,11,11,11,11,10,11,11,11,11,6,7,8,9,9,9,10,11,10,11,12,11,10,11,11,11,11,11,11,12,10,8,9,9,10,9,10,10,9,10,10,10,10,10,9,10,10,10,10,9,10,10,9,9,9,9,10,10,9,9,10,10,11,10,9,12,10,11,10,9,10,10,10,8,9,9,10,9,10,9,9,10,10,9,10,9,11,10,10,10,10,10,9,10,8,8,9,9,10,9,11,9,8,9,9,10,11,10,10,10,11,12,9,9,11,8,9,8,11,10,11,10,10,9,11,10,10,10,10,10,10,10,11,11,11,11,8,9,9,9,10,10,10,11,11,12,11,12,11,10,10,10,12,11,11,11,10,8,10,9,11,10,10,11,12,10,11,12,11,11,12,11,12,12,10,11,11,10,9,9,10,11,12,10,10,10,11,10,11,11,10,12,12,10,11,10,11,12,10,9,10,10,11,10,11,11,11,11,11,12,11,11,11,9,11,10,11,10,11,10,9,9,10,11,11,11,10,10,11,12,12,11,12,11,11,11,12,12,12,12,11,9,11,11,12,10,11,11,11,11,11,11,12,11,11,12,11,11,11,10,11,11,9,11,10,11,11,11,10,10,10,11,11,11,12,10,11,10,11,11,11,11,12,9,11,10,11,11,10,10,11,11,9,11,11,12,10,10,10,10,10,11,11,10,9,10,11,11,12,11,10,10,12,11,11,12,11,12,11,11,10,10,11,11,10,12,11,10,11,10,11,10,10,10,11,11,10,10,11,11,11,11,10,10,10,12,11,11,11,11,10,9,10,11,11,11,12,11,11,11,12,10,11,11,11,9,10,11,11,11,11,11,11,10,10,11,11,12,11,10,11,12,11,10,10,11,9,10,11,11,11,11,11,10,11,11,10,12,11,11,11,12,11,11,11,10,10,11,11,4,7,13,9,15,9,16,8,10,13,7,5,8,6,9,7,10,7,10,11,11,6,7,8,8,9,9,9,12,16,8,5,8,6,8,6,9,7,10,12,11,7,7,7,6,7,7,7,11,15,7,5,8,6,7,5,7,6,9,13,13,9,9,8,6,6,5,5,9,14,8,6,8,6,6,4,5,3,5,13,9,9,11,8,10,7,8,4,5,12,11,16,17,15,17,12,13,8,8,15,1,4,4,5,7,7,5,7,7,5,8,8,7,9,10,7,9,9,5,8,8,7,10,9,7,9,9,5,8,8,8,10,10,8,10,10,7,10,10,9,10,12,10,12,12,7,10,10,9,12,11,10,12,12,5,8,8,8,10,10,8,10,10,7,10,10,10,12,12,9,11,12,7,10,10,10,12,12,9,12,10,3,4,5,5,6,6,5,6,6,5,7,6,6,7,8,6,7,8,5,6,6,6,8,7,6,8,7,5,6,6,7,8,8,6,7,7,6,8,7,7,7,9,8,9,9,6,7,8,7,9,7,8,9,9,5,6,6,6,7,7,7,8,8,6,8,7,8,9,9,7,7,9,6,7,8,8,9,9,7,9,7,1,5,5,7,7,6,7,7,9,9,6,7,7,9,9,8,10,9,11,11,9,9,9,11,11,6,8,8,10,10,8,10,10,11,11,8,9,10,11,11,10,11,11,12,12,10,11,11,12,13,6,8,8,10,10,8,10,9,11,11,8,10,9,11,11,10,11,11,12,12,10,11,11,12,12,9,11,11,14,13,10,12,11,14,14,10,12,11,14,13,12,13,13,15,14,12,13,13,15,14,8,11,11,13,14,10,11,12,13,15,10,11,12,14,14,12,13,13,14,15,12,13,13,14,15,5,8,8,11,11,8,10,10,12,12,8,10,10,12,12,11,12,12,14,13,11,12,12,13,14,8,10,10,12,12,9,11,12,13,14,10,12,12,13,13,12,12,13,14,14,11,13,13,15,15,7,10,10,12,12,9,12,11,14,12,10,11,12,13,14,12,13,12,14,14,12,13,13,15,16,10,12,12,15,14,11,12,13,15,15,11,13,13,15,16,14,14,15,15,16,13,14,15,17,15,9,12,12,14,15,11,13,12,15,15,11,13,13,15,15,13,14,13,15,14,13,14,14,17,0,5,8,8,11,11,8,10,10,12,12,8,10,10,12,12,11,12,12,14,14,11,12,12,14,14,7,10,10,12,12,10,12,12,13,13,9,11,12,12,13,11,12,13,15,15,11,12,13,14,15,8,10,10,12,12,10,12,11,13,13,10,12,11,13,13,11,13,13,15,14,12,13,12,15,13,9,12,12,14,14,11,13,13,16,15,11,12,13,16,15,13,14,15,16,16,13,13,15,15,16,10,12,12,15,14,11,13,13,14,16,11,13,13,15,16,13,15,15,16,17,13,15,14,16,15,8,11,11,14,15,10,12,12,15,15,10,12,12,15,16,14,15,15,16,17,13,14,14,16,16,9,12,12,15,15,11,13,14,15,17,11,13,13,15,16,14,15,16,19,17,13,15,15,0,17,9,12,12,15,15,11,14,13,16,15,11,13,13,15,16,15,15,15,18,17,13,15,15,17,17,11,15,14,18,16,12,14,15,17,17,12,15,15,18,18,15,15,16,15,19,14,16,16,0,0,11,14,14,16,17,12,15,14,18,17,12,15,15,18,18,15,17,15,18,16,14,16,16,18,18,7,11,11,14,14,10,12,12,15,15,10,12,13,15,15,13,14,15,16,16,14,15,15,18,18,9,12,12,15,15,11,13,13,16,15,11,12,13,16,16,14,15,15,17,16,15,16,16,17,17,9,12,12,15,15,11,13,13,15,17,11,14,13,16,15,13,15,15,17,17,15,15,15,18,17,11,14,14,17,15,12,14,15,17,18,13,13,15,17,17,14,16,16,19,18,16,15,17,17,0,11,14,14,17,17,12,15,15,18,0,12,15,14,18,16,14,17,17,19,0,16,18,15,0,16,4,5,5,9,9,6,7,7,9,9,6,7,7,9,9,9,9,9,11,11,9,9,9,11,11,6,7,7,9,9,7,7,8,9,10,7,7,8,9,10,9,9,10,10,11,9,9,10,10,12,6,7,7,9,9,7,8,7,10,9,7,8,7,10,9,9,10,9,12,11,10,10,9,12,10,9,10,10,12,11,9,10,10,12,11,9,10,10,12,12,11,11,12,12,13,11,11,12,12,13,9,9,10,12,11,9,10,10,12,12,10,10,10,12,12,11,12,11,13,12,11,12,11,13,12,6,7,7,9,9,7,8,8,10,10,7,8,7,10,9,10,10,10,12,12,10,10,10,12,11,7,8,7,10,10,7,7,9,10,11,8,9,9,11,10,10,10,11,10,12,10,10,11,12,12,7,8,8,10,10,7,9,8,11,10,8,8,9,11,11,10,11,10,12,11,10,11,11,12,12,9,10,10,12,12,9,10,10,12,12,10,11,11,13,12,11,10,12,10,14,12,12,12,13,14,9,10,10,12,12,9,11,10,12,12,10,11,11,12,12,11,12,11,14,12,12,12,12,14,14,5,7,7,9,9,7,7,7,9,10,7,8,8,10,10,10,10,10,11,11,10,10,10,12,12,7,8,8,10,10,8,9,8,11,10,7,8,9,10,11,10,10,10,11,12,10,10,11,11,13,6,7,8,10,10,8,9,9,10,10,7,9,7,11,10,10,11,10,12,12,10,11,10,12,10,9,10,10,12,12,10,11,11,13,12,9,10,10,12,12,12,12,12,14,13,11,11,12,11,14,9,10,10,11,12,10,11,11,12,13,9,10,10,12,12,12,12,12,14,13,11,12,10,14,11,9,9,10,11,12,9,10,10,12,12,9,10,10,12,12,12,12,12,14,14,11,12,12,13,12,9,10,9,12,12,9,10,11,12,13,10,11,10,13,11,12,12,13,13,14,12,12,12,13,13,9,10,10,12,12,10,11,10,13,12,10,10,11,12,13,12,13,12,14,13,12,12,12,13,14,11,12,11,14,13,10,10,11,13,13,12,12,12,14,13,12,10,14,10,15,13,14,14,14,14,11,11,12,13,14,10,12,11,13,13,12,12,12,13,15,12,13,11,15,12,13,13,14,14,14,9,10,9,12,12,9,10,10,12,12,10,10,10,12,12,11,11,12,12,13,12,12,12,14,14,9,10,10,12,12,10,11,10,13,12,10,10,11,12,13,12,12,12,14,13,12,12,13,13,14,9,10,10,12,13,10,10,11,11,12,9,11,10,13,12,12,12,12,13,14,12,13,12,14,13,11,12,11,13,13,12,13,12,14,13,10,11,12,13,13,13,13,13,14,15,12,11,14,12,14,11,11,12,12,13,12,12,12,13,14,10,12,10,14,13,13,13,13,14,15,12,14,11,15,10,1,4,4,7,7,7,7,9,9,4,6,5,8,7,8,8,10,10,4,6,6,8,8,8,8,10,10,7,8,8,9,9,9,9,11,11,7,8,8,9,9,9,9,11,11,8,8,8,9,9,10,10,12,11,8,8,8,9,9,10,10,11,11,9,10,10,11,11,11,11,13,12,9,10,10,11,11,12,12,12,13,3,4,4,6,6,7,7,9,9,4,4,5,6,6,7,7,9,9,4,4,4,6,6,7,7,9,9,6,6,6,7,7,8,8,9,9,6,6,6,7,7,8,8,9,9,7,7,7,8,8,8,9,10,10,7,7,7,8,8,9,8,10,10,9,9,9,9,9,10,10,10,10,9,9,9,9,9,10,10,10,10,1,4,4,5,7,7,5,7,7,5,9,9,8,10,10,8,10,10,5,9,9,7,10,10,8,10,10,4,10,10,9,12,12,9,11,11,7,12,11,10,11,13,10,13,13,7,12,12,10,13,12,10,13,13,4,10,10,9,12,12,9,12,12,7,12,12,10,13,13,10,12,13,7,11,12,10,13,13,10,13,11,2,4,4,6,6,7,7,8,8,8,8,4,5,5,7,7,8,8,9,9,9,9,4,5,5,7,7,8,8,9,9,9,9,6,7,7,8,8,8,8,9,9,9,9,6,7,7,8,8,8,8,9,9,9,9,8,8,8,8,8,9,9,9,9,9,9,8,8,8,8,8,9,9,9,9,9,9,8,9,9,9,9,9,9,10,10,10,10,8,9,9,9,9,9,9,10,10,10,10,8,9,9,9,9,9,9,10,10,10,10,8,9,9,9,9,9,9,10,10,10,10,1,4,4,6,6,8,8,10,10,11,11,4,6,6,7,7,9,9,11,11,13,12,4,6,6,7,7,9,9,11,11,12,12,6,7,7,9,9,11,11,12,12,13,13,6,7,7,9,9,11,11,12,12,13,13,8,9,9,11,11,12,12,13,13,14,14,8,9,9,11,11,12,12,13,13,14,14,9,11,11,12,12,13,13,14,14,15,15,9,11,11,12,12,13,13,14,14,15,14,11,12,12,13,13,14,14,15,15,16,16,11,12,12,13,13,14,14,15,15,15,15,2,5,5,6,6,7,7,7,7,8,8,5,6,6,7,7,7,7,8,8,8,8,5,6,6,7,7,7,7,8,8,8,8,6,7,7,7,7,8,8,8,8,8,8,6,7,7,7,7,8,8,8,8,8,8,7,7,7,8,8,8,8,8,8,8,8,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,8,9,9,7,8,8,8,8,8,8,9,8,9,9,8,8,8,8,8,8,8,9,9,9,9,8,8,8,8,8,8,8,9,9,9,9,1,4,4,11,11,11,11,11,11,11,11,11,11,11,11,3,11,8,11,11,11,11,11,11,11,11,11,11,11,11,3,9,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,1,4,4,7,7,9,9,7,7,8,8,10,10,11,11,4,7,7,9,9,10,10,8,8,10,10,10,11,10,11,4,7,7,9,9,10,10,8,8,10,9,11,11,11,11,7,9,9,12,12,11,12,10,10,11,10,12,11,11,11,7,9,9,11,11,13,12,9,9,11,10,11,11,12,11,9,10,10,12,12,14,14,10,10,11,12,12,11,11,11,9,10,11,11,13,14,13,10,11,11,11,12,11,12,12,7,8,8,10,9,11,10,11,12,12,11,12,14,12,13,7,8,8,9,10,10,11,12,12,12,11,12,12,12,13,9,9,9,11,11,13,12,12,12,12,11,12,12,13,12,8,10,10,11,10,11,12,12,12,12,12,12,14,12,12,9,11,11,11,12,12,12,12,13,13,12,12,13,13,12,10,11,11,12,11,12,12,12,11,12,13,12,12,12,13,11,11,12,12,12,13,12,12,11,12,13,13,12,12,13,12,11,12,12,13,13,12,13,12,13,13,13,13,14,13,2,5,4,6,6,8,8,8,8,8,9,9,9,9,9,9,9,5,6,6,7,7,8,8,9,8,9,9,9,9,9,9,9,9,5,6,6,7,7,8,8,8,9,9,9,9,9,9,9,9,9,7,7,7,8,8,9,9,9,9,9,9,9,9,9,10,10,9,7,7,7,8,8,9,9,9,9,9,9,9,9,9,9,10,10,8,8,8,9,9,9,9,10,10,10,9,10,10,10,10,10,10,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,10,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,9,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,69,78,67,79,68,69,82,0,108,105,98,118,111,114,98,105,115,46,106,115,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+538241);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  var _cosf=Math_cos;

  var _fabsf=Math_abs;

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

   
  Module["_i64Add"] = _i64Add;

  var _floor=Math_floor;

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  var _llvm_sqrt_f64=Math_sqrt;

  var _sin=Math_sin;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  var _atan=Math_atan;

  var _BDtoIHigh=true;

  var _ceil=Math_ceil;

  var _sinf=Math_sin;

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _log=Math_log;

  var _cos=Math_cos;

  var _llvm_pow_f64=Math_pow;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  var _BItoD=true;

  var _llvm_fabs_f32=Math_abs;

   
  Module["_llvm_bswap_i32"] = _llvm_bswap_i32;

  var _exp=Math_exp;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_iii": nullFunc_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_iii": invoke_iii, "_sin": _sin, "_exp": _exp, "_cosf": _cosf, "_floor": _floor, "_llvm_sqrt_f64": _llvm_sqrt_f64, "_llvm_pow_f64": _llvm_pow_f64, "___setErrNo": ___setErrNo, "_fabsf": _fabsf, "_sbrk": _sbrk, "_atan": _atan, "_sinf": _sinf, "_sysconf": _sysconf, "_pthread_self": _pthread_self, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_cos": _cos, "_llvm_fabs_f32": _llvm_fabs_f32, "_log": _log, "__exit": __exit, "_abort": _abort, "_time": _time, "_ceil": _ceil, "_exit": _exit, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var _sin=env._sin;
  var _exp=env._exp;
  var _cosf=env._cosf;
  var _floor=env._floor;
  var _llvm_sqrt_f64=env._llvm_sqrt_f64;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var ___setErrNo=env.___setErrNo;
  var _fabsf=env._fabsf;
  var _sbrk=env._sbrk;
  var _atan=env._atan;
  var _sinf=env._sinf;
  var _sysconf=env._sysconf;
  var _pthread_self=env._pthread_self;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _cos=env._cos;
  var _llvm_fabs_f32=env._llvm_fabs_f32;
  var _log=env._log;
  var __exit=env.__exit;
  var _abort=env._abort;
  var _time=env._time;
  var _ceil=env._ceil;
  var _exit=env._exit;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _ogg_stream_init($os,$serialno) {
 $os = $os|0;
 $serialno = $serialno|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($os|0)==(0|0);
 if ($0) {
  $$0 = -1;
  return ($$0|0);
 }
 _memset(($os|0),0,360)|0;
 $1 = ((($os)) + 4|0);
 HEAP32[$1>>2] = 16384;
 $2 = ((($os)) + 24|0);
 HEAP32[$2>>2] = 1024;
 $3 = (_malloc(16384)|0);
 HEAP32[$os>>2] = $3;
 $4 = (_malloc(4096)|0);
 $5 = ((($os)) + 16|0);
 HEAP32[$5>>2] = $4;
 $6 = (_malloc(8192)|0);
 $7 = ((($os)) + 20|0);
 HEAP32[$7>>2] = $6;
 $8 = ($3|0)==(0|0);
 do {
  if ($8) {
   $11 = $4;
  } else {
   $9 = ($4|0)==(0|0);
   $10 = ($6|0)==(0|0);
   $or$cond = $10 | $9;
   if ($or$cond) {
    _free($3);
    $$pre = HEAP32[$5>>2]|0;
    $11 = $$pre;
    break;
   }
   $15 = ((($os)) + 336|0);
   HEAP32[$15>>2] = $serialno;
   $$0 = 0;
   return ($$0|0);
  }
 } while(0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  _free($11);
 }
 $13 = HEAP32[$7>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  _free($13);
 }
 _memset(($os|0),0,360)|0;
 $$0 = -1;
 return ($$0|0);
}
function _ogg_stream_clear($os) {
 $os = $os|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($os|0)==(0|0);
 if ($0) {
  return 0;
 }
 $1 = HEAP32[$os>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _free($1);
 }
 $3 = ((($os)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  _free($4);
 }
 $6 = ((($os)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  _free($7);
 }
 _memset(($os|0),0,360)|0;
 return 0;
}
function _ogg_stream_packetin($os,$op) {
 $os = $os|0;
 $op = $op|0;
 var $$$i$i = 0, $$$i2$i = 0, $$0$i = 0, $$phi$trans$insert19$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi26$iZ2D = 0, $$pre$phiZ2D = 0, $$pre20$i = 0, $$pre25$i = 0, $$pre27$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$2$lcssa$i = 0, $i$27$i = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$op>>2]|0;
 $1 = ((($op)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($op)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($op)) + 16|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($os|0)==(0|0);
 if ($12) {
  $$0$i = -1;
  return ($$0$i|0);
 }
 $13 = HEAP32[$os>>2]|0;
 $14 = ($13|0)==(0|0);
 $15 = ($2|0)<(0);
 $or$cond = $14 | $15;
 if ($or$cond) {
  $$0$i = -1;
  return ($$0$i|0);
 }
 $16 = (($2|0) / 255)&-1;
 $17 = (($16) + 1)|0;
 $18 = ((($os)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0);
 $$pre27$i = ((($os)) + 8|0);
 if (!($20)) {
  $21 = HEAP32[$$pre27$i>>2]|0;
  $22 = (($21) - ($19))|0;
  HEAP32[$$pre27$i>>2] = $22;
  $23 = ($21|0)==($19|0);
  if (!($23)) {
   $24 = (($13) + ($19)|0);
   _memmove(($13|0),($24|0),($22|0))|0;
  }
  HEAP32[$18>>2] = 0;
 }
 $25 = ((($os)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) - ($2))|0;
 $28 = HEAP32[$$pre27$i>>2]|0;
 $29 = ($27|0)>($28|0);
 do {
  if (!($29)) {
   $30 = (2147483647 - ($2))|0;
   $31 = ($26|0)>($30|0);
   if ($31) {
    $32 = HEAP32[$os>>2]|0;
    $33 = ($32|0)==(0|0);
    if (!($33)) {
     _free($32);
    }
    $34 = ((($os)) + 16|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($35|0)==(0|0);
    if (!($36)) {
     _free($35);
    }
    $37 = ((($os)) + 20|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($38|0)==(0|0);
    if (!($39)) {
     _free($38);
    }
    _memset(($os|0),0,360)|0;
    $$0$i = -1;
    return ($$0$i|0);
   }
   $40 = (($26) + ($2))|0;
   $41 = ($40|0)<(2147482623);
   $42 = (($40) + 1024)|0;
   $$$i2$i = $41 ? $42 : $40;
   $43 = HEAP32[$os>>2]|0;
   $44 = (_realloc($43,$$$i2$i)|0);
   $45 = ($44|0)==(0|0);
   if (!($45)) {
    HEAP32[$25>>2] = $$$i2$i;
    HEAP32[$os>>2] = $44;
    break;
   }
   $46 = HEAP32[$os>>2]|0;
   $47 = ($46|0)==(0|0);
   if (!($47)) {
    _free($46);
   }
   $48 = ((($os)) + 16|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($49|0)==(0|0);
   if (!($50)) {
    _free($49);
   }
   $51 = ((($os)) + 20|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($52|0)==(0|0);
   if (!($53)) {
    _free($52);
   }
   _memset(($os|0),0,360)|0;
   $$0$i = -1;
   return ($$0$i|0);
  }
 } while(0);
 $54 = ((($os)) + 24|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (($55) - ($17))|0;
 $57 = ((($os)) + 28|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($56|0)>($58|0);
 do {
  if ($59) {
   $$pre = ((($os)) + 16|0);
   $$pre$phiZ2D = $$pre;
  } else {
   $60 = (2147483646 - ($16))|0;
   $61 = ($55|0)>($60|0);
   if ($61) {
    $62 = HEAP32[$os>>2]|0;
    $63 = ($62|0)==(0|0);
    if (!($63)) {
     _free($62);
    }
    $64 = ((($os)) + 16|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($65|0)==(0|0);
    if (!($66)) {
     _free($65);
    }
    $67 = ((($os)) + 20|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ($68|0)==(0|0);
    if (!($69)) {
     _free($68);
    }
    _memset(($os|0),0,360)|0;
    $$0$i = -1;
    return ($$0$i|0);
   }
   $70 = (($55) + ($17))|0;
   $71 = ($70|0)<(2147483615);
   $72 = (($70) + 32)|0;
   $$$i$i = $71 ? $72 : $70;
   $73 = ((($os)) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $$$i$i << 2;
   $76 = (_realloc($74,$75)|0);
   $77 = ($76|0)==(0|0);
   if ($77) {
    $78 = HEAP32[$os>>2]|0;
    $79 = ($78|0)==(0|0);
    if (!($79)) {
     _free($78);
    }
    $80 = HEAP32[$73>>2]|0;
    $81 = ($80|0)==(0|0);
    if (!($81)) {
     _free($80);
    }
    $82 = ((($os)) + 20|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($83|0)==(0|0);
    if (!($84)) {
     _free($83);
    }
    _memset(($os|0),0,360)|0;
    $$0$i = -1;
    return ($$0$i|0);
   }
   HEAP32[$73>>2] = $76;
   $85 = ((($os)) + 20|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = $$$i$i << 3;
   $88 = (_realloc($86,$87)|0);
   $89 = ($88|0)==(0|0);
   if (!($89)) {
    HEAP32[$85>>2] = $88;
    HEAP32[$54>>2] = $$$i$i;
    $$pre$phiZ2D = $73;
    break;
   }
   $90 = HEAP32[$os>>2]|0;
   $91 = ($90|0)==(0|0);
   if (!($91)) {
    _free($90);
   }
   $92 = HEAP32[$73>>2]|0;
   $93 = ($92|0)==(0|0);
   if (!($93)) {
    _free($92);
   }
   $94 = HEAP32[$85>>2]|0;
   $95 = ($94|0)==(0|0);
   if (!($95)) {
    _free($94);
   }
   _memset(($os|0),0,360)|0;
   $$0$i = -1;
   return ($$0$i|0);
  }
 } while(0);
 $$pre$i = HEAP32[$$pre27$i>>2]|0;
 $96 = HEAP32[$os>>2]|0;
 $97 = (($96) + ($$pre$i)|0);
 _memcpy(($97|0),($0|0),($2|0))|0;
 $98 = HEAP32[$$pre27$i>>2]|0;
 $99 = (($98) + ($2))|0;
 HEAP32[$$pre27$i>>2] = $99;
 $100 = ($2|0)>(254);
 $101 = HEAP32[$57>>2]|0;
 $102 = HEAP32[$$pre$phiZ2D>>2]|0;
 if ($100) {
  $103 = ((($os)) + 352|0);
  $104 = ((($os)) + 20|0);
  $105 = HEAP32[$104>>2]|0;
  $i$27$i = 0;
  while(1) {
   $106 = (($101) + ($i$27$i))|0;
   $107 = (($102) + ($106<<2)|0);
   HEAP32[$107>>2] = 255;
   $108 = $103;
   $109 = $108;
   $110 = HEAP32[$109>>2]|0;
   $111 = (($108) + 4)|0;
   $112 = $111;
   $113 = HEAP32[$112>>2]|0;
   $114 = (($105) + ($106<<3)|0);
   $115 = $114;
   $116 = $115;
   HEAP32[$116>>2] = $110;
   $117 = (($115) + 4)|0;
   $118 = $117;
   HEAP32[$118>>2] = $113;
   $119 = (($i$27$i) + 1)|0;
   $120 = ($119|0)<($16|0);
   if ($120) {
    $i$27$i = $119;
   } else {
    $$pre$phi26$iZ2D = $103;$125 = $105;$i$2$lcssa$i = $119;
    break;
   }
  }
 } else {
  $$phi$trans$insert19$i = ((($os)) + 20|0);
  $$pre20$i = HEAP32[$$phi$trans$insert19$i>>2]|0;
  $$pre25$i = ((($os)) + 352|0);
  $$pre$phi26$iZ2D = $$pre25$i;$125 = $$pre20$i;$i$2$lcssa$i = 0;
 }
 $121 = (($2|0) % 255)&-1;
 $122 = (($101) + ($i$2$lcssa$i))|0;
 $123 = (($102) + ($122<<2)|0);
 HEAP32[$123>>2] = $121;
 $124 = (($125) + ($122<<3)|0);
 $126 = $124;
 $127 = $126;
 HEAP32[$127>>2] = $8;
 $128 = (($126) + 4)|0;
 $129 = $128;
 HEAP32[$129>>2] = $11;
 $130 = $$pre$phi26$iZ2D;
 $131 = $130;
 HEAP32[$131>>2] = $8;
 $132 = (($130) + 4)|0;
 $133 = $132;
 HEAP32[$133>>2] = $11;
 $134 = (($102) + ($101<<2)|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = $135 | 256;
 HEAP32[$134>>2] = $136;
 $137 = (($101) + ($17))|0;
 HEAP32[$57>>2] = $137;
 $138 = ((($os)) + 344|0);
 $139 = $138;
 $140 = $139;
 $141 = HEAP32[$140>>2]|0;
 $142 = (($139) + 4)|0;
 $143 = $142;
 $144 = HEAP32[$143>>2]|0;
 $145 = (_i64Add(($141|0),($144|0),1,0)|0);
 $146 = tempRet0;
 $147 = $138;
 $148 = $147;
 HEAP32[$148>>2] = $145;
 $149 = (($147) + 4)|0;
 $150 = $149;
 HEAP32[$150>>2] = $146;
 $151 = ($4|0)==(0);
 if ($151) {
  $$0$i = 0;
  return ($$0$i|0);
 }
 $152 = ((($os)) + 328|0);
 HEAP32[$152>>2] = 1;
 $$0$i = 0;
 return ($$0$i|0);
}
function _ogg_stream_flush($os,$og) {
 $os = $os|0;
 $og = $og|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ogg_stream_flush_i($os,$og,1)|0);
 return ($0|0);
}
function _ogg_stream_flush_i($os,$og,$force) {
 $os = $os|0;
 $og = $og|0;
 $force = $force|0;
 var $$ = 0, $$0 = 0, $$02 = 0, $$168 = 0, $$2 = 0, $$lobit = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre$pre = 0, $$pre34$pre = 0, $$pre35$pre = 0, $$pre36$pre = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $acc$018 = 0, $bytes$0$lcssa = 0, $crc_reg$0$lcssa$i = 0, $crc_reg$03$i = 0, $crc_reg$1$lcssa$i = 0;
 var $crc_reg$11$i = 0, $exitcond = 0, $exitcond12 = 0, $exitcond13 = 0, $exitcond171 = 0, $granule_pos$0$lcssa$off0 = 0, $granule_pos$0$lcssa$off16 = 0, $granule_pos$0$lcssa$off24 = 0, $granule_pos$0$lcssa$off32 = 0, $granule_pos$0$lcssa$off40 = 0, $granule_pos$0$lcssa$off48 = 0, $granule_pos$0$lcssa$off56 = 0, $granule_pos$0$lcssa$off8 = 0, $granule_pos$019$off0 = 0, $granule_pos$019$off16 = 0, $granule_pos$019$off24 = 0, $granule_pos$019$off32 = 0, $granule_pos$019$off40 = 0, $granule_pos$019$off48 = 0, $granule_pos$019$off56 = 0;
 var $granule_pos$019$off8 = 0, $granule_pos$1$off0 = 0, $granule_pos$1$off16 = 0, $granule_pos$1$off24 = 0, $granule_pos$1$off32 = 0, $granule_pos$1$off40 = 0, $granule_pos$1$off48 = 0, $granule_pos$1$off56 = 0, $granule_pos$1$off8 = 0, $granule_pos$2$off0 = 0, $granule_pos$2$off16 = 0, $granule_pos$2$off24 = 0, $granule_pos$2$off32 = 0, $granule_pos$2$off40 = 0, $granule_pos$2$off48 = 0, $granule_pos$2$off56 = 0, $granule_pos$2$off8 = 0, $granule_pos$27$off0 = 0, $granule_pos$27$off16 = 0, $granule_pos$27$off24 = 0;
 var $granule_pos$27$off32 = 0, $granule_pos$27$off40 = 0, $granule_pos$27$off48 = 0, $granule_pos$27$off56 = 0, $granule_pos$27$off8 = 0, $i$04$i = 0, $i$12$i = 0, $or$cond = 0, $or$cond170 = 0, $or$cond4 = 0, $packet_just_done$021 = 0, $packet_just_done$1 = 0, $packets_done$020 = 0, $packets_done$1 = 0, $storemerge = 0, $vals$0 = 0, $vals$1$lcssa = 0, $vals$117 = 0, $vals$2 = 0, $vals$26 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($os)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(255);
 $$ = $2 ? 255 : $1;
 $3 = ($os|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[$os>>2]|0;
 $5 = ($4|0)==(0|0);
 $6 = ($$|0)==(0);
 $or$cond4 = $6 | $5;
 if ($or$cond4) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ((($os)) + 332|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 L7: do {
  if ($9) {
   $13 = ((($os)) + 16|0);
   $vals$0 = 0;
   while(1) {
    $14 = ($vals$0|0)<($$|0);
    if (!($14)) {
     $$2 = $force;$granule_pos$2$off0 = 0;$granule_pos$2$off16 = 0;$granule_pos$2$off24 = 0;$granule_pos$2$off32 = 0;$granule_pos$2$off40 = 0;$granule_pos$2$off48 = 0;$granule_pos$2$off56 = 0;$granule_pos$2$off8 = 0;$vals$2 = $vals$0;
     label = 14;
     break L7;
    }
    $15 = HEAP32[$13>>2]|0;
    $16 = (($15) + ($vals$0<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = $17 & 255;
    $19 = ($18|0)==(255);
    $20 = (($vals$0) + 1)|0;
    if ($19) {
     $vals$0 = $20;
    } else {
     $$2 = $force;$granule_pos$2$off0 = 0;$granule_pos$2$off16 = 0;$granule_pos$2$off24 = 0;$granule_pos$2$off32 = 0;$granule_pos$2$off40 = 0;$granule_pos$2$off48 = 0;$granule_pos$2$off56 = 0;$granule_pos$2$off8 = 0;$vals$2 = $20;
     label = 14;
     break;
    }
   }
  } else {
   $10 = ($$|0)>(0);
   if ($10) {
    $11 = ((($os)) + 16|0);
    $12 = ((($os)) + 20|0);
    $acc$018 = 0;$granule_pos$019$off0 = -1;$granule_pos$019$off16 = -1;$granule_pos$019$off24 = -1;$granule_pos$019$off32 = -1;$granule_pos$019$off40 = -1;$granule_pos$019$off48 = -1;$granule_pos$019$off56 = -1;$granule_pos$019$off8 = -1;$packet_just_done$021 = 0;$packets_done$020 = 0;$vals$117 = 0;
    while(1) {
     $21 = ($acc$018|0)>(4096);
     $22 = ($packet_just_done$021|0)>(3);
     $or$cond = $21 & $22;
     if ($or$cond) {
      $$02 = 1;$granule_pos$0$lcssa$off0 = $granule_pos$019$off0;$granule_pos$0$lcssa$off16 = $granule_pos$019$off16;$granule_pos$0$lcssa$off24 = $granule_pos$019$off24;$granule_pos$0$lcssa$off32 = $granule_pos$019$off32;$granule_pos$0$lcssa$off40 = $granule_pos$019$off40;$granule_pos$0$lcssa$off48 = $granule_pos$019$off48;$granule_pos$0$lcssa$off56 = $granule_pos$019$off56;$granule_pos$0$lcssa$off8 = $granule_pos$019$off8;$vals$1$lcssa = $vals$117;
      break;
     }
     $23 = HEAP32[$11>>2]|0;
     $24 = (($23) + ($vals$117<<2)|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = $25 & 255;
     $27 = (($26) + ($acc$018))|0;
     $28 = ($26|0)==(255);
     if ($28) {
      $granule_pos$1$off0 = $granule_pos$019$off0;$granule_pos$1$off16 = $granule_pos$019$off16;$granule_pos$1$off24 = $granule_pos$019$off24;$granule_pos$1$off32 = $granule_pos$019$off32;$granule_pos$1$off40 = $granule_pos$019$off40;$granule_pos$1$off48 = $granule_pos$019$off48;$granule_pos$1$off56 = $granule_pos$019$off56;$granule_pos$1$off8 = $granule_pos$019$off8;$packet_just_done$1 = 0;$packets_done$1 = $packets_done$020;
     } else {
      $29 = HEAP32[$12>>2]|0;
      $30 = (($29) + ($vals$117<<3)|0);
      $31 = $30;
      $32 = $31;
      $33 = HEAP32[$32>>2]|0;
      $34 = (($31) + 4)|0;
      $35 = $34;
      $36 = HEAP32[$35>>2]|0;
      $37 = (($packets_done$020) + 1)|0;
      $38 = $33&255;
      $39 = (_bitshift64Lshr(($33|0),($36|0),8)|0);
      $40 = tempRet0;
      $41 = $39&255;
      $42 = (_bitshift64Lshr(($33|0),($36|0),16)|0);
      $43 = tempRet0;
      $44 = $42&255;
      $45 = (_bitshift64Lshr(($33|0),($36|0),24)|0);
      $46 = tempRet0;
      $47 = $45&255;
      $48 = $36&255;
      $49 = (_bitshift64Lshr(($33|0),($36|0),40)|0);
      $50 = tempRet0;
      $51 = $49&255;
      $52 = (_bitshift64Lshr(($33|0),($36|0),48)|0);
      $53 = tempRet0;
      $54 = $52&255;
      $55 = (_bitshift64Lshr(($33|0),($36|0),56)|0);
      $56 = tempRet0;
      $57 = $55&255;
      $granule_pos$1$off0 = $38;$granule_pos$1$off16 = $44;$granule_pos$1$off24 = $47;$granule_pos$1$off32 = $48;$granule_pos$1$off40 = $51;$granule_pos$1$off48 = $54;$granule_pos$1$off56 = $57;$granule_pos$1$off8 = $41;$packet_just_done$1 = $37;$packets_done$1 = $37;
     }
     $58 = (($vals$117) + 1)|0;
     $59 = ($58|0)<($$|0);
     if ($59) {
      $acc$018 = $27;$granule_pos$019$off0 = $granule_pos$1$off0;$granule_pos$019$off16 = $granule_pos$1$off16;$granule_pos$019$off24 = $granule_pos$1$off24;$granule_pos$019$off32 = $granule_pos$1$off32;$granule_pos$019$off40 = $granule_pos$1$off40;$granule_pos$019$off48 = $granule_pos$1$off48;$granule_pos$019$off56 = $granule_pos$1$off56;$granule_pos$019$off8 = $granule_pos$1$off8;$packet_just_done$021 = $packet_just_done$1;$packets_done$020 = $packets_done$1;$vals$117 = $58;
     } else {
      $$02 = $force;$granule_pos$0$lcssa$off0 = $granule_pos$1$off0;$granule_pos$0$lcssa$off16 = $granule_pos$1$off16;$granule_pos$0$lcssa$off24 = $granule_pos$1$off24;$granule_pos$0$lcssa$off32 = $granule_pos$1$off32;$granule_pos$0$lcssa$off40 = $granule_pos$1$off40;$granule_pos$0$lcssa$off48 = $granule_pos$1$off48;$granule_pos$0$lcssa$off56 = $granule_pos$1$off56;$granule_pos$0$lcssa$off8 = $granule_pos$1$off8;$vals$1$lcssa = $58;
      break;
     }
    }
    $60 = ($vals$1$lcssa|0)==(255);
    if ($60) {
     $$pre$phiZ2D = $11;$granule_pos$27$off0 = $granule_pos$0$lcssa$off0;$granule_pos$27$off16 = $granule_pos$0$lcssa$off16;$granule_pos$27$off24 = $granule_pos$0$lcssa$off24;$granule_pos$27$off32 = $granule_pos$0$lcssa$off32;$granule_pos$27$off40 = $granule_pos$0$lcssa$off40;$granule_pos$27$off48 = $granule_pos$0$lcssa$off48;$granule_pos$27$off56 = $granule_pos$0$lcssa$off56;$granule_pos$27$off8 = $granule_pos$0$lcssa$off8;$vals$26 = 255;
    } else {
     $$2 = $$02;$granule_pos$2$off0 = $granule_pos$0$lcssa$off0;$granule_pos$2$off16 = $granule_pos$0$lcssa$off16;$granule_pos$2$off24 = $granule_pos$0$lcssa$off24;$granule_pos$2$off32 = $granule_pos$0$lcssa$off32;$granule_pos$2$off40 = $granule_pos$0$lcssa$off40;$granule_pos$2$off48 = $granule_pos$0$lcssa$off48;$granule_pos$2$off56 = $granule_pos$0$lcssa$off56;$granule_pos$2$off8 = $granule_pos$0$lcssa$off8;$vals$2 = $vals$1$lcssa;
     label = 14;
    }
   } else {
    $$2 = $force;$granule_pos$2$off0 = -1;$granule_pos$2$off16 = -1;$granule_pos$2$off24 = -1;$granule_pos$2$off32 = -1;$granule_pos$2$off40 = -1;$granule_pos$2$off48 = -1;$granule_pos$2$off56 = -1;$granule_pos$2$off8 = -1;$vals$2 = 0;
    label = 14;
   }
  }
 } while(0);
 do {
  if ((label|0) == 14) {
   $61 = ($$2|0)==(0);
   if ($61) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $$pre8 = ((($os)) + 16|0);
    $$pre$phiZ2D = $$pre8;$granule_pos$27$off0 = $granule_pos$2$off0;$granule_pos$27$off16 = $granule_pos$2$off16;$granule_pos$27$off24 = $granule_pos$2$off24;$granule_pos$27$off32 = $granule_pos$2$off32;$granule_pos$27$off40 = $granule_pos$2$off40;$granule_pos$27$off48 = $granule_pos$2$off48;$granule_pos$27$off56 = $granule_pos$2$off56;$granule_pos$27$off8 = $granule_pos$2$off8;$vals$26 = $vals$2;
    break;
   }
  }
 } while(0);
 $62 = ((($os)) + 40|0);
 HEAP8[$62>>0]=1399285583&255;HEAP8[$62+1>>0]=(1399285583>>8)&255;HEAP8[$62+2>>0]=(1399285583>>16)&255;HEAP8[$62+3>>0]=1399285583>>24;
 $63 = ((($os)) + 44|0);
 HEAP8[$63>>0] = 0;
 $64 = ((($os)) + 45|0);
 HEAP8[$64>>0] = 0;
 $65 = HEAP32[$$pre$phiZ2D>>2]|0;
 $66 = HEAP32[$65>>2]|0;
 $67 = $66 >>> 8;
 $$lobit = $67 & 1;
 $68 = $$lobit ^ 1;
 $69 = $68 | 2;
 $$168 = $9 ? $69 : $68;
 $storemerge = $$168&255;
 HEAP8[$64>>0] = $storemerge;
 $70 = ((($os)) + 328|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($71|0)!=(0);
 $73 = ($1|0)==($vals$26|0);
 $or$cond170 = $72 & $73;
 if ($or$cond170) {
  $74 = $$168 | 4;
  $75 = $74&255;
  HEAP8[$64>>0] = $75;
 }
 HEAP32[$7>>2] = 1;
 $76 = ((($os)) + 46|0);
 HEAP8[$76>>0] = $granule_pos$27$off0;
 $77 = ((($os)) + 47|0);
 HEAP8[$77>>0] = $granule_pos$27$off8;
 $78 = ((($os)) + 48|0);
 HEAP8[$78>>0] = $granule_pos$27$off16;
 $79 = ((($os)) + 49|0);
 HEAP8[$79>>0] = $granule_pos$27$off24;
 $80 = ((($os)) + 50|0);
 HEAP8[$80>>0] = $granule_pos$27$off32;
 $81 = ((($os)) + 51|0);
 HEAP8[$81>>0] = $granule_pos$27$off40;
 $82 = ((($os)) + 52|0);
 HEAP8[$82>>0] = $granule_pos$27$off48;
 $83 = ((($os)) + 53|0);
 HEAP8[$83>>0] = $granule_pos$27$off56;
 $84 = ((($os)) + 336|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $85&255;
 $87 = ((($os)) + 54|0);
 HEAP8[$87>>0] = $86;
 $88 = $85 >>> 8;
 $89 = $88&255;
 $90 = ((($os)) + 55|0);
 HEAP8[$90>>0] = $89;
 $91 = $85 >>> 16;
 $92 = $91&255;
 $93 = ((($os)) + 56|0);
 HEAP8[$93>>0] = $92;
 $94 = $85 >>> 24;
 $95 = $94&255;
 $96 = ((($os)) + 57|0);
 HEAP8[$96>>0] = $95;
 $97 = ((($os)) + 340|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ($98|0)==(-1);
 if ($99) {
  HEAP32[$97>>2] = 0;
  $101 = 0;
 } else {
  $101 = $98;
 }
 $100 = (($101) + 1)|0;
 HEAP32[$97>>2] = $100;
 $102 = $101&255;
 $103 = ((($os)) + 58|0);
 HEAP8[$103>>0] = $102;
 $104 = $101 >>> 8;
 $105 = $104&255;
 $106 = ((($os)) + 59|0);
 HEAP8[$106>>0] = $105;
 $107 = $101 >>> 16;
 $108 = $107&255;
 $109 = ((($os)) + 60|0);
 HEAP8[$109>>0] = $108;
 $110 = $101 >>> 24;
 $111 = $110&255;
 $112 = ((($os)) + 61|0);
 HEAP8[$112>>0] = $111;
 $113 = ((($os)) + 62|0);
 $114 = $vals$26&255;
 $115 = ((($os)) + 66|0);
 HEAP16[$113>>1]=0&65535;HEAP16[$113+2>>1]=0>>>16;
 HEAP8[$115>>0] = $114;
 $116 = ($vals$26|0)>(0);
 if ($116) {
  $117 = HEAP32[$65>>2]|0;
  $118 = $117&255;
  $119 = ((($os)) + 67|0);
  HEAP8[$119>>0] = $118;
  $120 = $117 & 255;
  $exitcond171 = ($vals$26|0)==(1);
  if ($exitcond171) {
   $137 = $4;$141 = $1;$143 = $65;$bytes$0$lcssa = $120;
  } else {
   $$pre = $65;$122 = 1;$129 = $120;
   while(1) {
    $121 = (($$pre) + ($122<<2)|0);
    $123 = HEAP32[$121>>2]|0;
    $124 = $123&255;
    $125 = (($122) + 27)|0;
    $126 = (((($os)) + 40|0) + ($125)|0);
    HEAP8[$126>>0] = $124;
    $127 = $123 & 255;
    $128 = (($127) + ($129))|0;
    $130 = (($122) + 1)|0;
    $exitcond = ($130|0)==($vals$26|0);
    if ($exitcond) {
     break;
    }
    $$pre$pre = HEAP32[$$pre$phiZ2D>>2]|0;
    $$pre = $$pre$pre;$122 = $130;$129 = $128;
   }
   $$pre34$pre = HEAP32[$os>>2]|0;
   $$pre35$pre = HEAP32[$0>>2]|0;
   $$pre36$pre = HEAP32[$$pre$phiZ2D>>2]|0;
   $137 = $$pre34$pre;$141 = $$pre35$pre;$143 = $$pre36$pre;$bytes$0$lcssa = $128;
  }
 } else {
  $137 = $4;$141 = $1;$143 = $65;$bytes$0$lcssa = 0;
 }
 HEAP32[$og>>2] = $62;
 $131 = (($vals$26) + 27)|0;
 $132 = ((($os)) + 324|0);
 HEAP32[$132>>2] = $131;
 $133 = ((($og)) + 4|0);
 HEAP32[$133>>2] = $131;
 $134 = ((($os)) + 12|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = (($137) + ($135)|0);
 $138 = ((($og)) + 8|0);
 HEAP32[$138>>2] = $136;
 $139 = ((($og)) + 12|0);
 HEAP32[$139>>2] = $bytes$0$lcssa;
 $140 = (($141) - ($vals$26))|0;
 HEAP32[$0>>2] = $140;
 $142 = (($143) + ($vals$26<<2)|0);
 $144 = $140 << 2;
 _memmove(($143|0),($142|0),($144|0))|0;
 $145 = ((($os)) + 20|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = (($146) + ($vals$26<<3)|0);
 $148 = HEAP32[$0>>2]|0;
 $149 = $148 << 3;
 _memmove(($146|0),($147|0),($149|0))|0;
 $150 = HEAP32[$134>>2]|0;
 $151 = (($150) + ($bytes$0$lcssa))|0;
 HEAP32[$134>>2] = $151;
 $152 = ($og|0)==(0|0);
 if ($152) {
  $$0 = 1;
  return ($$0|0);
 }
 $153 = HEAP32[$og>>2]|0;
 $154 = ((($153)) + 22|0);
 HEAP8[$154>>0] = 0;
 $155 = HEAP32[$og>>2]|0;
 $156 = ((($155)) + 23|0);
 HEAP8[$156>>0] = 0;
 $157 = HEAP32[$og>>2]|0;
 $158 = ((($157)) + 24|0);
 HEAP8[$158>>0] = 0;
 $159 = HEAP32[$og>>2]|0;
 $160 = ((($159)) + 25|0);
 HEAP8[$160>>0] = 0;
 $161 = HEAP32[$133>>2]|0;
 $162 = ($161|0)>(0);
 if ($162) {
  $163 = HEAP32[$og>>2]|0;
  $crc_reg$03$i = 0;$i$04$i = 0;
  while(1) {
   $167 = $crc_reg$03$i << 8;
   $168 = $crc_reg$03$i >>> 24;
   $169 = (($163) + ($i$04$i)|0);
   $170 = HEAP8[$169>>0]|0;
   $171 = $170&255;
   $172 = $171 ^ $168;
   $173 = (2512 + ($172<<2)|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = $174 ^ $167;
   $176 = (($i$04$i) + 1)|0;
   $exitcond13 = ($176|0)==($161|0);
   if ($exitcond13) {
    $crc_reg$0$lcssa$i = $175;
    break;
   } else {
    $crc_reg$03$i = $175;$i$04$i = $176;
   }
  }
 } else {
  $crc_reg$0$lcssa$i = 0;
 }
 $164 = HEAP32[$139>>2]|0;
 $165 = ($164|0)>(0);
 if ($165) {
  $166 = HEAP32[$138>>2]|0;
  $crc_reg$11$i = $crc_reg$0$lcssa$i;$i$12$i = 0;
  while(1) {
   $177 = $crc_reg$11$i << 8;
   $178 = $crc_reg$11$i >>> 24;
   $179 = (($166) + ($i$12$i)|0);
   $180 = HEAP8[$179>>0]|0;
   $181 = $180&255;
   $182 = $181 ^ $178;
   $183 = (2512 + ($182<<2)|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = $184 ^ $177;
   $186 = (($i$12$i) + 1)|0;
   $exitcond12 = ($186|0)==($164|0);
   if ($exitcond12) {
    $crc_reg$1$lcssa$i = $185;
    break;
   } else {
    $crc_reg$11$i = $185;$i$12$i = $186;
   }
  }
 } else {
  $crc_reg$1$lcssa$i = $crc_reg$0$lcssa$i;
 }
 $187 = $crc_reg$1$lcssa$i&255;
 $188 = HEAP32[$og>>2]|0;
 $189 = ((($188)) + 22|0);
 HEAP8[$189>>0] = $187;
 $190 = $crc_reg$1$lcssa$i >>> 8;
 $191 = $190&255;
 $192 = HEAP32[$og>>2]|0;
 $193 = ((($192)) + 23|0);
 HEAP8[$193>>0] = $191;
 $194 = $crc_reg$1$lcssa$i >>> 16;
 $195 = $194&255;
 $196 = HEAP32[$og>>2]|0;
 $197 = ((($196)) + 24|0);
 HEAP8[$197>>0] = $195;
 $198 = $crc_reg$1$lcssa$i >>> 24;
 $199 = $198&255;
 $200 = HEAP32[$og>>2]|0;
 $201 = ((($200)) + 25|0);
 HEAP8[$201>>0] = $199;
 $$0 = 1;
 return ($$0|0);
}
function _ogg_stream_pageout($os,$og) {
 $os = $os|0;
 $og = $og|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $force$0 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($os|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = HEAP32[$os>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($os)) + 328|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 $$phi$trans$insert = ((($os)) + 28|0);
 $$pre = HEAP32[$$phi$trans$insert>>2]|0;
 $phitmp = ($$pre|0)==(0);
 if ($5) {
  if ($phitmp) {
   $force$0 = 0;
  } else {
   $6 = ((($os)) + 332|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0);
   if ($8) {
    label = 7;
   } else {
    $force$0 = 0;
   }
  }
 } else {
  if ($phitmp) {
   $force$0 = 0;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $force$0 = 1;
 }
 $9 = (_ogg_stream_flush_i($os,$og,$force$0)|0);
 $$0 = $9;
 return ($$0|0);
}
function _oggpack_writeinit($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$b>>2]=0|0;HEAP32[$b+4>>2]=0|0;HEAP32[$b+8>>2]=0|0;HEAP32[$b+12>>2]=0|0;
 $0 = (_malloc(256)|0);
 $1 = ((($b)) + 8|0);
 HEAP32[$1>>2] = $0;
 $2 = ((($b)) + 12|0);
 HEAP32[$2>>2] = $0;
 HEAP8[$0>>0] = 0;
 $3 = ((($b)) + 16|0);
 HEAP32[$3>>2] = 256;
 return;
}
function _oggpack_writetrunc($b,$bits) {
 $b = $b|0;
 $bits = $bits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $bits >> 3;
 $1 = ((($b)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = $0 << 3;
 $5 = (($bits) - ($4))|0;
 $6 = ((($b)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($0)|0);
 HEAP32[$1>>2] = $8;
 $9 = ((($b)) + 4|0);
 HEAP32[$9>>2] = $5;
 HEAP32[$b>>2] = $0;
 $10 = (3536 + ($5<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP8[$8>>0]|0;
 $13 = $12&255;
 $14 = $13 & $11;
 $15 = $14&255;
 HEAP8[$8>>0] = $15;
 return;
}
function _oggpack_write($b,$value,$bits) {
 $b = $b|0;
 $value = $value|0;
 $bits = $bits|0;
 var $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bits>>>0)>(32);
 do {
  if (!($0)) {
   $1 = HEAP32[$b>>2]|0;
   $2 = ((($b)) + 16|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($3) + -4)|0;
   $5 = ($1|0)<($4|0);
   $$phi$trans$insert = ((($b)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($5) {
    $25 = $$pre;
   } else {
    $6 = ($$pre|0)==(0|0);
    if ($6) {
     return;
    }
    $7 = ($3|0)>(2147483391);
    if ($7) {
     break;
    }
    $8 = ((($b)) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (($3) + 256)|0;
    $11 = (_realloc($9,$10)|0);
    $12 = ($11|0)==(0|0);
    if ($12) {
     break;
    }
    HEAP32[$8>>2] = $11;
    $13 = HEAP32[$2>>2]|0;
    $14 = (($13) + 256)|0;
    HEAP32[$2>>2] = $14;
    $15 = HEAP32[$b>>2]|0;
    $16 = (($11) + ($15)|0);
    HEAP32[$$phi$trans$insert>>2] = $16;
    $25 = $16;
   }
   $17 = (3536 + ($bits<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $18 & $value;
   $20 = ((($b)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + ($bits))|0;
   $23 = $19 << $21;
   $24 = HEAP8[$25>>0]|0;
   $26 = $24&255;
   $27 = $26 | $23;
   $28 = $27&255;
   HEAP8[$25>>0] = $28;
   $29 = ($22|0)>(7);
   do {
    if ($29) {
     $30 = HEAP32[$20>>2]|0;
     $31 = (8 - ($30))|0;
     $32 = $19 >>> $31;
     $33 = $32&255;
     $34 = HEAP32[$$phi$trans$insert>>2]|0;
     $35 = ((($34)) + 1|0);
     HEAP8[$35>>0] = $33;
     $36 = ($22|0)>(15);
     if ($36) {
      $37 = HEAP32[$20>>2]|0;
      $38 = (16 - ($37))|0;
      $39 = $19 >>> $38;
      $40 = $39&255;
      $41 = HEAP32[$$phi$trans$insert>>2]|0;
      $42 = ((($41)) + 2|0);
      HEAP8[$42>>0] = $40;
      $43 = ($22|0)>(23);
      if ($43) {
       $44 = HEAP32[$20>>2]|0;
       $45 = (24 - ($44))|0;
       $46 = $19 >>> $45;
       $47 = $46&255;
       $48 = HEAP32[$$phi$trans$insert>>2]|0;
       $49 = ((($48)) + 3|0);
       HEAP8[$49>>0] = $47;
       $50 = ($22|0)>(31);
       if ($50) {
        $51 = HEAP32[$20>>2]|0;
        $52 = ($51|0)==(0);
        if ($52) {
         $58 = HEAP32[$$phi$trans$insert>>2]|0;
         $59 = ((($58)) + 4|0);
         HEAP8[$59>>0] = 0;
         break;
        } else {
         $53 = (32 - ($51))|0;
         $54 = $19 >>> $53;
         $55 = $54&255;
         $56 = HEAP32[$$phi$trans$insert>>2]|0;
         $57 = ((($56)) + 4|0);
         HEAP8[$57>>0] = $55;
         break;
        }
       }
      }
     }
    }
   } while(0);
   $60 = (($22|0) / 8)&-1;
   $61 = HEAP32[$b>>2]|0;
   $62 = (($61) + ($60))|0;
   HEAP32[$b>>2] = $62;
   $63 = HEAP32[$$phi$trans$insert>>2]|0;
   $64 = (($63) + ($60)|0);
   HEAP32[$$phi$trans$insert>>2] = $64;
   $65 = $22 & 7;
   HEAP32[$20>>2] = $65;
   return;
  }
 } while(0);
 $66 = ((($b)) + 8|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ($67|0)==(0|0);
 if (!($68)) {
  _free($67);
 }
 ;HEAP32[$b>>2]=0|0;HEAP32[$b+4>>2]=0|0;HEAP32[$b+8>>2]=0|0;HEAP32[$b+12>>2]=0|0;HEAP32[$b+16>>2]=0|0;
 return;
}
function _oggpack_writeclear($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($b)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _free($1);
 }
 ;HEAP32[$b>>2]=0|0;HEAP32[$b+4>>2]=0|0;HEAP32[$b+8>>2]=0|0;HEAP32[$b+12>>2]=0|0;HEAP32[$b+16>>2]=0|0;
 return;
}
function _oggpack_look($b,$bits) {
 $b = $b|0;
 $bits = $bits|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bits>>>0)>(32);
 if ($0) {
  $$0 = -1;
  return ($$0|0);
 }
 $1 = (3536 + ($bits<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($b)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($bits))|0;
 $6 = HEAP32[$b>>2]|0;
 $7 = ((($b)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + -4)|0;
 $10 = ($6|0)<($9|0);
 if (!($10)) {
  $11 = (($5) + 7)|0;
  $12 = $11 >> 3;
  $13 = (($8) - ($12))|0;
  $14 = ($6|0)>($13|0);
  if ($14) {
   $$0 = -1;
   return ($$0|0);
  }
  $15 = ($5|0)==(0);
  if ($15) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $16 = ((($b)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $19 >>> $4;
 $21 = ($5|0)>(8);
 if ($21) {
  $22 = ((($17)) + 1|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = (8 - ($4))|0;
  $26 = $24 << $25;
  $27 = $26 | $20;
  $28 = ($5|0)>(16);
  if ($28) {
   $29 = ((($17)) + 2|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $32 = (16 - ($4))|0;
   $33 = $31 << $32;
   $34 = $33 | $27;
   $35 = ($5|0)>(24);
   if ($35) {
    $36 = ((($17)) + 3|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = $37&255;
    $39 = (24 - ($4))|0;
    $40 = $38 << $39;
    $41 = $40 | $34;
    $42 = ($5|0)<(33);
    $43 = ($4|0)==(0);
    $or$cond = $42 | $43;
    if ($or$cond) {
     $ret$0 = $41;
    } else {
     $44 = ((($17)) + 4|0);
     $45 = HEAP8[$44>>0]|0;
     $46 = $45&255;
     $47 = (32 - ($4))|0;
     $48 = $46 << $47;
     $49 = $48 | $41;
     $ret$0 = $49;
    }
   } else {
    $ret$0 = $34;
   }
  } else {
   $ret$0 = $27;
  }
 } else {
  $ret$0 = $20;
 }
 $50 = $ret$0 & $2;
 $$0 = $50;
 return ($$0|0);
}
function _oggpack_adv($b,$bits) {
 $b = $b|0;
 $bits = $bits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($b)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($bits))|0;
 $3 = HEAP32[$b>>2]|0;
 $4 = ((($b)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + 7)|0;
 $7 = $6 >> 3;
 $8 = (($5) - ($7))|0;
 $9 = ($3|0)>($8|0);
 if ($9) {
  $16 = ((($b)) + 12|0);
  HEAP32[$16>>2] = 0;
  HEAP32[$b>>2] = $5;
  $storemerge = 1;
  HEAP32[$0>>2] = $storemerge;
  return;
 } else {
  $10 = (($2|0) / 8)&-1;
  $11 = ((($b)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + ($10)|0);
  HEAP32[$11>>2] = $13;
  $14 = (($3) + ($10))|0;
  HEAP32[$b>>2] = $14;
  $15 = $2 & 7;
  $storemerge = $15;
  HEAP32[$0>>2] = $storemerge;
  return;
 }
}
function _oggpack_read($b,$bits) {
 $b = $b|0;
 $bits = $bits|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phi3Z2D = 0, $$pre$phi5Z2D = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bits>>>0)>(32);
 do {
  if ($0) {
   $$phi$trans$insert = ((($b)) + 16|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $$pre4 = ((($b)) + 4|0);
   $$pre$phi3Z2D = $b;$$pre$phi5Z2D = $$pre4;$56 = $$pre;
  } else {
   $1 = (3536 + ($bits<<2)|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ((($b)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = (($4) + ($bits))|0;
   $6 = HEAP32[$b>>2]|0;
   $7 = ((($b)) + 16|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (($8) + -4)|0;
   $10 = ($6|0)<($9|0);
   if (!($10)) {
    $11 = (($5) + 7)|0;
    $12 = $11 >> 3;
    $13 = (($8) - ($12))|0;
    $14 = ($6|0)>($13|0);
    if ($14) {
     $$pre$phi3Z2D = $b;$$pre$phi5Z2D = $3;$56 = $8;
     break;
    }
    $15 = ($5|0)==(0);
    if ($15) {
     $$0 = 0;
     return ($$0|0);
    }
   }
   $16 = ((($b)) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = $19 >>> $4;
   $21 = ($5|0)>(8);
   if ($21) {
    $22 = ((($17)) + 1|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = (8 - ($4))|0;
    $26 = $24 << $25;
    $27 = $26 | $20;
    $28 = ($5|0)>(16);
    if ($28) {
     $29 = ((($17)) + 2|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = $30&255;
     $32 = (16 - ($4))|0;
     $33 = $31 << $32;
     $34 = $33 | $27;
     $35 = ($5|0)>(24);
     if ($35) {
      $36 = ((($17)) + 3|0);
      $37 = HEAP8[$36>>0]|0;
      $38 = $37&255;
      $39 = (24 - ($4))|0;
      $40 = $38 << $39;
      $41 = $40 | $34;
      $42 = ($5|0)<(33);
      $43 = ($4|0)==(0);
      $or$cond = $42 | $43;
      if ($or$cond) {
       $ret$0 = $41;
      } else {
       $44 = ((($17)) + 4|0);
       $45 = HEAP8[$44>>0]|0;
       $46 = $45&255;
       $47 = (32 - ($4))|0;
       $48 = $46 << $47;
       $49 = $48 | $41;
       $ret$0 = $49;
      }
     } else {
      $ret$0 = $34;
     }
    } else {
     $ret$0 = $27;
    }
   } else {
    $ret$0 = $20;
   }
   $50 = $ret$0 & $2;
   $51 = (($5|0) / 8)&-1;
   $52 = (($17) + ($51)|0);
   HEAP32[$16>>2] = $52;
   $53 = (($6) + ($51))|0;
   HEAP32[$b>>2] = $53;
   $54 = $5 & 7;
   HEAP32[$3>>2] = $54;
   $$0 = $50;
   return ($$0|0);
  }
 } while(0);
 $55 = ((($b)) + 12|0);
 HEAP32[$55>>2] = 0;
 HEAP32[$$pre$phi3Z2D>>2] = $56;
 HEAP32[$$pre$phi5Z2D>>2] = 1;
 $$0 = -1;
 return ($$0|0);
}
function _oggpack_bytes($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$b>>2]|0;
 $1 = ((($b)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 7)|0;
 $4 = (($3|0) / 8)&-1;
 $5 = (($4) + ($0))|0;
 return ($5|0);
}
function _oggpack_get_buffer($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($b)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _vorbis_analysis_buffer($v,$vals) {
 $v = $v|0;
 $vals = $vals|0;
 var $$phi$trans$insert = 0, $$pre = 0, $$pre$phi8Z2D = 0, $$pre6 = 0, $$pre7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, $i$11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($v)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($v)) + 104|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  _free($5);
 }
 HEAP32[$4>>2] = 0;
 $7 = ((($3)) + 68|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  _free($8);
 }
 HEAP32[$7>>2] = 0;
 $10 = ((($3)) + 72|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  _free($11);
 }
 HEAP32[$10>>2] = 0;
 $13 = ((($v)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + ($vals))|0;
 $16 = ((($v)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($15|0)<($17|0);
 if ($18) {
  $$phi$trans$insert = ((($1)) + 4|0);
  $$pre6 = HEAP32[$$phi$trans$insert>>2]|0;
  $32 = $$pre6;
  label = 11;
 } else {
  $19 = $vals << 1;
  $20 = (($14) + ($19))|0;
  HEAP32[$16>>2] = $20;
  $21 = ((($1)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)>(0);
  if ($23) {
   $24 = ((($v)) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[$25>>2]|0;
   $27 = $20 << 2;
   $28 = (_realloc($26,$27)|0);
   $29 = HEAP32[$24>>2]|0;
   HEAP32[$29>>2] = $28;
   $30 = HEAP32[$21>>2]|0;
   $31 = ($30|0)>(1);
   if ($31) {
    $39 = 1;
    while(1) {
     $$pre = HEAP32[$16>>2]|0;
     $37 = HEAP32[$24>>2]|0;
     $38 = (($37) + ($39<<2)|0);
     $40 = HEAP32[$38>>2]|0;
     $41 = $$pre << 2;
     $42 = (_realloc($40,$41)|0);
     $43 = HEAP32[$24>>2]|0;
     $44 = (($43) + ($39<<2)|0);
     HEAP32[$44>>2] = $42;
     $45 = (($39) + 1)|0;
     $46 = HEAP32[$21>>2]|0;
     $47 = ($45|0)<($46|0);
     if ($47) {
      $39 = $45;
     } else {
      $32 = $46;
      label = 11;
      break;
     }
    }
   } else {
    $32 = $30;
    label = 11;
   }
  }
 }
 if ((label|0) == 11) {
  $33 = ($32|0)>(0);
  if ($33) {
   $34 = ((($v)) + 8|0);
   $35 = HEAP32[$13>>2]|0;
   $36 = ((($v)) + 12|0);
   $i$11 = 0;
   while(1) {
    $48 = HEAP32[$34>>2]|0;
    $49 = (($48) + ($i$11<<2)|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (($50) + ($35<<2)|0);
    $52 = HEAP32[$36>>2]|0;
    $53 = (($52) + ($i$11<<2)|0);
    HEAP32[$53>>2] = $51;
    $54 = (($i$11) + 1)|0;
    $exitcond = ($54|0)==($32|0);
    if ($exitcond) {
     $$pre$phi8Z2D = $36;
     break;
    } else {
     $i$11 = $54;
    }
   }
   $55 = HEAP32[$$pre$phi8Z2D>>2]|0;
   return ($55|0);
  }
 }
 $$pre7 = ((($v)) + 12|0);
 $$pre$phi8Z2D = $$pre7;
 $55 = HEAP32[$$pre$phi8Z2D>>2]|0;
 return ($55|0);
}
function _vorbis_analysis_wrote($v,$vals) {
 $v = $v|0;
 $vals = $vals|0;
 var $$ = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($v)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($vals|0)<(1);
 if (!($4)) {
  $50 = ((($v)) + 20|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + ($vals))|0;
  $53 = ((($v)) + 16|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)>($54|0);
  if ($55) {
   STACKTOP = sp;return;
  }
  HEAP32[$50>>2] = $52;
  $56 = ((($v)) + 28|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($57|0)==(0);
  if (!($58)) {
   STACKTOP = sp;return;
  }
  $59 = ((($v)) + 48|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($52) - ($60))|0;
  $62 = ((($3)) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($61|0)>($63|0);
  if (!($64)) {
   STACKTOP = sp;return;
  }
  __preextrapolate_helper($v);
  STACKTOP = sp;return;
 }
 $5 = STACKTOP; STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $6 = ((($v)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  __preextrapolate_helper($v);
 }
 $9 = ((($3)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10*3)|0;
 (_vorbis_analysis_buffer($v,$11)|0);
 $12 = ((($v)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($v)) + 32|0);
 HEAP32[$14>>2] = $13;
 $15 = HEAP32[$9>>2]|0;
 $16 = ($15*3)|0;
 $17 = (($16) + ($13))|0;
 HEAP32[$12>>2] = $17;
 $18 = ((($1)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)>(0);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = ((($v)) + 8|0);
 $22 = $13;$i$01 = 0;
 while(1) {
  $23 = ($22|0)>(64);
  if ($23) {
   $24 = HEAP32[$9>>2]|0;
   $25 = ($22|0)>($24|0);
   $$ = $25 ? $24 : $22;
   $26 = HEAP32[$21>>2]|0;
   $27 = (($26) + ($i$01<<2)|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) + ($22<<2)|0);
   $30 = (0 - ($$))|0;
   $31 = (($29) + ($30<<2)|0);
   _vorbis_lpc_from_data($31,$5,$$,32);
   $32 = HEAP32[$21>>2]|0;
   $33 = (($32) + ($i$01<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = HEAP32[$14>>2]|0;
   $36 = (($34) + ($35<<2)|0);
   $37 = ((($36)) + -128|0);
   $38 = HEAP32[$12>>2]|0;
   $39 = (($38) - ($35))|0;
   _vorbis_lpc_predict($5,$37,32,$36,$39);
  } else {
   $40 = HEAP32[$21>>2]|0;
   $41 = (($40) + ($i$01<<2)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($42) + ($22<<2)|0);
   $44 = HEAP32[$12>>2]|0;
   $45 = (($44) - ($22))|0;
   $46 = $45 << 2;
   _memset(($43|0),0,($46|0))|0;
  }
  $47 = (($i$01) + 1)|0;
  $48 = HEAP32[$18>>2]|0;
  $49 = ($47|0)<($48|0);
  if (!($49)) {
   break;
  }
  $$pre = HEAP32[$14>>2]|0;
  $22 = $$pre;$i$01 = $47;
 }
 STACKTOP = sp;return;
}
function __preextrapolate_helper($v) {
 $v = $v|0;
 var $$alloca_mul = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$07 = 0, $j$02 = 0, $j$13 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = ((($v)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 << 2;
 $$alloca_mul = $3;
 $4 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $5 = ((($v)) + 28|0);
 HEAP32[$5>>2] = 1;
 $6 = ((($v)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($2) - ($7))|0;
 $9 = ($8|0)>(32);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = ((($v)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)>(0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = ((($v)) + 8|0);
 $16 = $2;$i$07 = 0;
 while(1) {
  $17 = ($16|0)>(0);
  if ($17) {
   $18 = HEAP32[$15>>2]|0;
   $19 = (($18) + ($i$07<<2)|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = HEAP32[$1>>2]|0;
   $24 = $16;$j$02 = 0;
   while(1) {
    $22 = $j$02 ^ -1;
    $23 = (($24) + ($22))|0;
    $25 = (($20) + ($23<<2)|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($4) + ($j$02<<2)|0);
    HEAP32[$27>>2] = $26;
    $28 = (($j$02) + 1)|0;
    $29 = ($21|0)>($28|0);
    if ($29) {
     $24 = $21;$j$02 = $28;
    } else {
     $$lcssa = $21;
     break;
    }
   }
  } else {
   $$lcssa = $16;
  }
  $30 = HEAP32[$6>>2]|0;
  $31 = (($$lcssa) - ($30))|0;
  _vorbis_lpc_from_data($4,$0,$31,16);
  $32 = HEAP32[$1>>2]|0;
  $33 = (($4) + ($32<<2)|0);
  $34 = HEAP32[$6>>2]|0;
  $35 = (0 - ($34))|0;
  $36 = (($33) + ($35<<2)|0);
  $37 = ((($36)) + -64|0);
  _vorbis_lpc_predict($0,$37,16,$36,$34);
  $38 = HEAP32[$1>>2]|0;
  $39 = ($38|0)>(0);
  if ($39) {
   $40 = HEAP32[$15>>2]|0;
   $41 = (($40) + ($i$07<<2)|0);
   $42 = HEAP32[$41>>2]|0;
   $j$13 = 0;
   while(1) {
    $43 = (($4) + ($j$13<<2)|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = $j$13 ^ -1;
    $46 = (($38) + ($45))|0;
    $47 = (($42) + ($46<<2)|0);
    HEAP32[$47>>2] = $44;
    $48 = (($j$13) + 1)|0;
    $exitcond = ($48|0)==($38|0);
    if ($exitcond) {
     break;
    } else {
     $j$13 = $48;
    }
   }
  }
  $49 = (($i$07) + 1)|0;
  $50 = HEAP32[$10>>2]|0;
  $51 = ((($50)) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($49|0)<($52|0);
  if ($53) {
   $16 = $38;$i$07 = $49;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _vorbis_analysis_blockout($v,$vb) {
 $v = $v|0;
 $vb = $vb|0;
 var $$$i = 0, $$0$i = 0.0, $$2 = 0, $$2$i = 0, $$4 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre14 = 0, $$pre15 = 0, $$pre16 = 0, $$pre17 = 0, $$pre19 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0.0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0.0, $249 = 0.0;
 var $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $beginW$0$i = 0, $endW$0$i = 0, $i$011 = 0, $i$03$i = 0, $i$08$i = 0, $j$011$i = 0, $j$14$i = 0, $not$ = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i3 = 0, $reap$01$i = 0, $ret$07$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($v)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($v)) + 104|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($v)) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($v)) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($3) + ($11<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13|0) / 2)&-1;
 $15 = (($9) - ($14))|0;
 $16 = ((($vb)) + 104|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($v)) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0);
 if ($20) {
  $$2 = 0;
  return ($$2|0);
 }
 $21 = ((($v)) + 32|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(-1);
 if ($23) {
  $$2 = 0;
  return ($$2|0);
 }
 $24 = ((($3)) + 2868|0);
 $25 = HEAP32[$5>>2]|0;
 $26 = ((($25)) + 168|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($25)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27|0) / ($29|0))&-1;
 $31 = ((($v)) + 20|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32|0) / ($29|0))&-1;
 $34 = (($33) + -4)|0;
 $35 = ($30|0)<(0);
 $$$i = $35 ? 0 : $30;
 $36 = (($33) + 2)|0;
 $37 = ((($25)) + 164|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($36|0)>($38|0);
 if ($39) {
  HEAP32[$37>>2] = $36;
  $40 = ((($25)) + 160|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $36 << 2;
  $43 = (_realloc($41,$42)|0);
  HEAP32[$40>>2] = $43;
 }
 $44 = ($$$i|0)<($34|0);
 if ($44) {
  $45 = ((($25)) + 156|0);
  $46 = ((($25)) + 160|0);
  $47 = ((($v)) + 8|0);
  $48 = ((($25)) + 40|0);
  $49 = ((($25)) + 152|0);
  $j$011$i = $$$i;
  while(1) {
   $50 = HEAP32[$45>>2]|0;
   $51 = (($50) + 1)|0;
   $52 = ($50|0)>(23);
   $$2$i = $52 ? 24 : $51;
   HEAP32[$45>>2] = $$2$i;
   $53 = HEAP32[$25>>2]|0;
   $54 = ($53|0)>(0);
   if ($54) {
    $i$08$i = 0;$ret$07$i = 0;
    while(1) {
     $58 = HEAP32[$47>>2]|0;
     $59 = (($58) + ($i$08$i<<2)|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = HEAP32[$28>>2]|0;
     $62 = Math_imul($61, $j$011$i)|0;
     $63 = (($60) + ($62<<2)|0);
     $64 = HEAP32[$49>>2]|0;
     $65 = ($i$08$i*7)|0;
     $66 = (($64) + (($65*144)|0)|0);
     $67 = (__ve_amp($25,$24,$63,$48,$66)|0);
     $68 = $67 | $ret$07$i;
     $69 = (($i$08$i) + 1)|0;
     $70 = HEAP32[$25>>2]|0;
     $71 = ($69|0)<($70|0);
     if ($71) {
      $i$08$i = $69;$ret$07$i = $68;
     } else {
      break;
     }
    }
    $72 = (($j$011$i) + 2)|0;
    $73 = HEAP32[$46>>2]|0;
    $74 = (($73) + ($72<<2)|0);
    HEAP32[$74>>2] = 0;
    $75 = $68 & 1;
    $76 = ($75|0)==(0);
    if (!($76)) {
     $77 = (($73) + ($j$011$i<<2)|0);
     HEAP32[$77>>2] = 1;
     $78 = (($j$011$i) + 1)|0;
     $79 = (($73) + ($78<<2)|0);
     HEAP32[$79>>2] = 1;
    }
    $80 = $68 & 2;
    $81 = ($80|0)==(0);
    if (!($81)) {
     $82 = (($73) + ($j$011$i<<2)|0);
     HEAP32[$82>>2] = 1;
     $83 = ($j$011$i|0)>(0);
     if ($83) {
      $84 = (($j$011$i) + -1)|0;
      $85 = (($73) + ($84<<2)|0);
      HEAP32[$85>>2] = 1;
     }
    }
    $86 = $68 & 4;
    $87 = ($86|0)==(0);
    if (!($87)) {
     HEAP32[$45>>2] = -1;
    }
   } else {
    $55 = (($j$011$i) + 2)|0;
    $56 = HEAP32[$46>>2]|0;
    $57 = (($56) + ($55<<2)|0);
    HEAP32[$57>>2] = 0;
   }
   $88 = (($j$011$i) + 1)|0;
   $89 = ($88|0)<($34|0);
   if ($89) {
    $j$011$i = $88;
   } else {
    break;
   }
  }
 }
 $90 = HEAP32[$28>>2]|0;
 $91 = Math_imul($90, $34)|0;
 HEAP32[$26>>2] = $91;
 $92 = HEAP32[$8>>2]|0;
 $93 = HEAP32[$10>>2]|0;
 $94 = (($3) + ($93<<2)|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = (($95|0) / 4)&-1;
 $97 = (($96) + ($92))|0;
 $98 = ((($3)) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = (($99|0) / 2)&-1;
 $101 = (($97) + ($100))|0;
 $102 = HEAP32[$3>>2]|0;
 $103 = (($102|0) / 4)&-1;
 $104 = (($101) + ($103))|0;
 $105 = ((($25)) + 176|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = (($91) - ($90))|0;
 $108 = ($106|0)<($107|0);
 L29: do {
  if ($108) {
   $109 = ((($25)) + 160|0);
   $j$14$i = $106;
   while(1) {
    $112 = ($j$14$i|0)<($104|0);
    if (!($112)) {
     $127 = 1;
     break;
    }
    HEAP32[$105>>2] = $j$14$i;
    $113 = (($j$14$i|0) / ($90|0))&-1;
    $114 = HEAP32[$109>>2]|0;
    $115 = (($114) + ($113<<2)|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ($116|0)!=(0);
    $118 = ($j$14$i|0)>($92|0);
    $or$cond$i = $118 & $117;
    $110 = (($90) + ($j$14$i))|0;
    if ($or$cond$i) {
     label = 23;
     break;
    }
    $111 = ($110|0)<($107|0);
    if ($111) {
     $j$14$i = $110;
    } else {
     label = 24;
     break L29;
    }
   }
   if ((label|0) == 23) {
    $119 = ((($25)) + 172|0);
    HEAP32[$119>>2] = $j$14$i;
    $127 = 0;
   }
   $123 = HEAP32[$3>>2]|0;
   $124 = HEAP32[$98>>2]|0;
   $125 = ($123|0)==($124|0);
   $126 = ((($v)) + 44|0);
   if ($125) {
    HEAP32[$126>>2] = 0;
    $$pre$phiZ2D = $126;$132 = 0;
    break;
   } else {
    HEAP32[$126>>2] = $127;
    $$pre$phiZ2D = $126;$132 = $127;
    break;
   }
  } else {
   label = 24;
  }
 } while(0);
 do {
  if ((label|0) == 24) {
   $120 = HEAP32[$21>>2]|0;
   $121 = ($120|0)==(0);
   if ($121) {
    $$2 = 0;
    return ($$2|0);
   } else {
    $122 = ((($v)) + 44|0);
    HEAP32[$122>>2] = 0;
    $$pre$phiZ2D = $122;$132 = 0;
    break;
   }
  }
 } while(0);
 $128 = HEAP32[$94>>2]|0;
 $129 = (($128|0) / 4)&-1;
 $130 = (($129) + ($92))|0;
 $131 = (($3) + ($132<<2)|0);
 $133 = HEAP32[$131>>2]|0;
 $134 = (($133|0) / 4)&-1;
 $135 = (($130) + ($134))|0;
 $136 = (($133|0) / 2)&-1;
 $137 = (($135) + ($136))|0;
 $138 = HEAP32[$31>>2]|0;
 $not$ = ($138|0)<($137|0);
 if ($not$) {
  $$2 = 0;
  return ($$2|0);
 }
 $139 = ((($vb)) + 84|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = ($140|0)==(0|0);
 if (!($141)) {
  $reap$01$i = $140;
  while(1) {
   $142 = ((($reap$01$i)) + 4|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = HEAP32[$reap$01$i>>2]|0;
   _free($144);
   _free($reap$01$i);
   $145 = ($143|0)==(0|0);
   if ($145) {
    break;
   } else {
    $reap$01$i = $143;
   }
  }
 }
 $146 = ((($vb)) + 80|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = ($147|0)==(0);
 if (!($148)) {
  $149 = ((($vb)) + 68|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = ((($vb)) + 76|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = (($152) + ($147))|0;
  $154 = (_realloc($150,$153)|0);
  HEAP32[$149>>2] = $154;
  $155 = HEAP32[$146>>2]|0;
  $156 = HEAP32[$151>>2]|0;
  $157 = (($156) + ($155))|0;
  HEAP32[$151>>2] = $157;
  HEAP32[$146>>2] = 0;
 }
 $158 = ((($vb)) + 72|0);
 HEAP32[$158>>2] = 0;
 HEAP32[$139>>2] = 0;
 $159 = ((($v)) + 36|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = ((($vb)) + 24|0);
 HEAP32[$161>>2] = $160;
 $162 = HEAP32[$10>>2]|0;
 $163 = ((($vb)) + 28|0);
 HEAP32[$163>>2] = $162;
 $164 = HEAP32[$$pre$phiZ2D>>2]|0;
 $165 = ((($vb)) + 32|0);
 HEAP32[$165>>2] = $164;
 $166 = ($162|0)==(0);
 L57: do {
  if ($166) {
   $170 = HEAP32[$4>>2]|0;
   $171 = HEAP32[$170>>2]|0;
   $172 = HEAP32[$0>>2]|0;
   $173 = ((($172)) + 28|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = HEAP32[$8>>2]|0;
   $176 = HEAP32[$174>>2]|0;
   $177 = (($176|0) / 4)&-1;
   $178 = (($175) - ($177))|0;
   $179 = (($177) + ($175))|0;
   $beginW$0$i = (($178) - ($177))|0;
   $endW$0$i = (($179) + ($177))|0;
   $180 = ((($171)) + 172|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = ($181|0)>=($beginW$0$i|0);
   $183 = ($181|0)<($endW$0$i|0);
   $or$cond$i3 = $182 & $183;
   L59: do {
    if (!($or$cond$i3)) {
     $184 = ((($171)) + 8|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = (($beginW$0$i|0) / ($185|0))&-1;
     $187 = (($endW$0$i|0) / ($185|0))&-1;
     $188 = ($186|0)<($187|0);
     if ($188) {
      $189 = ((($171)) + 160|0);
      $190 = HEAP32[$189>>2]|0;
      $i$03$i = $186;
      while(1) {
       $193 = (($190) + ($i$03$i<<2)|0);
       $194 = HEAP32[$193>>2]|0;
       $195 = ($194|0)==(0);
       $191 = (($i$03$i) + 1)|0;
       if (!($195)) {
        break L59;
       }
       $192 = ($191|0)<($187|0);
       if ($192) {
        $i$03$i = $191;
       } else {
        break;
       }
      }
     }
     $197 = ((($17)) + 8|0);
     HEAP32[$197>>2] = 1;
     break L57;
    }
   } while(0);
   $196 = ((($17)) + 8|0);
   HEAP32[$196>>2] = 0;
  } else {
   $167 = ($160|0)==(0);
   $168 = ($164|0)==(0);
   $or$cond = $167 | $168;
   $169 = ((($17)) + 8|0);
   if ($or$cond) {
    HEAP32[$169>>2] = 0;
    break;
   } else {
    HEAP32[$169>>2] = 1;
    break;
   }
  }
 } while(0);
 $198 = ((($vb)) + 64|0);
 HEAP32[$198>>2] = $v;
 $199 = ((($v)) + 64|0);
 $200 = $199;
 $201 = $200;
 $202 = HEAP32[$201>>2]|0;
 $203 = (($200) + 4)|0;
 $204 = $203;
 $205 = HEAP32[$204>>2]|0;
 $206 = (_i64Add(($202|0),($205|0),1,0)|0);
 $207 = tempRet0;
 $208 = $199;
 $209 = $208;
 HEAP32[$209>>2] = $206;
 $210 = (($208) + 4)|0;
 $211 = $210;
 HEAP32[$211>>2] = $207;
 $212 = ((($vb)) + 56|0);
 $213 = $212;
 $214 = $213;
 HEAP32[$214>>2] = $202;
 $215 = (($213) + 4)|0;
 $216 = $215;
 HEAP32[$216>>2] = $205;
 $217 = ((($v)) + 56|0);
 $218 = $217;
 $219 = $218;
 $220 = HEAP32[$219>>2]|0;
 $221 = (($218) + 4)|0;
 $222 = $221;
 $223 = HEAP32[$222>>2]|0;
 $224 = ((($vb)) + 48|0);
 $225 = $224;
 $226 = $225;
 HEAP32[$226>>2] = $220;
 $227 = (($225) + 4)|0;
 $228 = $227;
 HEAP32[$228>>2] = $223;
 $229 = (($3) + ($162<<2)|0);
 $230 = HEAP32[$229>>2]|0;
 $231 = ((($vb)) + 36|0);
 HEAP32[$231>>2] = $230;
 $232 = ((($17)) + 4|0);
 $233 = +HEAPF32[$232>>2];
 $234 = +HEAPF32[$7>>2];
 $235 = $233 > $234;
 if ($235) {
  HEAPF32[$7>>2] = $233;
  $251 = $233;
 } else {
  $251 = $234;
 }
 $236 = HEAP32[$0>>2]|0;
 $237 = ((($236)) + 28|0);
 $238 = HEAP32[$237>>2]|0;
 $239 = (($238) + ($162<<2)|0);
 $240 = HEAP32[$239>>2]|0;
 $241 = (($240|0) / 2)&-1;
 $242 = (+($241|0));
 $243 = ((($236)) + 8|0);
 $244 = HEAP32[$243>>2]|0;
 $245 = (+($244|0));
 $246 = $242 / $245;
 $247 = ((($238)) + 2936|0);
 $248 = +HEAPF32[$247>>2];
 $249 = $246 * $248;
 $250 = $249 + $251;
 $252 = $250 < -9999.0;
 $$0$i = $252 ? -9999.0 : $250;
 HEAPF32[$7>>2] = $$0$i;
 HEAPF32[$232>>2] = $$0$i;
 $253 = ((($1)) + 4|0);
 $254 = HEAP32[$253>>2]|0;
 $255 = $254 << 2;
 $256 = (($255) + 7)|0;
 $257 = $256 & -8;
 $258 = ((($vb)) + 76|0);
 $259 = HEAP32[$258>>2]|0;
 $260 = ($257|0)>($259|0);
 $261 = ((($vb)) + 68|0);
 $262 = HEAP32[$261>>2]|0;
 if ($260) {
  $263 = ($262|0)==(0|0);
  if (!($263)) {
   $264 = $262;
   $265 = (_malloc(8)|0);
   $266 = HEAP32[$139>>2]|0;
   $267 = ((($265)) + 4|0);
   HEAP32[$267>>2] = $266;
   HEAP32[$265>>2] = $264;
   HEAP32[$139>>2] = $265;
  }
  HEAP32[$258>>2] = $257;
  $268 = (_malloc($257)|0);
  HEAP32[$261>>2] = $268;
  HEAP32[$158>>2] = 0;
  $$pre = HEAP32[$253>>2]|0;
  $269 = $268;$271 = $$pre;$276 = $257;
 } else {
  $269 = $262;$271 = $254;$276 = $259;
 }
 HEAP32[$158>>2] = $257;
 HEAP32[$vb>>2] = $269;
 $270 = $271 << 2;
 $272 = (($270) + 7)|0;
 $273 = $272 & -8;
 $274 = (($273) + ($257))|0;
 $275 = ($274|0)>($276|0);
 if ($275) {
  $277 = ($269|0)==(0|0);
  if (!($277)) {
   $278 = $269;
   $279 = (_malloc(8)|0);
   $280 = HEAP32[$146>>2]|0;
   $281 = (($280) + ($257))|0;
   HEAP32[$146>>2] = $281;
   $282 = HEAP32[$139>>2]|0;
   $283 = ((($279)) + 4|0);
   HEAP32[$283>>2] = $282;
   HEAP32[$279>>2] = $278;
   HEAP32[$139>>2] = $279;
  }
  HEAP32[$258>>2] = $273;
  $284 = (_malloc($273)|0);
  HEAP32[$261>>2] = $284;
  HEAP32[$158>>2] = 0;
  $$pre14 = HEAP32[$253>>2]|0;
  $286 = $284;$287 = 0;$289 = $$pre14;$433 = $273;
 } else {
  $286 = $269;$287 = $257;$289 = $271;$433 = $276;
 }
 $285 = (($286) + ($287)|0);
 $288 = (($287) + ($273))|0;
 HEAP32[$158>>2] = $288;
 HEAP32[$17>>2] = $285;
 $290 = ($289|0)>(0);
 L88: do {
  if ($290) {
   $291 = ((($v)) + 8|0);
   $298 = $288;$300 = $433;$301 = $286;$i$011 = 0;
   while(1) {
    $292 = HEAP32[$231>>2]|0;
    $293 = (($292) + ($15))|0;
    $294 = $293 << 2;
    $295 = (($294) + 7)|0;
    $296 = $295 & -8;
    $297 = (($296) + ($298))|0;
    $299 = ($297|0)>($300|0);
    if ($299) {
     $302 = ($301|0)==(0|0);
     if (!($302)) {
      $303 = $301;
      $304 = (_malloc(8)|0);
      $305 = HEAP32[$146>>2]|0;
      $306 = (($305) + ($298))|0;
      HEAP32[$146>>2] = $306;
      $307 = HEAP32[$139>>2]|0;
      $308 = ((($304)) + 4|0);
      HEAP32[$308>>2] = $307;
      HEAP32[$304>>2] = $303;
      HEAP32[$139>>2] = $304;
     }
     HEAP32[$258>>2] = $296;
     $309 = (_malloc($296)|0);
     HEAP32[$261>>2] = $309;
     HEAP32[$158>>2] = 0;
     $311 = $309;$312 = 0;
    } else {
     $311 = $301;$312 = $298;
    }
    $310 = (($311) + ($312)|0);
    $313 = (($312) + ($296))|0;
    HEAP32[$158>>2] = $313;
    $314 = HEAP32[$17>>2]|0;
    $315 = (($314) + ($i$011<<2)|0);
    HEAP32[$315>>2] = $310;
    $316 = HEAP32[$17>>2]|0;
    $317 = (($316) + ($i$011<<2)|0);
    $318 = HEAP32[$317>>2]|0;
    $319 = HEAP32[$291>>2]|0;
    $320 = (($319) + ($i$011<<2)|0);
    $321 = HEAP32[$320>>2]|0;
    _memcpy(($318|0),($321|0),($294|0))|0;
    $322 = HEAP32[$17>>2]|0;
    $323 = (($322) + ($i$011<<2)|0);
    $324 = HEAP32[$323>>2]|0;
    $325 = (($324) + ($15<<2)|0);
    $326 = HEAP32[$vb>>2]|0;
    $327 = (($326) + ($i$011<<2)|0);
    HEAP32[$327>>2] = $325;
    $328 = (($i$011) + 1)|0;
    $329 = HEAP32[$253>>2]|0;
    $330 = ($328|0)<($329|0);
    if (!($330)) {
     break L88;
    }
    $$pre15 = HEAP32[$158>>2]|0;
    $$pre16 = HEAP32[$258>>2]|0;
    $$pre17 = HEAP32[$261>>2]|0;
    $298 = $$pre15;$300 = $$pre16;$301 = $$pre17;$i$011 = $328;
   }
  }
 } while(0);
 $331 = HEAP32[$21>>2]|0;
 $332 = ($331|0)==(0);
 if (!($332)) {
  $333 = HEAP32[$8>>2]|0;
  $334 = ($333|0)<($331|0);
  if (!($334)) {
   HEAP32[$21>>2] = -1;
   $335 = ((($vb)) + 44|0);
   HEAP32[$335>>2] = 1;
   $$2 = 1;
   return ($$2|0);
  }
 }
 $336 = HEAP32[$98>>2]|0;
 $337 = (($336|0) / 2)&-1;
 $338 = (($135) - ($337))|0;
 $339 = ($338|0)>(0);
 if (!($339)) {
  $$2 = 1;
  return ($$2|0);
 }
 $340 = HEAP32[$5>>2]|0;
 $341 = ((($340)) + 168|0);
 $342 = HEAP32[$341>>2]|0;
 $343 = ((($340)) + 8|0);
 $344 = HEAP32[$343>>2]|0;
 $345 = (($342|0) / ($344|0))&-1;
 $346 = (($345) + 2)|0;
 $347 = (($338|0) / ($344|0))&-1;
 $348 = ((($340)) + 160|0);
 $349 = HEAP32[$348>>2]|0;
 $350 = (($349) + ($347<<2)|0);
 $351 = (($346) - ($347))|0;
 $352 = $351 << 2;
 _memmove(($349|0),($350|0),($352|0))|0;
 $353 = HEAP32[$341>>2]|0;
 $354 = (($353) - ($338))|0;
 HEAP32[$341>>2] = $354;
 $355 = ((($340)) + 172|0);
 $356 = HEAP32[$355>>2]|0;
 $357 = ($356|0)>(-1);
 if ($357) {
  $358 = (($356) - ($338))|0;
  HEAP32[$355>>2] = $358;
 }
 $359 = ((($340)) + 176|0);
 $360 = HEAP32[$359>>2]|0;
 $361 = (($360) - ($338))|0;
 HEAP32[$359>>2] = $361;
 $362 = HEAP32[$31>>2]|0;
 $363 = (($362) - ($338))|0;
 HEAP32[$31>>2] = $363;
 $364 = HEAP32[$253>>2]|0;
 $365 = ($364|0)>(0);
 if ($365) {
  $366 = ((($v)) + 8|0);
  $367 = HEAP32[$366>>2]|0;
  $368 = HEAP32[$367>>2]|0;
  $369 = (($368) + ($338<<2)|0);
  $370 = $363 << 2;
  _memmove(($368|0),($369|0),($370|0))|0;
  $371 = HEAP32[$253>>2]|0;
  $372 = ($371|0)>(1);
  if ($372) {
   $375 = 1;
   while(1) {
    $$pre19 = HEAP32[$31>>2]|0;
    $373 = HEAP32[$366>>2]|0;
    $374 = (($373) + ($375<<2)|0);
    $376 = HEAP32[$374>>2]|0;
    $377 = (($376) + ($338<<2)|0);
    $378 = $$pre19 << 2;
    _memmove(($376|0),($377|0),($378|0))|0;
    $379 = (($375) + 1)|0;
    $380 = HEAP32[$253>>2]|0;
    $381 = ($379|0)<($380|0);
    if ($381) {
     $375 = $379;
    } else {
     break;
    }
   }
  }
 }
 $382 = HEAP32[$10>>2]|0;
 HEAP32[$159>>2] = $382;
 $383 = HEAP32[$$pre$phiZ2D>>2]|0;
 HEAP32[$10>>2] = $383;
 HEAP32[$8>>2] = $337;
 $384 = HEAP32[$21>>2]|0;
 $385 = ($384|0)==(0);
 if ($385) {
  $419 = ($338|0)<(0);
  $420 = $419 << 31 >> 31;
  $421 = $217;
  $422 = $421;
  $423 = HEAP32[$422>>2]|0;
  $424 = (($421) + 4)|0;
  $425 = $424;
  $426 = HEAP32[$425>>2]|0;
  $427 = (_i64Add(($423|0),($426|0),($338|0),($420|0))|0);
  $428 = tempRet0;
  $429 = $217;
  $430 = $429;
  HEAP32[$430>>2] = $427;
  $431 = (($429) + 4)|0;
  $432 = $431;
  HEAP32[$432>>2] = $428;
  $$2 = 1;
  return ($$2|0);
 }
 $386 = (($384) - ($338))|0;
 $387 = ($386|0)<(1);
 $$4 = $387 ? -1 : $386;
 HEAP32[$21>>2] = $$4;
 $388 = ($$4|0)>($337|0);
 if ($388) {
  $405 = ($338|0)<(0);
  $406 = $405 << 31 >> 31;
  $407 = $217;
  $408 = $407;
  $409 = HEAP32[$408>>2]|0;
  $410 = (($407) + 4)|0;
  $411 = $410;
  $412 = HEAP32[$411>>2]|0;
  $413 = (_i64Add(($409|0),($412|0),($338|0),($406|0))|0);
  $414 = tempRet0;
  $415 = $217;
  $416 = $415;
  HEAP32[$416>>2] = $413;
  $417 = (($415) + 4)|0;
  $418 = $417;
  HEAP32[$418>>2] = $414;
  $$2 = 1;
  return ($$2|0);
 } else {
  $389 = (($$4) + ($338))|0;
  $390 = (($389) - ($337))|0;
  $391 = ($390|0)<(0);
  $392 = $391 << 31 >> 31;
  $393 = $217;
  $394 = $393;
  $395 = HEAP32[$394>>2]|0;
  $396 = (($393) + 4)|0;
  $397 = $396;
  $398 = HEAP32[$397>>2]|0;
  $399 = (_i64Add(($395|0),($398|0),($390|0),($392|0))|0);
  $400 = tempRet0;
  $401 = $217;
  $402 = $401;
  HEAP32[$402>>2] = $399;
  $403 = (($401) + 4)|0;
  $404 = $403;
  HEAP32[$404>>2] = $400;
  $$2 = 1;
  return ($$2|0);
 }
 return (0)|0;
}
function __ve_amp($ve,$gi,$data,$bands,$filters) {
 $ve = $ve|0;
 $gi = $gi|0;
 $data = $data|0;
 $bands = $bands|0;
 $filters = $filters|0;
 var $$ = 0, $$2 = 0, $$2$us = 0, $$2$v = 0, $$2$v$us = 0, $$3 = 0.0, $$3$us = 0.0, $$4$us = 0, $$4$v$us = 0, $$5 = 0, $$5$us = 0, $$alloca_mul = 0, $$phi$trans$insert = 0, $$pre = 0.0, $$pre$phiZ2D = 0, $$premin$0$us = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0;
 var $12 = 0.0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0.0;
 var $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0;
 var $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0.0, $172 = 0.0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0;
 var $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0;
 var $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0;
 var $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $acc$0$lcssa = 0.0, $acc$0$lcssa$us = 0.0, $acc$08 = 0.0, $acc$08$us = 0.0, $decay$sroa$0$1$in23 = 0.0, $exitcond = 0, $exitcond34 = 0, $exitcond35 = 0, $exitcond36 = 0, $exitcond6 = 0, $exitcond7 = 0, $fabs = 0.0, $fabs6 = 0.0, $i$027 = 0, $i$124 = 0, $i$29 = 0;
 var $i$29$us = 0, $i$311$us = 0, $j$019 = 0, $j$019$us = 0, $p$110$us = 0, $penalty$0 = 0.0, $penalty$1 = 0.0, $premax$012$us = 0.0, $premin$013$us = 0.0, $ret$0$lcssa = 0, $ret$022 = 0, $ret$022$us = 0, $ret$1 = 0, $ret$1$us = 0, $ret$2 = 0, $ret$2$us = 0, $val$sroa$0$0$v = 0.0, $val$sroa$0$1$v = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ve)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($ve)) + 12|0);
 $3 = +HEAPF32[$2>>2];
 $4 = $1 << 2;
 $$alloca_mul = $4;
 $5 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $6 = ((($ve)) + 156|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(5);
 $9 = (($7|0) / 2)&-1;
 $10 = $8 ? $9 : 2;
 $11 = ((($gi)) + 60|0);
 $12 = +HEAPF32[$11>>2];
 $13 = (($9) + -2)|0;
 $14 = (+($13|0));
 $15 = $12 - $14;
 $16 = $15 < 0.0;
 $penalty$0 = $16 ? 0.0 : $15;
 $17 = $penalty$0 > $12;
 $penalty$1 = $17 ? $12 : $penalty$0;
 $18 = ($1|0)>(0);
 if ($18) {
  $19 = ((($ve)) + 36|0);
  $20 = HEAP32[$19>>2]|0;
  $i$027 = 0;
  while(1) {
   $21 = (($data) + ($i$027<<2)|0);
   $22 = +HEAPF32[$21>>2];
   $23 = (($20) + ($i$027<<2)|0);
   $24 = +HEAPF32[$23>>2];
   $25 = $24 * $22;
   $26 = (($5) + ($i$027<<2)|0);
   HEAPF32[$26>>2] = $25;
   $27 = (($i$027) + 1)|0;
   $exitcond36 = ($27|0)==($1|0);
   if ($exitcond36) {
    break;
   } else {
    $i$027 = $27;
   }
  }
 }
 $28 = ((($ve)) + 16|0);
 _mdct_forward($28,$5,$5);
 $29 = +HEAPF32[$5>>2];
 $30 = $29 * $29;
 $31 = $30;
 $32 = ((($5)) + 4|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $33;
 $35 = $34 * $34;
 $36 = $35 * 0.69999999999999996;
 $37 = $36 + $31;
 $38 = ((($5)) + 8|0);
 $39 = +HEAPF32[$38>>2];
 $40 = $39;
 $41 = $40 * $40;
 $42 = $41 * 0.20000000000000001;
 $43 = $37 + $42;
 $44 = $43;
 $45 = ((($filters)) + 140|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)==(0);
 if ($47) {
  $48 = ((($filters)) + 136|0);
  $49 = +HEAPF32[$48>>2];
  $50 = $49 + $44;
  $51 = ((($filters)) + 132|0);
  HEAPF32[$51>>2] = $50;
  HEAPF32[$48>>2] = $44;
  $$pre$phiZ2D = $51;$61 = $50;
 } else {
  $52 = ((($filters)) + 132|0);
  $53 = +HEAPF32[$52>>2];
  $54 = $53 + $44;
  HEAPF32[$52>>2] = $54;
  $55 = ((($filters)) + 136|0);
  $56 = +HEAPF32[$55>>2];
  $57 = $56 + $44;
  HEAPF32[$55>>2] = $57;
  $$pre$phiZ2D = $52;$61 = $54;
 }
 $58 = (((($filters)) + 72|0) + ($46<<2)|0);
 $59 = +HEAPF32[$58>>2];
 $60 = $61 - $59;
 HEAPF32[$$pre$phiZ2D>>2] = $60;
 HEAPF32[$58>>2] = $44;
 $62 = HEAP32[$45>>2]|0;
 $63 = (($62) + 1)|0;
 $64 = ($62|0)>(13);
 $$ = $64 ? 0 : $63;
 HEAP32[$45>>2] = $$;
 $65 = (($1|0) / 2)&-1;
 $66 = ($1|0)>(1);
 L10: do {
  if ($66) {
   $67 = $61 * 0.0625;
   $fabs = (+Math_abs((+$67)));
   $68 = (HEAPF32[tempDoublePtr>>2]=$fabs,HEAP32[tempDoublePtr>>2]|0);
   $69 = (+($68>>>0));
   $70 = $69 * 7.1771142984289327E-7;
   $71 = $70 + -764.6162109375;
   $72 = $71;
   $73 = $72 * 0.5;
   $74 = $73 + -15.0;
   $75 = $74;
   $128 = $29;$decay$sroa$0$1$in23 = $75;$i$124 = 0;
   while(1) {
    $127 = $128 * $128;
    $129 = $i$124 | 1;
    $130 = (($5) + ($129<<2)|0);
    $131 = +HEAPF32[$130>>2];
    $132 = $131 * $131;
    $133 = $132 + $127;
    $fabs6 = (+Math_abs((+$133)));
    $134 = (HEAPF32[tempDoublePtr>>2]=$fabs6,HEAP32[tempDoublePtr>>2]|0);
    $135 = (+($134>>>0));
    $136 = $135 * 3.5885571492144663E-7;
    $137 = $136 + -382.30810546875;
    $138 = $137 < $decay$sroa$0$1$in23;
    $val$sroa$0$0$v = $138 ? $decay$sroa$0$1$in23 : $137;
    $139 = $val$sroa$0$0$v < $3;
    $val$sroa$0$1$v = $139 ? $3 : $val$sroa$0$0$v;
    $140 = $i$124 >> 1;
    $141 = (($5) + ($140<<2)|0);
    HEAPF32[$141>>2] = $val$sroa$0$1$v;
    $142 = (($i$124) + 2)|0;
    $143 = ($142|0)<($65|0);
    if (!($143)) {
     break L10;
    }
    $144 = $decay$sroa$0$1$in23 + -8.0;
    $$phi$trans$insert = (($5) + ($142<<2)|0);
    $$pre = +HEAPF32[$$phi$trans$insert>>2];
    $128 = $$pre;$decay$sroa$0$1$in23 = $144;$i$124 = $142;
   }
  }
 } while(0);
 $76 = ($10|0)>(0);
 if ($76) {
  $j$019$us = 0;$ret$022$us = 0;
 } else {
  $j$019 = 0;$ret$022 = 0;
  while(1) {
   $145 = (((($bands) + ($j$019<<4)|0)) + 4|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = ($146|0)>(0);
   if ($147) {
    $148 = (($bands) + ($j$019<<4)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = (((($bands) + ($j$019<<4)|0)) + 8|0);
    $151 = HEAP32[$150>>2]|0;
    $acc$08 = 0.0;$i$29 = 0;
    while(1) {
     $152 = (($149) + ($i$29))|0;
     $153 = (($5) + ($152<<2)|0);
     $154 = +HEAPF32[$153>>2];
     $155 = (($151) + ($i$29<<2)|0);
     $156 = +HEAPF32[$155>>2];
     $157 = $156 * $154;
     $158 = $157 + $acc$08;
     $159 = (($i$29) + 1)|0;
     $exitcond7 = ($159|0)==($146|0);
     if ($exitcond7) {
      $acc$0$lcssa = $158;
      break;
     } else {
      $acc$08 = $158;$i$29 = $159;
     }
    }
   } else {
    $acc$0$lcssa = 0.0;
   }
   $160 = (((($bands) + ($j$019<<4)|0)) + 12|0);
   $161 = +HEAPF32[$160>>2];
   $162 = $161 * $acc$0$lcssa;
   $163 = (((($filters) + (($j$019*144)|0)|0)) + 68|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = ($164|0)<(1);
   $$2$v = $165 ? 16 : -1;
   $$2 = (($$2$v) + ($164))|0;
   $166 = ((($filters) + (($j$019*144)|0)|0) + ($$2<<2)|0);
   $167 = +HEAPF32[$166>>2];
   $168 = $162 < $167;
   $169 = $168 ? $167 : $162;
   $170 = $162 > $167;
   $$3 = $170 ? $167 : $162;
   $171 = $$3 + -99999.0;
   $172 = $169 + 99999.0;
   $173 = ((($filters) + (($j$019*144)|0)|0) + ($164<<2)|0);
   HEAPF32[$173>>2] = $162;
   $174 = HEAP32[$163>>2]|0;
   $175 = (($174) + 1)|0;
   $176 = ($174|0)>(15);
   $$5 = $176 ? 0 : $175;
   HEAP32[$163>>2] = $$5;
   $177 = (((($gi)) + 4|0) + ($j$019<<2)|0);
   $178 = +HEAPF32[$177>>2];
   $179 = $178 + $penalty$1;
   $180 = $172 > $179;
   $181 = $ret$022 | 5;
   $ret$1 = $180 ? $181 : $ret$022;
   $182 = (((($gi)) + 32|0) + ($j$019<<2)|0);
   $183 = +HEAPF32[$182>>2];
   $184 = $183 - $penalty$1;
   $185 = $171 < $184;
   $186 = $ret$1 | 2;
   $ret$2 = $185 ? $186 : $ret$1;
   $187 = (($j$019) + 1)|0;
   $exitcond35 = ($187|0)==(7);
   if ($exitcond35) {
    $ret$0$lcssa = $ret$2;
    break;
   } else {
    $j$019 = $187;$ret$022 = $ret$2;
   }
  }
  STACKTOP = sp;return ($ret$0$lcssa|0);
 }
 while(1) {
  $77 = (((($bands) + ($j$019$us<<4)|0)) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ($78|0)>(0);
  if ($79) {
   $106 = (($bands) + ($j$019$us<<4)|0);
   $97 = HEAP32[$106>>2]|0;
   $107 = (((($bands) + ($j$019$us<<4)|0)) + 8|0);
   $101 = HEAP32[$107>>2]|0;
   $acc$08$us = 0.0;$i$29$us = 0;
   while(1) {
    $96 = (($97) + ($i$29$us))|0;
    $98 = (($5) + ($96<<2)|0);
    $99 = +HEAPF32[$98>>2];
    $100 = (($101) + ($i$29$us<<2)|0);
    $102 = +HEAPF32[$100>>2];
    $103 = $102 * $99;
    $104 = $103 + $acc$08$us;
    $105 = (($i$29$us) + 1)|0;
    $exitcond6 = ($105|0)==($78|0);
    if ($exitcond6) {
     $acc$0$lcssa$us = $104;
     break;
    } else {
     $acc$08$us = $104;$i$29$us = $105;
    }
   }
  } else {
   $acc$0$lcssa$us = 0.0;
  }
  $80 = (((($bands) + ($j$019$us<<4)|0)) + 12|0);
  $81 = +HEAPF32[$80>>2];
  $82 = $81 * $acc$0$lcssa$us;
  $83 = (((($filters) + (($j$019$us*144)|0)|0)) + 68|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = ($84|0)<(1);
  $$2$v$us = $85 ? 16 : -1;
  $$2$us = (($$2$v$us) + ($84))|0;
  $86 = ((($filters) + (($j$019$us*144)|0)|0) + ($$2$us<<2)|0);
  $87 = +HEAPF32[$86>>2];
  $88 = $82 < $87;
  $i$311$us = 0;$p$110$us = $$2$us;$premax$012$us = -99999.0;$premin$013$us = 99999.0;
  while(1) {
   $89 = ($p$110$us|0)<(1);
   $$4$v$us = $89 ? 16 : -1;
   $$4$us = (($$4$v$us) + ($p$110$us))|0;
   $90 = ((($filters) + (($j$019$us*144)|0)|0) + ($$4$us<<2)|0);
   $91 = +HEAPF32[$90>>2];
   $92 = $premax$012$us < $91;
   $93 = $92 ? $91 : $premax$012$us;
   $94 = $premin$013$us > $91;
   $$premin$0$us = $94 ? $91 : $premin$013$us;
   $95 = (($i$311$us) + 1)|0;
   $exitcond = ($95|0)==($10|0);
   if ($exitcond) {
    break;
   } else {
    $i$311$us = $95;$p$110$us = $$4$us;$premax$012$us = $93;$premin$013$us = $$premin$0$us;
   }
  }
  $108 = $82 > $87;
  $109 = $88 ? $87 : $82;
  $$3$us = $108 ? $87 : $82;
  $110 = $$3$us - $$premin$0$us;
  $111 = $109 - $93;
  $112 = ((($filters) + (($j$019$us*144)|0)|0) + ($84<<2)|0);
  HEAPF32[$112>>2] = $82;
  $113 = HEAP32[$83>>2]|0;
  $114 = (($113) + 1)|0;
  $115 = ($113|0)>(15);
  $$5$us = $115 ? 0 : $114;
  HEAP32[$83>>2] = $$5$us;
  $116 = (((($gi)) + 4|0) + ($j$019$us<<2)|0);
  $117 = +HEAPF32[$116>>2];
  $118 = $117 + $penalty$1;
  $119 = $111 > $118;
  $120 = $ret$022$us | 5;
  $ret$1$us = $119 ? $120 : $ret$022$us;
  $121 = (((($gi)) + 32|0) + ($j$019$us<<2)|0);
  $122 = +HEAPF32[$121>>2];
  $123 = $122 - $penalty$1;
  $124 = $110 < $123;
  $125 = $ret$1$us | 2;
  $ret$2$us = $124 ? $125 : $ret$1$us;
  $126 = (($j$019$us) + 1)|0;
  $exitcond34 = ($126|0)==(7);
  if ($exitcond34) {
   $ret$0$lcssa = $ret$2$us;
   break;
  } else {
   $j$019$us = $126;$ret$022$us = $ret$2$us;
  }
 }
 STACKTOP = sp;return ($ret$0$lcssa|0);
}
function __vorbis_apply_window($d,$winno,$blocksizes,$lW,$W,$nW) {
 $d = $d|0;
 $winno = $winno|0;
 $blocksizes = $blocksizes|0;
 $lW = $lW|0;
 $W = $W|0;
 $nW = $nW|0;
 var $$neg = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond16 = 0, $i$0$lcssa = 0, $i$18 = 0, $i$2$lcssa = 0, $i$25 = 0, $p$09 = 0, $p$16 = 0, $p$16$in = 0;
 var $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($W|0)!=(0);
 $1 = $0 ? $lW : 0;
 $2 = $0 ? $nW : 0;
 $3 = (($winno) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (3668 + ($4<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($winno) + ($2<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (3668 + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($blocksizes) + ($W<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($blocksizes) + ($1<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($blocksizes) + ($2<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($12|0) / 4)&-1;
 $18 = (($14|0) / 4)&-1;
 $19 = (($17) - ($18))|0;
 $20 = (($14|0) / 2)&-1;
 $21 = (($19) + ($20))|0;
 $22 = (($12|0) / 2)&-1;
 $23 = (($22) + ($17))|0;
 $$neg = (($16|0) / -4)&-1;
 $24 = (($23) + ($$neg))|0;
 $25 = (($16|0) / 2)&-1;
 $26 = (($24) + ($25))|0;
 $27 = ($19|0)>(0);
 if ($27) {
  $28 = $19 << 2;
  _memset(($d|0),0,($28|0))|0;
  $i$0$lcssa = $19;
 } else {
  $i$0$lcssa = 0;
 }
 $29 = ($i$0$lcssa|0)<($21|0);
 if ($29) {
  $30 = (($17) + ($20))|0;
  $31 = (($30) - ($i$0$lcssa))|0;
  $32 = (($31) - ($18))|0;
  $i$18 = $i$0$lcssa;$p$09 = 0;
  while(1) {
   $34 = (($6) + ($p$09<<2)|0);
   $35 = +HEAPF32[$34>>2];
   $36 = (($d) + ($i$18<<2)|0);
   $37 = +HEAPF32[$36>>2];
   $38 = $37 * $35;
   HEAPF32[$36>>2] = $38;
   $39 = (($i$18) + 1)|0;
   $40 = (($p$09) + 1)|0;
   $exitcond16 = ($40|0)==($32|0);
   if ($exitcond16) {
    break;
   } else {
    $i$18 = $39;$p$09 = $40;
   }
  }
 }
 $33 = ($16|0)>(1);
 if ($33) {
  $i$25 = $24;$p$16$in = $25;
  while(1) {
   $p$16 = (($p$16$in) + -1)|0;
   $44 = (($10) + ($p$16<<2)|0);
   $45 = +HEAPF32[$44>>2];
   $46 = (($d) + ($i$25<<2)|0);
   $47 = +HEAPF32[$46>>2];
   $48 = $47 * $45;
   HEAPF32[$46>>2] = $48;
   $49 = (($i$25) + 1)|0;
   $50 = ($49|0)<($26|0);
   if ($50) {
    $i$25 = $49;$p$16$in = $p$16;
   } else {
    $i$2$lcssa = $49;
    break;
   }
  }
 } else {
  $i$2$lcssa = $24;
 }
 $41 = ($12|0)>($i$2$lcssa|0);
 if (!($41)) {
  return;
 }
 $scevgep = (($d) + ($i$2$lcssa<<2)|0);
 $42 = (($12) - ($i$2$lcssa))|0;
 $43 = $42 << 2;
 _memset(($scevgep|0),0,($43|0))|0;
 return;
}
function _vorbis_lpc_from_data($data,$lpci,$n,$m) {
 $data = $data|0;
 $lpci = $lpci|0;
 $n = $n|0;
 $m = $m|0;
 var $$alloca_mul = 0, $$alloca_mul1 = 0, $$pre = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0;
 var $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0;
 var $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $9 = 0.0, $d$0$lcssa = 0.0, $d$028 = 0.0, $damp$09 = 0.0, $error$023 = 0.0, $exitcond = 0, $exitcond38 = 0, $exitcond39 = 0, $exitcond40 = 0, $i$027 = 0, $indvars$iv = 0, $indvars$iv$next = 0, $j$111 = 0, $j$2$lcssa = 0, $j$216 = 0, $j$38 = 0;
 var $j$47 = 0, $r$012 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($m) + 1)|0;
 $1 = $0 << 3;
 $$alloca_mul = $1;
 $2 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $3 = $m << 3;
 $$alloca_mul1 = $3;
 $4 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul1)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $5 = ($0|0)==(0);
 if ($5) {
  $22 = 0.0;
 } else {
  $6 = $m;
  while(1) {
   $7 = ($6|0)<($n|0);
   if ($7) {
    $d$028 = 0.0;$i$027 = $6;
    while(1) {
     $8 = (($data) + ($i$027<<2)|0);
     $9 = +HEAPF32[$8>>2];
     $10 = $9;
     $11 = (($i$027) - ($6))|0;
     $12 = (($data) + ($11<<2)|0);
     $13 = +HEAPF32[$12>>2];
     $14 = $13;
     $15 = $14 * $10;
     $16 = $15 + $d$028;
     $17 = (($i$027) + 1)|0;
     $exitcond40 = ($17|0)==($n|0);
     if ($exitcond40) {
      $d$0$lcssa = $16;
      break;
     } else {
      $d$028 = $16;$i$027 = $17;
     }
    }
   } else {
    $d$0$lcssa = 0.0;
   }
   $18 = (($2) + ($6<<3)|0);
   HEAPF64[$18>>3] = $d$0$lcssa;
   $19 = (($6) + -1)|0;
   $20 = ($6|0)==(0);
   if ($20) {
    break;
   } else {
    $6 = $19;
   }
  }
  $$pre = +HEAPF64[$2>>3];
  $22 = $$pre;
 }
 $21 = $22 * 1.0000000000000001E-9;
 $23 = $21 + 1.0E-10;
 $24 = ($m|0)>(0);
 if (!($24)) {
  STACKTOP = sp;return;
 }
 $25 = $22 * 1.0000000001;
 $error$023 = $25;$indvars$iv = 0;
 while(1) {
  $indvars$iv$next = (($indvars$iv) + 1)|0;
  $26 = $error$023 < $23;
  if ($26) {
   label = 18;
   break;
  }
  $27 = (($2) + ($indvars$iv$next<<3)|0);
  $28 = +HEAPF64[$27>>3];
  $29 = -$28;
  $30 = ($indvars$iv|0)>(0);
  if ($30) {
   $j$111 = 0;$r$012 = $29;
   while(1) {
    $33 = (($4) + ($j$111<<3)|0);
    $34 = +HEAPF64[$33>>3];
    $35 = (($indvars$iv) - ($j$111))|0;
    $36 = (($2) + ($35<<3)|0);
    $37 = +HEAPF64[$36>>3];
    $38 = $37 * $34;
    $39 = $r$012 - $38;
    $40 = (($j$111) + 1)|0;
    $exitcond39 = ($40|0)==($indvars$iv|0);
    if ($exitcond39) {
     break;
    } else {
     $j$111 = $40;$r$012 = $39;
    }
   }
   $41 = $39 / $error$023;
   $42 = (($4) + ($indvars$iv<<3)|0);
   HEAPF64[$42>>3] = $41;
   $43 = (($indvars$iv|0) / 2)&-1;
   $44 = ($indvars$iv|0)>(1);
   if ($44) {
    $45 = (($indvars$iv) + -1)|0;
    $j$216 = 0;
    while(1) {
     $46 = (($4) + ($j$216<<3)|0);
     $47 = +HEAPF64[$46>>3];
     $48 = (($45) - ($j$216))|0;
     $49 = (($4) + ($48<<3)|0);
     $50 = +HEAPF64[$49>>3];
     $51 = $50 * $41;
     $52 = $51 + $47;
     HEAPF64[$46>>3] = $52;
     $53 = $47 * $41;
     $54 = +HEAPF64[$49>>3];
     $55 = $54 + $53;
     HEAPF64[$49>>3] = $55;
     $56 = (($j$216) + 1)|0;
     $57 = ($56|0)<($43|0);
     if ($57) {
      $j$216 = $56;
     } else {
      $63 = $41;$j$2$lcssa = $56;
      break;
     }
    }
   } else {
    $63 = $41;$j$2$lcssa = 0;
   }
  } else {
   $31 = $29 / $error$023;
   $32 = (($4) + ($indvars$iv<<3)|0);
   HEAPF64[$32>>3] = $31;
   $63 = $31;$j$2$lcssa = 0;
  }
  $58 = $indvars$iv & 1;
  $59 = ($58|0)==(0);
  if (!($59)) {
   $60 = (($4) + ($j$2$lcssa<<3)|0);
   $61 = +HEAPF64[$60>>3];
   $62 = $61 * $63;
   $64 = $62 + $61;
   HEAPF64[$60>>3] = $64;
  }
  $65 = $63 * $63;
  $66 = 1.0 - $65;
  $67 = $66 * $error$023;
  $68 = ($indvars$iv$next|0)<($m|0);
  if ($68) {
   $error$023 = $67;$indvars$iv = $indvars$iv$next;
  } else {
   $damp$09 = 0.98999999999999999;$j$38 = 0;
   break;
  }
 }
 if ((label|0) == 18) {
  $69 = (($4) + ($indvars$iv<<3)|0);
  $70 = (($m) - ($indvars$iv))|0;
  $71 = $70 << 3;
  _memset(($69|0),0,($71|0))|0;
  $damp$09 = 0.98999999999999999;$j$38 = 0;
 }
 while(1) {
  $72 = (($4) + ($j$38<<3)|0);
  $73 = +HEAPF64[$72>>3];
  $74 = $73 * $damp$09;
  HEAPF64[$72>>3] = $74;
  $75 = $damp$09 * 0.98999999999999999;
  $76 = (($j$38) + 1)|0;
  $exitcond38 = ($76|0)==($m|0);
  if ($exitcond38) {
   $j$47 = 0;
   break;
  } else {
   $damp$09 = $75;$j$38 = $76;
  }
 }
 while(1) {
  $77 = (($4) + ($j$47<<3)|0);
  $78 = +HEAPF64[$77>>3];
  $79 = $78;
  $80 = (($lpci) + ($j$47<<2)|0);
  HEAPF32[$80>>2] = $79;
  $81 = (($j$47) + 1)|0;
  $exitcond = ($81|0)==($m|0);
  if ($exitcond) {
   break;
  } else {
   $j$47 = $81;
  }
 }
 STACKTOP = sp;return;
}
function _vorbis_lpc_predict($coeff,$prime,$m,$data,$n) {
 $coeff = $coeff|0;
 $prime = $prime|0;
 $m = $m|0;
 $data = $data|0;
 $n = $n|0;
 var $$alloca_mul = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, $exitcond19 = 0, $i$210$us = 0, $indvars$iv = 0, $indvars$iv$next = 0, $o$06$us = 0, $p$07$us = 0, $y$08$us = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($n) + ($m))|0;
 $1 = $0 << 2;
 $$alloca_mul = $1;
 $2 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $3 = ($prime|0)==(0|0);
 $4 = ($m|0)>(0);
 if ($3) {
  if ($4) {
   $6 = $m << 2;
   _memset(($2|0),0,($6|0))|0;
  }
 } else {
  if ($4) {
   $5 = $m << 2;
   _memcpy(($2|0),($prime|0),($5|0))|0;
  }
 }
 $7 = ($n|0)>(0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 if ($4) {
  $i$210$us = 0;$indvars$iv = $m;
 } else {
  $8 = $n << 2;
  _memset(($2|0),0,($8|0))|0;
  _memset(($data|0),0,($8|0))|0;
  STACKTOP = sp;return;
 }
 while(1) {
  $o$06$us = $i$210$us;$p$07$us = $m;$y$08$us = 0.0;
  while(1) {
   $9 = (($o$06$us) + 1)|0;
   $10 = (($2) + ($o$06$us<<2)|0);
   $11 = +HEAPF32[$10>>2];
   $12 = (($p$07$us) + -1)|0;
   $13 = (($coeff) + ($12<<2)|0);
   $14 = +HEAPF32[$13>>2];
   $15 = $14 * $11;
   $16 = $y$08$us - $15;
   $exitcond = ($9|0)==($indvars$iv|0);
   if ($exitcond) {
    break;
   } else {
    $o$06$us = $9;$p$07$us = $12;$y$08$us = $16;
   }
  }
  $17 = (($2) + ($indvars$iv<<2)|0);
  HEAPF32[$17>>2] = $16;
  $18 = (($data) + ($i$210$us<<2)|0);
  HEAPF32[$18>>2] = $16;
  $19 = (($i$210$us) + 1)|0;
  $indvars$iv$next = (($indvars$iv) + 1)|0;
  $exitcond19 = ($19|0)==($n|0);
  if ($exitcond19) {
   break;
  } else {
   $i$210$us = $19;$indvars$iv = $indvars$iv$next;
  }
 }
 STACKTOP = sp;return;
}
function _vorbis_analysis($vb,$op) {
 $vb = $vb|0;
 $op = $op|0;
 var $$0 = 0, $$cast$i = 0, $$cast$i1 = 0, $$cast$i11 = 0, $$cast$i13 = 0, $$cast$i15 = 0, $$cast$i17 = 0, $$cast$i19 = 0, $$cast$i21 = 0, $$cast$i23 = 0, $$cast$i25 = 0, $$cast$i27 = 0, $$cast$i3 = 0, $$cast$i5 = 0, $$cast$i7 = 0, $$cast$i9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vb)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($vb)) + 88|0);
 $3 = ((($1)) + 12|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = ((($4)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$5>>2] = $9;
  $$cast$i = $9;
  HEAP8[$$cast$i>>0] = 0;
  HEAP32[$4>>2] = 0;
  $10 = ((($4)) + 4|0);
  HEAP32[$10>>2] = 0;
 }
 $11 = ((($1)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  $16 = ((($12)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$13>>2] = $17;
  $$cast$i1 = $17;
  HEAP8[$$cast$i1>>0] = 0;
  HEAP32[$12>>2] = 0;
  $18 = ((($12)) + 4|0);
  HEAP32[$18>>2] = 0;
 }
 $19 = ((($1)) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if (!($23)) {
  $24 = ((($20)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  HEAP32[$21>>2] = $25;
  $$cast$i27 = $25;
  HEAP8[$$cast$i27>>0] = 0;
  HEAP32[$20>>2] = 0;
  $26 = ((($20)) + 4|0);
  HEAP32[$26>>2] = 0;
 }
 $27 = ((($1)) + 24|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0|0);
 if (!($31)) {
  $32 = ((($28)) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  HEAP32[$29>>2] = $33;
  $$cast$i25 = $33;
  HEAP8[$$cast$i25>>0] = 0;
  HEAP32[$28>>2] = 0;
  $34 = ((($28)) + 4|0);
  HEAP32[$34>>2] = 0;
 }
 $35 = ((($1)) + 28|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($36)) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(0|0);
 if (!($39)) {
  $40 = ((($36)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  HEAP32[$37>>2] = $41;
  $$cast$i23 = $41;
  HEAP8[$$cast$i23>>0] = 0;
  HEAP32[$36>>2] = 0;
  $42 = ((($36)) + 4|0);
  HEAP32[$42>>2] = 0;
 }
 $43 = ((($1)) + 32|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($44)) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)==(0|0);
 if (!($47)) {
  $48 = ((($44)) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  HEAP32[$45>>2] = $49;
  $$cast$i21 = $49;
  HEAP8[$$cast$i21>>0] = 0;
  HEAP32[$44>>2] = 0;
  $50 = ((($44)) + 4|0);
  HEAP32[$50>>2] = 0;
 }
 $51 = ((($1)) + 36|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ((($52)) + 12|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)==(0|0);
 if (!($55)) {
  $56 = ((($52)) + 8|0);
  $57 = HEAP32[$56>>2]|0;
  HEAP32[$53>>2] = $57;
  $$cast$i19 = $57;
  HEAP8[$$cast$i19>>0] = 0;
  HEAP32[$52>>2] = 0;
  $58 = ((($52)) + 4|0);
  HEAP32[$58>>2] = 0;
 }
 $59 = ((($1)) + 40|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ((($60)) + 12|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)==(0|0);
 if (!($63)) {
  $64 = ((($60)) + 8|0);
  $65 = HEAP32[$64>>2]|0;
  HEAP32[$61>>2] = $65;
  $$cast$i17 = $65;
  HEAP8[$$cast$i17>>0] = 0;
  HEAP32[$60>>2] = 0;
  $66 = ((($60)) + 4|0);
  HEAP32[$66>>2] = 0;
 }
 $67 = ((($1)) + 44|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ((($68)) + 12|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ($70|0)==(0|0);
 if (!($71)) {
  $72 = ((($68)) + 8|0);
  $73 = HEAP32[$72>>2]|0;
  HEAP32[$69>>2] = $73;
  $$cast$i15 = $73;
  HEAP8[$$cast$i15>>0] = 0;
  HEAP32[$68>>2] = 0;
  $74 = ((($68)) + 4|0);
  HEAP32[$74>>2] = 0;
 }
 $75 = ((($1)) + 48|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ((($76)) + 12|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ($78|0)==(0|0);
 if (!($79)) {
  $80 = ((($76)) + 8|0);
  $81 = HEAP32[$80>>2]|0;
  HEAP32[$77>>2] = $81;
  $$cast$i13 = $81;
  HEAP8[$$cast$i13>>0] = 0;
  HEAP32[$76>>2] = 0;
  $82 = ((($76)) + 4|0);
  HEAP32[$82>>2] = 0;
 }
 $83 = ((($1)) + 52|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ((($84)) + 12|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = ($86|0)==(0|0);
 if (!($87)) {
  $88 = ((($84)) + 8|0);
  $89 = HEAP32[$88>>2]|0;
  HEAP32[$85>>2] = $89;
  $$cast$i11 = $89;
  HEAP8[$$cast$i11>>0] = 0;
  HEAP32[$84>>2] = 0;
  $90 = ((($84)) + 4|0);
  HEAP32[$90>>2] = 0;
 }
 $91 = ((($1)) + 56|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ((($92)) + 12|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ($94|0)==(0|0);
 if (!($95)) {
  $96 = ((($92)) + 8|0);
  $97 = HEAP32[$96>>2]|0;
  HEAP32[$93>>2] = $97;
  $$cast$i9 = $97;
  HEAP8[$$cast$i9>>0] = 0;
  HEAP32[$92>>2] = 0;
  $98 = ((($92)) + 4|0);
  HEAP32[$98>>2] = 0;
 }
 $99 = ((($1)) + 60|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = ((($100)) + 12|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ($102|0)==(0|0);
 if (!($103)) {
  $104 = ((($100)) + 8|0);
  $105 = HEAP32[$104>>2]|0;
  HEAP32[$101>>2] = $105;
  $$cast$i7 = $105;
  HEAP8[$$cast$i7>>0] = 0;
  HEAP32[$100>>2] = 0;
  $106 = ((($100)) + 4|0);
  HEAP32[$106>>2] = 0;
 }
 $107 = ((($1)) + 64|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = ((($108)) + 12|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = ($110|0)==(0|0);
 if (!($111)) {
  $112 = ((($108)) + 8|0);
  $113 = HEAP32[$112>>2]|0;
  HEAP32[$109>>2] = $113;
  $$cast$i5 = $113;
  HEAP8[$$cast$i5>>0] = 0;
  HEAP32[$108>>2] = 0;
  $114 = ((($108)) + 4|0);
  HEAP32[$114>>2] = 0;
 }
 $115 = ((($1)) + 68|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = ((($116)) + 12|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = ($118|0)==(0|0);
 if (!($119)) {
  $120 = ((($116)) + 8|0);
  $121 = HEAP32[$120>>2]|0;
  HEAP32[$117>>2] = $121;
  $$cast$i3 = $121;
  HEAP8[$$cast$i3>>0] = 0;
  HEAP32[$116>>2] = 0;
  $122 = ((($116)) + 4|0);
  HEAP32[$122>>2] = 0;
 }
 $123 = (_mapping0_forward($vb)|0);
 $124 = ($123|0)==(0);
 if (!($124)) {
  $$0 = $123;
  return ($$0|0);
 }
 $125 = ($op|0)==(0|0);
 if ($125) {
  $$0 = 0;
  return ($$0|0);
 }
 $126 = ((($vb)) + 64|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = ((($127)) + 104|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = ((($129)) + 80|0);
 $131 = HEAP32[$130>>2]|0;
 $not$$i = ($131|0)==(0);
 if (!($not$$i)) {
  $$0 = -131;
  return ($$0|0);
 }
 $132 = ((($vb)) + 12|0);
 $133 = HEAP32[$132>>2]|0;
 HEAP32[$op>>2] = $133;
 $134 = ((($vb)) + 4|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = ((($vb)) + 8|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = (($137) + 7)|0;
 $139 = (($138|0) / 8)&-1;
 $140 = (($139) + ($135))|0;
 $141 = ((($op)) + 4|0);
 HEAP32[$141>>2] = $140;
 $142 = ((($op)) + 8|0);
 HEAP32[$142>>2] = 0;
 $143 = ((($vb)) + 44|0);
 $144 = HEAP32[$143>>2]|0;
 $145 = ((($op)) + 12|0);
 HEAP32[$145>>2] = $144;
 $146 = ((($vb)) + 48|0);
 $147 = $146;
 $148 = $147;
 $149 = HEAP32[$148>>2]|0;
 $150 = (($147) + 4)|0;
 $151 = $150;
 $152 = HEAP32[$151>>2]|0;
 $153 = ((($op)) + 16|0);
 $154 = $153;
 $155 = $154;
 HEAP32[$155>>2] = $149;
 $156 = (($154) + 4)|0;
 $157 = $156;
 HEAP32[$157>>2] = $152;
 $158 = ((($vb)) + 56|0);
 $159 = $158;
 $160 = $159;
 $161 = HEAP32[$160>>2]|0;
 $162 = (($159) + 4)|0;
 $163 = $162;
 $164 = HEAP32[$163>>2]|0;
 $165 = ((($op)) + 24|0);
 $166 = $165;
 $167 = $166;
 HEAP32[$167>>2] = $161;
 $168 = (($166) + 4)|0;
 $169 = $168;
 HEAP32[$169>>2] = $164;
 $$0 = 0;
 return ($$0|0);
}
function _setup_tone_curves($curveatt_dB,$binHz,$n,$center_boost,$center_decay_rate) {
 $curveatt_dB = $curveatt_dB|0;
 $binHz = +$binHz;
 $n = $n|0;
 $center_boost = +$center_boost;
 $center_decay_rate = +$center_decay_rate;
 var $$$$us$us$us = 0.0, $$$$us76 = 0.0, $$$us$us$us = 0.0, $$$us$us85 = 0.0, $$5 = 0, $$6 = 0, $$8 = 0, $$alloca_mul = 0, $$neg = 0.0, $$neg20 = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0;
 var $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0;
 var $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0;
 var $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0;
 var $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0;
 var $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0.0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0.0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0;
 var $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0.0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0.0, $262 = 0, $263 = 0, $264 = 0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0.0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0.0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0, $279 = 0, $28 = 0, $280 = 0.0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0.0, $287 = 0;
 var $288 = 0, $289 = 0.0, $29 = 0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0, $294 = 0, $295 = 0.0, $296 = 0, $297 = 0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0.0, $300 = 0, $301 = 0.0, $302 = 0, $303 = 0, $304 = 0.0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0, $31 = 0.0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0.0, $320 = 0.0, $321 = 0, $322 = 0;
 var $323 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0.0;
 var $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0;
 var $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0;
 var $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $ath = 0, $athc = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i11 = 0, $exitcond$i13 = 0;
 var $exitcond$i16 = 0, $exitcond$i18 = 0, $exitcond104 = 0, $exitcond105 = 0, $exitcond106 = 0, $exitcond107 = 0, $exitcond108 = 0, $exitcond110 = 0, $exitcond112 = 0, $exitcond113 = 0, $exitcond114 = 0, $exitcond115 = 0, $exitcond116 = 0, $exitcond117 = 0, $exitcond118 = 0, $exitcond119 = 0, $exitcond120 = 0, $exitcond98 = 0, $exitcond99 = 0, $hi_bin$0 = 0;
 var $hi_bin3$0 = 0, $i$01$i = 0, $i$01$i10 = 0, $i$01$i12 = 0, $i$01$i15 = 0, $i$01$i17 = 0, $i$071 = 0, $i$1$ = 0, $i$162 = 0, $ispos = 0, $ispos$us$us$us = 0, $ispos$us$us83 = 0, $ispos$us73 = 0, $j$065 = 0, $j$10$lcssa = 0, $j$1057 = 0, $j$268 = 0, $j$268$us = 0, $j$369 = 0, $j$470 = 0;
 var $j$533 = 0, $j$637 = 0, $j$750 = 0, $j$855 = 0, $j$9$lcssa = 0.0, $k$167 = 0, $k$167$us$us$us = 0, $k$167$us$us82 = 0, $k$167$us72 = 0, $k$242 = 0, $l$039 = 0, $l$2$lcssa = 0, $l$235 = 0, $l$340 = 0, $l1$052 = 0, $l1$2$lcssa = 0, $l1$246 = 0, $l1$353 = 0, $lo_bin$1 = 0, $lo_bin$1$l$0 = 0;
 var $lo_bin2$1 = 0, $lo_bin2$1$l1$0 = 0, $lo_curve$1 = 0, $m$058 = 0, $min$1 = 0.0, $min$1$1 = 0.0, $min$1$2 = 0.0, $min$1$3 = 0.0, $n$hi_bin$0 = 0, $n$hi_bin3$0 = 0, $neg = 0, $neg$us$us$us = 0, $neg$us$us84 = 0, $neg$us74 = 0, $or$cond7 = 0, $or$cond734 = 0, $or$cond9 = 0, $or$cond945 = 0, $workc = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ath = sp + 32256|0;
 $workc = sp + 1792|0;
 $athc = sp;
 $0 = $n << 2;
 $$alloca_mul = $0;
 $1 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $2 = (_malloc(68)|0);
 _memset(($workc|0),0,30464)|0;
 $3 = $center_boost > 0.0;
 $4 = $center_boost < 0.0;
 $i$071 = 0;
 while(1) {
  $7 = $i$071 << 2;
  $j$065 = 0;
  while(1) {
   $8 = (($j$065) + ($7))|0;
   $9 = ($8|0)<(88);
   if ($9) {
    $10 = (36340 + ($8<<2)|0);
    $11 = +HEAPF32[$10>>2];
    $min$1 = $11;
   } else {
    $min$1 = -30.0;
   }
   $12 = (($8) + 1)|0;
   $13 = ($12|0)<(88);
   if ($13) {
    $307 = (36340 + ($12<<2)|0);
    $308 = +HEAPF32[$307>>2];
    $309 = $min$1 > $308;
    if ($309) {
     $min$1$1 = $308;
    } else {
     $min$1$1 = $min$1;
    }
   } else {
    $306 = $min$1 > -30.0;
    if ($306) {
     $min$1$1 = -30.0;
    } else {
     $min$1$1 = $min$1;
    }
   }
   $310 = (($8) + 2)|0;
   $311 = ($310|0)<(88);
   if ($311) {
    $313 = (36340 + ($310<<2)|0);
    $314 = +HEAPF32[$313>>2];
    $315 = $min$1$1 > $314;
    if ($315) {
     $min$1$2 = $314;
    } else {
     $min$1$2 = $min$1$1;
    }
   } else {
    $312 = $min$1$1 > -30.0;
    if ($312) {
     $min$1$2 = -30.0;
    } else {
     $min$1$2 = $min$1$1;
    }
   }
   $316 = (($8) + 3)|0;
   $317 = ($316|0)<(88);
   if ($317) {
    $319 = (36340 + ($316<<2)|0);
    $320 = +HEAPF32[$319>>2];
    $321 = $min$1$2 > $320;
    if ($321) {
     $min$1$3 = $320;
    } else {
     $min$1$3 = $min$1$2;
    }
   } else {
    $318 = $min$1$2 > -30.0;
    if ($318) {
     $min$1$3 = -30.0;
    } else {
     $min$1$3 = $min$1$2;
    }
   }
   $322 = (($ath) + ($j$065<<2)|0);
   HEAPF32[$322>>2] = $min$1$3;
   $323 = (($j$065) + 1)|0;
   $exitcond110 = ($323|0)==(56);
   if ($exitcond110) {
    break;
   } else {
    $j$065 = $323;
   }
  }
  $14 = (((($workc) + (($i$071*1792)|0)|0)) + 448|0);
  $15 = (36692 + (($i$071*1344)|0)|0);
  _memcpy(($14|0),($15|0),224)|0;
  $16 = (((($workc) + (($i$071*1792)|0)|0)) + 672|0);
  $17 = (((36692 + (($i$071*1344)|0)|0)) + 224|0);
  _memcpy(($16|0),($17|0),224)|0;
  $18 = (((($workc) + (($i$071*1792)|0)|0)) + 896|0);
  $19 = (((36692 + (($i$071*1344)|0)|0)) + 448|0);
  _memcpy(($18|0),($19|0),224)|0;
  $20 = (((($workc) + (($i$071*1792)|0)|0)) + 1120|0);
  $21 = (((36692 + (($i$071*1344)|0)|0)) + 672|0);
  _memcpy(($20|0),($21|0),224)|0;
  $22 = (((($workc) + (($i$071*1792)|0)|0)) + 1344|0);
  $23 = (((36692 + (($i$071*1344)|0)|0)) + 896|0);
  _memcpy(($22|0),($23|0),224)|0;
  $24 = (((($workc) + (($i$071*1792)|0)|0)) + 1568|0);
  $25 = (((36692 + (($i$071*1344)|0)|0)) + 1120|0);
  _memcpy(($24|0),($25|0),224)|0;
  $26 = (($workc) + (($i$071*1792)|0)|0);
  _memcpy(($26|0),($15|0),224)|0;
  $27 = (((($workc) + (($i$071*1792)|0)|0)) + 224|0);
  _memcpy(($27|0),($15|0),224)|0;
  if ($3) {
   $j$268$us = 0;
   while(1) {
    if ($4) {
     $k$167$us$us$us = 0;
     while(1) {
      $39 = (16 - ($k$167$us$us$us))|0;
      $ispos$us$us$us = ($39|0)>(-1);
      $neg$us$us$us = (0 - ($39))|0;
      $40 = $ispos$us$us$us ? $39 : $neg$us$us$us;
      $41 = (+($40|0));
      $42 = $41 * $center_decay_rate;
      $43 = $42 + $center_boost;
      $44 = $43 < 0.0;
      $$$us$us$us = $44 ? 0.0 : $43;
      $45 = $$$us$us$us > 0.0;
      $$$$us$us$us = $45 ? 0.0 : $$$us$us$us;
      $46 = (((($workc) + (($i$071*1792)|0)|0) + (($j$268$us*224)|0)|0) + ($k$167$us$us$us<<2)|0);
      $47 = +HEAPF32[$46>>2];
      $48 = $47 + $$$$us$us$us;
      HEAPF32[$46>>2] = $48;
      $49 = (($k$167$us$us$us) + 1)|0;
      $exitcond116 = ($49|0)==(56);
      if ($exitcond116) {
       break;
      } else {
       $k$167$us$us$us = $49;
      }
     }
    } else {
     $k$167$us$us82 = 0;
     while(1) {
      $28 = (16 - ($k$167$us$us82))|0;
      $ispos$us$us83 = ($28|0)>(-1);
      $neg$us$us84 = (0 - ($28))|0;
      $29 = $ispos$us$us83 ? $28 : $neg$us$us84;
      $30 = (+($29|0));
      $31 = $30 * $center_decay_rate;
      $32 = $31 + $center_boost;
      $33 = $32 < 0.0;
      $$$us$us85 = $33 ? 0.0 : $32;
      $34 = (((($workc) + (($i$071*1792)|0)|0) + (($j$268$us*224)|0)|0) + ($k$167$us$us82<<2)|0);
      $35 = +HEAPF32[$34>>2];
      $36 = $35 + $$$us$us85;
      HEAPF32[$34>>2] = $36;
      $37 = (($k$167$us$us82) + 1)|0;
      $exitcond115 = ($37|0)==(56);
      if ($exitcond115) {
       break;
      } else {
       $k$167$us$us82 = $37;
      }
     }
    }
    $38 = (($j$268$us) + 1)|0;
    $exitcond117 = ($38|0)==(8);
    if ($exitcond117) {
     break;
    } else {
     $j$268$us = $38;
    }
   }
  } else {
   $j$268 = 0;
   while(1) {
    if ($4) {
     $k$167$us72 = 0;
     while(1) {
      $53 = (16 - ($k$167$us72))|0;
      $ispos$us73 = ($53|0)>(-1);
      $neg$us74 = (0 - ($53))|0;
      $54 = $ispos$us73 ? $53 : $neg$us74;
      $55 = (+($54|0));
      $56 = $55 * $center_decay_rate;
      $57 = $56 + $center_boost;
      $58 = $57 > 0.0;
      $$$$us76 = $58 ? 0.0 : $57;
      $59 = (((($workc) + (($i$071*1792)|0)|0) + (($j$268*224)|0)|0) + ($k$167$us72<<2)|0);
      $60 = +HEAPF32[$59>>2];
      $61 = $60 + $$$$us76;
      HEAPF32[$59>>2] = $61;
      $62 = (($k$167$us72) + 1)|0;
      $exitcond113 = ($62|0)==(56);
      if ($exitcond113) {
       break;
      } else {
       $k$167$us72 = $62;
      }
     }
    } else {
     $k$167 = 0;
     while(1) {
      $63 = (16 - ($k$167))|0;
      $ispos = ($63|0)>(-1);
      $neg = (0 - ($63))|0;
      $64 = $ispos ? $63 : $neg;
      $65 = (+($64|0));
      $66 = $65 * $center_decay_rate;
      $67 = $66 + $center_boost;
      $68 = (((($workc) + (($i$071*1792)|0)|0) + (($j$268*224)|0)|0) + ($k$167<<2)|0);
      $69 = +HEAPF32[$68>>2];
      $70 = $69 + $67;
      HEAPF32[$68>>2] = $70;
      $71 = (($k$167) + 1)|0;
      $exitcond112 = ($71|0)==(56);
      if ($exitcond112) {
       break;
      } else {
       $k$167 = $71;
      }
     }
    }
    $72 = (($j$268) + 1)|0;
    $exitcond114 = ($72|0)==(8);
    if ($exitcond114) {
     break;
    } else {
     $j$268 = $72;
    }
   }
  }
  $50 = (($curveatt_dB) + ($i$071<<2)|0);
  $51 = +HEAPF32[$50>>2];
  $52 = $51;
  $j$369 = 0;
  while(1) {
   $73 = ($j$369|0)<(2);
   $74 = $73 ? 2 : $j$369;
   $75 = (+($74|0));
   $$neg = $75 * -10.0;
   $76 = $$neg + 70.0;
   $77 = $76 + $52;
   $78 = $77;
   $i$01$i = 0;
   while(1) {
    $79 = (((($workc) + (($i$071*1792)|0)|0) + (($j$369*224)|0)|0) + ($i$01$i<<2)|0);
    $80 = +HEAPF32[$79>>2];
    $81 = $80 + $78;
    HEAPF32[$79>>2] = $81;
    $82 = (($i$01$i) + 1)|0;
    $exitcond$i = ($82|0)==(56);
    if ($exitcond$i) {
     break;
    } else {
     $i$01$i = $82;
    }
   }
   $83 = (($athc) + (($j$369*224)|0)|0);
   _memcpy(($83|0),($ath|0),224)|0;
   $84 = (+($j$369|0));
   $$neg20 = $84 * -10.0;
   $85 = $$neg20 + 70.0;
   $i$01$i17 = 0;
   while(1) {
    $86 = ((($athc) + (($j$369*224)|0)|0) + ($i$01$i17<<2)|0);
    $87 = +HEAPF32[$86>>2];
    $88 = $85 + $87;
    HEAPF32[$86>>2] = $88;
    $89 = (($i$01$i17) + 1)|0;
    $exitcond$i18 = ($89|0)==(56);
    if ($exitcond$i18) {
     $i$01$i15 = 0;
     break;
    } else {
     $i$01$i17 = $89;
    }
   }
   while(1) {
    $90 = (((($workc) + (($i$071*1792)|0)|0) + (($j$369*224)|0)|0) + ($i$01$i15<<2)|0);
    $91 = +HEAPF32[$90>>2];
    $92 = ((($athc) + (($j$369*224)|0)|0) + ($i$01$i15<<2)|0);
    $93 = +HEAPF32[$92>>2];
    $94 = $91 > $93;
    if ($94) {
     HEAPF32[$92>>2] = $91;
    }
    $95 = (($i$01$i15) + 1)|0;
    $exitcond$i16 = ($95|0)==(56);
    if ($exitcond$i16) {
     break;
    } else {
     $i$01$i15 = $95;
    }
   }
   $96 = (($j$369) + 1)|0;
   $exitcond118 = ($96|0)==(8);
   if ($exitcond118) {
    $j$470 = 1;
    break;
   } else {
    $j$369 = $96;
   }
  }
  while(1) {
   $97 = (($j$470) + -1)|0;
   $i$01$i12 = 0;
   while(1) {
    $98 = ((($athc) + (($97*224)|0)|0) + ($i$01$i12<<2)|0);
    $99 = +HEAPF32[$98>>2];
    $100 = ((($athc) + (($j$470*224)|0)|0) + ($i$01$i12<<2)|0);
    $101 = +HEAPF32[$100>>2];
    $102 = $99 < $101;
    if ($102) {
     HEAPF32[$100>>2] = $99;
    }
    $103 = (($i$01$i12) + 1)|0;
    $exitcond$i13 = ($103|0)==(56);
    if ($exitcond$i13) {
     $i$01$i10 = 0;
     break;
    } else {
     $i$01$i12 = $103;
    }
   }
   while(1) {
    $104 = ((($athc) + (($j$470*224)|0)|0) + ($i$01$i10<<2)|0);
    $105 = +HEAPF32[$104>>2];
    $106 = (((($workc) + (($i$071*1792)|0)|0) + (($j$470*224)|0)|0) + ($i$01$i10<<2)|0);
    $107 = +HEAPF32[$106>>2];
    $108 = $105 < $107;
    if ($108) {
     HEAPF32[$106>>2] = $105;
    }
    $109 = (($i$01$i10) + 1)|0;
    $exitcond$i11 = ($109|0)==(56);
    if ($exitcond$i11) {
     break;
    } else {
     $i$01$i10 = $109;
    }
   }
   $110 = (($j$470) + 1)|0;
   $exitcond119 = ($110|0)==(8);
   if ($exitcond119) {
    break;
   } else {
    $j$470 = $110;
   }
  }
  $111 = (($i$071) + 1)|0;
  $exitcond120 = ($111|0)==(17);
  if ($exitcond120) {
   break;
  } else {
   $i$071 = $111;
  }
 }
 $5 = $binHz;
 $6 = ($n|0)>(0);
 $i$162 = 0;
 while(1) {
  $112 = (_malloc(32)|0);
  $113 = (($2) + ($i$162<<2)|0);
  HEAP32[$113>>2] = $112;
  $114 = (+($i$162|0));
  $115 = $114 * 0.5;
  $116 = $114 * 0.34657350182533264;
  $117 = $116 + 4.1351653545408453;
  $118 = (+Math_exp((+$117)));
  $119 = $118 / $5;
  $120 = (+Math_floor((+$119)));
  $121 = (~~(($120)));
  $122 = (+($121|0));
  $123 = $122 * $binHz;
  $124 = $123 + 1.0;
  $125 = $124;
  $126 = (+Math_log((+$125)));
  $127 = $126 * 2.885390043258667;
  $128 = $127 + -11.931568145751953;
  $129 = (+Math_ceil((+$128)));
  $130 = (~~(($129)));
  $131 = (($121) + 1)|0;
  $132 = (+($131|0));
  $133 = $132 * $binHz;
  $134 = $133;
  $135 = (+Math_log((+$134)));
  $136 = $135 * 2.885390043258667;
  $137 = $136 + -11.931568145751953;
  $138 = (+Math_floor((+$137)));
  $139 = (~~(($138)));
  $140 = ($130|0)>($i$162|0);
  $i$1$ = $140 ? $i$162 : $130;
  $141 = ($i$1$|0)<(0);
  $lo_curve$1 = $141 ? 0 : $i$1$;
  $142 = ($139|0)>(16);
  $$5 = $142 ? 16 : $139;
  $143 = ($lo_curve$1|0)>($$5|0);
  $144 = (($i$162) + 1)|0;
  $145 = ($144|0)<(17);
  $146 = $115 + 3.9657840728759766;
  $m$058 = 0;
  while(1) {
   $147 = (_malloc(232)|0);
   $148 = (($112) + ($m$058<<2)|0);
   HEAP32[$148>>2] = $147;
   if ($6) {
    $j$533 = 0;
    while(1) {
     $149 = (($1) + ($j$533<<2)|0);
     HEAPF32[$149>>2] = 999.0;
     $150 = (($j$533) + 1)|0;
     $exitcond = ($150|0)==($n|0);
     if ($exitcond) {
      break;
     } else {
      $j$533 = $150;
     }
    }
   }
   if (!($143)) {
    $k$242 = $lo_curve$1;
    while(1) {
     $151 = (+($k$242|0));
     $152 = $151 * 0.5;
     $j$637 = 0;$l$039 = 0;
     while(1) {
      $156 = (+($j$637|0));
      $157 = $156 * 0.125;
      $158 = $157 + $152;
      $159 = $158 + 3.9032840728759766;
      $160 = $159 * 0.69314700365066528;
      $161 = (+Math_exp((+$160)));
      $162 = $161 / $5;
      $163 = (~~(($162)));
      $164 = $158 + 4.0282840728759766;
      $165 = $164 * 0.69314700365066528;
      $166 = (+Math_exp((+$165)));
      $167 = $166 / $5;
      $168 = $167 + 1.0;
      $169 = (~~(($168)));
      $170 = ($163|0)<(0);
      $$6 = $170 ? 0 : $163;
      $171 = ($$6|0)>($n|0);
      $lo_bin$1 = $171 ? $n : $$6;
      $172 = ($lo_bin$1|0)<($l$039|0);
      $lo_bin$1$l$0 = $172 ? $lo_bin$1 : $l$039;
      $173 = ($169|0)<(0);
      $hi_bin$0 = $173 ? 0 : $169;
      $174 = ($hi_bin$0|0)>($n|0);
      $n$hi_bin$0 = $174 ? $n : $hi_bin$0;
      $175 = ($lo_bin$1$l$0|0)<($n$hi_bin$0|0);
      $176 = ($lo_bin$1$l$0|0)<($n|0);
      $or$cond734 = $175 & $176;
      if ($or$cond734) {
       $177 = (((($workc) + (($k$242*1792)|0)|0) + (($m$058*224)|0)|0) + ($j$637<<2)|0);
       $178 = +HEAPF32[$177>>2];
       $l$235 = $lo_bin$1$l$0;
       while(1) {
        $179 = (($1) + ($l$235<<2)|0);
        $180 = +HEAPF32[$179>>2];
        $181 = $180 > $178;
        if ($181) {
         HEAPF32[$179>>2] = $178;
        }
        $182 = (($l$235) + 1)|0;
        $183 = ($182|0)<($n$hi_bin$0|0);
        $184 = ($182|0)<($n|0);
        $or$cond7 = $183 & $184;
        if ($or$cond7) {
         $l$235 = $182;
        } else {
         $l$2$lcssa = $182;
         break;
        }
       }
      } else {
       $l$2$lcssa = $lo_bin$1$l$0;
      }
      $185 = (($j$637) + 1)|0;
      $exitcond98 = ($185|0)==(56);
      if ($exitcond98) {
       break;
      } else {
       $j$637 = $185;$l$039 = $l$2$lcssa;
      }
     }
     $153 = ($l$2$lcssa|0)<($n|0);
     if ($153) {
      $154 = ((((($workc) + (($k$242*1792)|0)|0) + (($m$058*224)|0)|0)) + 220|0);
      $155 = +HEAPF32[$154>>2];
      $l$340 = $l$2$lcssa;
      while(1) {
       $186 = (($1) + ($l$340<<2)|0);
       $187 = +HEAPF32[$186>>2];
       $188 = $187 > $155;
       if ($188) {
        HEAPF32[$186>>2] = $155;
       }
       $189 = (($l$340) + 1)|0;
       $exitcond99 = ($189|0)==($n|0);
       if ($exitcond99) {
        break;
       } else {
        $l$340 = $189;
       }
      }
     }
     $190 = (($k$242) + 1)|0;
     $191 = ($k$242|0)<($$5|0);
     if ($191) {
      $k$242 = $190;
     } else {
      break;
     }
    }
   }
   if ($145) {
    $j$750 = 0;$l1$052 = 0;
    while(1) {
     $195 = (+($j$750|0));
     $196 = $195 * 0.125;
     $197 = $196 + $115;
     $198 = $197 + 3.9032840728759766;
     $199 = $198 * 0.69314700365066528;
     $200 = (+Math_exp((+$199)));
     $201 = $200 / $5;
     $202 = (~~(($201)));
     $203 = $197 + 4.0282840728759766;
     $204 = $203 * 0.69314700365066528;
     $205 = (+Math_exp((+$204)));
     $206 = $205 / $5;
     $207 = $206 + 1.0;
     $208 = (~~(($207)));
     $209 = ($202|0)<(0);
     $$8 = $209 ? 0 : $202;
     $210 = ($$8|0)>($n|0);
     $lo_bin2$1 = $210 ? $n : $$8;
     $211 = ($lo_bin2$1|0)<($l1$052|0);
     $lo_bin2$1$l1$0 = $211 ? $lo_bin2$1 : $l1$052;
     $212 = ($208|0)<(0);
     $hi_bin3$0 = $212 ? 0 : $208;
     $213 = ($hi_bin3$0|0)>($n|0);
     $n$hi_bin3$0 = $213 ? $n : $hi_bin3$0;
     $214 = ($lo_bin2$1$l1$0|0)<($n$hi_bin3$0|0);
     $215 = ($lo_bin2$1$l1$0|0)<($n|0);
     $or$cond945 = $214 & $215;
     if ($or$cond945) {
      $216 = (((($workc) + (($144*1792)|0)|0) + (($m$058*224)|0)|0) + ($j$750<<2)|0);
      $217 = +HEAPF32[$216>>2];
      $l1$246 = $lo_bin2$1$l1$0;
      while(1) {
       $218 = (($1) + ($l1$246<<2)|0);
       $219 = +HEAPF32[$218>>2];
       $220 = $219 > $217;
       if ($220) {
        HEAPF32[$218>>2] = $217;
       }
       $221 = (($l1$246) + 1)|0;
       $222 = ($221|0)<($n$hi_bin3$0|0);
       $223 = ($221|0)<($n|0);
       $or$cond9 = $222 & $223;
       if ($or$cond9) {
        $l1$246 = $221;
       } else {
        $l1$2$lcssa = $221;
        break;
       }
      }
     } else {
      $l1$2$lcssa = $lo_bin2$1$l1$0;
     }
     $224 = (($j$750) + 1)|0;
     $exitcond104 = ($224|0)==(56);
     if ($exitcond104) {
      break;
     } else {
      $j$750 = $224;$l1$052 = $l1$2$lcssa;
     }
    }
    $192 = ($l1$2$lcssa|0)<($n|0);
    if ($192) {
     $193 = ((((($workc) + (($144*1792)|0)|0) + (($m$058*224)|0)|0)) + 220|0);
     $194 = +HEAPF32[$193>>2];
     $l1$353 = $l1$2$lcssa;
     while(1) {
      $225 = (($1) + ($l1$353<<2)|0);
      $226 = +HEAPF32[$225>>2];
      $227 = $226 > $194;
      if ($227) {
       HEAPF32[$225>>2] = $194;
      }
      $228 = (($l1$353) + 1)|0;
      $exitcond105 = ($228|0)==($n|0);
      if ($exitcond105) {
       $j$855 = 0;
       break;
      } else {
       $l1$353 = $228;
      }
     }
    } else {
     $j$855 = 0;
    }
   } else {
    $j$855 = 0;
   }
   while(1) {
    $233 = (+($j$855|0));
    $234 = $233 * 0.125;
    $235 = $146 + $234;
    $236 = $235 * 0.69314700365066528;
    $237 = (+Math_exp((+$236)));
    $238 = $237 / $5;
    $239 = (~~(($238)));
    $240 = ($239|0)<(0);
    do {
     if ($240) {
      $241 = (($j$855) + 2)|0;
      $242 = (($147) + ($241<<2)|0);
      HEAPF32[$242>>2] = -999.0;
     } else {
      $243 = ($239|0)<($n|0);
      if ($243) {
       $246 = (($1) + ($239<<2)|0);
       $247 = HEAP32[$246>>2]|0;
       $248 = (($j$855) + 2)|0;
       $249 = (($147) + ($248<<2)|0);
       HEAP32[$249>>2] = $247;
       break;
      } else {
       $244 = (($j$855) + 2)|0;
       $245 = (($147) + ($244<<2)|0);
       HEAPF32[$245>>2] = -999.0;
       break;
      }
     }
    } while(0);
    $250 = (($j$855) + 1)|0;
    $exitcond106 = ($250|0)==(56);
    if ($exitcond106) {
     break;
    } else {
     $j$855 = $250;
    }
   }
   $229 = HEAP32[$148>>2]|0;
   $230 = ((($229)) + 8|0);
   $231 = +HEAPF32[$230>>2];
   $232 = $231 > -200.0;
   do {
    if ($232) {
     $j$9$lcssa = 0.0;
    } else {
     $251 = ((($229)) + 12|0);
     $252 = +HEAPF32[$251>>2];
     $253 = $252 > -200.0;
     if ($253) {
      $j$9$lcssa = 1.0;
     } else {
      $264 = ((($229)) + 16|0);
      $265 = +HEAPF32[$264>>2];
      $266 = $265 > -200.0;
      if ($266) {
       $j$9$lcssa = 2.0;
      } else {
       $267 = ((($229)) + 20|0);
       $268 = +HEAPF32[$267>>2];
       $269 = $268 > -200.0;
       if ($269) {
        $j$9$lcssa = 3.0;
       } else {
        $270 = ((($229)) + 24|0);
        $271 = +HEAPF32[$270>>2];
        $272 = $271 > -200.0;
        if ($272) {
         $j$9$lcssa = 4.0;
        } else {
         $273 = ((($229)) + 28|0);
         $274 = +HEAPF32[$273>>2];
         $275 = $274 > -200.0;
         if ($275) {
          $j$9$lcssa = 5.0;
         } else {
          $276 = ((($229)) + 32|0);
          $277 = +HEAPF32[$276>>2];
          $278 = $277 > -200.0;
          if ($278) {
           $j$9$lcssa = 6.0;
          } else {
           $279 = ((($229)) + 36|0);
           $280 = +HEAPF32[$279>>2];
           $281 = $280 > -200.0;
           if ($281) {
            $j$9$lcssa = 7.0;
           } else {
            $282 = ((($229)) + 40|0);
            $283 = +HEAPF32[$282>>2];
            $284 = $283 > -200.0;
            if ($284) {
             $j$9$lcssa = 8.0;
            } else {
             $285 = ((($229)) + 44|0);
             $286 = +HEAPF32[$285>>2];
             $287 = $286 > -200.0;
             if ($287) {
              $j$9$lcssa = 9.0;
             } else {
              $288 = ((($229)) + 48|0);
              $289 = +HEAPF32[$288>>2];
              $290 = $289 > -200.0;
              if ($290) {
               $j$9$lcssa = 10.0;
              } else {
               $291 = ((($229)) + 52|0);
               $292 = +HEAPF32[$291>>2];
               $293 = $292 > -200.0;
               if ($293) {
                $j$9$lcssa = 11.0;
               } else {
                $294 = ((($229)) + 56|0);
                $295 = +HEAPF32[$294>>2];
                $296 = $295 > -200.0;
                if ($296) {
                 $j$9$lcssa = 12.0;
                } else {
                 $297 = ((($229)) + 60|0);
                 $298 = +HEAPF32[$297>>2];
                 $299 = $298 > -200.0;
                 if ($299) {
                  $j$9$lcssa = 13.0;
                 } else {
                  $300 = ((($229)) + 64|0);
                  $301 = +HEAPF32[$300>>2];
                  $302 = $301 > -200.0;
                  if ($302) {
                   $j$9$lcssa = 14.0;
                   break;
                  }
                  $303 = ((($229)) + 68|0);
                  $304 = +HEAPF32[$303>>2];
                  $305 = $304 > -200.0;
                  if ($305) {
                   $j$9$lcssa = 15.0;
                   break;
                  }
                  $j$9$lcssa = 16.0;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   } while(0);
   HEAPF32[$229>>2] = $j$9$lcssa;
   $254 = HEAP32[$148>>2]|0;
   $j$1057 = 55;
   while(1) {
    $255 = (($j$1057) + 2)|0;
    $256 = (($254) + ($255<<2)|0);
    $257 = +HEAPF32[$256>>2];
    $258 = $257 > -200.0;
    if ($258) {
     $j$10$lcssa = $j$1057;
     break;
    }
    $259 = (($j$1057) + -1)|0;
    $260 = ($259|0)>(17);
    if ($260) {
     $j$1057 = $259;
    } else {
     $j$10$lcssa = $259;
     break;
    }
   }
   $261 = (+($j$10$lcssa|0));
   $262 = ((($254)) + 4|0);
   HEAPF32[$262>>2] = $261;
   $263 = (($m$058) + 1)|0;
   $exitcond107 = ($263|0)==(8);
   if ($exitcond107) {
    break;
   } else {
    $m$058 = $263;
   }
  }
  $exitcond108 = ($144|0)==(17);
  if ($exitcond108) {
   break;
  } else {
   $i$162 = $144;
  }
 }
 STACKTOP = sp;return ($2|0);
}
function __vp_psy_clear($p) {
 $p = $p|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond7 = 0, $i$05 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($p)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  _free($2);
 }
 $4 = ((($p)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  _free($5);
 }
 $7 = ((($p)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  _free($8);
 }
 $10 = ((($p)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $14 = $11;$i$05 = 0;
  while(1) {
   $13 = (($14) + ($i$05<<2)|0);
   $15 = HEAP32[$13>>2]|0;
   $16 = HEAP32[$15>>2]|0;
   _free($16);
   $17 = HEAP32[$10>>2]|0;
   $18 = (($17) + ($i$05<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($19)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   _free($21);
   $22 = HEAP32[$10>>2]|0;
   $23 = (($22) + ($i$05<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($24)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   _free($26);
   $27 = HEAP32[$10>>2]|0;
   $28 = (($27) + ($i$05<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($29)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   _free($31);
   $32 = HEAP32[$10>>2]|0;
   $33 = (($32) + ($i$05<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($34)) + 16|0);
   $36 = HEAP32[$35>>2]|0;
   _free($36);
   $37 = HEAP32[$10>>2]|0;
   $38 = (($37) + ($i$05<<2)|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($39)) + 20|0);
   $41 = HEAP32[$40>>2]|0;
   _free($41);
   $42 = HEAP32[$10>>2]|0;
   $43 = (($42) + ($i$05<<2)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ((($44)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   _free($46);
   $47 = HEAP32[$10>>2]|0;
   $48 = (($47) + ($i$05<<2)|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ((($49)) + 28|0);
   $51 = HEAP32[$50>>2]|0;
   _free($51);
   $52 = HEAP32[$10>>2]|0;
   $53 = (($52) + ($i$05<<2)|0);
   $54 = HEAP32[$53>>2]|0;
   _free($54);
   $55 = (($i$05) + 1)|0;
   $exitcond7 = ($55|0)==(17);
   if ($exitcond7) {
    break;
   }
   $$pre = HEAP32[$10>>2]|0;
   $14 = $$pre;$i$05 = $55;
  }
  $56 = HEAP32[$10>>2]|0;
  _free($56);
 }
 $57 = ((($p)) + 12|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($58|0)==(0|0);
 if (!($59)) {
  $60 = HEAP32[$58>>2]|0;
  _free($60);
  $61 = HEAP32[$57>>2]|0;
  $62 = ((($61)) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  _free($63);
  $64 = HEAP32[$57>>2]|0;
  $65 = ((($64)) + 8|0);
  $66 = HEAP32[$65>>2]|0;
  _free($66);
  $67 = HEAP32[$57>>2]|0;
  _free($67);
 }
 dest=$p; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 return;
}
function __vp_noisemask($p,$logmdct,$logmask) {
 $p = $p|0;
 $logmdct = $logmdct|0;
 $logmask = $logmask|0;
 var $$ = 0, $$$ = 0, $$alloca_mul = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0;
 var $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0;
 var $9 = 0.0, $exitcond = 0, $exitcond10 = 0, $exitcond9 = 0, $i$05 = 0, $i$12 = 0, $i$21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $1 = $0 << 2;
 $$alloca_mul = $1;
 $2 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $3 = ((($p)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 _bark_noise_hybridmp($0,$4,$logmdct,$logmask,140.0,-1);
 $5 = ($0|0)>(0);
 if ($5) {
  $i$05 = 0;
  while(1) {
   $6 = (($logmdct) + ($i$05<<2)|0);
   $7 = +HEAPF32[$6>>2];
   $8 = (($logmask) + ($i$05<<2)|0);
   $9 = +HEAPF32[$8>>2];
   $10 = $7 - $9;
   $11 = (($2) + ($i$05<<2)|0);
   HEAPF32[$11>>2] = $10;
   $12 = (($i$05) + 1)|0;
   $exitcond10 = ($12|0)==($0|0);
   if ($exitcond10) {
    break;
   } else {
    $i$05 = $12;
   }
  }
 }
 $13 = HEAP32[$3>>2]|0;
 $14 = ((($p)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 128|0);
 $17 = HEAP32[$16>>2]|0;
 _bark_noise_hybridmp($0,$13,$2,$logmask,0.0,$17);
 if ($5) {
  $i$12 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $19 = (($logmdct) + ($i$12<<2)|0);
  $20 = +HEAPF32[$19>>2];
  $21 = (($2) + ($i$12<<2)|0);
  $22 = +HEAPF32[$21>>2];
  $23 = $20 - $22;
  HEAPF32[$21>>2] = $23;
  $24 = (($i$12) + 1)|0;
  $exitcond9 = ($24|0)==($0|0);
  if ($exitcond9) {
   break;
  } else {
   $i$12 = $24;
  }
 }
 $18 = HEAP32[$14>>2]|0;
 $i$21 = 0;
 while(1) {
  $25 = (($logmask) + ($i$21<<2)|0);
  $26 = +HEAPF32[$25>>2];
  $27 = $26;
  $28 = $27 + 0.5;
  $29 = (~~(($28)));
  $30 = ($29|0)>(39);
  $$ = $30 ? 39 : $29;
  $31 = ($$|0)<(0);
  $$$ = $31 ? 0 : $$;
  $32 = (($2) + ($i$21<<2)|0);
  $33 = +HEAPF32[$32>>2];
  $34 = (((($18)) + 336|0) + ($$$<<2)|0);
  $35 = +HEAPF32[$34>>2];
  $36 = $35 + $33;
  HEAPF32[$25>>2] = $36;
  $37 = (($i$21) + 1)|0;
  $exitcond = ($37|0)==($0|0);
  if ($exitcond) {
   break;
  } else {
   $i$21 = $37;
  }
 }
 STACKTOP = sp;return;
}
function _bark_noise_hybridmp($n,$b,$f,$noise,$offset,$fixed) {
 $n = $n|0;
 $b = $b|0;
 $f = $f|0;
 $noise = $noise|0;
 $offset = +$offset;
 $fixed = $fixed|0;
 var $$alloca_mul = 0, $$alloca_mul1 = 0, $$alloca_mul3 = 0, $$alloca_mul5 = 0, $$alloca_mul7 = 0, $$in = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0;
 var $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0;
 var $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0;
 var $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0;
 var $164 = 0.0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0.0, $17 = 0.0, $170 = 0, $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0.0, $180 = 0, $181 = 0.0;
 var $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0.0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0.0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0.0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0.0, $217 = 0;
 var $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0, $221 = 0.0, $222 = 0, $223 = 0.0, $224 = 0.0, $225 = 0, $226 = 0.0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0;
 var $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0, $244 = 0.0, $245 = 0, $246 = 0, $247 = 0.0, $248 = 0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0;
 var $254 = 0.0, $255 = 0, $256 = 0, $257 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0;
 var $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0;
 var $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0;
 var $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, $A$0$lcssa = 0.0, $A$1$lcssa = 0.0, $A$2$lcssa = 0.0, $A$3$lcssa = 0.0, $B$0$lcssa = 0.0, $B$1$lcssa = 0.0, $B$2$lcssa = 0.0, $B$3$lcssa = 0.0, $D$0$lcssa = 0.0, $D$1$lcssa = 0.0, $D$2$lcssa = 0.0, $D$3$lcssa = 0.0, $R$0 = 0.0, $R$1 = 0.0, $R$2 = 0.0;
 var $exitcond = 0, $exitcond71 = 0, $exitcond72 = 0, $exitcond73 = 0, $exitcond74 = 0, $i$048 = 0, $i$1$lcssa = 0, $i$135 = 0, $i$2$lcssa = 0, $i$227 = 0, $i$324 = 0, $i$4$lcssa = 0, $i$415 = 0, $i$5$lcssa = 0, $i$58 = 0, $i$66 = 0, $tN$043 = 0.0, $tX$044 = 0.0, $tXX$045 = 0.0, $tXY$047 = 0.0;
 var $tY$046 = 0.0, $x$049 = 0.0, $x$1$lcssa = 0.0, $x$136 = 0.0, $x$2$lcssa = 0.0, $x$228 = 0.0, $x$325 = 0.0, $x$4$lcssa = 0.0, $x$416 = 0.0, $x$5$lcssa = 0.0, $x$59 = 0.0, $x$67 = 0.0, $y$0 = 0.0, $y$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n << 2;
 $$alloca_mul = $0;
 $1 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $$alloca_mul1 = $0;
 $2 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul1)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $$alloca_mul3 = $0;
 $3 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul3)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $$alloca_mul5 = $0;
 $4 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul5)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $$alloca_mul7 = $0;
 $5 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul7)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $6 = +HEAPF32[$f>>2];
 $7 = $6 + $offset;
 $8 = $7 < 1.0;
 $y$0 = $8 ? 1.0 : $7;
 $9 = $y$0 * $y$0;
 $10 = $9 * 0.5;
 $11 = $10 * $y$0;
 HEAPF32[$1>>2] = $10;
 HEAPF32[$2>>2] = $10;
 HEAPF32[$3>>2] = 0.0;
 HEAPF32[$4>>2] = $11;
 HEAPF32[$5>>2] = 0.0;
 $12 = ($n|0)>(1);
 if ($12) {
  $i$048 = 1;$tN$043 = $10;$tX$044 = $10;$tXX$045 = 0.0;$tXY$047 = 0.0;$tY$046 = $11;$x$049 = 1.0;
  while(1) {
   $16 = (($f) + ($i$048<<2)|0);
   $17 = +HEAPF32[$16>>2];
   $18 = $17 + $offset;
   $19 = $18 < 1.0;
   $y$1 = $19 ? 1.0 : $18;
   $20 = $y$1 * $y$1;
   $21 = $20 + $tN$043;
   $22 = $20 * $x$049;
   $23 = $22 + $tX$044;
   $24 = $22 * $x$049;
   $25 = $24 + $tXX$045;
   $26 = $20 * $y$1;
   $27 = $26 + $tY$046;
   $28 = $22 * $y$1;
   $29 = $28 + $tXY$047;
   $30 = (($1) + ($i$048<<2)|0);
   HEAPF32[$30>>2] = $21;
   $31 = (($2) + ($i$048<<2)|0);
   HEAPF32[$31>>2] = $23;
   $32 = (($3) + ($i$048<<2)|0);
   HEAPF32[$32>>2] = $25;
   $33 = (($4) + ($i$048<<2)|0);
   HEAPF32[$33>>2] = $27;
   $34 = (($5) + ($i$048<<2)|0);
   HEAPF32[$34>>2] = $29;
   $35 = (($i$048) + 1)|0;
   $36 = $x$049 + 1.0;
   $exitcond74 = ($35|0)==($n|0);
   if ($exitcond74) {
    break;
   } else {
    $i$048 = $35;$tN$043 = $21;$tX$044 = $23;$tXX$045 = $25;$tXY$047 = $29;$tY$046 = $27;$x$049 = $36;
   }
  }
 }
 $13 = HEAP32[$b>>2]|0;
 $14 = $13 >> 16;
 $15 = ($14|0)>(-1);
 if ($15) {
  $38 = $13;$A$0$lcssa = 0.0;$B$0$lcssa = 0.0;$D$0$lcssa = 1.0;$i$1$lcssa = 0;$x$1$lcssa = 0.0;
 } else {
  $41 = $13;$45 = $14;$i$135 = 0;$x$136 = 0.0;
  while(1) {
   $40 = $41 & 65535;
   $42 = (($1) + ($40<<2)|0);
   $43 = +HEAPF32[$42>>2];
   $44 = (0 - ($45))|0;
   $46 = (($1) + ($44<<2)|0);
   $47 = +HEAPF32[$46>>2];
   $48 = $47 + $43;
   $49 = (($2) + ($40<<2)|0);
   $50 = +HEAPF32[$49>>2];
   $51 = (($2) + ($44<<2)|0);
   $52 = +HEAPF32[$51>>2];
   $53 = $50 - $52;
   $54 = (($3) + ($40<<2)|0);
   $55 = +HEAPF32[$54>>2];
   $56 = (($3) + ($44<<2)|0);
   $57 = +HEAPF32[$56>>2];
   $58 = $57 + $55;
   $59 = (($4) + ($40<<2)|0);
   $60 = +HEAPF32[$59>>2];
   $61 = (($4) + ($44<<2)|0);
   $62 = +HEAPF32[$61>>2];
   $63 = $62 + $60;
   $64 = (($5) + ($40<<2)|0);
   $65 = +HEAPF32[$64>>2];
   $66 = (($5) + ($44<<2)|0);
   $67 = +HEAPF32[$66>>2];
   $68 = $65 - $67;
   $69 = $63 * $58;
   $70 = $68 * $53;
   $71 = $69 - $70;
   $72 = $68 * $48;
   $73 = $63 * $53;
   $74 = $72 - $73;
   $75 = $58 * $48;
   $76 = $53 * $53;
   $77 = $75 - $76;
   $78 = $74 * $x$136;
   $79 = $78 + $71;
   $80 = $79 / $77;
   $81 = $80 < 0.0;
   $R$0 = $81 ? 0.0 : $80;
   $82 = $R$0 - $offset;
   $83 = (($noise) + ($i$135<<2)|0);
   HEAPF32[$83>>2] = $82;
   $84 = (($i$135) + 1)|0;
   $85 = $x$136 + 1.0;
   $86 = (($b) + ($84<<2)|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = $87 >> 16;
   $89 = ($88|0)>(-1);
   if ($89) {
    $38 = $87;$A$0$lcssa = $71;$B$0$lcssa = $74;$D$0$lcssa = $77;$i$1$lcssa = $84;$x$1$lcssa = $85;
    break;
   } else {
    $41 = $87;$45 = $88;$i$135 = $84;$x$136 = $85;
   }
  }
 }
 $37 = $38 & 65535;
 $39 = ($37|0)<($n|0);
 if ($39) {
  $$in = $38;$93 = $37;$i$227 = $i$1$lcssa;$x$228 = $x$1$lcssa;
  while(1) {
   $91 = $$in >> 16;
   $92 = (($1) + ($93<<2)|0);
   $94 = +HEAPF32[$92>>2];
   $95 = (($1) + ($91<<2)|0);
   $96 = +HEAPF32[$95>>2];
   $97 = $94 - $96;
   $98 = (($2) + ($93<<2)|0);
   $99 = +HEAPF32[$98>>2];
   $100 = (($2) + ($91<<2)|0);
   $101 = +HEAPF32[$100>>2];
   $102 = $99 - $101;
   $103 = (($3) + ($93<<2)|0);
   $104 = +HEAPF32[$103>>2];
   $105 = (($3) + ($91<<2)|0);
   $106 = +HEAPF32[$105>>2];
   $107 = $104 - $106;
   $108 = (($4) + ($93<<2)|0);
   $109 = +HEAPF32[$108>>2];
   $110 = (($4) + ($91<<2)|0);
   $111 = +HEAPF32[$110>>2];
   $112 = $109 - $111;
   $113 = (($5) + ($93<<2)|0);
   $114 = +HEAPF32[$113>>2];
   $115 = (($5) + ($91<<2)|0);
   $116 = +HEAPF32[$115>>2];
   $117 = $114 - $116;
   $118 = $112 * $107;
   $119 = $117 * $102;
   $120 = $118 - $119;
   $121 = $117 * $97;
   $122 = $112 * $102;
   $123 = $121 - $122;
   $124 = $107 * $97;
   $125 = $102 * $102;
   $126 = $124 - $125;
   $127 = $123 * $x$228;
   $128 = $127 + $120;
   $129 = $128 / $126;
   $130 = $129 < 0.0;
   $R$1 = $130 ? 0.0 : $129;
   $131 = $R$1 - $offset;
   $132 = (($noise) + ($i$227<<2)|0);
   HEAPF32[$132>>2] = $131;
   $133 = (($i$227) + 1)|0;
   $134 = $x$228 + 1.0;
   $135 = (($b) + ($133<<2)|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = $136 & 65535;
   $138 = ($137|0)<($n|0);
   if ($138) {
    $$in = $136;$93 = $137;$i$227 = $133;$x$228 = $134;
   } else {
    $A$1$lcssa = $120;$B$1$lcssa = $123;$D$1$lcssa = $126;$i$2$lcssa = $133;$x$2$lcssa = $134;
    break;
   }
  }
 } else {
  $A$1$lcssa = $A$0$lcssa;$B$1$lcssa = $B$0$lcssa;$D$1$lcssa = $D$0$lcssa;$i$2$lcssa = $i$1$lcssa;$x$2$lcssa = $x$1$lcssa;
 }
 $90 = ($i$2$lcssa|0)<($n|0);
 if ($90) {
  $i$324 = $i$2$lcssa;$x$325 = $x$2$lcssa;
  while(1) {
   $139 = $x$325 * $B$1$lcssa;
   $140 = $139 + $A$1$lcssa;
   $141 = $140 / $D$1$lcssa;
   $142 = $141 < 0.0;
   $R$2 = $142 ? 0.0 : $141;
   $143 = $R$2 - $offset;
   $144 = (($noise) + ($i$324<<2)|0);
   HEAPF32[$144>>2] = $143;
   $145 = (($i$324) + 1)|0;
   $146 = $x$325 + 1.0;
   $exitcond73 = ($145|0)==($n|0);
   if ($exitcond73) {
    break;
   } else {
    $i$324 = $145;$x$325 = $146;
   }
  }
 }
 $147 = ($fixed|0)<(1);
 if ($147) {
  STACKTOP = sp;return;
 }
 $148 = (($fixed|0) / 2)&-1;
 $149 = (($148) - ($fixed))|0;
 $150 = ($149|0)>(-1);
 if ($150) {
  $A$2$lcssa = $A$1$lcssa;$B$2$lcssa = $B$1$lcssa;$D$2$lcssa = $D$1$lcssa;$i$4$lcssa = 0;$x$4$lcssa = 0.0;
 } else {
  $151 = (($fixed) - ($148))|0;
  $156 = $148;$159 = $149;$i$415 = 0;$x$416 = 0.0;
  while(1) {
   $155 = (($1) + ($156<<2)|0);
   $157 = +HEAPF32[$155>>2];
   $158 = (0 - ($159))|0;
   $160 = (($1) + ($158<<2)|0);
   $161 = +HEAPF32[$160>>2];
   $162 = $161 + $157;
   $163 = (($2) + ($156<<2)|0);
   $164 = +HEAPF32[$163>>2];
   $165 = (($2) + ($158<<2)|0);
   $166 = +HEAPF32[$165>>2];
   $167 = $164 - $166;
   $168 = (($3) + ($156<<2)|0);
   $169 = +HEAPF32[$168>>2];
   $170 = (($3) + ($158<<2)|0);
   $171 = +HEAPF32[$170>>2];
   $172 = $171 + $169;
   $173 = (($4) + ($156<<2)|0);
   $174 = +HEAPF32[$173>>2];
   $175 = (($4) + ($158<<2)|0);
   $176 = +HEAPF32[$175>>2];
   $177 = $176 + $174;
   $178 = (($5) + ($156<<2)|0);
   $179 = +HEAPF32[$178>>2];
   $180 = (($5) + ($158<<2)|0);
   $181 = +HEAPF32[$180>>2];
   $182 = $179 - $181;
   $183 = $177 * $172;
   $184 = $182 * $167;
   $185 = $183 - $184;
   $186 = $182 * $162;
   $187 = $177 * $167;
   $188 = $186 - $187;
   $189 = $172 * $162;
   $190 = $167 * $167;
   $191 = $189 - $190;
   $192 = $188 * $x$416;
   $193 = $192 + $185;
   $194 = $193 / $191;
   $195 = $194 - $offset;
   $196 = (($noise) + ($i$415<<2)|0);
   $197 = +HEAPF32[$196>>2];
   $198 = $195 < $197;
   if ($198) {
    HEAPF32[$196>>2] = $195;
   }
   $199 = (($i$415) + 1)|0;
   $200 = $x$416 + 1.0;
   $201 = (($199) + ($148))|0;
   $202 = (($201) - ($fixed))|0;
   $exitcond72 = ($199|0)==($151|0);
   if ($exitcond72) {
    $A$2$lcssa = $185;$B$2$lcssa = $188;$D$2$lcssa = $191;$i$4$lcssa = $151;$x$4$lcssa = $200;
    break;
   } else {
    $156 = $201;$159 = $202;$i$415 = $199;$x$416 = $200;
   }
  }
 }
 $152 = (($i$4$lcssa) + ($148))|0;
 $153 = ($152|0)<($n|0);
 if ($153) {
  $154 = (($n) - ($148))|0;
  $$pn = $152;$i$58 = $i$4$lcssa;$x$59 = $x$4$lcssa;
  while(1) {
   $204 = (($$pn) - ($fixed))|0;
   $205 = (($1) + ($$pn<<2)|0);
   $206 = +HEAPF32[$205>>2];
   $207 = (($1) + ($204<<2)|0);
   $208 = +HEAPF32[$207>>2];
   $209 = $206 - $208;
   $210 = (($2) + ($$pn<<2)|0);
   $211 = +HEAPF32[$210>>2];
   $212 = (($2) + ($204<<2)|0);
   $213 = +HEAPF32[$212>>2];
   $214 = $211 - $213;
   $215 = (($3) + ($$pn<<2)|0);
   $216 = +HEAPF32[$215>>2];
   $217 = (($3) + ($204<<2)|0);
   $218 = +HEAPF32[$217>>2];
   $219 = $216 - $218;
   $220 = (($4) + ($$pn<<2)|0);
   $221 = +HEAPF32[$220>>2];
   $222 = (($4) + ($204<<2)|0);
   $223 = +HEAPF32[$222>>2];
   $224 = $221 - $223;
   $225 = (($5) + ($$pn<<2)|0);
   $226 = +HEAPF32[$225>>2];
   $227 = (($5) + ($204<<2)|0);
   $228 = +HEAPF32[$227>>2];
   $229 = $226 - $228;
   $230 = $224 * $219;
   $231 = $229 * $214;
   $232 = $230 - $231;
   $233 = $229 * $209;
   $234 = $224 * $214;
   $235 = $233 - $234;
   $236 = $219 * $209;
   $237 = $214 * $214;
   $238 = $236 - $237;
   $239 = $235 * $x$59;
   $240 = $239 + $232;
   $241 = $240 / $238;
   $242 = $241 - $offset;
   $243 = (($noise) + ($i$58<<2)|0);
   $244 = +HEAPF32[$243>>2];
   $245 = $242 < $244;
   if ($245) {
    HEAPF32[$243>>2] = $242;
   }
   $246 = (($i$58) + 1)|0;
   $247 = $x$59 + 1.0;
   $248 = (($246) + ($148))|0;
   $exitcond71 = ($246|0)==($154|0);
   if ($exitcond71) {
    $A$3$lcssa = $232;$B$3$lcssa = $235;$D$3$lcssa = $238;$i$5$lcssa = $154;$x$5$lcssa = $247;
    break;
   } else {
    $$pn = $248;$i$58 = $246;$x$59 = $247;
   }
  }
 } else {
  $A$3$lcssa = $A$2$lcssa;$B$3$lcssa = $B$2$lcssa;$D$3$lcssa = $D$2$lcssa;$i$5$lcssa = $i$4$lcssa;$x$5$lcssa = $x$4$lcssa;
 }
 $203 = ($i$5$lcssa|0)<($n|0);
 if ($203) {
  $i$66 = $i$5$lcssa;$x$67 = $x$5$lcssa;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $249 = $x$67 * $B$3$lcssa;
  $250 = $249 + $A$3$lcssa;
  $251 = $250 / $D$3$lcssa;
  $252 = $251 - $offset;
  $253 = (($noise) + ($i$66<<2)|0);
  $254 = +HEAPF32[$253>>2];
  $255 = $252 < $254;
  if ($255) {
   HEAPF32[$253>>2] = $252;
  }
  $256 = (($i$66) + 1)|0;
  $257 = $x$67 + 1.0;
  $exitcond = ($256|0)==($n|0);
  if ($exitcond) {
   break;
  } else {
   $i$66 = $256;$x$67 = $257;
  }
 }
 STACKTOP = sp;return;
}
function __vp_tonemask($p,$logfft,$logmask,$global_specmax,$local_specmax) {
 $p = $p|0;
 $logfft = $logfft|0;
 $logmask = $logmask|0;
 $global_specmax = +$global_specmax;
 $local_specmax = +$local_specmax;
 var $$$$i = 0, $$$i = 0, $$alloca_mul = 0, $$in$i = 0, $$lcssa31 = 0, $$lcssa5$i = 0, $$phi$trans$insert$i = 0, $$pre = 0.0, $$pre$i = 0, $$pre$phi37Z2D = 0, $$pre$phiZ2D = 0, $$pre35 = 0, $$pre36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0.0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0;
 var $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0;
 var $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $att$0 = 0.0, $exitcond = 0, $exitcond20 = 0, $exitcond34 = 0, $i$018 = 0, $i$02$i$i = 0, $i$04$i = 0, $i$1$i = 0, $i$1$ph$i = 0, $i$117 = 0;
 var $linpos$0$lcssa$i = 0, $linpos$023$i = 0, $linpos$1$lcssa$i = 0, $linpos$116$i = 0, $linpos$27$i = 0, $max$0$ph$i = 0.0, $minV$0$ph$i = 0.0, $minV$0$ph3$lcssa$i = 0.0, $minV$0$ph313$i = 0.0, $or$cond$i$i = 0, $or$cond30$i = 0, $pos$022$i = 0, $pos$1$lcssa$i = 0, $seedptr$01$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $1 = ((($p)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 << 2;
 $$alloca_mul = $3;
 $4 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $5 = ((($p)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $8 + $local_specmax;
 $10 = ($2|0)>(0);
 if ($10) {
  $i$018 = 0;
  while(1) {
   $11 = (($4) + ($i$018<<2)|0);
   HEAPF32[$11>>2] = -9999.0;
   $12 = (($i$018) + 1)|0;
   $exitcond20 = ($12|0)==($2|0);
   if ($exitcond20) {
    break;
   } else {
    $i$018 = $12;
   }
  }
 }
 $13 = ((($6)) + 8|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $9 < $14;
 $att$0 = $15 ? $14 : $9;
 $16 = ($0|0)>(0);
 if ($16) {
  $17 = ((($p)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $i$117 = 0;
  while(1) {
   $19 = (($18) + ($i$117<<2)|0);
   $20 = +HEAPF32[$19>>2];
   $21 = $20 + $att$0;
   $22 = (($logmask) + ($i$117<<2)|0);
   HEAPF32[$22>>2] = $21;
   $23 = (($i$117) + 1)|0;
   $exitcond34 = ($23|0)==($0|0);
   if ($exitcond34) {
    break;
   } else {
    $i$117 = $23;
   }
  }
  $24 = ((($p)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($6)) + 496|0);
  $27 = +HEAPF32[$26>>2];
  $28 = $27 - $global_specmax;
  $29 = ((($p)) + 20|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($p)) + 32|0);
  $32 = ((($p)) + 36|0);
  $33 = ((($p)) + 28|0);
  $i$04$i = 0;
  while(1) {
   $34 = (($logfft) + ($i$04$i<<2)|0);
   $35 = +HEAPF32[$34>>2];
   $36 = (($30) + ($i$04$i<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $i$1$ph$i = $i$04$i;$max$0$ph$i = $35;
   L12: while(1) {
    $i$1$i = $i$1$ph$i;
    while(1) {
     $38 = (($i$1$i) + 1)|0;
     $39 = ($38|0)<($0|0);
     if (!($39)) {
      $$lcssa31 = 0;
      break L12;
     }
     $40 = (($30) + ($38<<2)|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)==($37|0);
     if (!($42)) {
      $$lcssa31 = 1;
      break L12;
     }
     $43 = (($logfft) + ($38<<2)|0);
     $44 = +HEAPF32[$43>>2];
     $45 = $44 > $max$0$ph$i;
     if ($45) {
      $i$1$ph$i = $38;$max$0$ph$i = $44;
      continue L12;
     } else {
      $i$1$i = $38;
     }
    }
   }
   $46 = $max$0$ph$i + 6.0;
   $47 = (($logmask) + ($i$1$i<<2)|0);
   $48 = +HEAPF32[$47>>2];
   $49 = $46 > $48;
   if ($49) {
    $50 = HEAP32[$31>>2]|0;
    $51 = $37 >> $50;
    $52 = ($51|0)>(16);
    $$$i = $52 ? 16 : $51;
    $53 = ($$$i|0)<(0);
    $$$$i = $53 ? 0 : $$$i;
    $54 = (($25) + ($$$$i<<2)|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = HEAP32[$32>>2]|0;
    $57 = $28 + $max$0$ph$i;
    $58 = $57;
    $59 = $58 + -30.0;
    $60 = $59 * 0.10000000149011612;
    $61 = (~~(($60)));
    $62 = ($61|0)<(0);
    $63 = $62 ? 0 : $61;
    $64 = ($63|0)>(7);
    $65 = $64 ? 7 : $63;
    $66 = (($55) + ($65<<2)|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = ((($67)) + 8|0);
    $69 = ((($67)) + 4|0);
    $70 = +HEAPF32[$69>>2];
    $71 = (~~(($70)));
    $72 = +HEAPF32[$67>>2];
    $73 = (~~(($72)));
    $74 = ($73|0)<($71|0);
    if ($74) {
     $75 = (($30) + ($i$1$i<<2)|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = HEAP32[$33>>2]|0;
     $78 = (($76) - ($77))|0;
     $79 = (+($78|0));
     $80 = $56 >> 1;
     $81 = (+($80|0));
     $82 = $72 + -16.0;
     $83 = (+($56|0));
     $84 = $82 * $83;
     $85 = $84 - $81;
     $86 = $85 + $79;
     $87 = (~~(($86)));
     $i$02$i$i = $73;$seedptr$01$i$i = $87;
     while(1) {
      $88 = ($seedptr$01$i$i|0)>(0);
      if ($88) {
       $89 = (($68) + ($i$02$i$i<<2)|0);
       $90 = +HEAPF32[$89>>2];
       $91 = $90 + $max$0$ph$i;
       $92 = (($4) + ($seedptr$01$i$i<<2)|0);
       $93 = +HEAPF32[$92>>2];
       $94 = $93 < $91;
       if ($94) {
        HEAPF32[$92>>2] = $91;
       }
      }
      $95 = (($seedptr$01$i$i) + ($56))|0;
      $96 = ($95|0)<($2|0);
      $97 = (($i$02$i$i) + 1)|0;
      $98 = ($97|0)<($71|0);
      $or$cond$i$i = $98 & $96;
      if ($or$cond$i$i) {
       $i$02$i$i = $97;$seedptr$01$i$i = $95;
      } else {
       break;
      }
     }
    }
   }
   if ($$lcssa31) {
    $i$04$i = $38;
   } else {
    $$pre$phi37Z2D = $29;$$pre$phiZ2D = $32;
    break;
   }
  }
 } else {
  $$pre35 = ((($p)) + 36|0);
  $$pre36 = ((($p)) + 20|0);
  $$pre$phi37Z2D = $$pre36;$$pre$phiZ2D = $$pre35;
 }
 $99 = HEAP32[$$pre$phiZ2D>>2]|0;
 _seed_chase($4,$99,$2);
 $100 = HEAP32[$p>>2]|0;
 $101 = ($100|0)>(1);
 L31: do {
  if ($101) {
   $102 = ((($p)) + 28|0);
   $103 = HEAP32[$$pre$phi37Z2D>>2]|0;
   $104 = HEAP32[$103>>2]|0;
   $105 = $99 >> 1;
   $106 = (($104) - ($105))|0;
   $107 = HEAP32[$102>>2]|0;
   $108 = (($106) - ($107))|0;
   $109 = HEAP32[$5>>2]|0;
   $110 = ((($109)) + 32|0);
   $116 = 1;$119 = $104;$linpos$023$i = 0;$pos$022$i = $108;
   while(1) {
    $113 = (($4) + ($pos$022$i<<2)|0);
    $114 = +HEAPF32[$113>>2];
    $115 = (($103) + ($116<<2)|0);
    $117 = HEAP32[$115>>2]|0;
    $118 = (($117) + ($119))|0;
    $120 = $118 >> 1;
    $121 = (($120) - ($107))|0;
    $122 = +HEAPF32[$110>>2];
    $123 = $114 > $122;
    $minV$0$ph$i = $123 ? $122 : $114;
    $124 = ($pos$022$i|0)<($121|0);
    L35: do {
     if ($124) {
      $$in$i = $pos$022$i;$minV$0$ph313$i = $minV$0$ph$i;
      while(1) {
       $125 = (($$in$i) + 1)|0;
       $126 = $minV$0$ph313$i == -9999.0;
       L38: do {
        if ($126) {
         $127 = (($4) + ($125<<2)|0);
         $$pre = +HEAPF32[$127>>2];
         $$lcssa5$i = $125;$156 = $$pre;
        } else {
         $129 = $125;
         while(1) {
          $128 = (($4) + ($129<<2)|0);
          $130 = +HEAPF32[$128>>2];
          $131 = $130 > -9999.0;
          $132 = $130 < $minV$0$ph313$i;
          $or$cond30$i = $131 & $132;
          if ($or$cond30$i) {
           $$lcssa5$i = $129;$156 = $130;
           break L38;
          }
          $133 = (($129) + 1)|0;
          $134 = ($129|0)<($121|0);
          if ($134) {
           $129 = $133;
          } else {
           $minV$0$ph3$lcssa$i = $minV$0$ph313$i;$pos$1$lcssa$i = $129;
           break L35;
          }
         }
        }
       } while(0);
       $135 = ($$lcssa5$i|0)<($121|0);
       if ($135) {
        $$in$i = $$lcssa5$i;$minV$0$ph313$i = $156;
       } else {
        $minV$0$ph3$lcssa$i = $156;$pos$1$lcssa$i = $$lcssa5$i;
        break;
       }
      }
     } else {
      $minV$0$ph3$lcssa$i = $minV$0$ph$i;$pos$1$lcssa$i = $pos$022$i;
     }
    } while(0);
    $136 = (($pos$1$lcssa$i) + ($107))|0;
    $137 = ($linpos$023$i|0)<($100|0);
    L45: do {
     if ($137) {
      $138 = HEAP32[$$pre$phi37Z2D>>2]|0;
      $linpos$116$i = $linpos$023$i;
      while(1) {
       $139 = (($138) + ($linpos$116$i<<2)|0);
       $140 = HEAP32[$139>>2]|0;
       $141 = ($140|0)>($136|0);
       if ($141) {
        $linpos$1$lcssa$i = $linpos$116$i;
        break L45;
       }
       $142 = (($logmask) + ($linpos$116$i<<2)|0);
       $143 = +HEAPF32[$142>>2];
       $144 = $143 < $minV$0$ph3$lcssa$i;
       if ($144) {
        HEAPF32[$142>>2] = $minV$0$ph3$lcssa$i;
       }
       $145 = (($linpos$116$i) + 1)|0;
       $146 = ($145|0)<($100|0);
       if ($146) {
        $linpos$116$i = $145;
       } else {
        $linpos$1$lcssa$i = $145;
        break;
       }
      }
     } else {
      $linpos$1$lcssa$i = $linpos$023$i;
     }
    } while(0);
    $111 = (($linpos$1$lcssa$i) + 1)|0;
    $112 = ($111|0)<($100|0);
    if (!($112)) {
     $linpos$0$lcssa$i = $linpos$1$lcssa$i;
     break L31;
    }
    $$phi$trans$insert$i = (($103) + ($linpos$1$lcssa$i<<2)|0);
    $$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
    $116 = $111;$119 = $$pre$i;$linpos$023$i = $linpos$1$lcssa$i;$pos$022$i = $pos$1$lcssa$i;
   }
  } else {
   $linpos$0$lcssa$i = 0;
  }
 } while(0);
 $147 = HEAP32[$1>>2]|0;
 $148 = (($147) + -1)|0;
 $149 = (($4) + ($148<<2)|0);
 $150 = +HEAPF32[$149>>2];
 $151 = ($linpos$0$lcssa$i|0)<($100|0);
 if ($151) {
  $linpos$27$i = $linpos$0$lcssa$i;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $152 = (($logmask) + ($linpos$27$i<<2)|0);
  $153 = +HEAPF32[$152>>2];
  $154 = $153 < $150;
  if ($154) {
   HEAPF32[$152>>2] = $150;
  }
  $155 = (($linpos$27$i) + 1)|0;
  $exitcond = ($155|0)==($100|0);
  if ($exitcond) {
   break;
  } else {
   $linpos$27$i = $155;
  }
 }
 STACKTOP = sp;return;
}
function _seed_chase($seeds,$linesper,$n) {
 $seeds = $seeds|0;
 $linesper = $linesper|0;
 $n = $n|0;
 var $$alloca_mul = 0, $$alloca_mul1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $endpos$0 = 0, $exitcond = 0, $exitcond18 = 0;
 var $i$012 = 0, $i$17 = 0, $n$endpos$0 = 0, $or$cond = 0, $pos$06 = 0, $pos$1$lcssa = 0, $pos$15 = 0, $stack$011 = 0, $stack$1 = 0, $stack$2 = 0, $stack$2$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n << 2;
 $$alloca_mul = $0;
 $1 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $$alloca_mul1 = $0;
 $2 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul1)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $3 = ($n|0)>(0);
 if ($3) {
  $i$012 = 0;$stack$011 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $6 = ($stack$011|0)<(2);
  do {
   if ($6) {
    $9 = (($1) + ($stack$011<<2)|0);
    HEAP32[$9>>2] = $i$012;
    $10 = (($seeds) + ($i$012<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($2) + ($stack$011<<2)|0);
    HEAP32[$12>>2] = $11;
    $stack$2$in = $stack$011;
   } else {
    $7 = (($seeds) + ($i$012<<2)|0);
    $8 = +HEAPF32[$7>>2];
    $stack$1 = $stack$011;
    while(1) {
     $13 = (($stack$1) + -1)|0;
     $14 = (($2) + ($13<<2)|0);
     $15 = +HEAPF32[$14>>2];
     $16 = $8 < $15;
     if ($16) {
      label = 8;
      break;
     }
     $19 = (($1) + ($13<<2)|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (($20) + ($linesper))|0;
     $22 = ($i$012|0)<($21|0);
     $23 = ($stack$1|0)>(1);
     $or$cond = $23 & $22;
     if (!($or$cond)) {
      label = 12;
      break;
     }
     $24 = (($stack$1) + -2)|0;
     $25 = (($2) + ($24<<2)|0);
     $26 = +HEAPF32[$25>>2];
     $27 = !($15 <= $26);
     if ($27) {
      label = 12;
      break;
     }
     $28 = (($1) + ($24<<2)|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (($29) + ($linesper))|0;
     $31 = ($i$012|0)<($30|0);
     if ($31) {
      $stack$1 = $13;
     } else {
      label = 12;
      break;
     }
    }
    if ((label|0) == 8) {
     label = 0;
     $17 = (($1) + ($stack$1<<2)|0);
     HEAP32[$17>>2] = $i$012;
     $18 = (($2) + ($stack$1<<2)|0);
     HEAPF32[$18>>2] = $8;
     $stack$2$in = $stack$1;
     break;
    }
    else if ((label|0) == 12) {
     label = 0;
     $32 = (($1) + ($stack$1<<2)|0);
     HEAP32[$32>>2] = $i$012;
     $33 = (($2) + ($stack$1<<2)|0);
     HEAPF32[$33>>2] = $8;
     $stack$2$in = $stack$1;
     break;
    }
   }
  } while(0);
  $stack$2 = (($stack$2$in) + 1)|0;
  $34 = (($i$012) + 1)|0;
  $exitcond18 = ($34|0)==($n|0);
  if ($exitcond18) {
   break;
  } else {
   $i$012 = $34;$stack$011 = $stack$2;
  }
 }
 $4 = ($stack$2$in|0)>(-1);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = (($linesper) + 1)|0;
 $i$17 = 0;$pos$06 = 0;
 while(1) {
  $35 = ($i$17|0)<($stack$2$in|0);
  if ($35) {
   $36 = (($i$17) + 1)|0;
   $37 = (($2) + ($36<<2)|0);
   $38 = +HEAPF32[$37>>2];
   $39 = (($2) + ($i$17<<2)|0);
   $40 = +HEAPF32[$39>>2];
   $41 = $38 > $40;
   if ($41) {
    $42 = (($1) + ($36<<2)|0);
    $43 = HEAP32[$42>>2]|0;
    $endpos$0 = $43;
   } else {
    label = 17;
   }
  } else {
   label = 17;
  }
  if ((label|0) == 17) {
   label = 0;
   $44 = (($1) + ($i$17<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($5) + ($45))|0;
   $endpos$0 = $46;
  }
  $47 = ($endpos$0|0)>($n|0);
  $n$endpos$0 = $47 ? $n : $endpos$0;
  $48 = ($pos$06|0)<($n$endpos$0|0);
  if ($48) {
   $49 = (($2) + ($i$17<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $pos$15 = $pos$06;
   while(1) {
    $51 = (($seeds) + ($pos$15<<2)|0);
    HEAP32[$51>>2] = $50;
    $52 = (($pos$15) + 1)|0;
    $53 = ($52|0)<($n$endpos$0|0);
    if ($53) {
     $pos$15 = $52;
    } else {
     $pos$1$lcssa = $n$endpos$0;
     break;
    }
   }
  } else {
   $pos$1$lcssa = $pos$06;
  }
  $54 = (($i$17) + 1)|0;
  $exitcond = ($54|0)==($stack$2|0);
  if ($exitcond) {
   break;
  } else {
   $i$17 = $54;$pos$06 = $pos$1$lcssa;
  }
 }
 STACKTOP = sp;return;
}
function __vp_couple_quantize_normalize($blobno,$g,$p,$vi,$mdct,$iwork,$nonzero,$sliding_lowpass,$ch) {
 $blobno = $blobno|0;
 $g = $g|0;
 $p = $p|0;
 $vi = $vi|0;
 $mdct = $mdct|0;
 $iwork = $iwork|0;
 $nonzero = $nonzero|0;
 $sliding_lowpass = $sliding_lowpass|0;
 $ch = $ch|0;
 var $$ = 0, $$$i = 0, $$alloca_mul = 0, $$alloca_mul1 = 0, $$alloca_mul11 = 0, $$alloca_mul13 = 0, $$alloca_mul15 = 0, $$alloca_mul3 = 0, $$alloca_mul5 = 0, $$alloca_mul7 = 0, $$alloca_mul9 = 0, $$phi$trans$insert50 = 0, $$phi$trans$insert52 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre$pre = 0, $$pre46 = 0, $$pre46$pre = 0, $$pre47 = 0, $$pre47$pre = 0;
 var $$pre48 = 0, $$pre48$pre = 0, $$pre51 = 0, $$pre53 = 0, $$pre54 = 0, $$pre55 = 0, $$pre56 = 0, $$pre57 = 0, $$v = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0;
 var $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0.0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0.0;
 var $216 = 0.0, $217 = 0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0, $224 = 0.0, $225 = 0, $226 = 0.0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0.0;
 var $98 = 0, $99 = 0.0, $exitcond = 0, $exitcond$i = 0, $exitcond44 = 0, $exitcond4472 = 0, $fabsf = 0.0, $fabsf$i = 0.0, $fabsf1 = 0.0, $fabsf2 = 0.0, $fabsf3 = 0.0, $fabsf4 = 0.0, $i$239 = 0, $i$315 = 0, $ispos = 0, $ispos5 = 0, $ispos7 = 0, $j$01$i = 0, $j$017 = 0, $j$120 = 0;
 var $j$222 = 0, $j$330 = 0, $k$025 = 0, $neg = 0, $neg6 = 0, $neg8 = 0, $not$$i = 0, $p$idx$val = 0, $p$idx9$val = 0, $postpoint$0$in = 0.0, $postpoint$0$in$in = 0, $step$036 = 0, $stereo_threshholds_limited$stereo_threshholds = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 500|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $26 = 16;
 } else {
  $6 = ((($2)) + 508|0);
  $7 = HEAP32[$6>>2]|0;
  $26 = $7;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((((($g)) + 132|0) + (($8*60)|0)|0) + ($blobno<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (((($g)) + 252|0) + ($blobno<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (8 + ($12<<3)|0);
 $14 = +HEAPF64[$13>>3];
 $15 = (((($g)) + 312|0) + ($blobno<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $ch << 2;
 $$alloca_mul = $17;
 $18 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $$alloca_mul1 = $17;
 $19 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul1)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $$alloca_mul3 = $17;
 $20 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul3)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $$alloca_mul5 = $17;
 $21 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul5)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $$alloca_mul7 = $17;
 $22 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul7)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $23 = ((($vi)) + 1156|0);
 $24 = ($0|0)>(1000);
 $stereo_threshholds_limited$stereo_threshholds = $24 ? 80 : 8;
 $postpoint$0$in$in = (($stereo_threshholds_limited$stereo_threshholds) + ($16<<3)|0);
 $postpoint$0$in = +HEAPF64[$postpoint$0$in$in>>3];
 $25 = Math_imul($17, $26)|0;
 $$alloca_mul9 = $25;
 $27 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul9)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 HEAP32[$18>>2] = $27;
 $$alloca_mul11 = $25;
 $28 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul11)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 HEAP32[$19>>2] = $28;
 $$alloca_mul13 = $25;
 $29 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul13)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 HEAP32[$20>>2] = $29;
 $$alloca_mul15 = $25;
 $30 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul15)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 HEAP32[$21>>2] = $30;
 $31 = ($ch|0)>(1);
 L4: do {
  if ($31) {
   $32 = (($27) + ($26<<2)|0);
   $33 = ((($18)) + 4|0);
   HEAP32[$33>>2] = $32;
   $34 = (($28) + ($26<<2)|0);
   $35 = ((($19)) + 4|0);
   HEAP32[$35>>2] = $34;
   $36 = (($29) + ($26<<2)|0);
   $37 = ((($20)) + 4|0);
   HEAP32[$37>>2] = $36;
   $38 = (($30) + ($26<<2)|0);
   $39 = ((($21)) + 4|0);
   HEAP32[$39>>2] = $38;
   $exitcond4472 = ($ch|0)==(2);
   if (!($exitcond4472)) {
    $$pre = $27;$$pre46 = $28;$$pre47 = $29;$$pre48 = $30;$43 = 2;
    while(1) {
     $42 = Math_imul($43, $26)|0;
     $44 = (($$pre) + ($42<<2)|0);
     $45 = (($18) + ($43<<2)|0);
     HEAP32[$45>>2] = $44;
     $46 = (($$pre46) + ($42<<2)|0);
     $47 = (($19) + ($43<<2)|0);
     HEAP32[$47>>2] = $46;
     $48 = (($$pre47) + ($42<<2)|0);
     $49 = (($20) + ($43<<2)|0);
     HEAP32[$49>>2] = $48;
     $50 = (($$pre48) + ($42<<2)|0);
     $51 = (($21) + ($43<<2)|0);
     HEAP32[$51>>2] = $50;
     $52 = (($43) + 1)|0;
     $exitcond44 = ($52|0)==($ch|0);
     if ($exitcond44) {
      break L4;
     }
     $$pre$pre = HEAP32[$18>>2]|0;
     $$pre46$pre = HEAP32[$19>>2]|0;
     $$pre47$pre = HEAP32[$20>>2]|0;
     $$pre48$pre = HEAP32[$21>>2]|0;
     $$pre = $$pre$pre;$$pre46 = $$pre46$pre;$$pre47 = $$pre47$pre;$$pre48 = $$pre48$pre;$43 = $52;
    }
   }
  }
 } while(0);
 $40 = HEAP32[$23>>2]|0;
 $41 = ($0|0)>(0);
 if ($41) {
  $53 = HEAP32[$21>>2]|0;
  $54 = ($ch|0)>(0);
  $i$239 = 0;
  while(1) {
   $57 = (($0) - ($i$239))|0;
   $58 = ($26|0)>($57|0);
   $$ = $58 ? $57 : $26;
   _memcpy(($22|0),($nonzero|0),($17|0))|0;
   _memset(($53|0),0,($25|0))|0;
   if ($54) {
    $59 = ($$|0)>(0);
    $60 = (($10) - ($i$239))|0;
    $k$025 = 0;
    while(1) {
     $66 = (($iwork) + ($k$025<<2)|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = (($67) + ($i$239<<2)|0);
     $69 = (($22) + ($k$025<<2)|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($70|0)==(0);
     if ($71) {
      if ($59) {
       $74 = (($20) + ($k$025<<2)|0);
       $75 = HEAP32[$74>>2]|0;
       $76 = (($18) + ($k$025<<2)|0);
       $77 = HEAP32[$76>>2]|0;
       $78 = (($19) + ($k$025<<2)|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = (($21) + ($k$025<<2)|0);
       $81 = HEAP32[$80>>2]|0;
       $j$222 = 0;
       while(1) {
        $125 = (($75) + ($j$222<<2)|0);
        HEAPF32[$125>>2] = 1.000000013351432E-10;
        $126 = (($77) + ($j$222<<2)|0);
        HEAPF32[$126>>2] = 0.0;
        $127 = (($79) + ($j$222<<2)|0);
        HEAPF32[$127>>2] = 0.0;
        $128 = (($81) + ($j$222<<2)|0);
        HEAP32[$128>>2] = 0;
        $129 = (($68) + ($j$222<<2)|0);
        HEAP32[$129>>2] = 0;
        $130 = (($j$222) + 1)|0;
        $131 = ($130|0)<($$|0);
        if ($131) {
         $j$222 = $130;
        } else {
         break;
        }
       }
      }
     } else {
      $72 = (($20) + ($k$025<<2)|0);
      $73 = HEAP32[$72>>2]|0;
      if ($59) {
       $j$017 = 0;
       while(1) {
        $82 = (($68) + ($j$017<<2)|0);
        $83 = HEAP32[$82>>2]|0;
        $84 = (59604 + ($83<<2)|0);
        $85 = HEAP32[$84>>2]|0;
        $86 = (($73) + ($j$017<<2)|0);
        HEAP32[$86>>2] = $85;
        $87 = (($j$017) + 1)|0;
        $88 = ($87|0)<($$|0);
        if ($88) {
         $j$017 = $87;
        } else {
         break;
        }
       }
       $89 = (($mdct) + ($k$025<<2)|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = (($90) + ($i$239<<2)|0);
       $92 = (($21) + ($k$025<<2)|0);
       $93 = HEAP32[$92>>2]|0;
       $j$01$i = 0;
       while(1) {
        $94 = ($j$01$i|0)>=($60|0);
        $$v = $94 ? $postpoint$0$in : $14;
        $95 = $$v;
        $96 = (($91) + ($j$01$i<<2)|0);
        $97 = +HEAPF32[$96>>2];
        $fabsf$i = (+Math_abs((+$97)));
        $98 = (($73) + ($j$01$i<<2)|0);
        $99 = +HEAPF32[$98>>2];
        $100 = $fabsf$i / $99;
        $101 = (($93) + ($j$01$i<<2)|0);
        $not$$i = !($100 < $95);
        $$$i = $not$$i&1;
        HEAP32[$101>>2] = $$$i;
        $102 = (($j$01$i) + 1)|0;
        $exitcond$i = ($102|0)==($$|0);
        if ($exitcond$i) {
         break;
        } else {
         $j$01$i = $102;
        }
       }
       $103 = HEAP32[$89>>2]|0;
       $104 = (($18) + ($k$025<<2)|0);
       $105 = HEAP32[$104>>2]|0;
       $106 = (($19) + ($k$025<<2)|0);
       $107 = HEAP32[$106>>2]|0;
       $j$120 = 0;
       while(1) {
        $108 = (($j$120) + ($i$239))|0;
        $109 = (($103) + ($108<<2)|0);
        $110 = +HEAPF32[$109>>2];
        $111 = $110 * $110;
        $112 = (($105) + ($j$120<<2)|0);
        HEAPF32[$112>>2] = $111;
        $113 = (($107) + ($j$120<<2)|0);
        HEAPF32[$113>>2] = $111;
        $114 = +HEAPF32[$109>>2];
        $115 = $114 < 0.0;
        if ($115) {
         $116 = +HEAPF32[$112>>2];
         $117 = -$116;
         HEAPF32[$112>>2] = $117;
        }
        $118 = (($73) + ($j$120<<2)|0);
        $119 = +HEAPF32[$118>>2];
        $120 = $119 * $119;
        HEAPF32[$118>>2] = $120;
        $121 = (($j$120) + 1)|0;
        $122 = ($121|0)<($$|0);
        if ($122) {
         $j$120 = $121;
        } else {
         $123 = $105;$124 = $107;
         break;
        }
       }
      } else {
       $$phi$trans$insert50 = (($18) + ($k$025<<2)|0);
       $$pre51 = HEAP32[$$phi$trans$insert50>>2]|0;
       $$phi$trans$insert52 = (($19) + ($k$025<<2)|0);
       $$pre53 = HEAP32[$$phi$trans$insert52>>2]|0;
       $123 = $$pre51;$124 = $$pre53;
      }
      $p$idx$val = HEAP32[$1>>2]|0;
      _noise_normalize($p$idx$val,$10,$123,$124,$73,0,$i$239,$$,$68);
     }
     $132 = (($k$025) + 1)|0;
     $exitcond = ($132|0)==($ch|0);
     if ($exitcond) {
      break;
     } else {
      $k$025 = $132;
     }
    }
   }
   $61 = HEAP32[$23>>2]|0;
   $62 = ($61|0)>(0);
   if ($62) {
    $63 = ($$|0)>(0);
    $64 = (($sliding_lowpass) - ($i$239))|0;
    $65 = (($10) - ($i$239))|0;
    $252 = $61;$step$036 = 0;
    while(1) {
     $133 = (((($vi)) + 1160|0) + ($step$036<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = (((($vi)) + 2184|0) + ($step$036<<2)|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (($iwork) + ($134<<2)|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = (($138) + ($i$239<<2)|0);
     $140 = (($iwork) + ($136<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = (($141) + ($i$239<<2)|0);
     $143 = (($18) + ($134<<2)|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = (($18) + ($136<<2)|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = (($19) + ($134<<2)|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (($19) + ($136<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = (($20) + ($134<<2)|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = (($20) + ($136<<2)|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($21) + ($134<<2)|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = (($21) + ($136<<2)|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = (($22) + ($134<<2)|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($160|0)==(0);
     $162 = (($22) + ($136<<2)|0);
     if ($161) {
      $163 = HEAP32[$162>>2]|0;
      $164 = ($163|0)==(0);
      if ($164) {
       $232 = $252;
      } else {
       label = 31;
      }
     } else {
      label = 31;
     }
     if ((label|0) == 31) {
      label = 0;
      HEAP32[$162>>2] = 1;
      HEAP32[$159>>2] = 1;
      if ($63) {
       $j$330 = 0;
       while(1) {
        $165 = ($j$330|0)<($64|0);
        do {
         if ($165) {
          $166 = (($156) + ($j$330<<2)|0);
          $167 = HEAP32[$166>>2]|0;
          $168 = ($167|0)==(0);
          $169 = (($158) + ($j$330<<2)|0);
          if ($168) {
           $170 = HEAP32[$169>>2]|0;
           $171 = ($170|0)==(0);
           if ($171) {
            $205 = ($j$330|0)<($65|0);
            do {
             if ($205) {
              $206 = (($146) + ($j$330<<2)|0);
              $207 = +HEAPF32[$206>>2];
              $208 = (($144) + ($j$330<<2)|0);
              $209 = +HEAPF32[$208>>2];
              $210 = $209 + $207;
              HEAPF32[$208>>2] = $210;
              $fabsf2 = (+Math_abs((+$210)));
              $211 = (($148) + ($j$330<<2)|0);
              HEAPF32[$211>>2] = $fabsf2;
              $$pre$phiZ2D = $206;
             } else {
              $212 = (($144) + ($j$330<<2)|0);
              $213 = +HEAPF32[$212>>2];
              $214 = (($146) + ($j$330<<2)|0);
              $215 = +HEAPF32[$214>>2];
              $216 = $215 + $213;
              $217 = $216 < 0.0;
              $fabsf = (+Math_abs((+$213)));
              $fabsf1 = (+Math_abs((+$215)));
              $218 = $fabsf1 + $fabsf;
              $219 = (($148) + ($j$330<<2)|0);
              HEAPF32[$219>>2] = $218;
              if ($217) {
               $220 = -$218;
               HEAPF32[$212>>2] = $220;
               $$pre$phiZ2D = $214;
               break;
              } else {
               HEAPF32[$212>>2] = $218;
               $$pre$phiZ2D = $214;
               break;
              }
             }
            } while(0);
            $221 = (($150) + ($j$330<<2)|0);
            HEAPF32[$221>>2] = 0.0;
            HEAPF32[$$pre$phiZ2D>>2] = 0.0;
            HEAP32[$169>>2] = 1;
            $222 = (($142) + ($j$330<<2)|0);
            HEAP32[$222>>2] = 0;
            break;
           }
          }
          $172 = (($144) + ($j$330<<2)|0);
          $173 = +HEAPF32[$172>>2];
          $fabsf3 = (+Math_abs((+$173)));
          $174 = (($146) + ($j$330<<2)|0);
          $175 = +HEAPF32[$174>>2];
          $fabsf4 = (+Math_abs((+$175)));
          $176 = $fabsf4 + $fabsf3;
          HEAPF32[$172>>2] = $176;
          $177 = (($148) + ($j$330<<2)|0);
          $178 = +HEAPF32[$177>>2];
          $179 = (($150) + ($j$330<<2)|0);
          $180 = +HEAPF32[$179>>2];
          $181 = $180 + $178;
          HEAPF32[$177>>2] = $181;
          HEAP32[$169>>2] = 1;
          HEAP32[$166>>2] = 1;
          $182 = (($139) + ($j$330<<2)|0);
          $183 = HEAP32[$182>>2]|0;
          $184 = (($142) + ($j$330<<2)|0);
          $185 = HEAP32[$184>>2]|0;
          $ispos = ($183|0)>(-1);
          $neg = (0 - ($183))|0;
          $186 = $ispos ? $183 : $neg;
          $ispos5 = ($185|0)>(-1);
          $neg6 = (0 - ($185))|0;
          $187 = $ispos5 ? $185 : $neg6;
          $188 = ($186|0)>($187|0);
          if ($188) {
           $189 = ($183|0)>(0);
           $190 = (($183) - ($185))|0;
           $191 = (($185) - ($183))|0;
           $192 = $189 ? $190 : $191;
           HEAP32[$184>>2] = $192;
           $$pre55 = HEAP32[$182>>2]|0;
           $197 = $$pre55;$200 = $192;
          } else {
           $193 = ($185|0)>(0);
           $194 = (($183) - ($185))|0;
           $195 = (($185) - ($183))|0;
           $196 = $193 ? $194 : $195;
           HEAP32[$184>>2] = $196;
           HEAP32[$182>>2] = $185;
           $$pre54 = HEAP32[$184>>2]|0;
           $197 = $185;$200 = $$pre54;
          }
          $ispos7 = ($197|0)>(-1);
          $neg8 = (0 - ($197))|0;
          $198 = $ispos7 ? $197 : $neg8;
          $199 = $198 << 1;
          $201 = ($200|0)<($199|0);
          if (!($201)) {
           $202 = (0 - ($200))|0;
           HEAP32[$184>>2] = $202;
           $203 = HEAP32[$182>>2]|0;
           $204 = (0 - ($203))|0;
           HEAP32[$182>>2] = $204;
          }
         }
        } while(0);
        $223 = (($152) + ($j$330<<2)|0);
        $224 = +HEAPF32[$223>>2];
        $225 = (($154) + ($j$330<<2)|0);
        $226 = +HEAPF32[$225>>2];
        $227 = $226 + $224;
        HEAPF32[$225>>2] = $227;
        HEAPF32[$223>>2] = $227;
        $228 = (($j$330) + 1)|0;
        $229 = ($228|0)<($$|0);
        if ($229) {
         $j$330 = $228;
        } else {
         break;
        }
       }
      }
      $p$idx9$val = HEAP32[$1>>2]|0;
      _noise_normalize($p$idx9$val,$10,$144,$148,$152,$156,$i$239,$$,$139);
      $$pre56 = HEAP32[$23>>2]|0;
      $232 = $$pre56;
     }
     $230 = (($step$036) + 1)|0;
     $231 = ($230|0)<($232|0);
     if ($231) {
      $252 = $232;$step$036 = $230;
     } else {
      $251 = $232;
      break;
     }
    }
   } else {
    $251 = $61;
   }
   $233 = (($i$239) + ($26))|0;
   $234 = ($0|0)>($233|0);
   if ($234) {
    $i$239 = $233;
   } else {
    $55 = $251;
    break;
   }
  }
 } else {
  $55 = $40;
 }
 $56 = ($55|0)>(0);
 if ($56) {
  $250 = $55;$i$315 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $235 = (((($vi)) + 1160|0) + ($i$315<<2)|0);
  $236 = HEAP32[$235>>2]|0;
  $237 = (($nonzero) + ($236<<2)|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = ($238|0)==(0);
  $240 = (((($vi)) + 2184|0) + ($i$315<<2)|0);
  if ($239) {
   $241 = HEAP32[$240>>2]|0;
   $242 = (($nonzero) + ($241<<2)|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = ($243|0)==(0);
   if ($244) {
    $249 = $250;
   } else {
    label = 52;
   }
  } else {
   label = 52;
  }
  if ((label|0) == 52) {
   label = 0;
   HEAP32[$237>>2] = 1;
   $245 = HEAP32[$240>>2]|0;
   $246 = (($nonzero) + ($245<<2)|0);
   HEAP32[$246>>2] = 1;
   $$pre57 = HEAP32[$23>>2]|0;
   $249 = $$pre57;
  }
  $247 = (($i$315) + 1)|0;
  $248 = ($247|0)<($249|0);
  if ($248) {
   $250 = $249;$i$315 = $247;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _noise_normalize($p$0$1$val,$limit,$r,$q,$f,$flags,$i,$n,$out) {
 $p$0$1$val = $p$0$1$val|0;
 $limit = $limit|0;
 $r = $r|0;
 $q = $q|0;
 $f = $f|0;
 $flags = $flags|0;
 $i = $i|0;
 $n = $n|0;
 $out = $out|0;
 var $$0$i = 0.0, $$0$i2 = 0.0, $$0$i5 = 0.0, $$0$i8 = 0.0, $$0$lcssa = 0.0, $$06 = 0.0, $$06$us = 0.0, $$2 = 0.0, $$2$us = 0.0, $$32 = 0.0, $$4 = 0.0, $$alloca_mul = 0, $$sink = 0, $$sink$in = 0.0, $$sink20 = 0, $$sink20$in = 0.0, $$sink21 = 0, $$sink21$in = 0.0, $$sink22 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0.0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0.0, $152 = 0.0;
 var $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0.0, $172 = 0, $173 = 0.0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $count$0$lcssa = 0, $count$03 = 0, $count$03$us = 0;
 var $count$2 = 0, $count$2$us = 0, $exitcond = 0, $exitcond18 = 0, $exitcond19 = 0, $j$0$lcssa = 0, $j$010 = 0, $j$010$us = 0, $j$14 = 0, $j$14$us = 0, $j$21 = 0, $n$ = 0, $or$cond = 0, $storemerge = 0.0, $y$0$i = 0.0, $y$0$i1 = 0.0, $y$0$i4 = 0.0, $y$0$i7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n << 2;
 $$alloca_mul = $0;
 $1 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $2 = ((($p$0$1$val)) + 500|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $8 = $n;
 } else {
  $5 = ((($p$0$1$val)) + 504|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) - ($i))|0;
  $8 = $7;
 }
 $9 = ($8|0)>($n|0);
 $n$ = $9 ? $n : $8;
 $10 = ($n$|0)>(0);
 L4: do {
  if ($10) {
   $11 = ($flags|0)==(0|0);
   if ($11) {
    $j$010$us = 0;
    while(1) {
     $12 = (($q) + ($j$010$us<<2)|0);
     $13 = +HEAPF32[$12>>2];
     $14 = (($f) + ($j$010$us<<2)|0);
     $15 = +HEAPF32[$14>>2];
     $16 = $13 / $15;
     $17 = (($r) + ($j$010$us<<2)|0);
     $18 = +HEAPF32[$17>>2];
     $19 = $18 < 0.0;
     $20 = $16;
     $21 = (+Math_sqrt((+$20)));
     HEAPF64[tempDoublePtr>>3] = $21;$22 = HEAP32[tempDoublePtr>>2]|0;
     $23 = HEAP32[tempDoublePtr+4>>2]|0;
     $24 = $23 & 2146435072;
     $25 = ($24>>>0)>(1126170624);
     $26 = (0)>(0);
     $27 = ($24|0)==(1126170624);
     $28 = $27 & $26;
     $29 = $25 | $28;
     if ($29) {
      $$0$i = $21;
     } else {
      $30 = ($23|0)<(0);
      $31 = $21 + -4503599627370496.0;
      $32 = $31 + 4503599627370496.0;
      $33 = $21 + 4503599627370496.0;
      $34 = $33 + -4503599627370496.0;
      $y$0$i = $30 ? $32 : $34;
      $35 = $y$0$i == 0.0;
      if ($35) {
       $36 = $30 ? -0.0 : 0.0;
       $$0$i = $36;
      } else {
       $$0$i = $y$0$i;
      }
     }
     $37 = -$$0$i;
     $$sink$in = $19 ? $37 : $$0$i;
     $$sink = (~~(($$sink$in)));
     $38 = (($out) + ($j$010$us<<2)|0);
     HEAP32[$38>>2] = $$sink;
     $39 = (($j$010$us) + 1)|0;
     $40 = ($39|0)<($n$|0);
     if ($40) {
      $j$010$us = $39;
     } else {
      $j$0$lcssa = $n$;
      break L4;
     }
    }
   } else {
    $j$010 = 0;
   }
   while(1) {
    $84 = (($flags) + ($j$010<<2)|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($85|0)==(0);
    do {
     if ($86) {
      $87 = (($q) + ($j$010<<2)|0);
      $88 = +HEAPF32[$87>>2];
      $89 = (($f) + ($j$010<<2)|0);
      $90 = +HEAPF32[$89>>2];
      $91 = $88 / $90;
      $92 = (($r) + ($j$010<<2)|0);
      $93 = +HEAPF32[$92>>2];
      $94 = $93 < 0.0;
      $95 = $91;
      $96 = (+Math_sqrt((+$95)));
      HEAPF64[tempDoublePtr>>3] = $96;$97 = HEAP32[tempDoublePtr>>2]|0;
      $98 = HEAP32[tempDoublePtr+4>>2]|0;
      $99 = $98 & 2146435072;
      $100 = ($99>>>0)>(1126170624);
      $101 = (0)>(0);
      $102 = ($99|0)==(1126170624);
      $103 = $102 & $101;
      $104 = $100 | $103;
      if ($104) {
       $$0$i8 = $96;
      } else {
       $105 = ($98|0)<(0);
       $106 = $96 + -4503599627370496.0;
       $107 = $106 + 4503599627370496.0;
       $108 = $96 + 4503599627370496.0;
       $109 = $108 + -4503599627370496.0;
       $y$0$i7 = $105 ? $107 : $109;
       $110 = $y$0$i7 == 0.0;
       if ($110) {
        $111 = $105 ? -0.0 : 0.0;
        $$0$i8 = $111;
       } else {
        $$0$i8 = $y$0$i7;
       }
      }
      if ($94) {
       $112 = -$$0$i8;
       $113 = (~~(($112)));
       $114 = (($out) + ($j$010<<2)|0);
       HEAP32[$114>>2] = $113;
       break;
      } else {
       $115 = (~~(($$0$i8)));
       $116 = (($out) + ($j$010<<2)|0);
       HEAP32[$116>>2] = $115;
       break;
      }
     }
    } while(0);
    $117 = (($j$010) + 1)|0;
    $118 = ($117|0)<($n$|0);
    if ($118) {
     $j$010 = $117;
    } else {
     $j$0$lcssa = $n$;
     break;
    }
   }
  } else {
   $j$0$lcssa = 0;
  }
 } while(0);
 $41 = ($j$0$lcssa|0)<($n|0);
 if (!($41)) {
  STACKTOP = sp;return;
 }
 $42 = ($flags|0)==(0|0);
 $43 = (($limit) - ($i))|0;
 if ($42) {
  $$06 = 0.0;$count$03 = 0;$j$14 = $j$0$lcssa;
  while(1) {
   $119 = (($q) + ($j$14<<2)|0);
   $120 = +HEAPF32[$119>>2];
   $121 = (($f) + ($j$14<<2)|0);
   $122 = +HEAPF32[$121>>2];
   $123 = $120 / $122;
   $124 = $123 < 0.25;
   if ($124) {
    $125 = $123 + $$06;
    $126 = (($count$03) + 1)|0;
    $127 = (($1) + ($count$03<<2)|0);
    HEAP32[$127>>2] = $119;
    $$2 = $125;$count$2 = $126;
   } else {
    $128 = (($r) + ($j$14<<2)|0);
    $129 = +HEAPF32[$128>>2];
    $130 = $129 < 0.0;
    $131 = $123;
    $132 = (+Math_sqrt((+$131)));
    HEAPF64[tempDoublePtr>>3] = $132;$133 = HEAP32[tempDoublePtr>>2]|0;
    $134 = HEAP32[tempDoublePtr+4>>2]|0;
    $135 = $134 & 2146435072;
    $136 = ($135>>>0)>(1126170624);
    $137 = (0)>(0);
    $138 = ($135|0)==(1126170624);
    $139 = $138 & $137;
    $140 = $136 | $139;
    if ($140) {
     $$0$i5 = $132;
    } else {
     $141 = ($134|0)<(0);
     $142 = $132 + -4503599627370496.0;
     $143 = $142 + 4503599627370496.0;
     $144 = $132 + 4503599627370496.0;
     $145 = $144 + -4503599627370496.0;
     $y$0$i4 = $141 ? $143 : $145;
     $146 = $y$0$i4 == 0.0;
     if ($146) {
      $147 = $141 ? -0.0 : 0.0;
      $$0$i5 = $147;
     } else {
      $$0$i5 = $y$0$i4;
     }
    }
    $148 = -$$0$i5;
    $$sink21$in = $130 ? $148 : $$0$i5;
    $$sink21 = (~~(($$sink21$in)));
    $149 = (($out) + ($j$14<<2)|0);
    HEAP32[$149>>2] = $$sink21;
    $150 = Math_imul($$sink21, $$sink21)|0;
    $151 = (+($150|0));
    $152 = +HEAPF32[$121>>2];
    $153 = $151 * $152;
    HEAPF32[$119>>2] = $153;
    $$2 = $$06;$count$2 = $count$03;
   }
   $154 = (($j$14) + 1)|0;
   $exitcond18 = ($154|0)==($n|0);
   if ($exitcond18) {
    $$0$lcssa = $$2;$count$0$lcssa = $count$2;
    break;
   } else {
    $$06 = $$2;$count$03 = $count$2;$j$14 = $154;
   }
  }
 } else {
  $$06$us = 0.0;$count$03$us = 0;$j$14$us = $j$0$lcssa;
  while(1) {
   $44 = (($flags) + ($j$14$us<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ($45|0)==(0);
   do {
    if ($46) {
     $47 = (($q) + ($j$14$us<<2)|0);
     $48 = +HEAPF32[$47>>2];
     $49 = (($f) + ($j$14$us<<2)|0);
     $50 = +HEAPF32[$49>>2];
     $51 = $48 / $50;
     $52 = !($51 < 0.25);
     $53 = ($j$14$us|0)<($43|0);
     $or$cond = $52 | $53;
     if (!($or$cond)) {
      $54 = $51 + $$06$us;
      $55 = (($count$03$us) + 1)|0;
      $56 = (($1) + ($count$03$us<<2)|0);
      HEAP32[$56>>2] = $47;
      $$2$us = $54;$count$2$us = $55;
      break;
     }
     $57 = (($r) + ($j$14$us<<2)|0);
     $58 = +HEAPF32[$57>>2];
     $59 = $58 < 0.0;
     $60 = $51;
     $61 = (+Math_sqrt((+$60)));
     HEAPF64[tempDoublePtr>>3] = $61;$62 = HEAP32[tempDoublePtr>>2]|0;
     $63 = HEAP32[tempDoublePtr+4>>2]|0;
     $64 = $63 & 2146435072;
     $65 = ($64>>>0)>(1126170624);
     $66 = (0)>(0);
     $67 = ($64|0)==(1126170624);
     $68 = $67 & $66;
     $69 = $65 | $68;
     if ($69) {
      $$0$i2 = $61;
     } else {
      $70 = ($63|0)<(0);
      $71 = $61 + -4503599627370496.0;
      $72 = $71 + 4503599627370496.0;
      $73 = $61 + 4503599627370496.0;
      $74 = $73 + -4503599627370496.0;
      $y$0$i1 = $70 ? $72 : $74;
      $75 = $y$0$i1 == 0.0;
      if ($75) {
       $76 = $70 ? -0.0 : 0.0;
       $$0$i2 = $76;
      } else {
       $$0$i2 = $y$0$i1;
      }
     }
     $77 = -$$0$i2;
     $$sink20$in = $59 ? $77 : $$0$i2;
     $$sink20 = (~~(($$sink20$in)));
     $78 = (($out) + ($j$14$us<<2)|0);
     HEAP32[$78>>2] = $$sink20;
     $79 = Math_imul($$sink20, $$sink20)|0;
     $80 = (+($79|0));
     $81 = +HEAPF32[$49>>2];
     $82 = $80 * $81;
     HEAPF32[$47>>2] = $82;
     $$2$us = $$06$us;$count$2$us = $count$03$us;
    } else {
     $$2$us = $$06$us;$count$2$us = $count$03$us;
    }
   } while(0);
   $83 = (($j$14$us) + 1)|0;
   $exitcond19 = ($83|0)==($n|0);
   if ($exitcond19) {
    $$0$lcssa = $$2$us;$count$0$lcssa = $count$2$us;
    break;
   } else {
    $$06$us = $$2$us;$count$03$us = $count$2$us;$j$14$us = $83;
   }
  }
 }
 $155 = ($count$0$lcssa|0)==(0);
 if ($155) {
  STACKTOP = sp;return;
 }
 _qsort($1,$count$0$lcssa,26);
 $156 = ($count$0$lcssa|0)>(0);
 if (!($156)) {
  STACKTOP = sp;return;
 }
 $157 = $q;
 $158 = ((($p$0$1$val)) + 512|0);
 $159 = +HEAPF64[$158>>3];
 $$32 = $$0$lcssa;$j$21 = 0;
 while(1) {
  $160 = (($1) + ($j$21<<2)|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = $161;
  $163 = (($162) - ($157))|0;
  $164 = $163 >> 2;
  $165 = $$32;
  $166 = !($165 >= $159);
  if ($166) {
   $$4 = $$32;$$sink22 = 0;$storemerge = 0.0;
  } else {
   $167 = (($r) + ($164<<2)|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = $168 & -2147483648;
   $170 = $169 | 1065353216;
   $171 = (HEAP32[tempDoublePtr>>2]=$170,+HEAPF32[tempDoublePtr>>2]);
   $172 = (~~(($171)));
   $173 = $$32 + -1.0;
   $174 = (($f) + ($164<<2)|0);
   $175 = +HEAPF32[$174>>2];
   $$4 = $173;$$sink22 = $172;$storemerge = $175;
  }
  $176 = (($out) + ($164<<2)|0);
  HEAP32[$176>>2] = $$sink22;
  HEAPF32[$161>>2] = $storemerge;
  $177 = (($j$21) + 1)|0;
  $exitcond = ($177|0)==($count$0$lcssa|0);
  if ($exitcond) {
   break;
  } else {
   $$32 = $$4;$j$21 = $177;
  }
 }
 STACKTOP = sp;return;
}
function _apsort($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = +HEAPF32[$0>>2];
 $2 = HEAP32[$b>>2]|0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1 < $3;
 $5 = $4&1;
 $6 = $1 > $3;
 $7 = $6&1;
 $8 = (($5) - ($7))|0;
 return ($8|0);
}
function _vorbis_comment_init($vc) {
 $vc = $vc|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$vc>>2]=0|0;HEAP32[$vc+4>>2]=0|0;HEAP32[$vc+8>>2]=0|0;HEAP32[$vc+12>>2]=0|0;
 return;
}
function _vorbis_comment_add_tag($vc,$tag,$contents) {
 $vc = $vc|0;
 $tag = $tag|0;
 $contents = $contents|0;
 var $$0$i = 0, $$0$i125 = 0, $$0$i17 = 0, $$0$i62 = 0, $$0$i80 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i25 = 0, $$0$lcssa$i$i88 = 0, $$01$lcssa$i = 0, $$01$lcssa$i$i = 0, $$01$lcssa$i$i26 = 0, $$01$lcssa$i$i89 = 0, $$01$lcssa$i113 = 0, $$01$lcssa$i5 = 0, $$01$lcssa$i50 = 0, $$01$lcssa$i68 = 0, $$0115$i$i = 0, $$0115$i$i22 = 0, $$0115$i$i85 = 0, $$014$i = 0;
 var $$014$i110 = 0, $$014$i2 = 0, $$014$i47 = 0, $$014$i65 = 0, $$016$i$i = 0, $$016$i$i21 = 0, $$016$i$i84 = 0, $$1$lcssa$i = 0, $$1$lcssa$i121 = 0, $$1$lcssa$i13 = 0, $$1$lcssa$i58 = 0, $$1$lcssa$i76 = 0, $$1$ph$i$i = 0, $$1$ph$i$i100 = 0, $$1$ph$i$i37 = 0, $$12$ph$i$i = 0, $$12$ph$i$i36 = 0, $$12$ph$i$i99 = 0, $$128$i$i = 0, $$128$i$i104 = 0;
 var $$128$i$i41 = 0, $$19$i$i = 0, $$19$i$i103 = 0, $$19$i$i40 = 0, $$pn$i = 0, $$pn$i124 = 0, $$pn$i16 = 0, $$pn$i61 = 0, $$pn$i79 = 0, $$pn15$i = 0, $$pn15$i117 = 0, $$pn15$i54 = 0, $$pn15$i72 = 0, $$pn15$i9 = 0, $$pre$i = 0, $$pre$i10 = 0, $$pre$i118 = 0, $$pre$i55 = 0, $$pre$i73 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $endptr = 0, $w$0$i = 0, $w$0$i115 = 0, $w$0$i52 = 0, $w$0$i7 = 0, $w$0$i70 = 0, $wd$0$lcssa$i$i = 0, $wd$0$lcssa$i$i34 = 0, $wd$0$lcssa$i$i97 = 0, $wd$010$i$i = 0, $wd$010$i$i30 = 0, $wd$010$i$i93 = 0, $ws$0$lcssa$i$i = 0;
 var $ws$0$lcssa$i$i33 = 0, $ws$0$lcssa$i$i96 = 0, $ws$011$i$i = 0, $ws$011$i$i29 = 0, $ws$011$i$i92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $tag;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa$i = $tag;
   label = 4;
  } else {
   $$014$i = $tag;$223 = $0;
   while(1) {
    $3 = HEAP8[$$014$i>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn$i = $223;
     break L1;
    }
    $5 = ((($$014$i)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa$i = $5;
     label = 4;
     break;
    } else {
     $$014$i = $5;$223 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0$i = $$01$lcssa$i;
  while(1) {
   $9 = HEAP32[$w$0$i>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0$i)) + 4|0);
   if ($14) {
    $w$0$i = $15;
   } else {
    break;
   }
  }
  $16 = $9&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa$i = $w$0$i;
  } else {
   $$pn15$i = $w$0$i;
   while(1) {
    $18 = ((($$pn15$i)) + 1|0);
    $$pre$i = HEAP8[$18>>0]|0;
    $19 = ($$pre$i<<24>>24)==(0);
    if ($19) {
     $$1$lcssa$i = $18;
     break;
    } else {
     $$pn15$i = $18;
    }
   }
  }
  $20 = $$1$lcssa$i;
  $$pn$i = $20;
 }
 $$0$i = (($$pn$i) - ($0))|0;
 $21 = $contents;
 $22 = $21 & 3;
 $23 = ($22|0)==(0);
 L15: do {
  if ($23) {
   $$01$lcssa$i5 = $contents;
   label = 12;
  } else {
   $$014$i2 = $contents;$224 = $21;
   while(1) {
    $24 = HEAP8[$$014$i2>>0]|0;
    $25 = ($24<<24>>24)==(0);
    if ($25) {
     $$pn$i16 = $224;
     break L15;
    }
    $26 = ((($$014$i2)) + 1|0);
    $27 = $26;
    $28 = $27 & 3;
    $29 = ($28|0)==(0);
    if ($29) {
     $$01$lcssa$i5 = $26;
     label = 12;
     break;
    } else {
     $$014$i2 = $26;$224 = $27;
    }
   }
  }
 } while(0);
 if ((label|0) == 12) {
  $w$0$i7 = $$01$lcssa$i5;
  while(1) {
   $30 = HEAP32[$w$0$i7>>2]|0;
   $31 = (($30) + -16843009)|0;
   $32 = $30 & -2139062144;
   $33 = $32 ^ -2139062144;
   $34 = $33 & $31;
   $35 = ($34|0)==(0);
   $36 = ((($w$0$i7)) + 4|0);
   if ($35) {
    $w$0$i7 = $36;
   } else {
    break;
   }
  }
  $37 = $30&255;
  $38 = ($37<<24>>24)==(0);
  if ($38) {
   $$1$lcssa$i13 = $w$0$i7;
  } else {
   $$pn15$i9 = $w$0$i7;
   while(1) {
    $39 = ((($$pn15$i9)) + 1|0);
    $$pre$i10 = HEAP8[$39>>0]|0;
    $40 = ($$pre$i10<<24>>24)==(0);
    if ($40) {
     $$1$lcssa$i13 = $39;
     break;
    } else {
     $$pn15$i9 = $39;
    }
   }
  }
  $41 = $$1$lcssa$i13;
  $$pn$i16 = $41;
 }
 $$0$i17 = (($$pn$i16) - ($21))|0;
 $42 = (($$0$i) + 2)|0;
 $43 = (($42) + ($$0$i17))|0;
 $44 = (_malloc($43)|0);
 $45 = $44;
 $46 = $0 ^ $45;
 $47 = $46 & 3;
 $48 = ($47|0)==(0);
 L29: do {
  if ($48) {
   if ($2) {
    $$0$lcssa$i$i25 = $tag;$$01$lcssa$i$i26 = $44;
   } else {
    $$0115$i$i22 = $44;$$016$i$i21 = $tag;
    while(1) {
     $49 = HEAP8[$$016$i$i21>>0]|0;
     HEAP8[$$0115$i$i22>>0] = $49;
     $50 = ($49<<24>>24)==(0);
     if ($50) {
      break L29;
     }
     $51 = ((($$016$i$i21)) + 1|0);
     $52 = ((($$0115$i$i22)) + 1|0);
     $53 = $51;
     $54 = $53 & 3;
     $55 = ($54|0)==(0);
     if ($55) {
      $$0$lcssa$i$i25 = $51;$$01$lcssa$i$i26 = $52;
      break;
     } else {
      $$0115$i$i22 = $52;$$016$i$i21 = $51;
     }
    }
   }
   $56 = HEAP32[$$0$lcssa$i$i25>>2]|0;
   $57 = (($56) + -16843009)|0;
   $58 = $56 & -2139062144;
   $59 = $58 ^ -2139062144;
   $60 = $59 & $57;
   $61 = ($60|0)==(0);
   if ($61) {
    $64 = $56;$wd$010$i$i30 = $$01$lcssa$i$i26;$ws$011$i$i29 = $$0$lcssa$i$i25;
    while(1) {
     $62 = ((($ws$011$i$i29)) + 4|0);
     $63 = ((($wd$010$i$i30)) + 4|0);
     HEAP32[$wd$010$i$i30>>2] = $64;
     $65 = HEAP32[$62>>2]|0;
     $66 = (($65) + -16843009)|0;
     $67 = $65 & -2139062144;
     $68 = $67 ^ -2139062144;
     $69 = $68 & $66;
     $70 = ($69|0)==(0);
     if ($70) {
      $64 = $65;$wd$010$i$i30 = $63;$ws$011$i$i29 = $62;
     } else {
      $wd$0$lcssa$i$i34 = $63;$ws$0$lcssa$i$i33 = $62;
      break;
     }
    }
   } else {
    $wd$0$lcssa$i$i34 = $$01$lcssa$i$i26;$ws$0$lcssa$i$i33 = $$0$lcssa$i$i25;
   }
   $$1$ph$i$i37 = $ws$0$lcssa$i$i33;$$12$ph$i$i36 = $wd$0$lcssa$i$i34;
   label = 24;
  } else {
   $$1$ph$i$i37 = $tag;$$12$ph$i$i36 = $44;
   label = 24;
  }
 } while(0);
 if ((label|0) == 24) {
  $71 = HEAP8[$$1$ph$i$i37>>0]|0;
  HEAP8[$$12$ph$i$i36>>0] = $71;
  $72 = ($71<<24>>24)==(0);
  if (!($72)) {
   $$128$i$i41 = $$12$ph$i$i36;$$19$i$i40 = $$1$ph$i$i37;
   while(1) {
    $73 = ((($$19$i$i40)) + 1|0);
    $74 = ((($$128$i$i41)) + 1|0);
    $75 = HEAP8[$73>>0]|0;
    HEAP8[$74>>0] = $75;
    $76 = ($75<<24>>24)==(0);
    if ($76) {
     break;
    } else {
     $$128$i$i41 = $74;$$19$i$i40 = $73;
    }
   }
  }
 }
 $77 = $45 & 3;
 $78 = ($77|0)==(0);
 L45: do {
  if ($78) {
   $$01$lcssa$i68 = $44;
   label = 29;
  } else {
   $$014$i65 = $44;$225 = $45;
   while(1) {
    $79 = HEAP8[$$014$i65>>0]|0;
    $80 = ($79<<24>>24)==(0);
    if ($80) {
     $$pn$i79 = $225;
     break L45;
    }
    $81 = ((($$014$i65)) + 1|0);
    $82 = $81;
    $83 = $82 & 3;
    $84 = ($83|0)==(0);
    if ($84) {
     $$01$lcssa$i68 = $81;
     label = 29;
     break;
    } else {
     $$014$i65 = $81;$225 = $82;
    }
   }
  }
 } while(0);
 if ((label|0) == 29) {
  $w$0$i70 = $$01$lcssa$i68;
  while(1) {
   $85 = HEAP32[$w$0$i70>>2]|0;
   $86 = (($85) + -16843009)|0;
   $87 = $85 & -2139062144;
   $88 = $87 ^ -2139062144;
   $89 = $88 & $86;
   $90 = ($89|0)==(0);
   $91 = ((($w$0$i70)) + 4|0);
   if ($90) {
    $w$0$i70 = $91;
   } else {
    break;
   }
  }
  $92 = $85&255;
  $93 = ($92<<24>>24)==(0);
  if ($93) {
   $$1$lcssa$i76 = $w$0$i70;
  } else {
   $$pn15$i72 = $w$0$i70;
   while(1) {
    $94 = ((($$pn15$i72)) + 1|0);
    $$pre$i73 = HEAP8[$94>>0]|0;
    $95 = ($$pre$i73<<24>>24)==(0);
    if ($95) {
     $$1$lcssa$i76 = $94;
     break;
    } else {
     $$pn15$i72 = $94;
    }
   }
  }
  $96 = $$1$lcssa$i76;
  $$pn$i79 = $96;
 }
 $$0$i80 = (($$pn$i79) - ($45))|0;
 $endptr = (($44) + ($$0$i80)|0);
 HEAP8[$endptr>>0]=61&255;HEAP8[$endptr+1>>0]=61>>8;
 L59: do {
  if ($78) {
   $$01$lcssa$i113 = $44;
   label = 37;
  } else {
   $$014$i110 = $44;$226 = $45;
   while(1) {
    $97 = HEAP8[$$014$i110>>0]|0;
    $98 = ($97<<24>>24)==(0);
    if ($98) {
     $$pn$i124 = $226;
     break L59;
    }
    $99 = ((($$014$i110)) + 1|0);
    $100 = $99;
    $101 = $100 & 3;
    $102 = ($101|0)==(0);
    if ($102) {
     $$01$lcssa$i113 = $99;
     label = 37;
     break;
    } else {
     $$014$i110 = $99;$226 = $100;
    }
   }
  }
 } while(0);
 if ((label|0) == 37) {
  $w$0$i115 = $$01$lcssa$i113;
  while(1) {
   $103 = HEAP32[$w$0$i115>>2]|0;
   $104 = (($103) + -16843009)|0;
   $105 = $103 & -2139062144;
   $106 = $105 ^ -2139062144;
   $107 = $106 & $104;
   $108 = ($107|0)==(0);
   $109 = ((($w$0$i115)) + 4|0);
   if ($108) {
    $w$0$i115 = $109;
   } else {
    break;
   }
  }
  $110 = $103&255;
  $111 = ($110<<24>>24)==(0);
  if ($111) {
   $$1$lcssa$i121 = $w$0$i115;
  } else {
   $$pn15$i117 = $w$0$i115;
   while(1) {
    $112 = ((($$pn15$i117)) + 1|0);
    $$pre$i118 = HEAP8[$112>>0]|0;
    $113 = ($$pre$i118<<24>>24)==(0);
    if ($113) {
     $$1$lcssa$i121 = $112;
     break;
    } else {
     $$pn15$i117 = $112;
    }
   }
  }
  $114 = $$1$lcssa$i121;
  $$pn$i124 = $114;
 }
 $$0$i125 = (($$pn$i124) - ($45))|0;
 $115 = (($44) + ($$0$i125)|0);
 $116 = $115;
 $117 = $21 ^ $116;
 $118 = $117 & 3;
 $119 = ($118|0)==(0);
 L73: do {
  if ($119) {
   if ($23) {
    $$0$lcssa$i$i88 = $contents;$$01$lcssa$i$i89 = $115;
   } else {
    $$0115$i$i85 = $115;$$016$i$i84 = $contents;
    while(1) {
     $120 = HEAP8[$$016$i$i84>>0]|0;
     HEAP8[$$0115$i$i85>>0] = $120;
     $121 = ($120<<24>>24)==(0);
     if ($121) {
      break L73;
     }
     $122 = ((($$016$i$i84)) + 1|0);
     $123 = ((($$0115$i$i85)) + 1|0);
     $124 = $122;
     $125 = $124 & 3;
     $126 = ($125|0)==(0);
     if ($126) {
      $$0$lcssa$i$i88 = $122;$$01$lcssa$i$i89 = $123;
      break;
     } else {
      $$0115$i$i85 = $123;$$016$i$i84 = $122;
     }
    }
   }
   $127 = HEAP32[$$0$lcssa$i$i88>>2]|0;
   $128 = (($127) + -16843009)|0;
   $129 = $127 & -2139062144;
   $130 = $129 ^ -2139062144;
   $131 = $130 & $128;
   $132 = ($131|0)==(0);
   if ($132) {
    $135 = $127;$wd$010$i$i93 = $$01$lcssa$i$i89;$ws$011$i$i92 = $$0$lcssa$i$i88;
    while(1) {
     $133 = ((($ws$011$i$i92)) + 4|0);
     $134 = ((($wd$010$i$i93)) + 4|0);
     HEAP32[$wd$010$i$i93>>2] = $135;
     $136 = HEAP32[$133>>2]|0;
     $137 = (($136) + -16843009)|0;
     $138 = $136 & -2139062144;
     $139 = $138 ^ -2139062144;
     $140 = $139 & $137;
     $141 = ($140|0)==(0);
     if ($141) {
      $135 = $136;$wd$010$i$i93 = $134;$ws$011$i$i92 = $133;
     } else {
      $wd$0$lcssa$i$i97 = $134;$ws$0$lcssa$i$i96 = $133;
      break;
     }
    }
   } else {
    $wd$0$lcssa$i$i97 = $$01$lcssa$i$i89;$ws$0$lcssa$i$i96 = $$0$lcssa$i$i88;
   }
   $$1$ph$i$i100 = $ws$0$lcssa$i$i96;$$12$ph$i$i99 = $wd$0$lcssa$i$i97;
   label = 49;
  } else {
   $$1$ph$i$i100 = $contents;$$12$ph$i$i99 = $115;
   label = 49;
  }
 } while(0);
 if ((label|0) == 49) {
  $142 = HEAP8[$$1$ph$i$i100>>0]|0;
  HEAP8[$$12$ph$i$i99>>0] = $142;
  $143 = ($142<<24>>24)==(0);
  if (!($143)) {
   $$128$i$i104 = $$12$ph$i$i99;$$19$i$i103 = $$1$ph$i$i100;
   while(1) {
    $144 = ((($$19$i$i103)) + 1|0);
    $145 = ((($$128$i$i104)) + 1|0);
    $146 = HEAP8[$144>>0]|0;
    HEAP8[$145>>0] = $146;
    $147 = ($146<<24>>24)==(0);
    if ($147) {
     break;
    } else {
     $$128$i$i104 = $145;$$19$i$i103 = $144;
    }
   }
  }
 }
 $148 = HEAP32[$vc>>2]|0;
 $149 = ((($vc)) + 8|0);
 $150 = HEAP32[$149>>2]|0;
 $151 = $150 << 2;
 $152 = (($151) + 8)|0;
 $153 = (_realloc($148,$152)|0);
 HEAP32[$vc>>2] = $153;
 $154 = ((($vc)) + 4|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = HEAP32[$149>>2]|0;
 $157 = $156 << 2;
 $158 = (($157) + 8)|0;
 $159 = (_realloc($155,$158)|0);
 HEAP32[$154>>2] = $159;
 L89: do {
  if ($78) {
   $$01$lcssa$i50 = $44;
   label = 54;
  } else {
   $$014$i47 = $44;$227 = $45;
   while(1) {
    $160 = HEAP8[$$014$i47>>0]|0;
    $161 = ($160<<24>>24)==(0);
    if ($161) {
     $$pn$i61 = $227;
     break L89;
    }
    $162 = ((($$014$i47)) + 1|0);
    $163 = $162;
    $164 = $163 & 3;
    $165 = ($164|0)==(0);
    if ($165) {
     $$01$lcssa$i50 = $162;
     label = 54;
     break;
    } else {
     $$014$i47 = $162;$227 = $163;
    }
   }
  }
 } while(0);
 if ((label|0) == 54) {
  $w$0$i52 = $$01$lcssa$i50;
  while(1) {
   $166 = HEAP32[$w$0$i52>>2]|0;
   $167 = (($166) + -16843009)|0;
   $168 = $166 & -2139062144;
   $169 = $168 ^ -2139062144;
   $170 = $169 & $167;
   $171 = ($170|0)==(0);
   $172 = ((($w$0$i52)) + 4|0);
   if ($171) {
    $w$0$i52 = $172;
   } else {
    break;
   }
  }
  $173 = $166&255;
  $174 = ($173<<24>>24)==(0);
  if ($174) {
   $$1$lcssa$i58 = $w$0$i52;
  } else {
   $$pn15$i54 = $w$0$i52;
   while(1) {
    $175 = ((($$pn15$i54)) + 1|0);
    $$pre$i55 = HEAP8[$175>>0]|0;
    $176 = ($$pre$i55<<24>>24)==(0);
    if ($176) {
     $$1$lcssa$i58 = $175;
     break;
    } else {
     $$pn15$i54 = $175;
    }
   }
  }
  $177 = $$1$lcssa$i58;
  $$pn$i61 = $177;
 }
 $$0$i62 = (($$pn$i61) - ($45))|0;
 $178 = HEAP32[$149>>2]|0;
 $179 = (($159) + ($178<<2)|0);
 HEAP32[$179>>2] = $$0$i62;
 $180 = (($$0$i62) + 1)|0;
 $181 = (_malloc($180)|0);
 $182 = HEAP32[$vc>>2]|0;
 $183 = (($182) + ($178<<2)|0);
 HEAP32[$183>>2] = $181;
 $184 = HEAP32[$vc>>2]|0;
 $185 = (($184) + ($178<<2)|0);
 $186 = HEAP32[$185>>2]|0;
 $187 = $186;
 $188 = $45 ^ $187;
 $189 = $188 & 3;
 $190 = ($189|0)==(0);
 if ($190) {
  L105: do {
   if ($78) {
    $$0$lcssa$i$i = $44;$$01$lcssa$i$i = $186;
   } else {
    $$0115$i$i = $186;$$016$i$i = $44;
    while(1) {
     $191 = HEAP8[$$016$i$i>>0]|0;
     HEAP8[$$0115$i$i>>0] = $191;
     $192 = ($191<<24>>24)==(0);
     if ($192) {
      break;
     }
     $193 = ((($$016$i$i)) + 1|0);
     $194 = ((($$0115$i$i)) + 1|0);
     $195 = $193;
     $196 = $195 & 3;
     $197 = ($196|0)==(0);
     if ($197) {
      $$0$lcssa$i$i = $193;$$01$lcssa$i$i = $194;
      break L105;
     } else {
      $$0115$i$i = $194;$$016$i$i = $193;
     }
    }
    $219 = HEAP32[$149>>2]|0;
    $220 = (($219) + 1)|0;
    HEAP32[$149>>2] = $220;
    $221 = HEAP32[$vc>>2]|0;
    $222 = (($221) + ($220<<2)|0);
    HEAP32[$222>>2] = 0;
    _free($44);
    return;
   }
  } while(0);
  $198 = HEAP32[$$0$lcssa$i$i>>2]|0;
  $199 = (($198) + -16843009)|0;
  $200 = $198 & -2139062144;
  $201 = $200 ^ -2139062144;
  $202 = $201 & $199;
  $203 = ($202|0)==(0);
  if ($203) {
   $206 = $198;$wd$010$i$i = $$01$lcssa$i$i;$ws$011$i$i = $$0$lcssa$i$i;
   while(1) {
    $204 = ((($ws$011$i$i)) + 4|0);
    $205 = ((($wd$010$i$i)) + 4|0);
    HEAP32[$wd$010$i$i>>2] = $206;
    $207 = HEAP32[$204>>2]|0;
    $208 = (($207) + -16843009)|0;
    $209 = $207 & -2139062144;
    $210 = $209 ^ -2139062144;
    $211 = $210 & $208;
    $212 = ($211|0)==(0);
    if ($212) {
     $206 = $207;$wd$010$i$i = $205;$ws$011$i$i = $204;
    } else {
     $wd$0$lcssa$i$i = $205;$ws$0$lcssa$i$i = $204;
     break;
    }
   }
  } else {
   $wd$0$lcssa$i$i = $$01$lcssa$i$i;$ws$0$lcssa$i$i = $$0$lcssa$i$i;
  }
  $$1$ph$i$i = $ws$0$lcssa$i$i;$$12$ph$i$i = $wd$0$lcssa$i$i;
 } else {
  $$1$ph$i$i = $44;$$12$ph$i$i = $186;
 }
 $213 = HEAP8[$$1$ph$i$i>>0]|0;
 HEAP8[$$12$ph$i$i>>0] = $213;
 $214 = ($213<<24>>24)==(0);
 if ($214) {
  $219 = HEAP32[$149>>2]|0;
  $220 = (($219) + 1)|0;
  HEAP32[$149>>2] = $220;
  $221 = HEAP32[$vc>>2]|0;
  $222 = (($221) + ($220<<2)|0);
  HEAP32[$222>>2] = 0;
  _free($44);
  return;
 } else {
  $$128$i$i = $$12$ph$i$i;$$19$i$i = $$1$ph$i$i;
 }
 while(1) {
  $215 = ((($$19$i$i)) + 1|0);
  $216 = ((($$128$i$i)) + 1|0);
  $217 = HEAP8[$215>>0]|0;
  HEAP8[$216>>0] = $217;
  $218 = ($217<<24>>24)==(0);
  if ($218) {
   break;
  } else {
   $$128$i$i = $216;$$19$i$i = $215;
  }
 }
 $219 = HEAP32[$149>>2]|0;
 $220 = (($219) + 1)|0;
 HEAP32[$149>>2] = $220;
 $221 = HEAP32[$vc>>2]|0;
 $222 = (($221) + ($220<<2)|0);
 HEAP32[$222>>2] = 0;
 _free($44);
 return;
}
function _vorbis_comment_clear($vc) {
 $vc = $vc|0;
 var $$pre = 0, $$pre2 = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($vc|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP32[$vc>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($vc)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)>(0);
  if ($5) {
   $20 = $4;$7 = $1;$i$01 = 0;
   while(1) {
    $6 = (($7) + ($i$01<<2)|0);
    $8 = HEAP32[$6>>2]|0;
    $9 = ($8|0)==(0|0);
    if ($9) {
     $12 = $20;
    } else {
     _free($8);
     $$pre2 = HEAP32[$3>>2]|0;
     $12 = $$pre2;
    }
    $10 = (($i$01) + 1)|0;
    $11 = ($10|0)<($12|0);
    if (!($11)) {
     break;
    }
    $$pre = HEAP32[$vc>>2]|0;
    $20 = $12;$7 = $$pre;$i$01 = $10;
   }
   $$pre3 = HEAP32[$vc>>2]|0;
   $13 = $$pre3;
  } else {
   $13 = $1;
  }
  _free($13);
 }
 $14 = ((($vc)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  _free($15);
 }
 $17 = ((($vc)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if (!($19)) {
  _free($18);
 }
 ;HEAP32[$vc>>2]=0|0;HEAP32[$vc+4>>2]=0|0;HEAP32[$vc+8>>2]=0|0;HEAP32[$vc+12>>2]=0|0;
 return;
}
function _vorbis_info_init($vi) {
 $vi = $vi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$vi>>2]=0|0;HEAP32[$vi+4>>2]=0|0;HEAP32[$vi+8>>2]=0|0;HEAP32[$vi+12>>2]=0|0;HEAP32[$vi+16>>2]=0|0;HEAP32[$vi+20>>2]=0|0;HEAP32[$vi+24>>2]=0|0;
 $0 = (_malloc(3664)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = ((($0)) + -4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3 & 3;
  $5 = ($4|0)==(0);
  if (!($5)) {
   _memset(($0|0),0,3664)|0;
  }
 }
 $6 = ((($vi)) + 28|0);
 HEAP32[$6>>2] = $0;
 return;
}
function _vorbis_info_clear($vi) {
 $vi = $vi|0;
 var $$pre = 0, $$pre1 = 0, $$pre18 = 0, $$pre19 = 0, $$pre20 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$016 = 0, $i$114 = 0, $i$212 = 0, $i$310 = 0, $i$47 = 0, $i$56 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($vi)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  ;HEAP32[$vi>>2]=0|0;HEAP32[$vi+4>>2]=0|0;HEAP32[$vi+8>>2]=0|0;HEAP32[$vi+12>>2]=0|0;HEAP32[$vi+16>>2]=0|0;HEAP32[$vi+20>>2]=0|0;HEAP32[$vi+24>>2]=0|0;HEAP32[$vi+28>>2]=0|0;
  return;
 }
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(0);
 if ($5) {
  $99 = $4;$i$016 = 0;
  while(1) {
   $9 = (((($1)) + 32|0) + ($i$016<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0|0);
   if ($11) {
    $14 = $99;
   } else {
    _free($10);
    $$pre = HEAP32[$3>>2]|0;
    $14 = $$pre;
   }
   $12 = (($i$016) + 1)|0;
   $13 = ($12|0)<($14|0);
   if ($13) {
    $99 = $14;$i$016 = $12;
   } else {
    break;
   }
  }
 }
 $6 = ((($1)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(0);
 if ($8) {
  $100 = $7;$i$114 = 0;
  while(1) {
   $18 = (((($1)) + 544|0) + ($i$114<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(0|0);
   if ($20) {
    $23 = $100;
   } else {
    _free($19);
    $$pre18 = HEAP32[$6>>2]|0;
    $23 = $$pre18;
   }
   $21 = (($i$114) + 1)|0;
   $22 = ($21|0)<($23|0);
   if ($22) {
    $100 = $23;$i$114 = $21;
   } else {
    break;
   }
  }
 }
 $15 = ((($1)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)>(0);
 if ($17) {
  $101 = $16;$i$212 = 0;
  while(1) {
   $27 = (((($1)) + 1056|0) + ($i$212<<2)|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)==(0|0);
   if ($29) {
    $38 = $101;
   } else {
    $30 = (((($1)) + 800|0) + ($i$212<<2)|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (59540 + ($31<<2)|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ((($33)) + 12|0);
    $35 = HEAP32[$34>>2]|0;
    FUNCTION_TABLE_vi[$35 & 31]($28);
    $$pre19 = HEAP32[$15>>2]|0;
    $38 = $$pre19;
   }
   $36 = (($i$212) + 1)|0;
   $37 = ($36|0)<($38|0);
   if ($37) {
    $101 = $38;$i$212 = $36;
   } else {
    break;
   }
  }
 }
 $24 = ((($1)) + 20|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)>(0);
 if ($26) {
  $102 = $25;$i$310 = 0;
  while(1) {
   $43 = (((($1)) + 1568|0) + ($i$310<<2)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==(0|0);
   if ($45) {
    $54 = $102;
   } else {
    $46 = (((($1)) + 1312|0) + ($i$310<<2)|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (59548 + ($47<<2)|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ((($49)) + 12|0);
    $51 = HEAP32[$50>>2]|0;
    FUNCTION_TABLE_vi[$51 & 31]($44);
    $$pre20 = HEAP32[$24>>2]|0;
    $54 = $$pre20;
   }
   $52 = (($i$310) + 1)|0;
   $53 = ($52|0)<($54|0);
   if ($53) {
    $102 = $54;$i$310 = $52;
   } else {
    break;
   }
  }
 }
 $39 = ((($1)) + 24|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)>(0);
 $42 = ((($1)) + 2848|0);
 if ($41) {
  $i$47 = 0;
  while(1) {
   $55 = (((($1)) + 1824|0) + ($i$47<<2)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($56|0)==(0|0);
   if (!($57)) {
    $58 = ((($56)) + 36|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ($59|0)==(0);
    if (!($60)) {
     $61 = ((($56)) + 32|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = ($62|0)==(0|0);
     if (!($63)) {
      _free($62);
     }
     $64 = ((($56)) + 8|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = ($65|0)==(0|0);
     if (!($66)) {
      _free($65);
     }
     _free($56);
    }
   }
   $67 = HEAP32[$42>>2]|0;
   $68 = ($67|0)==(0|0);
   if (!($68)) {
    $69 = (($67) + (($i$47*56)|0)|0);
    $70 = (((($67) + (($i$47*56)|0)|0)) + 16|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71|0)==(0|0);
    if (!($72)) {
     _free($71);
    }
    $73 = (((($67) + (($i$47*56)|0)|0)) + 20|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($74|0)==(0|0);
    if (!($75)) {
     _free($74);
    }
    $76 = (((($67) + (($i$47*56)|0)|0)) + 24|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ($77|0)==(0|0);
    if (!($78)) {
     _free($77);
    }
    $79 = (((($67) + (($i$47*56)|0)|0)) + 28|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ($80|0)==(0|0);
    if (!($81)) {
     _free($80);
    }
    $82 = (((($67) + (($i$47*56)|0)|0)) + 32|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($83|0)==(0|0);
    if (!($84)) {
     _free($83);
    }
    dest=$69; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   }
   $85 = (($i$47) + 1)|0;
   $86 = HEAP32[$39>>2]|0;
   $87 = ($85|0)<($86|0);
   if ($87) {
    $i$47 = $85;
   } else {
    break;
   }
  }
 }
 $88 = HEAP32[$42>>2]|0;
 $89 = ($88|0)==(0|0);
 if (!($89)) {
  _free($88);
 }
 $90 = ((($1)) + 28|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ($91|0)>(0);
 if ($92) {
  $103 = $91;$i$56 = 0;
  while(1) {
   $93 = (((($1)) + 2852|0) + ($i$56<<2)|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = ($94|0)==(0|0);
   if ($95) {
    $98 = $103;
   } else {
    _free($94);
    $$pre1 = HEAP32[$90>>2]|0;
    $98 = $$pre1;
   }
   $96 = (($i$56) + 1)|0;
   $97 = ($96|0)<($98|0);
   if ($97) {
    $103 = $98;$i$56 = $96;
   } else {
    break;
   }
  }
 }
 _free($1);
 ;HEAP32[$vi>>2]=0|0;HEAP32[$vi+4>>2]=0|0;HEAP32[$vi+8>>2]=0|0;HEAP32[$vi+12>>2]=0|0;HEAP32[$vi+16>>2]=0|0;HEAP32[$vi+20>>2]=0|0;HEAP32[$vi+24>>2]=0|0;HEAP32[$vi+28>>2]=0|0;
 return;
}
function _vorbis_analysis_headerout($v,$vc,$op,$op_comm,$op_code) {
 $v = $v|0;
 $vc = $vc|0;
 $op = $op|0;
 $op_comm = $op_comm|0;
 $op_code = $op_code|0;
 var $$0 = 0, $$01$i = 0, $$01$i$i = 0, $$01$i3$i = 0, $$01$i4 = 0, $$012$i2$i = 0, $$012$i6$i = 0, $$03$i1$i = 0, $$03$i5$i = 0, $$cast$i = 0, $$cast$i11 = 0, $$lcssa$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi28Z2D = 0, $$pre$phiZ2D = 0, $$pre27$pre$phiZZ2D = 0, $$pre29 = 0, $$pre43$i = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $acc$02$us$i$i = 0, $acc1$03$us$i$i = 0, $count$0$lcssa$i = 0;
 var $count$08$i = 0, $count$16$i = 0, $count$2$i = 0, $exitcond = 0, $exitcond$i = 0, $exitcond41$i = 0, $i$0$lcssa$i = 0, $i$015$i = 0, $i$029$i = 0, $i$04$us$i$i = 0, $i$09$i = 0, $i$1$lcssa$i = 0, $i$111$i = 0, $i$19$i = 0, $i$2$lcssa$i = 0, $i$222$i = 0, $i$27$i = 0, $i$316$i = 0, $i$33$i = 0, $i$419$i = 0;
 var $i$42$i = 0, $i$54$i = 0, $ispos$i = 0, $j$05$i = 0, $neg$i = 0, $opb = 0, $or$cond$us$i$i = 0, $quantvals$0$i = 0, $ret$0$lcssa$i = 0, $ret$0$lcssa$i$i = 0, $ret$0$lcssa$i6$i = 0, $ret$0$lcssa$i7 = 0, $ret$0$ph = 0, $ret$02$i = 0, $ret$02$i$i = 0, $ret$02$i2$i = 0, $ret$02$i3 = 0, $ret$03 = 0, $vals$0$us$i$i = 0, $vals$1$us$i$i = 0;
 var $vals$1$v$us$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $opb = sp;
 $0 = ((($v)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($v)) + 104|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  ;HEAP32[$op>>2]=0|0;HEAP32[$op+4>>2]=0|0;HEAP32[$op+8>>2]=0|0;HEAP32[$op+12>>2]=0|0;HEAP32[$op+16>>2]=0|0;HEAP32[$op+20>>2]=0|0;HEAP32[$op+24>>2]=0|0;HEAP32[$op+28>>2]=0|0;
  ;HEAP32[$op_comm>>2]=0|0;HEAP32[$op_comm+4>>2]=0|0;HEAP32[$op_comm+8>>2]=0|0;HEAP32[$op_comm+12>>2]=0|0;HEAP32[$op_comm+16>>2]=0|0;HEAP32[$op_comm+20>>2]=0|0;HEAP32[$op_comm+24>>2]=0|0;HEAP32[$op_comm+28>>2]=0|0;
  ;HEAP32[$op_code>>2]=0|0;HEAP32[$op_code+4>>2]=0|0;HEAP32[$op_code+8>>2]=0|0;HEAP32[$op_code+12>>2]=0|0;HEAP32[$op_code+16>>2]=0|0;HEAP32[$op_code+20>>2]=0|0;HEAP32[$op_code+24>>2]=0|0;HEAP32[$op_code+28>>2]=0|0;
  $$0 = -129;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)<(1);
 if ($7) {
  $$pre29 = ((($opb)) + 8|0);
  $$pre27$pre$phiZZ2D = $$pre29;$ret$0$ph = -129;
  label = 92;
 } else {
  ;HEAP32[$opb>>2]=0|0;HEAP32[$opb+4>>2]=0|0;HEAP32[$opb+8>>2]=0|0;HEAP32[$opb+12>>2]=0|0;
  $8 = (_malloc(256)|0);
  $9 = ((($opb)) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = ((($opb)) + 12|0);
  HEAP32[$10>>2] = $8;
  HEAP8[$8>>0] = 0;
  $11 = ((($opb)) + 16|0);
  HEAP32[$11>>2] = 256;
  $12 = ((($1)) + 28|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0|0);
  if ($14) {
   $$pre27$pre$phiZZ2D = $9;$ret$0$ph = -130;
   label = 92;
  } else {
   $15 = HEAP32[$13>>2]|0;
   $16 = ($15|0)<(64);
   if ($16) {
    $$pre27$pre$phiZZ2D = $9;$ret$0$ph = -130;
    label = 92;
   } else {
    $17 = ((($13)) + 4|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)<($15|0);
    if ($19) {
     $$pre27$pre$phiZZ2D = $9;$ret$0$ph = -130;
     label = 92;
    } else {
     _oggpack_write($opb,1,8);
     _oggpack_write($opb,118,8);
     _oggpack_write($opb,111,8);
     _oggpack_write($opb,114,8);
     _oggpack_write($opb,98,8);
     _oggpack_write($opb,105,8);
     _oggpack_write($opb,115,8);
     _oggpack_write($opb,0,32);
     $20 = HEAP32[$5>>2]|0;
     _oggpack_write($opb,$20,8);
     $21 = ((($1)) + 8|0);
     $22 = HEAP32[$21>>2]|0;
     _oggpack_write($opb,$22,32);
     $23 = ((($1)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     _oggpack_write($opb,$24,32);
     $25 = ((($1)) + 16|0);
     $26 = HEAP32[$25>>2]|0;
     _oggpack_write($opb,$26,32);
     $27 = ((($1)) + 20|0);
     $28 = HEAP32[$27>>2]|0;
     _oggpack_write($opb,$28,32);
     $29 = HEAP32[$13>>2]|0;
     $30 = (($29) + -1)|0;
     $31 = ($30|0)==(0);
     if ($31) {
      $ret$0$lcssa$i = 0;
     } else {
      $$01$i = $30;$ret$02$i = 0;
      while(1) {
       $32 = $$01$i >>> 1;
       $33 = (($ret$02$i) + 1)|0;
       $34 = ($32|0)==(0);
       if ($34) {
        $ret$0$lcssa$i = $33;
        break;
       } else {
        $$01$i = $32;$ret$02$i = $33;
       }
      }
     }
     _oggpack_write($opb,$ret$0$lcssa$i,4);
     $35 = HEAP32[$17>>2]|0;
     $36 = (($35) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $ret$0$lcssa$i7 = 0;
     } else {
      $$01$i4 = $36;$ret$02$i3 = 0;
      while(1) {
       $38 = $$01$i4 >>> 1;
       $39 = (($ret$02$i3) + 1)|0;
       $40 = ($38|0)==(0);
       if ($40) {
        $ret$0$lcssa$i7 = $39;
        break;
       } else {
        $$01$i4 = $38;$ret$02$i3 = $39;
       }
      }
     }
     _oggpack_write($opb,$ret$0$lcssa$i7,4);
     _oggpack_write($opb,1,1);
     $41 = ((($3)) + 64|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==(0|0);
     if (!($43)) {
      _free($42);
     }
     $44 = HEAP32[$opb>>2]|0;
     $45 = ((($opb)) + 4|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = (($46) + 7)|0;
     $48 = (($47|0) / 8)&-1;
     $49 = (($48) + ($44))|0;
     $50 = (_malloc($49)|0);
     HEAP32[$41>>2] = $50;
     $51 = HEAP32[$9>>2]|0;
     $52 = HEAP32[$opb>>2]|0;
     $53 = HEAP32[$45>>2]|0;
     $54 = (($53) + 7)|0;
     $55 = (($54|0) / 8)&-1;
     $56 = (($55) + ($52))|0;
     _memcpy(($50|0),($51|0),($56|0))|0;
     $57 = HEAP32[$41>>2]|0;
     HEAP32[$op>>2] = $57;
     $58 = HEAP32[$opb>>2]|0;
     $59 = HEAP32[$45>>2]|0;
     $60 = (($59) + 7)|0;
     $61 = (($60|0) / 8)&-1;
     $62 = (($61) + ($58))|0;
     $63 = ((($op)) + 4|0);
     HEAP32[$63>>2] = $62;
     $64 = ((($op)) + 8|0);
     HEAP32[$64>>2] = 1;
     $65 = ((($op)) + 12|0);
     ;HEAP32[$65>>2]=0|0;HEAP32[$65+4>>2]=0|0;HEAP32[$65+8>>2]=0|0;HEAP32[$65+12>>2]=0|0;HEAP32[$65+16>>2]=0|0;
     $66 = HEAP32[$10>>2]|0;
     $67 = ($66|0)==(0|0);
     if (!($67)) {
      $68 = HEAP32[$9>>2]|0;
      HEAP32[$10>>2] = $68;
      $$cast$i = $68;
      HEAP8[$$cast$i>>0] = 0;
      HEAP32[$opb>>2] = 0;
      HEAP32[$45>>2] = 0;
     }
     _oggpack_write($opb,3,8);
     _oggpack_write($opb,118,8);
     _oggpack_write($opb,111,8);
     _oggpack_write($opb,114,8);
     _oggpack_write($opb,98,8);
     _oggpack_write($opb,105,8);
     _oggpack_write($opb,115,8);
     _oggpack_write($opb,44,32);
     $$012$i2$i = 224552;$$03$i1$i = 44;
     while(1) {
      $69 = (($$03$i1$i) + -1)|0;
      $70 = ((($$012$i2$i)) + 1|0);
      $71 = HEAP8[$$012$i2$i>>0]|0;
      $72 = $71 << 24 >> 24;
      _oggpack_write($opb,$72,8);
      $73 = ($69|0)==(0);
      if ($73) {
       break;
      } else {
       $$012$i2$i = $70;$$03$i1$i = $69;
      }
     }
     $74 = ((($vc)) + 8|0);
     $75 = HEAP32[$74>>2]|0;
     _oggpack_write($opb,$75,32);
     $76 = HEAP32[$74>>2]|0;
     $77 = ($76|0)>(0);
     if ($77) {
      $78 = ((($vc)) + 4|0);
      $i$09$i = 0;
      while(1) {
       $79 = HEAP32[$vc>>2]|0;
       $80 = (($79) + ($i$09$i<<2)|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==(0|0);
       if ($82) {
        _oggpack_write($opb,0,32);
       } else {
        $83 = HEAP32[$78>>2]|0;
        $84 = (($83) + ($i$09$i<<2)|0);
        $85 = HEAP32[$84>>2]|0;
        _oggpack_write($opb,$85,32);
        $86 = HEAP32[$78>>2]|0;
        $87 = (($86) + ($i$09$i<<2)|0);
        $88 = HEAP32[$87>>2]|0;
        $89 = ($88|0)==(0);
        if (!($89)) {
         $90 = HEAP32[$vc>>2]|0;
         $91 = (($90) + ($i$09$i<<2)|0);
         $92 = HEAP32[$91>>2]|0;
         $$012$i6$i = $92;$$03$i5$i = $88;
         while(1) {
          $93 = (($$03$i5$i) + -1)|0;
          $94 = ((($$012$i6$i)) + 1|0);
          $95 = HEAP8[$$012$i6$i>>0]|0;
          $96 = $95 << 24 >> 24;
          _oggpack_write($opb,$96,8);
          $97 = ($93|0)==(0);
          if ($97) {
           break;
          } else {
           $$012$i6$i = $94;$$03$i5$i = $93;
          }
         }
        }
       }
       $98 = (($i$09$i) + 1)|0;
       $99 = HEAP32[$74>>2]|0;
       $100 = ($98|0)<($99|0);
       if ($100) {
        $i$09$i = $98;
       } else {
        break;
       }
      }
     }
     _oggpack_write($opb,1,1);
     $101 = ((($3)) + 68|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = ($102|0)==(0|0);
     if (!($103)) {
      _free($102);
     }
     $104 = HEAP32[$opb>>2]|0;
     $105 = HEAP32[$45>>2]|0;
     $106 = (($105) + 7)|0;
     $107 = (($106|0) / 8)&-1;
     $108 = (($107) + ($104))|0;
     $109 = (_malloc($108)|0);
     HEAP32[$101>>2] = $109;
     $110 = HEAP32[$9>>2]|0;
     $111 = HEAP32[$opb>>2]|0;
     $112 = HEAP32[$45>>2]|0;
     $113 = (($112) + 7)|0;
     $114 = (($113|0) / 8)&-1;
     $115 = (($114) + ($111))|0;
     _memcpy(($109|0),($110|0),($115|0))|0;
     $116 = HEAP32[$101>>2]|0;
     HEAP32[$op_comm>>2] = $116;
     $117 = HEAP32[$opb>>2]|0;
     $118 = HEAP32[$45>>2]|0;
     $119 = (($118) + 7)|0;
     $120 = (($119|0) / 8)&-1;
     $121 = (($120) + ($117))|0;
     $122 = ((($op_comm)) + 4|0);
     HEAP32[$122>>2] = $121;
     $123 = ((($op_comm)) + 8|0);
     $124 = ((($op_comm)) + 24|0);
     ;HEAP32[$123>>2]=0|0;HEAP32[$123+4>>2]=0|0;HEAP32[$123+8>>2]=0|0;HEAP32[$123+12>>2]=0|0;
     $125 = $124;
     $126 = $125;
     HEAP32[$126>>2] = 1;
     $127 = (($125) + 4)|0;
     $128 = $127;
     HEAP32[$128>>2] = 0;
     $129 = HEAP32[$10>>2]|0;
     $130 = ($129|0)==(0|0);
     if (!($130)) {
      $131 = HEAP32[$9>>2]|0;
      HEAP32[$10>>2] = $131;
      $$cast$i11 = $131;
      HEAP8[$$cast$i11>>0] = 0;
      HEAP32[$opb>>2] = 0;
      HEAP32[$45>>2] = 0;
     }
     $132 = HEAP32[$12>>2]|0;
     $133 = ($132|0)==(0|0);
     L46: do {
      if (!($133)) {
       _oggpack_write($opb,5,8);
       _oggpack_write($opb,118,8);
       _oggpack_write($opb,111,8);
       _oggpack_write($opb,114,8);
       _oggpack_write($opb,98,8);
       _oggpack_write($opb,105,8);
       _oggpack_write($opb,115,8);
       $134 = ((($132)) + 24|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = (($135) + -1)|0;
       _oggpack_write($opb,$136,8);
       $137 = HEAP32[$134>>2]|0;
       $138 = ($137|0)>(0);
       L48: do {
        if ($138) {
         $i$015$i = 0;
         L49: while(1) {
          $142 = (((($132)) + 1824|0) + ($i$015$i<<2)|0);
          $143 = HEAP32[$142>>2]|0;
          _oggpack_write($opb,5653314,24);
          $144 = HEAP32[$143>>2]|0;
          _oggpack_write($opb,$144,16);
          $145 = ((($143)) + 4|0);
          $146 = HEAP32[$145>>2]|0;
          _oggpack_write($opb,$146,24);
          $147 = HEAP32[$145>>2]|0;
          $148 = ($147|0)>(1);
          L51: do {
           if ($148) {
            $149 = ((($143)) + 8|0);
            $150 = HEAP32[$149>>2]|0;
            $$pre$i = HEAP8[$150>>0]|0;
            $151 = $$pre$i;$i$029$i = 1;
            while(1) {
             $152 = ($151<<24>>24)==(0);
             if ($152) {
              $i$0$lcssa$i = $i$029$i;
              break L51;
             }
             $153 = (($150) + ($i$029$i)|0);
             $154 = HEAP8[$153>>0]|0;
             $155 = ($154<<24>>24)<($151<<24>>24);
             if ($155) {
              $i$0$lcssa$i = $i$029$i;
              break L51;
             }
             $156 = (($i$029$i) + 1)|0;
             $157 = ($156|0)<($147|0);
             if ($157) {
              $151 = $154;$i$029$i = $156;
             } else {
              $i$0$lcssa$i = $156;
              break;
             }
            }
           } else {
            $i$0$lcssa$i = 1;
           }
          } while(0);
          $158 = ($i$0$lcssa$i|0)==($147|0);
          L58: do {
           if ($158) {
            _oggpack_write($opb,1,1);
            $159 = ((($143)) + 8|0);
            $160 = HEAP32[$159>>2]|0;
            $161 = HEAP8[$160>>0]|0;
            $162 = $161 << 24 >> 24;
            $163 = (($162) + -1)|0;
            _oggpack_write($opb,$163,5);
            $164 = HEAP32[$145>>2]|0;
            $165 = ($164|0)>(1);
            if ($165) {
             $377 = $164;$count$08$i = 0;$i$19$i = 1;
             while(1) {
              $166 = HEAP32[$159>>2]|0;
              $167 = (($166) + ($i$19$i)|0);
              $168 = HEAP8[$167>>0]|0;
              $169 = (($i$19$i) + -1)|0;
              $170 = (($166) + ($169)|0);
              $171 = HEAP8[$170>>0]|0;
              $172 = ($168<<24>>24)>($171<<24>>24);
              if ($172) {
               $173 = $171 << 24 >> 24;
               $174 = $168 << 24 >> 24;
               $176 = $377;$count$16$i = $count$08$i;$j$05$i = $173;
               while(1) {
                $175 = (($i$19$i) - ($count$16$i))|0;
                $177 = ($176|0)==($count$16$i|0);
                if ($177) {
                 $ret$0$lcssa$i$i = 0;
                } else {
                 $178 = (($176) - ($count$16$i))|0;
                 $$01$i$i = $178;$ret$02$i$i = 0;
                 while(1) {
                  $179 = $$01$i$i >>> 1;
                  $180 = (($ret$02$i$i) + 1)|0;
                  $181 = ($179|0)==(0);
                  if ($181) {
                   $ret$0$lcssa$i$i = $180;
                   break;
                  } else {
                   $$01$i$i = $179;$ret$02$i$i = $180;
                  }
                 }
                }
                _oggpack_write($opb,$175,$ret$0$lcssa$i$i);
                $182 = (($j$05$i) + 1)|0;
                $exitcond41$i = ($182|0)==($174|0);
                $$pre43$i = HEAP32[$145>>2]|0;
                if ($exitcond41$i) {
                 $185 = $$pre43$i;$count$2$i = $i$19$i;
                 break;
                } else {
                 $176 = $$pre43$i;$count$16$i = $i$19$i;$j$05$i = $182;
                }
               }
              } else {
               $185 = $377;$count$2$i = $count$08$i;
              }
              $183 = (($i$19$i) + 1)|0;
              $184 = ($183|0)<($185|0);
              if ($184) {
               $377 = $185;$count$08$i = $count$2$i;$i$19$i = $183;
              } else {
               $$lcssa$i = $185;$count$0$lcssa$i = $count$2$i;$i$1$lcssa$i = $183;
               break;
              }
             }
            } else {
             $$lcssa$i = $164;$count$0$lcssa$i = 0;$i$1$lcssa$i = 1;
            }
            $186 = (($i$1$lcssa$i) - ($count$0$lcssa$i))|0;
            $187 = ($$lcssa$i|0)==($count$0$lcssa$i|0);
            if ($187) {
             $ret$0$lcssa$i6$i = 0;
            } else {
             $188 = (($$lcssa$i) - ($count$0$lcssa$i))|0;
             $$01$i3$i = $188;$ret$02$i2$i = 0;
             while(1) {
              $189 = $$01$i3$i >>> 1;
              $190 = (($ret$02$i2$i) + 1)|0;
              $191 = ($189|0)==(0);
              if ($191) {
               $ret$0$lcssa$i6$i = $190;
               break;
              } else {
               $$01$i3$i = $189;$ret$02$i2$i = $190;
              }
             }
            }
            _oggpack_write($opb,$186,$ret$0$lcssa$i6$i);
           } else {
            _oggpack_write($opb,0,1);
            $192 = HEAP32[$145>>2]|0;
            $193 = ($192|0)>(0);
            L80: do {
             if ($193) {
              $194 = ((($143)) + 8|0);
              $195 = HEAP32[$194>>2]|0;
              $i$222$i = 0;
              while(1) {
               $196 = (($195) + ($i$222$i)|0);
               $197 = HEAP8[$196>>0]|0;
               $198 = ($197<<24>>24)==(0);
               if ($198) {
                $i$2$lcssa$i = $i$222$i;
                break L80;
               }
               $199 = (($i$222$i) + 1)|0;
               $200 = ($199|0)<($192|0);
               if ($200) {
                $i$222$i = $199;
               } else {
                $i$2$lcssa$i = $199;
                break;
               }
              }
             } else {
              $i$2$lcssa$i = 0;
             }
            } while(0);
            $201 = ($i$2$lcssa$i|0)==($192|0);
            if ($201) {
             _oggpack_write($opb,0,1);
             $202 = HEAP32[$145>>2]|0;
             $203 = ($202|0)>(0);
             if (!($203)) {
              break;
             }
             $204 = ((($143)) + 8|0);
             $i$316$i = 0;
             while(1) {
              $205 = HEAP32[$204>>2]|0;
              $206 = (($205) + ($i$316$i)|0);
              $207 = HEAP8[$206>>0]|0;
              $208 = $207 << 24 >> 24;
              $209 = (($208) + -1)|0;
              _oggpack_write($opb,$209,5);
              $210 = (($i$316$i) + 1)|0;
              $211 = HEAP32[$145>>2]|0;
              $212 = ($210|0)<($211|0);
              if ($212) {
               $i$316$i = $210;
              } else {
               break L58;
              }
             }
            }
            _oggpack_write($opb,1,1);
            $213 = HEAP32[$145>>2]|0;
            $214 = ($213|0)>(0);
            if (!($214)) {
             break;
            }
            $215 = ((($143)) + 8|0);
            $i$419$i = 0;
            while(1) {
             $216 = HEAP32[$215>>2]|0;
             $217 = (($216) + ($i$419$i)|0);
             $218 = HEAP8[$217>>0]|0;
             $219 = ($218<<24>>24)==(0);
             if ($219) {
              _oggpack_write($opb,0,1);
             } else {
              _oggpack_write($opb,1,1);
              $220 = HEAP32[$215>>2]|0;
              $221 = (($220) + ($i$419$i)|0);
              $222 = HEAP8[$221>>0]|0;
              $223 = $222 << 24 >> 24;
              $224 = (($223) + -1)|0;
              _oggpack_write($opb,$224,5);
             }
             $225 = (($i$419$i) + 1)|0;
             $226 = HEAP32[$145>>2]|0;
             $227 = ($225|0)<($226|0);
             if ($227) {
              $i$419$i = $225;
             } else {
              break;
             }
            }
           }
          } while(0);
          $228 = ((($143)) + 12|0);
          $229 = HEAP32[$228>>2]|0;
          _oggpack_write($opb,$229,4);
          $230 = HEAP32[$228>>2]|0;
          L100: do {
           switch ($230|0) {
           case 0:  {
            break;
           }
           case 2: case 1:  {
            $231 = ((($143)) + 32|0);
            $232 = HEAP32[$231>>2]|0;
            $233 = ($232|0)==(0|0);
            if ($233) {
             break L46;
            }
            $234 = ((($143)) + 16|0);
            $235 = HEAP32[$234>>2]|0;
            _oggpack_write($opb,$235,32);
            $236 = ((($143)) + 20|0);
            $237 = HEAP32[$236>>2]|0;
            _oggpack_write($opb,$237,32);
            $238 = ((($143)) + 24|0);
            $239 = HEAP32[$238>>2]|0;
            $240 = (($239) + -1)|0;
            _oggpack_write($opb,$240,4);
            $241 = ((($143)) + 28|0);
            $242 = HEAP32[$241>>2]|0;
            _oggpack_write($opb,$242,1);
            $243 = HEAP32[$228>>2]|0;
            L103: do {
             switch ($243|0) {
             case 1:  {
              $244 = HEAP32[$145>>2]|0;
              $245 = HEAP32[$143>>2]|0;
              $246 = ($245|0)>(0);
              if (!($246)) {
               break L49;
              }
              $247 = (+($244|0));
              $248 = $247;
              $249 = (+($245|0));
              $250 = 1.0 / $249;
              $251 = $250;
              $252 = (+Math_pow((+$248),(+$251)));
              $253 = (+Math_floor((+$252)));
              $254 = (~~(($253)));
              $vals$0$us$i$i = $254;
              while(1) {
               $258 = (($vals$0$us$i$i) + 1)|0;
               $acc$02$us$i$i = 1;$acc1$03$us$i$i = 1;$i$04$us$i$i = 0;
               while(1) {
                $255 = Math_imul($acc$02$us$i$i, $vals$0$us$i$i)|0;
                $257 = Math_imul($acc1$03$us$i$i, $258)|0;
                $259 = (($i$04$us$i$i) + 1)|0;
                $exitcond = ($259|0)==($245|0);
                if ($exitcond) {
                 break;
                } else {
                 $acc$02$us$i$i = $255;$acc1$03$us$i$i = $257;$i$04$us$i$i = $259;
                }
               }
               $260 = ($255|0)<=($244|0);
               $261 = ($257|0)>($244|0);
               $or$cond$us$i$i = $260 & $261;
               if ($or$cond$us$i$i) {
                $quantvals$0$i = $vals$0$us$i$i;
                break L103;
               }
               $256 = ($255|0)>($244|0);
               $vals$1$v$us$i$i = $256 ? -1 : 1;
               $vals$1$us$i$i = (($vals$1$v$us$i$i) + ($vals$0$us$i$i))|0;
               $vals$0$us$i$i = $vals$1$us$i$i;
              }
              break;
             }
             case 2:  {
              $262 = HEAP32[$145>>2]|0;
              $263 = HEAP32[$143>>2]|0;
              $264 = Math_imul($263, $262)|0;
              $quantvals$0$i = $264;
              break;
             }
             default: {
              break L100;
             }
             }
            } while(0);
            $265 = ($quantvals$0$i|0)>(0);
            if ($265) {
             $i$54$i = 0;
            } else {
             break L100;
            }
            while(1) {
             $266 = HEAP32[$231>>2]|0;
             $267 = (($266) + ($i$54$i<<2)|0);
             $268 = HEAP32[$267>>2]|0;
             $ispos$i = ($268|0)>(-1);
             $neg$i = (0 - ($268))|0;
             $269 = $ispos$i ? $268 : $neg$i;
             $270 = HEAP32[$238>>2]|0;
             _oggpack_write($opb,$269,$270);
             $271 = (($i$54$i) + 1)|0;
             $exitcond$i = ($271|0)==($quantvals$0$i|0);
             if ($exitcond$i) {
              break;
             } else {
              $i$54$i = $271;
             }
            }
            break;
           }
           default: {
            break L46;
           }
           }
          } while(0);
          $139 = (($i$015$i) + 1)|0;
          $140 = HEAP32[$134>>2]|0;
          $141 = ($139|0)<($140|0);
          if ($141) {
           $i$015$i = $139;
          } else {
           break L48;
          }
         }
         while(1) {
         }
        }
       } while(0);
       _oggpack_write($opb,0,6);
       _oggpack_write($opb,0,16);
       $272 = ((($132)) + 16|0);
       $273 = HEAP32[$272>>2]|0;
       $274 = (($273) + -1)|0;
       _oggpack_write($opb,$274,6);
       $275 = HEAP32[$272>>2]|0;
       $276 = ($275|0)>(0);
       if ($276) {
        $i$111$i = 0;
        while(1) {
         $277 = (((($132)) + 800|0) + ($i$111$i<<2)|0);
         $278 = HEAP32[$277>>2]|0;
         _oggpack_write($opb,$278,16);
         $279 = HEAP32[$277>>2]|0;
         $280 = (59540 + ($279<<2)|0);
         $281 = HEAP32[$280>>2]|0;
         $282 = HEAP32[$281>>2]|0;
         $283 = ($282|0)==(0|0);
         if ($283) {
          break L46;
         }
         $284 = (((($132)) + 1056|0) + ($i$111$i<<2)|0);
         $285 = HEAP32[$284>>2]|0;
         FUNCTION_TABLE_vii[$282 & 31]($285,$opb);
         $286 = (($i$111$i) + 1)|0;
         $287 = HEAP32[$272>>2]|0;
         $288 = ($286|0)<($287|0);
         if ($288) {
          $i$111$i = $286;
         } else {
          break;
         }
        }
       }
       $289 = ((($132)) + 20|0);
       $290 = HEAP32[$289>>2]|0;
       $291 = (($290) + -1)|0;
       _oggpack_write($opb,$291,6);
       $292 = HEAP32[$289>>2]|0;
       $293 = ($292|0)>(0);
       if ($293) {
        $i$27$i = 0;
        while(1) {
         $294 = (((($132)) + 1312|0) + ($i$27$i<<2)|0);
         $295 = HEAP32[$294>>2]|0;
         _oggpack_write($opb,$295,16);
         $296 = HEAP32[$294>>2]|0;
         $297 = (59548 + ($296<<2)|0);
         $298 = HEAP32[$297>>2]|0;
         $299 = HEAP32[$298>>2]|0;
         $300 = (((($132)) + 1568|0) + ($i$27$i<<2)|0);
         $301 = HEAP32[$300>>2]|0;
         FUNCTION_TABLE_vii[$299 & 31]($301,$opb);
         $302 = (($i$27$i) + 1)|0;
         $303 = HEAP32[$289>>2]|0;
         $304 = ($302|0)<($303|0);
         if ($304) {
          $i$27$i = $302;
         } else {
          break;
         }
        }
       }
       $305 = ((($132)) + 12|0);
       $306 = HEAP32[$305>>2]|0;
       $307 = (($306) + -1)|0;
       _oggpack_write($opb,$307,6);
       $308 = HEAP32[$305>>2]|0;
       $309 = ($308|0)>(0);
       if ($309) {
        $i$33$i = 0;
        while(1) {
         $310 = (((($132)) + 288|0) + ($i$33$i<<2)|0);
         $311 = HEAP32[$310>>2]|0;
         _oggpack_write($opb,$311,16);
         $312 = (((($132)) + 544|0) + ($i$33$i<<2)|0);
         $313 = HEAP32[$312>>2]|0;
         _mapping0_pack($1,$313,$opb);
         $314 = (($i$33$i) + 1)|0;
         $315 = HEAP32[$305>>2]|0;
         $316 = ($314|0)<($315|0);
         if ($316) {
          $i$33$i = $314;
         } else {
          break;
         }
        }
       }
       $317 = ((($132)) + 8|0);
       $318 = HEAP32[$317>>2]|0;
       $319 = (($318) + -1)|0;
       _oggpack_write($opb,$319,6);
       $320 = HEAP32[$317>>2]|0;
       $321 = ($320|0)>(0);
       if ($321) {
        $i$42$i = 0;
        while(1) {
         $322 = (((($132)) + 32|0) + ($i$42$i<<2)|0);
         $323 = HEAP32[$322>>2]|0;
         $324 = HEAP32[$323>>2]|0;
         _oggpack_write($opb,$324,1);
         $325 = HEAP32[$322>>2]|0;
         $326 = ((($325)) + 4|0);
         $327 = HEAP32[$326>>2]|0;
         _oggpack_write($opb,$327,16);
         $328 = HEAP32[$322>>2]|0;
         $329 = ((($328)) + 8|0);
         $330 = HEAP32[$329>>2]|0;
         _oggpack_write($opb,$330,16);
         $331 = HEAP32[$322>>2]|0;
         $332 = ((($331)) + 12|0);
         $333 = HEAP32[$332>>2]|0;
         _oggpack_write($opb,$333,8);
         $334 = (($i$42$i) + 1)|0;
         $335 = HEAP32[$317>>2]|0;
         $336 = ($334|0)<($335|0);
         if ($336) {
          $i$42$i = $334;
         } else {
          break;
         }
        }
       }
       _oggpack_write($opb,1,1);
       $337 = ((($3)) + 72|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        _free($338);
       }
       $340 = HEAP32[$opb>>2]|0;
       $341 = HEAP32[$45>>2]|0;
       $342 = (($341) + 7)|0;
       $343 = (($342|0) / 8)&-1;
       $344 = (($343) + ($340))|0;
       $345 = (_malloc($344)|0);
       HEAP32[$337>>2] = $345;
       $346 = HEAP32[$9>>2]|0;
       $347 = HEAP32[$opb>>2]|0;
       $348 = HEAP32[$45>>2]|0;
       $349 = (($348) + 7)|0;
       $350 = (($349|0) / 8)&-1;
       $351 = (($350) + ($347))|0;
       _memcpy(($345|0),($346|0),($351|0))|0;
       $352 = HEAP32[$337>>2]|0;
       HEAP32[$op_code>>2] = $352;
       $353 = HEAP32[$opb>>2]|0;
       $354 = HEAP32[$45>>2]|0;
       $355 = (($354) + 7)|0;
       $356 = (($355|0) / 8)&-1;
       $357 = (($356) + ($353))|0;
       $358 = ((($op_code)) + 4|0);
       HEAP32[$358>>2] = $357;
       $359 = ((($op_code)) + 8|0);
       $360 = ((($op_code)) + 24|0);
       ;HEAP32[$359>>2]=0|0;HEAP32[$359+4>>2]=0|0;HEAP32[$359+8>>2]=0|0;HEAP32[$359+12>>2]=0|0;
       $361 = $360;
       $362 = $361;
       HEAP32[$362>>2] = 2;
       $363 = (($361) + 4)|0;
       $364 = $363;
       HEAP32[$364>>2] = 0;
       $365 = HEAP32[$9>>2]|0;
       $366 = ($365|0)==(0|0);
       if (!($366)) {
        _free($365);
       }
       ;HEAP32[$opb>>2]=0|0;HEAP32[$opb+4>>2]=0|0;HEAP32[$opb+8>>2]=0|0;HEAP32[$opb+12>>2]=0|0;HEAP32[$opb+16>>2]=0|0;
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
     } while(0);
     ;HEAP32[$op>>2]=0|0;HEAP32[$op+4>>2]=0|0;HEAP32[$op+8>>2]=0|0;HEAP32[$op+12>>2]=0|0;HEAP32[$op+16>>2]=0|0;HEAP32[$op+20>>2]=0|0;HEAP32[$op+24>>2]=0|0;HEAP32[$op+28>>2]=0|0;
     ;HEAP32[$op_comm>>2]=0|0;HEAP32[$op_comm+4>>2]=0|0;HEAP32[$op_comm+8>>2]=0|0;HEAP32[$op_comm+12>>2]=0|0;HEAP32[$op_comm+16>>2]=0|0;HEAP32[$op_comm+20>>2]=0|0;HEAP32[$op_comm+24>>2]=0|0;HEAP32[$op_comm+28>>2]=0|0;
     ;HEAP32[$op_code>>2]=0|0;HEAP32[$op_code+4>>2]=0|0;HEAP32[$op_code+8>>2]=0|0;HEAP32[$op_code+12>>2]=0|0;HEAP32[$op_code+16>>2]=0|0;HEAP32[$op_code+20>>2]=0|0;HEAP32[$op_code+24>>2]=0|0;HEAP32[$op_code+28>>2]=0|0;
     $$pre$phi28Z2D = $9;$$pre$phiZ2D = $41;$ret$03 = -130;
    }
   }
  }
 }
 if ((label|0) == 92) {
  ;HEAP32[$op>>2]=0|0;HEAP32[$op+4>>2]=0|0;HEAP32[$op+8>>2]=0|0;HEAP32[$op+12>>2]=0|0;HEAP32[$op+16>>2]=0|0;HEAP32[$op+20>>2]=0|0;HEAP32[$op+24>>2]=0|0;HEAP32[$op+28>>2]=0|0;
  ;HEAP32[$op_comm>>2]=0|0;HEAP32[$op_comm+4>>2]=0|0;HEAP32[$op_comm+8>>2]=0|0;HEAP32[$op_comm+12>>2]=0|0;HEAP32[$op_comm+16>>2]=0|0;HEAP32[$op_comm+20>>2]=0|0;HEAP32[$op_comm+24>>2]=0|0;HEAP32[$op_comm+28>>2]=0|0;
  ;HEAP32[$op_code>>2]=0|0;HEAP32[$op_code+4>>2]=0|0;HEAP32[$op_code+8>>2]=0|0;HEAP32[$op_code+12>>2]=0|0;HEAP32[$op_code+16>>2]=0|0;HEAP32[$op_code+20>>2]=0|0;HEAP32[$op_code+24>>2]=0|0;HEAP32[$op_code+28>>2]=0|0;
  $$pre = ((($3)) + 64|0);
  $$pre$phi28Z2D = $$pre27$pre$phiZZ2D;$$pre$phiZ2D = $$pre;$ret$03 = $ret$0$ph;
 }
 $367 = HEAP32[$$pre$phi28Z2D>>2]|0;
 $368 = ($367|0)==(0|0);
 if (!($368)) {
  _free($367);
 }
 ;HEAP32[$opb>>2]=0|0;HEAP32[$opb+4>>2]=0|0;HEAP32[$opb+8>>2]=0|0;HEAP32[$opb+12>>2]=0|0;HEAP32[$opb+16>>2]=0|0;
 $369 = HEAP32[$$pre$phiZ2D>>2]|0;
 $370 = ($369|0)==(0|0);
 if (!($370)) {
  _free($369);
 }
 $371 = ((($3)) + 68|0);
 $372 = HEAP32[$371>>2]|0;
 $373 = ($372|0)==(0|0);
 if (!($373)) {
  _free($372);
 }
 $374 = ((($3)) + 72|0);
 $375 = HEAP32[$374>>2]|0;
 $376 = ($375|0)==(0|0);
 if (!($376)) {
  _free($375);
 }
 HEAP32[$$pre$phiZ2D>>2] = 0;
 HEAP32[$371>>2] = 0;
 HEAP32[$374>>2] = 0;
 $$0 = $ret$03;
 STACKTOP = sp;return ($$0|0);
}
function _decode_packed_entry_number($book,$b) {
 $book = $book|0;
 $b = $b|0;
 var $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $hi$1 = 0, $hi$25 = 0, $lo$1 = 0, $lo$2$lcssa = 0, $lo$26 = 0, $lok$0$lcssa = 0, $read$0$lcssa = 0, $read$07 = 0, $storemerge$i = 0, $storemerge$i1 = 0, $storemerge$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($book)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($book)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_oggpack_look($b,$3)|0);
 $5 = ($4|0)>(-1);
 do {
  if ($5) {
   $6 = ((($book)) + 32|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($7) + ($4<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)<(0);
   if ($10) {
    $11 = $9 >>> 15;
    $12 = $11 & 32767;
    $13 = ((($book)) + 8|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $9 & 32767;
    $16 = (($14) - ($15))|0;
    $hi$1 = $16;$lo$1 = $12;
    break;
   }
   $17 = (($9) + -1)|0;
   $18 = ((($book)) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + ($17)|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = ((($b)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + ($22))|0;
   $26 = HEAP32[$b>>2]|0;
   $27 = ((($b)) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($25) + 7)|0;
   $30 = $29 >> 3;
   $31 = (($28) - ($30))|0;
   $32 = ($26|0)>($31|0);
   if ($32) {
    $39 = ((($b)) + 12|0);
    HEAP32[$39>>2] = 0;
    HEAP32[$b>>2] = $28;
    $storemerge$i = 1;
   } else {
    $33 = (($25|0) / 8)&-1;
    $34 = ((($b)) + 12|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = (($35) + ($33)|0);
    HEAP32[$34>>2] = $36;
    $37 = (($26) + ($33))|0;
    HEAP32[$b>>2] = $37;
    $38 = $25 & 7;
    $storemerge$i = $38;
   }
   HEAP32[$23>>2] = $storemerge$i;
   $$3 = $17;
   return ($$3|0);
  } else {
   $40 = ((($book)) + 8|0);
   $41 = HEAP32[$40>>2]|0;
   $hi$1 = $41;$lo$1 = 0;
  }
 } while(0);
 $42 = (_oggpack_look($b,$1)|0);
 $43 = ($42|0)<(0);
 $44 = ($1|0)>(1);
 $45 = $43 & $44;
 if ($45) {
  $read$07 = $1;
  while(1) {
   $46 = (($read$07) + -1)|0;
   $47 = (_oggpack_look($b,$46)|0);
   $48 = ($47|0)<(0);
   $49 = ($46|0)>(1);
   $50 = $48 & $49;
   if ($50) {
    $read$07 = $46;
   } else {
    $$lcssa = $48;$lok$0$lcssa = $47;$read$0$lcssa = $46;
    break;
   }
  }
 } else {
  $$lcssa = $43;$lok$0$lcssa = $42;$read$0$lcssa = $1;
 }
 if ($$lcssa) {
  $$3 = -1;
  return ($$3|0);
 }
 $51 = (_llvm_bswap_i32(($lok$0$lcssa|0))|0);
 $52 = $51 >>> 4;
 $53 = $52 & 252645135;
 $54 = $51 << 4;
 $55 = $54 & -252645136;
 $56 = $53 | $55;
 $57 = $56 >>> 2;
 $58 = $57 & 858993459;
 $59 = $56 << 2;
 $60 = $59 & -858993460;
 $61 = $58 | $60;
 $62 = $61 >>> 1;
 $63 = $62 & 1431655765;
 $64 = $61 << 1;
 $65 = $64 & -1431655766;
 $66 = $63 | $65;
 $67 = (($hi$1) - ($lo$1))|0;
 $68 = ($67|0)>(1);
 if ($68) {
  $69 = ((($book)) + 20|0);
  $70 = HEAP32[$69>>2]|0;
  $72 = $67;$hi$25 = $hi$1;$lo$26 = $lo$1;
  while(1) {
   $71 = $72 >> 1;
   $73 = (($71) + ($lo$26))|0;
   $74 = (($70) + ($73<<2)|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = ($75>>>0)>($66>>>0);
   $77 = $76 ? 0 : $71;
   $78 = (($77) + ($lo$26))|0;
   $79 = $76 ? $71 : 0;
   $80 = (($hi$25) - ($79))|0;
   $81 = (($80) - ($78))|0;
   $82 = ($81|0)>(1);
   if ($82) {
    $72 = $81;$hi$25 = $80;$lo$26 = $78;
   } else {
    $lo$2$lcssa = $78;
    break;
   }
  }
 } else {
  $lo$2$lcssa = $lo$1;
 }
 $83 = ((($book)) + 28|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (($84) + ($lo$2$lcssa)|0);
 $86 = HEAP8[$85>>0]|0;
 $87 = $86 << 24 >> 24;
 $88 = ($87|0)>($read$0$lcssa|0);
 $89 = ((($b)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 if ($88) {
  $106 = (($90) + ($read$0$lcssa))|0;
  $107 = HEAP32[$b>>2]|0;
  $108 = ((($b)) + 16|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = (($106) + 7)|0;
  $111 = $110 >> 3;
  $112 = (($109) - ($111))|0;
  $113 = ($107|0)>($112|0);
  if ($113) {
   $120 = ((($b)) + 12|0);
   HEAP32[$120>>2] = 0;
   HEAP32[$b>>2] = $109;
   $storemerge$i1 = 1;
  } else {
   $114 = (($106|0) / 8)&-1;
   $115 = ((($b)) + 12|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (($116) + ($114)|0);
   HEAP32[$115>>2] = $117;
   $118 = (($107) + ($114))|0;
   HEAP32[$b>>2] = $118;
   $119 = $106 & 7;
   $storemerge$i1 = $119;
  }
  HEAP32[$89>>2] = $storemerge$i1;
  $$3 = -1;
  return ($$3|0);
 } else {
  $91 = (($90) + ($87))|0;
  $92 = HEAP32[$b>>2]|0;
  $93 = ((($b)) + 16|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (($91) + 7)|0;
  $96 = $95 >> 3;
  $97 = (($94) - ($96))|0;
  $98 = ($92|0)>($97|0);
  if ($98) {
   $105 = ((($b)) + 12|0);
   HEAP32[$105>>2] = 0;
   HEAP32[$b>>2] = $94;
   $storemerge$i3 = 1;
  } else {
   $99 = (($91|0) / 8)&-1;
   $100 = ((($b)) + 12|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = (($101) + ($99)|0);
   HEAP32[$100>>2] = $102;
   $103 = (($92) + ($99))|0;
   HEAP32[$b>>2] = $103;
   $104 = $91 & 7;
   $storemerge$i3 = $104;
  }
  HEAP32[$89>>2] = $storemerge$i3;
  $$3 = $lo$2$lcssa;
  return ($$3|0);
 }
 return (0)|0;
}
function _vorbis_book_decodevs_add($book,$a,$b,$n) {
 $book = $book|0;
 $a = $a|0;
 $b = $b|0;
 $n = $n|0;
 var $$1 = 0, $$alloca_mul = 0, $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond5 = 0, $i$07 = 0, $i$15$us = 0, $j$04$us = 0, $o$06$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($book)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $3 = HEAP32[$book>>2]|0;
 $4 = (($n|0) / ($3|0))&-1;
 $5 = $4 << 2;
 $$alloca_mul = $5;
 $6 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $7 = ($4|0)>(0);
 if (!($7)) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $8 = ((($book)) + 16|0);
 $i$07 = 0;
 while(1) {
  $21 = (_decode_packed_entry_number($book,$b)|0);
  $22 = ($21|0)==(-1);
  if ($22) {
   $$1 = -1;
   label = 10;
   break;
  }
  $23 = HEAP32[$8>>2]|0;
  $9 = HEAP32[$book>>2]|0;
  $24 = Math_imul($9, $21)|0;
  $25 = (($23) + ($24<<2)|0);
  $26 = (($6) + ($i$07<<2)|0);
  HEAP32[$26>>2] = $25;
  $27 = (($i$07) + 1)|0;
  $28 = ($27|0)<($4|0);
  if ($28) {
   $i$07 = $27;
  } else {
   break;
  }
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return ($$1|0);
 }
 $$not = ($9|0)<(1);
 if ($$not) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 } else {
  $i$15$us = 0;$o$06$us = 0;
 }
 while(1) {
  $j$04$us = 0;
  while(1) {
   $10 = (($6) + ($j$04$us<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + ($i$15$us<<2)|0);
   $13 = +HEAPF32[$12>>2];
   $14 = (($j$04$us) + ($o$06$us))|0;
   $15 = (($a) + ($14<<2)|0);
   $16 = +HEAPF32[$15>>2];
   $17 = $16 + $13;
   HEAPF32[$15>>2] = $17;
   $18 = (($j$04$us) + 1)|0;
   $exitcond = ($18|0)==($4|0);
   if ($exitcond) {
    break;
   } else {
    $j$04$us = $18;
   }
  }
  $19 = (($i$15$us) + 1)|0;
  $20 = (($o$06$us) + ($4))|0;
  $exitcond5 = ($19|0)==($9|0);
  if ($exitcond5) {
   $$1 = 0;
   break;
  } else {
   $i$15$us = $19;$o$06$us = $20;
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function _vorbis_book_decodev_add($book,$a,$b,$n) {
 $book = $book|0;
 $a = $a|0;
 $b = $b|0;
 $n = $n|0;
 var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0;
 var $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0;
 var $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0;
 var $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $i$022 = 0, $i$1$lcssa = 0, $i$120 = 0, $i$2$ph123 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $i$7 = 0, $i$8 = 0, $i$9 = 0, $j$021 = 0, $j$1 = 0;
 var $j$2 = 0, $j$3 = 0, $j$4 = 0, $j$5 = 0, $j$6 = 0, $j$7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($book)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  $$1 = 0;
  return ($$1|0);
 }
 $3 = HEAP32[$book>>2]|0;
 $4 = ($3|0)>(8);
 if ($4) {
  $7 = ($n|0)>(0);
  if (!($7)) {
   $$1 = 0;
   return ($$1|0);
  }
  $8 = ((($book)) + 16|0);
  $i$022 = 0;
  while(1) {
   $12 = (_decode_packed_entry_number($book,$b)|0);
   $13 = ($12|0)==(-1);
   if ($13) {
    $$1 = -1;
    label = 29;
    break;
   }
   $14 = HEAP32[$8>>2]|0;
   $10 = HEAP32[$book>>2]|0;
   $15 = Math_imul($10, $12)|0;
   $16 = (($14) + ($15<<2)|0);
   $17 = ($10|0)>(0);
   if ($17) {
    $i$120 = $i$022;$j$021 = 0;
    while(1) {
     $18 = (($j$021) + 1)|0;
     $19 = (($16) + ($j$021<<2)|0);
     $20 = +HEAPF32[$19>>2];
     $21 = (($i$120) + 1)|0;
     $22 = (($a) + ($i$120<<2)|0);
     $23 = +HEAPF32[$22>>2];
     $24 = $23 + $20;
     HEAPF32[$22>>2] = $24;
     $exitcond = ($18|0)==($10|0);
     if ($exitcond) {
      break;
     } else {
      $i$120 = $21;$j$021 = $18;
     }
    }
    $9 = (($i$022) + ($10))|0;
    $i$1$lcssa = $9;
   } else {
    $i$1$lcssa = $i$022;
   }
   $11 = ($i$1$lcssa|0)<($n|0);
   if ($11) {
    $i$022 = $i$1$lcssa;
   } else {
    $$1 = 0;
    label = 29;
    break;
   }
  }
  if ((label|0) == 29) {
   return ($$1|0);
  }
 }
 $5 = ((($book)) + 16|0);
 $6 = ($n|0)>(0);
 if ($6) {
  $i$2$ph123 = 0;
 } else {
  $$1 = 0;
  return ($$1|0);
 }
 L23: while(1) {
  L25: while(1) {
   $81 = (_decode_packed_entry_number($book,$b)|0);
   $82 = ($81|0)==(-1);
   if ($82) {
    $$1 = -1;
    label = 29;
    break L23;
   }
   $83 = HEAP32[$5>>2]|0;
   $84 = HEAP32[$book>>2]|0;
   switch ($84|0) {
   case 8:  {
    label = 21;
    break L25;
    break;
   }
   case 7:  {
    label = 22;
    break L25;
    break;
   }
   case 6:  {
    label = 23;
    break L25;
    break;
   }
   case 5:  {
    label = 24;
    break L25;
    break;
   }
   case 4:  {
    label = 25;
    break L25;
    break;
   }
   case 3:  {
    label = 26;
    break L25;
    break;
   }
   case 2:  {
    label = 27;
    break L25;
    break;
   }
   case 1:  {
    label = 28;
    break L25;
    break;
   }
   default: {
   }
   }
  }
  if ((label|0) == 21) {
   label = 0;
   $85 = $81 << 3;
   $86 = (($83) + ($85<<2)|0);
   $87 = +HEAPF32[$86>>2];
   $88 = (($i$2$ph123) + 1)|0;
   $89 = (($a) + ($i$2$ph123<<2)|0);
   $90 = +HEAPF32[$89>>2];
   $91 = $90 + $87;
   HEAPF32[$89>>2] = $91;
   $27 = $86;$i$3 = $88;$j$1 = 1;
   label = 11;
  }
  else if ((label|0) == 22) {
   label = 0;
   $92 = ($81*7)|0;
   $93 = (($83) + ($92<<2)|0);
   $27 = $93;$i$3 = $i$2$ph123;$j$1 = 0;
   label = 11;
  }
  else if ((label|0) == 23) {
   label = 0;
   $94 = ($81*6)|0;
   $95 = (($83) + ($94<<2)|0);
   $35 = $95;$i$4 = $i$2$ph123;$j$2 = 0;
   label = 12;
  }
  else if ((label|0) == 24) {
   label = 0;
   $96 = ($81*5)|0;
   $97 = (($83) + ($96<<2)|0);
   $43 = $97;$i$5 = $i$2$ph123;$j$3 = 0;
   label = 13;
  }
  else if ((label|0) == 25) {
   label = 0;
   $98 = $81 << 2;
   $99 = (($83) + ($98<<2)|0);
   $51 = $99;$i$6 = $i$2$ph123;$j$4 = 0;
   label = 14;
  }
  else if ((label|0) == 26) {
   label = 0;
   $100 = ($81*3)|0;
   $101 = (($83) + ($100<<2)|0);
   $59 = $101;$i$7 = $i$2$ph123;$j$5 = 0;
   label = 15;
  }
  else if ((label|0) == 27) {
   label = 0;
   $102 = $81 << 1;
   $103 = (($83) + ($102<<2)|0);
   $67 = $103;$i$8 = $i$2$ph123;$j$6 = 0;
   label = 16;
  }
  else if ((label|0) == 28) {
   label = 0;
   $104 = (($83) + ($81<<2)|0);
   $74 = $104;$i$9 = $i$2$ph123;$j$7 = 0;
  }
  if ((label|0) == 11) {
   label = 0;
   $25 = (($j$1) + 1)|0;
   $26 = (($27) + ($j$1<<2)|0);
   $28 = +HEAPF32[$26>>2];
   $29 = (($i$3) + 1)|0;
   $30 = (($a) + ($i$3<<2)|0);
   $31 = +HEAPF32[$30>>2];
   $32 = $31 + $28;
   HEAPF32[$30>>2] = $32;
   $35 = $27;$i$4 = $29;$j$2 = $25;
   label = 12;
  }
  if ((label|0) == 12) {
   label = 0;
   $33 = (($j$2) + 1)|0;
   $34 = (($35) + ($j$2<<2)|0);
   $36 = +HEAPF32[$34>>2];
   $37 = (($i$4) + 1)|0;
   $38 = (($a) + ($i$4<<2)|0);
   $39 = +HEAPF32[$38>>2];
   $40 = $39 + $36;
   HEAPF32[$38>>2] = $40;
   $43 = $35;$i$5 = $37;$j$3 = $33;
   label = 13;
  }
  if ((label|0) == 13) {
   label = 0;
   $41 = (($j$3) + 1)|0;
   $42 = (($43) + ($j$3<<2)|0);
   $44 = +HEAPF32[$42>>2];
   $45 = (($i$5) + 1)|0;
   $46 = (($a) + ($i$5<<2)|0);
   $47 = +HEAPF32[$46>>2];
   $48 = $47 + $44;
   HEAPF32[$46>>2] = $48;
   $51 = $43;$i$6 = $45;$j$4 = $41;
   label = 14;
  }
  if ((label|0) == 14) {
   label = 0;
   $49 = (($j$4) + 1)|0;
   $50 = (($51) + ($j$4<<2)|0);
   $52 = +HEAPF32[$50>>2];
   $53 = (($i$6) + 1)|0;
   $54 = (($a) + ($i$6<<2)|0);
   $55 = +HEAPF32[$54>>2];
   $56 = $55 + $52;
   HEAPF32[$54>>2] = $56;
   $59 = $51;$i$7 = $53;$j$5 = $49;
   label = 15;
  }
  if ((label|0) == 15) {
   label = 0;
   $57 = (($j$5) + 1)|0;
   $58 = (($59) + ($j$5<<2)|0);
   $60 = +HEAPF32[$58>>2];
   $61 = (($i$7) + 1)|0;
   $62 = (($a) + ($i$7<<2)|0);
   $63 = +HEAPF32[$62>>2];
   $64 = $63 + $60;
   HEAPF32[$62>>2] = $64;
   $67 = $59;$i$8 = $61;$j$6 = $57;
   label = 16;
  }
  if ((label|0) == 16) {
   label = 0;
   $65 = (($j$6) + 1)|0;
   $66 = (($67) + ($j$6<<2)|0);
   $68 = +HEAPF32[$66>>2];
   $69 = (($i$8) + 1)|0;
   $70 = (($a) + ($i$8<<2)|0);
   $71 = +HEAPF32[$70>>2];
   $72 = $71 + $68;
   HEAPF32[$70>>2] = $72;
   $74 = $67;$i$9 = $69;$j$7 = $65;
  }
  $73 = (($74) + ($j$7<<2)|0);
  $75 = +HEAPF32[$73>>2];
  $76 = (($i$9) + 1)|0;
  $77 = (($a) + ($i$9<<2)|0);
  $78 = +HEAPF32[$77>>2];
  $79 = $78 + $75;
  HEAPF32[$77>>2] = $79;
  $80 = ($76|0)<($n|0);
  if ($80) {
   $i$2$ph123 = $76;
  } else {
   $$1 = 0;
   label = 29;
   break;
  }
 }
 if ((label|0) == 29) {
  return ($$1|0);
 }
 return (0)|0;
}
function _vorbis_book_init_encode($c,$s) {
 $c = $c|0;
 $s = $s|0;
 var $$$i = 0.0, $$$i2 = 0.0, $$0$i = 0.0, $$0$i$i = 0, $$0$i$i4 = 0, $$0$i8 = 0.0, $$4$i = 0, $$count$0$i = 0, $$lcssa52$i = 0, $$phi$trans$insert$i = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0;
 var $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0;
 var $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, $acc$02$us$i = 0, $acc1$03$us$i = 0, $count$031$i = 0, $count$3$ph$i = 0, $entry$027$i = 0, $exitcond = 0, $exitcond19 = 0, $exitcond42$i = 0, $i$032$i = 0;
 var $i$04$us$i = 0, $i$121$i = 0, $i$220$i = 0, $j$022$lcssa$i = 0, $j$02254$i = 0, $j$1$i = 0, $j$1$in26$i = 0, $j$1$in26$i$phi = 0, $j$125$i = 0, $j$128$i = 0, $j$216$i = 0, $marker$i = 0, $or$cond$i = 0, $or$cond$us$i = 0, $temp$0$lcssa$i = 0, $temp$017$i = 0, $vals$0$us$i = 0, $vals$1$us$i = 0, $vals$1$v$us$i = 0, $y$0$i = 0.0;
 var $y$0$i$i = 0.0, $y$0$i$i5 = 0.0, $y$0$i7 = 0.0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $marker$i = sp;
 dest=$c; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($c)) + 12|0);
 HEAP32[$0>>2] = $s;
 $1 = ((($s)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($c)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($c)) + 8|0);
 HEAP32[$4>>2] = $2;
 $5 = HEAP32[$s>>2]|0;
 HEAP32[$c>>2] = $5;
 $6 = ((($s)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $2 << 2;
 $9 = (_malloc($8)|0);
 _memset(($marker$i|0),0,132)|0;
 $10 = ($2|0)>(0);
 do {
  if ($10) {
   $11 = ((($marker$i)) + 4|0);
   $count$031$i = 0;$i$032$i = 0;
   L3: while(1) {
    $12 = (($7) + ($i$032$i)|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = $13 << 24 >> 24;
    $15 = ($13<<24>>24)>(0);
    L5: do {
     if ($15) {
      $16 = (($marker$i) + ($14<<2)|0);
      $17 = HEAP32[$16>>2]|0;
      $18 = ($13<<24>>24)>(31);
      $19 = $17 >>> $14;
      $20 = ($19|0)==(0);
      $or$cond$i = $18 | $20;
      if (!($or$cond$i)) {
       label = 15;
       break L3;
      }
      $21 = (($count$031$i) + 1)|0;
      $22 = (($9) + ($count$031$i<<2)|0);
      HEAP32[$22>>2] = $17;
      $23 = $17 & 1;
      $24 = ($23|0)==(0);
      L8: do {
       if ($24) {
        $34 = $17;$35 = $16;$j$02254$i = $14;
        while(1) {
         $33 = (($34) + 1)|0;
         HEAP32[$35>>2] = $33;
         $36 = (($j$02254$i) + -1)|0;
         $37 = ($j$02254$i|0)>(1);
         if (!($37)) {
          break L8;
         }
         $$phi$trans$insert$i = (($marker$i) + ($36<<2)|0);
         $$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
         $38 = $$pre$i & 1;
         $39 = ($38|0)==(0);
         if ($39) {
          $34 = $$pre$i;$35 = $$phi$trans$insert$i;$j$02254$i = $36;
         } else {
          $$lcssa52$i = $$phi$trans$insert$i;$j$022$lcssa$i = $36;
          label = 7;
          break;
         }
        }
       } else {
        $$lcssa52$i = $16;$j$022$lcssa$i = $14;
        label = 7;
       }
      } while(0);
      do {
       if ((label|0) == 7) {
        label = 0;
        $26 = ($j$022$lcssa$i|0)==(1);
        if ($26) {
         $27 = HEAP32[$11>>2]|0;
         $28 = (($27) + 1)|0;
         HEAP32[$11>>2] = $28;
         break;
        } else {
         $29 = (($j$022$lcssa$i) + -1)|0;
         $30 = (($marker$i) + ($29<<2)|0);
         $31 = HEAP32[$30>>2]|0;
         $32 = $31 << 1;
         HEAP32[$$lcssa52$i>>2] = $32;
         break;
        }
       }
      } while(0);
      $j$125$i = (($14) + 1)|0;
      $25 = ($j$125$i|0)<(33);
      if ($25) {
       $entry$027$i = $17;$j$1$in26$i = $14;$j$128$i = $j$125$i;
       while(1) {
        $40 = (($marker$i) + ($j$128$i<<2)|0);
        $41 = HEAP32[$40>>2]|0;
        $42 = $41 >>> 1;
        $43 = ($42|0)==($entry$027$i|0);
        if (!($43)) {
         $count$3$ph$i = $21;
         break L5;
        }
        $44 = (($marker$i) + ($j$1$in26$i<<2)|0);
        $45 = HEAP32[$44>>2]|0;
        $46 = $45 << 1;
        HEAP32[$40>>2] = $46;
        $j$1$i = (($j$128$i) + 1)|0;
        $47 = ($j$1$i|0)<(33);
        if ($47) {
         $j$1$in26$i$phi = $j$128$i;$entry$027$i = $41;$j$128$i = $j$1$i;$j$1$in26$i = $j$1$in26$i$phi;
        } else {
         $count$3$ph$i = $21;
         break;
        }
       }
      } else {
       $count$3$ph$i = $21;
      }
     } else {
      $$count$0$i = (($count$031$i) + 1)|0;
      $count$3$ph$i = $$count$0$i;
     }
    } while(0);
    $48 = (($i$032$i) + 1)|0;
    $49 = ($48|0)<($2|0);
    if ($49) {
     $count$031$i = $count$3$ph$i;$i$032$i = $48;
    } else {
     break;
    }
   }
   if ((label|0) == 15) {
    _free($9);
    $$4$i = 0;
    break;
   }
   $50 = ($count$3$ph$i|0)==(1);
   if ($50) {
    $51 = ((($marker$i)) + 8|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ($52|0)==(2);
    if ($53) {
     label = 19;
    } else {
     $i$121$i = 1;
     label = 21;
    }
   } else {
    $i$121$i = 1;
    label = 21;
   }
  } else {
   $i$121$i = 1;
   label = 21;
  }
 } while(0);
 L27: do {
  if ((label|0) == 21) {
   while(1) {
    label = 0;
    $56 = (($marker$i) + ($i$121$i<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = (32 - ($i$121$i))|0;
    $59 = -1 >>> $58;
    $60 = $57 & $59;
    $61 = ($60|0)==(0);
    $54 = (($i$121$i) + 1)|0;
    if (!($61)) {
     break;
    }
    $55 = ($54|0)<(33);
    if ($55) {
     $i$121$i = $54;
     label = 21;
    } else {
     label = 19;
     break L27;
    }
   }
   _free($9);
   $$4$i = 0;
  }
 } while(0);
 if ((label|0) == 19) {
  if ($10) {
   $i$220$i = 0;
   while(1) {
    $62 = (($7) + ($i$220$i)|0);
    $63 = HEAP8[$62>>0]|0;
    $64 = ($63<<24>>24)>(0);
    $65 = (($9) + ($i$220$i<<2)|0);
    if ($64) {
     $66 = HEAP32[$65>>2]|0;
     $67 = $63 << 24 >> 24;
     $j$216$i = 0;$temp$017$i = 0;
     while(1) {
      $68 = $temp$017$i << 1;
      $69 = $66 >>> $j$216$i;
      $70 = $69 & 1;
      $71 = $70 | $68;
      $72 = (($j$216$i) + 1)|0;
      $exitcond19 = ($72|0)==($67|0);
      if ($exitcond19) {
       $temp$0$lcssa$i = $71;
       break;
      } else {
       $j$216$i = $72;$temp$017$i = $71;
      }
     }
    } else {
     $temp$0$lcssa$i = 0;
    }
    $73 = (($i$220$i) + 1)|0;
    HEAP32[$65>>2] = $temp$0$lcssa$i;
    $exitcond42$i = ($73|0)==($2|0);
    if ($exitcond42$i) {
     $$4$i = $9;
     break;
    } else {
     $i$220$i = $73;
    }
   }
  } else {
   $$4$i = $9;
  }
 }
 $74 = ((($c)) + 20|0);
 HEAP32[$74>>2] = $$4$i;
 $75 = HEAP32[$1>>2]|0;
 $76 = HEAP32[$s>>2]|0;
 $77 = ($76|0)>(0);
 if (!($77)) {
  while(1) {
  }
 }
 $78 = (+($75|0));
 $79 = $78;
 $80 = (+($76|0));
 $81 = 1.0 / $80;
 $82 = $81;
 $83 = (+Math_pow((+$79),(+$82)));
 $84 = (+Math_floor((+$83)));
 $85 = (~~(($84)));
 $vals$0$us$i = $85;
 while(1) {
  $89 = (($vals$0$us$i) + 1)|0;
  $acc$02$us$i = 1;$acc1$03$us$i = 1;$i$04$us$i = 0;
  while(1) {
   $86 = Math_imul($acc$02$us$i, $vals$0$us$i)|0;
   $88 = Math_imul($acc1$03$us$i, $89)|0;
   $90 = (($i$04$us$i) + 1)|0;
   $exitcond = ($90|0)==($76|0);
   if ($exitcond) {
    break;
   } else {
    $acc$02$us$i = $86;$acc1$03$us$i = $88;$i$04$us$i = $90;
   }
  }
  $91 = ($86|0)<=($75|0);
  $92 = ($88|0)>($75|0);
  $or$cond$us$i = $92 & $91;
  if ($or$cond$us$i) {
   break;
  }
  $87 = ($86|0)>($75|0);
  $vals$1$v$us$i = $87 ? -1 : 1;
  $vals$1$us$i = (($vals$1$v$us$i) + ($vals$0$us$i))|0;
  $vals$0$us$i = $vals$1$us$i;
 }
 $93 = ((($c)) + 44|0);
 HEAP32[$93>>2] = $vals$0$us$i;
 $94 = ((($s)) + 16|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = $95 & 2097151;
 $97 = (+($96|0));
 $98 = $95 >>> 21;
 $99 = $98 & 1023;
 $100 = ($95|0)<(0);
 $101 = -$97;
 $$$i = $100 ? $101 : $97;
 $102 = (($99) + -788)|0;
 $103 = ($102|0)>(1023);
 if ($103) {
  $104 = $$$i * 8.9884656743115795E+307;
  $105 = (($99) + -1811)|0;
  $$0$i$i = $105;$y$0$i$i = $104;
 } else {
  $106 = ($102|0)<(-1022);
  if ($106) {
   $107 = $$$i * 2.2250738585072014E-308;
   $108 = (($99) + 234)|0;
   $$0$i$i = $108;$y$0$i$i = $107;
  } else {
   $$0$i$i = $102;$y$0$i$i = $$$i;
  }
 }
 $109 = (($$0$i$i) + 1023)|0;
 $110 = (_bitshift64Shl(($109|0),0,52)|0);
 $111 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $110;HEAP32[tempDoublePtr+4>>2] = $111;$112 = +HEAPF64[tempDoublePtr>>3];
 $113 = $y$0$i$i * $112;
 $114 = $113;
 $115 = (HEAPF32[tempDoublePtr>>2]=$114,HEAP32[tempDoublePtr>>2]|0);
 $116 = $115 & 2130706432;
 $117 = ($116>>>0)>(1249902592);
 if ($117) {
  $$0$i = $114;
 } else {
  $118 = ($115|0)<(0);
  $119 = $114 + -8388608.0;
  $120 = $119 + 8388608.0;
  $121 = $114 + 8388608.0;
  $122 = $121 + -8388608.0;
  $y$0$i = $118 ? $120 : $122;
  $123 = $y$0$i == 0.0;
  if ($123) {
   $124 = $118 ? -0.0 : 0.0;
   $$0$i = $124;
  } else {
   $$0$i = $y$0$i;
  }
 }
 $125 = (~~(($$0$i)));
 $126 = ((($c)) + 48|0);
 HEAP32[$126>>2] = $125;
 $127 = ((($s)) + 20|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = $128 & 2097151;
 $130 = (+($129|0));
 $131 = $128 >>> 21;
 $132 = $131 & 1023;
 $133 = ($128|0)<(0);
 $134 = -$130;
 $$$i2 = $133 ? $134 : $130;
 $135 = (($132) + -788)|0;
 $136 = ($135|0)>(1023);
 if ($136) {
  $137 = $$$i2 * 8.9884656743115795E+307;
  $138 = (($132) + -1811)|0;
  $$0$i$i4 = $138;$y$0$i$i5 = $137;
 } else {
  $139 = ($135|0)<(-1022);
  if ($139) {
   $140 = $$$i2 * 2.2250738585072014E-308;
   $141 = (($132) + 234)|0;
   $$0$i$i4 = $141;$y$0$i$i5 = $140;
  } else {
   $$0$i$i4 = $135;$y$0$i$i5 = $$$i2;
  }
 }
 $142 = (($$0$i$i4) + 1023)|0;
 $143 = (_bitshift64Shl(($142|0),0,52)|0);
 $144 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $143;HEAP32[tempDoublePtr+4>>2] = $144;$145 = +HEAPF64[tempDoublePtr>>3];
 $146 = $y$0$i$i5 * $145;
 $147 = $146;
 $148 = (HEAPF32[tempDoublePtr>>2]=$147,HEAP32[tempDoublePtr>>2]|0);
 $149 = $148 & 2130706432;
 $150 = ($149>>>0)>(1249902592);
 if ($150) {
  $$0$i8 = $147;
  $158 = (~~(($$0$i8)));
  $159 = ((($c)) + 52|0);
  HEAP32[$159>>2] = $158;
  STACKTOP = sp;return;
 }
 $151 = ($148|0)<(0);
 $152 = $147 + -8388608.0;
 $153 = $152 + 8388608.0;
 $154 = $147 + 8388608.0;
 $155 = $154 + -8388608.0;
 $y$0$i7 = $151 ? $153 : $155;
 $156 = $y$0$i7 == 0.0;
 if (!($156)) {
  $$0$i8 = $y$0$i7;
  $158 = (~~(($$0$i8)));
  $159 = ((($c)) + 52|0);
  HEAP32[$159>>2] = $158;
  STACKTOP = sp;return;
 }
 $157 = $151 ? -0.0 : 0.0;
 $$0$i8 = $157;
 $158 = (~~(($$0$i8)));
 $159 = ((($c)) + 52|0);
 HEAP32[$159>>2] = $158;
 STACKTOP = sp;return;
}
function _mdct_init($lookup,$n) {
 $lookup = $lookup|0;
 $n = $n|0;
 var $$0$i = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0;
 var $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0;
 var $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $acc$03 = 0, $acc$1 = 0, $i$07 = 0, $i$15 = 0, $i1$04 = 0, $j$02 = 0, $y$0$i = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($n|0) / 4)&-1;
 $1 = $0 << 2;
 $2 = (_malloc($1)|0);
 $3 = (($0) + ($n))|0;
 $4 = $3 << 2;
 $5 = (_malloc($4)|0);
 $6 = $n >> 1;
 $7 = (+($n|0));
 $8 = $7;
 $9 = (+Math_log((+$8)));
 $10 = $9 * 1.4426950408889634;
 HEAPF64[tempDoublePtr>>3] = $10;$11 = HEAP32[tempDoublePtr>>2]|0;
 $12 = HEAP32[tempDoublePtr+4>>2]|0;
 $13 = $12 & 2146435072;
 $14 = ($13>>>0)>(1126170624);
 $15 = (0)>(0);
 $16 = ($13|0)==(1126170624);
 $17 = $16 & $15;
 $18 = $14 | $17;
 if ($18) {
  $$0$i = $10;
 } else {
  $19 = ($12|0)<(0);
  $20 = $10 + -4503599627370496.0;
  $21 = $20 + 4503599627370496.0;
  $22 = $10 + 4503599627370496.0;
  $23 = $22 + -4503599627370496.0;
  $y$0$i = $19 ? $21 : $23;
  $24 = $y$0$i == 0.0;
  if ($24) {
   $25 = $19 ? -0.0 : 0.0;
   $$0$i = $25;
  } else {
   $$0$i = $y$0$i;
  }
 }
 $26 = (~~(($$0$i)));
 $27 = ((($lookup)) + 4|0);
 HEAP32[$27>>2] = $26;
 HEAP32[$lookup>>2] = $n;
 $28 = ((($lookup)) + 8|0);
 HEAP32[$28>>2] = $5;
 $29 = ((($lookup)) + 12|0);
 HEAP32[$29>>2] = $2;
 $30 = ($n|0)>(3);
 if (!($30)) {
  $101 = 4.0 / $7;
  $102 = ((($lookup)) + 16|0);
  HEAPF32[$102>>2] = $101;
  return;
 }
 $31 = (+($n|0));
 $32 = 3.1415926535897931 / $31;
 $33 = $n << 1;
 $34 = (+($33|0));
 $35 = 3.1415926535897931 / $34;
 $i$07 = 0;
 while(1) {
  $38 = $i$07 << 2;
  $39 = (+($38|0));
  $40 = $39 * $32;
  $41 = (+Math_cos((+$40)));
  $42 = $41;
  $43 = $i$07 << 1;
  $44 = (($5) + ($43<<2)|0);
  HEAPF32[$44>>2] = $42;
  $45 = (+Math_sin((+$40)));
  $46 = $45;
  $47 = -$46;
  $48 = $43 | 1;
  $49 = (($5) + ($48<<2)|0);
  HEAPF32[$49>>2] = $47;
  $50 = (+($48|0));
  $51 = $50 * $35;
  $52 = (+Math_cos((+$51)));
  $53 = $52;
  $54 = (($43) + ($6))|0;
  $55 = (($5) + ($54<<2)|0);
  HEAPF32[$55>>2] = $53;
  $56 = (+Math_sin((+$51)));
  $57 = $56;
  $58 = (($54) + 1)|0;
  $59 = (($5) + ($58<<2)|0);
  HEAPF32[$59>>2] = $57;
  $60 = (($i$07) + 1)|0;
  $61 = ($60|0)<($0|0);
  if ($61) {
   $i$07 = $60;
  } else {
   break;
  }
 }
 $36 = (($n|0) / 8)&-1;
 $37 = ($n|0)>(7);
 if ($37) {
  $i$15 = 0;
 } else {
  $101 = 4.0 / $7;
  $102 = ((($lookup)) + 16|0);
  HEAPF32[$102>>2] = $101;
  return;
 }
 while(1) {
  $62 = $i$15 << 2;
  $63 = $62 | 2;
  $64 = (+($63|0));
  $65 = $64 * $32;
  $66 = (+Math_cos((+$65)));
  $67 = $66 * 0.5;
  $68 = $67;
  $69 = $i$15 << 1;
  $70 = (($69) + ($n))|0;
  $71 = (($5) + ($70<<2)|0);
  HEAPF32[$71>>2] = $68;
  $72 = (+Math_sin((+$65)));
  $73 = $72 * -0.5;
  $74 = $73;
  $75 = (($70) + 1)|0;
  $76 = (($5) + ($75<<2)|0);
  HEAPF32[$76>>2] = $74;
  $77 = (($i$15) + 1)|0;
  $78 = ($77|0)<($36|0);
  if ($78) {
   $i$15 = $77;
  } else {
   break;
  }
 }
 $79 = (($26) + -1)|0;
 $80 = 1 << $79;
 $81 = (($80) + -1)|0;
 $82 = (($26) + -2)|0;
 $83 = 1 << $82;
 $i1$04 = 0;
 while(1) {
  $85 = $83;$acc$03 = 0;$j$02 = 0;
  while(1) {
   $84 = $85 & $i1$04;
   $86 = ($84|0)==(0);
   $87 = 1 << $j$02;
   $88 = $86 ? 0 : $87;
   $acc$1 = $88 | $acc$03;
   $89 = (($j$02) + 1)|0;
   $90 = $83 >> $89;
   $91 = ($90|0)==(0);
   if ($91) {
    break;
   } else {
    $85 = $90;$acc$03 = $acc$1;$j$02 = $89;
   }
  }
  $92 = $acc$1 ^ -1;
  $93 = $81 & $92;
  $94 = (($93) + -1)|0;
  $95 = $i1$04 << 1;
  $96 = (($2) + ($95<<2)|0);
  HEAP32[$96>>2] = $94;
  $97 = $95 | 1;
  $98 = (($2) + ($97<<2)|0);
  HEAP32[$98>>2] = $acc$1;
  $99 = (($i1$04) + 1)|0;
  $100 = ($99|0)<($36|0);
  if ($100) {
   $i1$04 = $99;
  } else {
   break;
  }
 }
 $101 = 4.0 / $7;
 $102 = ((($lookup)) + 16|0);
 HEAPF32[$102>>2] = $101;
 return;
}
function _mdct_butterflies($init$0$1$val,$init$0$2$val,$x,$points) {
 $init$0$1$val = $init$0$1$val|0;
 $init$0$2$val = $init$0$2$val|0;
 $x = $x|0;
 $points = $points|0;
 var $$0$i = 0, $$0$i3 = 0, $$pn$i = 0, $$pn$i2 = 0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0;
 var $130 = 0.0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0;
 var $149 = 0.0, $15 = 0.0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0;
 var $167 = 0, $168 = 0, $169 = 0.0, $17 = 0.0, $170 = 0, $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0;
 var $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0.0, $200 = 0.0, $201 = 0.0;
 var $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0.0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0.0, $224 = 0, $225 = 0.0, $226 = 0.0, $227 = 0, $228 = 0.0, $229 = 0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0, $235 = 0.0, $236 = 0, $237 = 0.0, $238 = 0.0;
 var $239 = 0, $24 = 0.0, $240 = 0.0, $241 = 0, $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0.0, $254 = 0, $255 = 0.0, $256 = 0.0;
 var $257 = 0, $258 = 0.0, $259 = 0, $26 = 0.0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0.0, $27 = 0.0, $270 = 0, $271 = 0.0, $272 = 0.0, $273 = 0, $274 = 0.0;
 var $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0.0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0, $287 = 0.0, $288 = 0, $289 = 0.0, $29 = 0.0, $290 = 0.0, $291 = 0, $292 = 0.0;
 var $293 = 0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0, $301 = 0.0, $302 = 0.0, $303 = 0, $304 = 0.0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0.0;
 var $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0, $317 = 0.0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0.0, $323 = 0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0;
 var $329 = 0.0, $33 = 0.0, $330 = 0.0, $331 = 0.0, $332 = 0, $333 = 0.0, $334 = 0.0, $335 = 0, $336 = 0.0, $337 = 0, $338 = 0.0, $339 = 0.0, $34 = 0.0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0;
 var $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0.0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0;
 var $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0.0, $380 = 0.0, $381 = 0.0, $382 = 0.0;
 var $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0.0, $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $4 = 0, $40 = 0.0;
 var $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0.0, $404 = 0.0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0.0, $41 = 0.0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0;
 var $419 = 0.0, $42 = 0.0, $420 = 0.0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0.0, $435 = 0.0, $436 = 0.0;
 var $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0.0, $440 = 0.0, $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0.0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0.0, $450 = 0.0, $451 = 0.0, $452 = 0.0, $453 = 0.0, $454 = 0.0;
 var $455 = 0.0, $456 = 0.0, $457 = 0.0, $458 = 0.0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0.0, $462 = 0.0, $463 = 0.0, $464 = 0.0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0.0, $470 = 0.0, $471 = 0.0, $472 = 0.0;
 var $473 = 0.0, $474 = 0.0, $475 = 0.0, $476 = 0.0, $477 = 0.0, $478 = 0.0, $479 = 0.0, $48 = 0.0, $480 = 0.0, $481 = 0, $482 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0;
 var $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0;
 var $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0.0;
 var $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $exitcond = 0, $i$06 = 0, $j$03 = 0, $j$12 = 0, $x1$0$i = 0, $x1$0$i4 = 0, $x2$0$i = 0, $x2$0$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($init$0$1$val) + -6)|0;
 $1 = ($init$0$1$val|0)>(6);
 if ($1) {
  $2 = (($x) + ($points<<2)|0);
  $3 = $points >> 1;
  $4 = (($x) + ($3<<2)|0);
  $5 = ((($4)) + -32|0);
  $$0$i = $init$0$2$val;$$pn$i = $2;$x2$0$i = $5;
  while(1) {
   $x1$0$i = ((($$pn$i)) + -32|0);
   $6 = ((($$pn$i)) + -8|0);
   $7 = +HEAPF32[$6>>2];
   $8 = ((($x2$0$i)) + 24|0);
   $9 = +HEAPF32[$8>>2];
   $10 = $7 - $9;
   $11 = ((($$pn$i)) + -4|0);
   $12 = +HEAPF32[$11>>2];
   $13 = ((($x2$0$i)) + 28|0);
   $14 = +HEAPF32[$13>>2];
   $15 = $12 - $14;
   $16 = $9 + $7;
   HEAPF32[$6>>2] = $16;
   $17 = +HEAPF32[$13>>2];
   $18 = $17 + $12;
   HEAPF32[$11>>2] = $18;
   $19 = ((($$0$i)) + 4|0);
   $20 = +HEAPF32[$19>>2];
   $21 = $20 * $15;
   $22 = +HEAPF32[$$0$i>>2];
   $23 = $22 * $10;
   $24 = $23 + $21;
   HEAPF32[$8>>2] = $24;
   $25 = +HEAPF32[$$0$i>>2];
   $26 = $25 * $15;
   $27 = +HEAPF32[$19>>2];
   $28 = $27 * $10;
   $29 = $26 - $28;
   HEAPF32[$13>>2] = $29;
   $30 = ((($$pn$i)) + -16|0);
   $31 = +HEAPF32[$30>>2];
   $32 = ((($x2$0$i)) + 16|0);
   $33 = +HEAPF32[$32>>2];
   $34 = $31 - $33;
   $35 = ((($$pn$i)) + -12|0);
   $36 = +HEAPF32[$35>>2];
   $37 = ((($x2$0$i)) + 20|0);
   $38 = +HEAPF32[$37>>2];
   $39 = $36 - $38;
   $40 = $33 + $31;
   HEAPF32[$30>>2] = $40;
   $41 = +HEAPF32[$37>>2];
   $42 = $41 + $36;
   HEAPF32[$35>>2] = $42;
   $43 = ((($$0$i)) + 20|0);
   $44 = +HEAPF32[$43>>2];
   $45 = $44 * $39;
   $46 = ((($$0$i)) + 16|0);
   $47 = +HEAPF32[$46>>2];
   $48 = $47 * $34;
   $49 = $48 + $45;
   HEAPF32[$32>>2] = $49;
   $50 = +HEAPF32[$46>>2];
   $51 = $50 * $39;
   $52 = +HEAPF32[$43>>2];
   $53 = $52 * $34;
   $54 = $51 - $53;
   HEAPF32[$37>>2] = $54;
   $55 = ((($$pn$i)) + -24|0);
   $56 = +HEAPF32[$55>>2];
   $57 = ((($x2$0$i)) + 8|0);
   $58 = +HEAPF32[$57>>2];
   $59 = $56 - $58;
   $60 = ((($$pn$i)) + -20|0);
   $61 = +HEAPF32[$60>>2];
   $62 = ((($x2$0$i)) + 12|0);
   $63 = +HEAPF32[$62>>2];
   $64 = $61 - $63;
   $65 = $58 + $56;
   HEAPF32[$55>>2] = $65;
   $66 = +HEAPF32[$62>>2];
   $67 = $66 + $61;
   HEAPF32[$60>>2] = $67;
   $68 = ((($$0$i)) + 36|0);
   $69 = +HEAPF32[$68>>2];
   $70 = $69 * $64;
   $71 = ((($$0$i)) + 32|0);
   $72 = +HEAPF32[$71>>2];
   $73 = $72 * $59;
   $74 = $73 + $70;
   HEAPF32[$57>>2] = $74;
   $75 = +HEAPF32[$71>>2];
   $76 = $75 * $64;
   $77 = +HEAPF32[$68>>2];
   $78 = $77 * $59;
   $79 = $76 - $78;
   HEAPF32[$62>>2] = $79;
   $80 = +HEAPF32[$x1$0$i>>2];
   $81 = +HEAPF32[$x2$0$i>>2];
   $82 = $80 - $81;
   $83 = ((($$pn$i)) + -28|0);
   $84 = +HEAPF32[$83>>2];
   $85 = ((($x2$0$i)) + 4|0);
   $86 = +HEAPF32[$85>>2];
   $87 = $84 - $86;
   $88 = $81 + $80;
   HEAPF32[$x1$0$i>>2] = $88;
   $89 = +HEAPF32[$85>>2];
   $90 = $89 + $84;
   HEAPF32[$83>>2] = $90;
   $91 = ((($$0$i)) + 52|0);
   $92 = +HEAPF32[$91>>2];
   $93 = $92 * $87;
   $94 = ((($$0$i)) + 48|0);
   $95 = +HEAPF32[$94>>2];
   $96 = $95 * $82;
   $97 = $96 + $93;
   HEAPF32[$x2$0$i>>2] = $97;
   $98 = +HEAPF32[$94>>2];
   $99 = $98 * $87;
   $100 = +HEAPF32[$91>>2];
   $101 = $100 * $82;
   $102 = $99 - $101;
   HEAPF32[$85>>2] = $102;
   $103 = ((($x2$0$i)) + -32|0);
   $104 = ((($$0$i)) + 64|0);
   $105 = ($103>>>0)<($x>>>0);
   if ($105) {
    break;
   } else {
    $$0$i = $104;$$pn$i = $x1$0$i;$x2$0$i = $103;
   }
  }
 }
 $106 = ($0|0)>(1);
 if ($106) {
  $i$06 = 1;
  while(1) {
   $107 = 1 << $i$06;
   $108 = ($i$06|0)==(31);
   if (!($108)) {
    $109 = $points >> $i$06;
    $110 = 4 << $i$06;
    $111 = $109 >> 1;
    $j$03 = 0;
    while(1) {
     $113 = Math_imul($j$03, $109)|0;
     $114 = (($x) + ($113<<2)|0);
     $115 = (($114) + ($109<<2)|0);
     $116 = (($114) + ($111<<2)|0);
     $117 = ((($116)) + -32|0);
     $$0$i3 = $init$0$2$val;$$pn$i2 = $115;$x2$0$i1 = $117;
     while(1) {
      $x1$0$i4 = ((($$pn$i2)) + -32|0);
      $118 = ((($$pn$i2)) + -8|0);
      $119 = +HEAPF32[$118>>2];
      $120 = ((($x2$0$i1)) + 24|0);
      $121 = +HEAPF32[$120>>2];
      $122 = $119 - $121;
      $123 = ((($$pn$i2)) + -4|0);
      $124 = +HEAPF32[$123>>2];
      $125 = ((($x2$0$i1)) + 28|0);
      $126 = +HEAPF32[$125>>2];
      $127 = $124 - $126;
      $128 = $121 + $119;
      HEAPF32[$118>>2] = $128;
      $129 = +HEAPF32[$125>>2];
      $130 = $129 + $124;
      HEAPF32[$123>>2] = $130;
      $131 = ((($$0$i3)) + 4|0);
      $132 = +HEAPF32[$131>>2];
      $133 = $132 * $127;
      $134 = +HEAPF32[$$0$i3>>2];
      $135 = $134 * $122;
      $136 = $135 + $133;
      HEAPF32[$120>>2] = $136;
      $137 = +HEAPF32[$$0$i3>>2];
      $138 = $137 * $127;
      $139 = +HEAPF32[$131>>2];
      $140 = $139 * $122;
      $141 = $138 - $140;
      HEAPF32[$125>>2] = $141;
      $142 = (($$0$i3) + ($110<<2)|0);
      $143 = ((($$pn$i2)) + -16|0);
      $144 = +HEAPF32[$143>>2];
      $145 = ((($x2$0$i1)) + 16|0);
      $146 = +HEAPF32[$145>>2];
      $147 = $144 - $146;
      $148 = ((($$pn$i2)) + -12|0);
      $149 = +HEAPF32[$148>>2];
      $150 = ((($x2$0$i1)) + 20|0);
      $151 = +HEAPF32[$150>>2];
      $152 = $149 - $151;
      $153 = $146 + $144;
      HEAPF32[$143>>2] = $153;
      $154 = +HEAPF32[$150>>2];
      $155 = $154 + $149;
      HEAPF32[$148>>2] = $155;
      $156 = ((($142)) + 4|0);
      $157 = +HEAPF32[$156>>2];
      $158 = $157 * $152;
      $159 = +HEAPF32[$142>>2];
      $160 = $159 * $147;
      $161 = $160 + $158;
      HEAPF32[$145>>2] = $161;
      $162 = +HEAPF32[$142>>2];
      $163 = $162 * $152;
      $164 = +HEAPF32[$156>>2];
      $165 = $164 * $147;
      $166 = $163 - $165;
      HEAPF32[$150>>2] = $166;
      $167 = (($142) + ($110<<2)|0);
      $168 = ((($$pn$i2)) + -24|0);
      $169 = +HEAPF32[$168>>2];
      $170 = ((($x2$0$i1)) + 8|0);
      $171 = +HEAPF32[$170>>2];
      $172 = $169 - $171;
      $173 = ((($$pn$i2)) + -20|0);
      $174 = +HEAPF32[$173>>2];
      $175 = ((($x2$0$i1)) + 12|0);
      $176 = +HEAPF32[$175>>2];
      $177 = $174 - $176;
      $178 = $171 + $169;
      HEAPF32[$168>>2] = $178;
      $179 = +HEAPF32[$175>>2];
      $180 = $179 + $174;
      HEAPF32[$173>>2] = $180;
      $181 = ((($167)) + 4|0);
      $182 = +HEAPF32[$181>>2];
      $183 = $182 * $177;
      $184 = +HEAPF32[$167>>2];
      $185 = $184 * $172;
      $186 = $185 + $183;
      HEAPF32[$170>>2] = $186;
      $187 = +HEAPF32[$167>>2];
      $188 = $187 * $177;
      $189 = +HEAPF32[$181>>2];
      $190 = $189 * $172;
      $191 = $188 - $190;
      HEAPF32[$175>>2] = $191;
      $192 = (($167) + ($110<<2)|0);
      $193 = +HEAPF32[$x1$0$i4>>2];
      $194 = +HEAPF32[$x2$0$i1>>2];
      $195 = $193 - $194;
      $196 = ((($$pn$i2)) + -28|0);
      $197 = +HEAPF32[$196>>2];
      $198 = ((($x2$0$i1)) + 4|0);
      $199 = +HEAPF32[$198>>2];
      $200 = $197 - $199;
      $201 = $194 + $193;
      HEAPF32[$x1$0$i4>>2] = $201;
      $202 = +HEAPF32[$198>>2];
      $203 = $202 + $197;
      HEAPF32[$196>>2] = $203;
      $204 = ((($192)) + 4|0);
      $205 = +HEAPF32[$204>>2];
      $206 = $205 * $200;
      $207 = +HEAPF32[$192>>2];
      $208 = $207 * $195;
      $209 = $208 + $206;
      HEAPF32[$x2$0$i1>>2] = $209;
      $210 = +HEAPF32[$192>>2];
      $211 = $210 * $200;
      $212 = +HEAPF32[$204>>2];
      $213 = $212 * $195;
      $214 = $211 - $213;
      HEAPF32[$198>>2] = $214;
      $215 = (($192) + ($110<<2)|0);
      $216 = ((($x2$0$i1)) + -32|0);
      $217 = ($216>>>0)<($114>>>0);
      if ($217) {
       break;
      } else {
       $$0$i3 = $215;$$pn$i2 = $x1$0$i4;$x2$0$i1 = $216;
      }
     }
     $218 = (($j$03) + 1)|0;
     $219 = ($218|0)<($107|0);
     if ($219) {
      $j$03 = $218;
     } else {
      break;
     }
    }
   }
   $220 = (($i$06) + 1)|0;
   $exitcond = ($220|0)==($0|0);
   if ($exitcond) {
    break;
   } else {
    $i$06 = $220;
   }
  }
 }
 $112 = ($points|0)>(0);
 if ($112) {
  $j$12 = 0;
 } else {
  return;
 }
 while(1) {
  $221 = (($x) + ($j$12<<2)|0);
  $222 = ((($221)) + 120|0);
  $223 = +HEAPF32[$222>>2];
  $224 = ((($221)) + 56|0);
  $225 = +HEAPF32[$224>>2];
  $226 = $223 - $225;
  $227 = ((($221)) + 124|0);
  $228 = +HEAPF32[$227>>2];
  $229 = ((($221)) + 60|0);
  $230 = +HEAPF32[$229>>2];
  $231 = $228 - $230;
  $232 = $225 + $223;
  HEAPF32[$222>>2] = $232;
  $233 = $230 + $228;
  HEAPF32[$227>>2] = $233;
  HEAPF32[$224>>2] = $226;
  HEAPF32[$229>>2] = $231;
  $234 = ((($221)) + 112|0);
  $235 = +HEAPF32[$234>>2];
  $236 = ((($221)) + 48|0);
  $237 = +HEAPF32[$236>>2];
  $238 = $235 - $237;
  $239 = ((($221)) + 116|0);
  $240 = +HEAPF32[$239>>2];
  $241 = ((($221)) + 52|0);
  $242 = +HEAPF32[$241>>2];
  $243 = $240 - $242;
  $244 = $237 + $235;
  HEAPF32[$234>>2] = $244;
  $245 = $242 + $240;
  HEAPF32[$239>>2] = $245;
  $246 = $238 * 0.92387950420379638;
  $247 = $243 * 0.38268342614173889;
  $248 = $246 - $247;
  HEAPF32[$236>>2] = $248;
  $249 = $238 * 0.38268342614173889;
  $250 = $243 * 0.92387950420379638;
  $251 = $250 + $249;
  HEAPF32[$241>>2] = $251;
  $252 = ((($221)) + 104|0);
  $253 = +HEAPF32[$252>>2];
  $254 = ((($221)) + 40|0);
  $255 = +HEAPF32[$254>>2];
  $256 = $253 - $255;
  $257 = ((($221)) + 108|0);
  $258 = +HEAPF32[$257>>2];
  $259 = ((($221)) + 44|0);
  $260 = +HEAPF32[$259>>2];
  $261 = $258 - $260;
  $262 = $255 + $253;
  HEAPF32[$252>>2] = $262;
  $263 = $260 + $258;
  HEAPF32[$257>>2] = $263;
  $264 = $256 - $261;
  $265 = $264 * 0.70710676908493042;
  HEAPF32[$254>>2] = $265;
  $266 = $261 + $256;
  $267 = $266 * 0.70710676908493042;
  HEAPF32[$259>>2] = $267;
  $268 = ((($221)) + 96|0);
  $269 = +HEAPF32[$268>>2];
  $270 = ((($221)) + 32|0);
  $271 = +HEAPF32[$270>>2];
  $272 = $269 - $271;
  $273 = ((($221)) + 100|0);
  $274 = +HEAPF32[$273>>2];
  $275 = ((($221)) + 36|0);
  $276 = +HEAPF32[$275>>2];
  $277 = $274 - $276;
  $278 = $271 + $269;
  HEAPF32[$268>>2] = $278;
  $279 = $276 + $274;
  HEAPF32[$273>>2] = $279;
  $280 = $272 * 0.38268342614173889;
  $281 = $277 * 0.92387950420379638;
  $282 = $280 - $281;
  $283 = $277 * 0.38268342614173889;
  $284 = $272 * 0.92387950420379638;
  $285 = $283 + $284;
  $286 = ((($221)) + 88|0);
  $287 = +HEAPF32[$286>>2];
  $288 = ((($221)) + 24|0);
  $289 = +HEAPF32[$288>>2];
  $290 = $287 - $289;
  $291 = ((($221)) + 28|0);
  $292 = +HEAPF32[$291>>2];
  $293 = ((($221)) + 92|0);
  $294 = +HEAPF32[$293>>2];
  $295 = $292 - $294;
  $296 = $289 + $287;
  HEAPF32[$286>>2] = $296;
  $297 = $294 + $292;
  HEAPF32[$293>>2] = $297;
  HEAPF32[$291>>2] = $290;
  $298 = ((($221)) + 16|0);
  $299 = +HEAPF32[$298>>2];
  $300 = ((($221)) + 80|0);
  $301 = +HEAPF32[$300>>2];
  $302 = $299 - $301;
  $303 = ((($221)) + 20|0);
  $304 = +HEAPF32[$303>>2];
  $305 = ((($221)) + 84|0);
  $306 = +HEAPF32[$305>>2];
  $307 = $304 - $306;
  $308 = $301 + $299;
  HEAPF32[$300>>2] = $308;
  $309 = $306 + $304;
  HEAPF32[$305>>2] = $309;
  $310 = $307 * 0.92387950420379638;
  $311 = $302 * 0.38268342614173889;
  $312 = $310 + $311;
  $313 = $307 * 0.38268342614173889;
  $314 = $302 * 0.92387950420379638;
  $315 = $313 - $314;
  $316 = ((($221)) + 8|0);
  $317 = +HEAPF32[$316>>2];
  $318 = ((($221)) + 72|0);
  $319 = +HEAPF32[$318>>2];
  $320 = $317 - $319;
  $321 = ((($221)) + 12|0);
  $322 = +HEAPF32[$321>>2];
  $323 = ((($221)) + 76|0);
  $324 = +HEAPF32[$323>>2];
  $325 = $322 - $324;
  $326 = $319 + $317;
  HEAPF32[$318>>2] = $326;
  $327 = $324 + $322;
  HEAPF32[$323>>2] = $327;
  $328 = $325 + $320;
  $329 = $328 * 0.70710676908493042;
  $330 = $325 - $320;
  $331 = +HEAPF32[$221>>2];
  $332 = ((($221)) + 64|0);
  $333 = +HEAPF32[$332>>2];
  $334 = $331 - $333;
  $335 = ((($221)) + 4|0);
  $336 = +HEAPF32[$335>>2];
  $337 = ((($221)) + 68|0);
  $338 = +HEAPF32[$337>>2];
  $339 = $336 - $338;
  $340 = $333 + $331;
  HEAPF32[$332>>2] = $340;
  $341 = $338 + $336;
  HEAPF32[$337>>2] = $341;
  $342 = $339 * 0.38268342614173889;
  $343 = $334 * 0.92387950420379638;
  $344 = $342 + $343;
  $345 = $339 * 0.92387950420379638;
  $346 = $334 * 0.38268342614173889;
  $347 = $345 - $346;
  $348 = $347 - $285;
  $349 = $344 - $282;
  $350 = $344 + $282;
  $351 = $347 + $285;
  $352 = $349 + $348;
  $353 = $348 - $349;
  $354 = $330 - $266;
  $355 = $354 * 0.70710676908493042;
  $356 = +HEAPF32[$254>>2];
  $357 = $356 - $329;
  $358 = $356 + $329;
  $359 = $266 + $330;
  $360 = $359 * 0.70710676908493042;
  $361 = +HEAPF32[$236>>2];
  $362 = $361 - $312;
  $363 = +HEAPF32[$241>>2];
  $364 = $363 - $315;
  $365 = $361 + $312;
  $366 = $363 + $315;
  $367 = $362 - $364;
  $368 = $364 + $362;
  $369 = +HEAPF32[$224>>2];
  $370 = $369 - $295;
  $371 = +HEAPF32[$229>>2];
  $372 = $371 - $290;
  $373 = $295 + $369;
  $374 = $290 + $371;
  $375 = $370 + $355;
  $376 = $370 - $355;
  $377 = $367 + $352;
  $378 = $377 * 0.70710676908493042;
  $379 = $367 - $352;
  $380 = $379 * 0.70710676908493042;
  $381 = $378 + $375;
  HEAPF32[$288>>2] = $381;
  $382 = $375 - $378;
  HEAPF32[$298>>2] = $382;
  $383 = $368 - $353;
  $384 = $383 * 0.70710676908493042;
  $385 = $372 - $357;
  $386 = $384 + $376;
  HEAPF32[$221>>2] = $386;
  $387 = $376 - $384;
  HEAPF32[$316>>2] = $387;
  $388 = $368 + $353;
  $389 = $388 * 0.70710676908493042;
  $390 = $372 + $357;
  $391 = $385 + $380;
  HEAPF32[$321>>2] = $391;
  $392 = $385 - $380;
  HEAPF32[$335>>2] = $392;
  $393 = $390 + $389;
  HEAPF32[$291>>2] = $393;
  $394 = $390 - $389;
  HEAPF32[$303>>2] = $394;
  $395 = $373 + $358;
  $396 = $373 - $358;
  $397 = $365 + $350;
  $398 = $365 - $350;
  $399 = $395 + $397;
  HEAPF32[$224>>2] = $399;
  $400 = $395 - $397;
  HEAPF32[$236>>2] = $400;
  $401 = $366 - $351;
  $402 = $374 - $360;
  $403 = $396 + $401;
  HEAPF32[$270>>2] = $403;
  $404 = $396 - $401;
  HEAPF32[$254>>2] = $404;
  $405 = $366 + $351;
  $406 = $374 + $360;
  $407 = $402 + $398;
  HEAPF32[$259>>2] = $407;
  $408 = $402 - $398;
  HEAPF32[$275>>2] = $408;
  $409 = $406 + $405;
  HEAPF32[$229>>2] = $409;
  $410 = $406 - $405;
  HEAPF32[$241>>2] = $410;
  $411 = +HEAPF32[$273>>2];
  $412 = $341 - $411;
  $413 = +HEAPF32[$268>>2];
  $414 = $340 - $413;
  $415 = $413 + $340;
  $416 = $411 + $341;
  $417 = $414 + $412;
  $418 = $412 - $414;
  $419 = +HEAPF32[$323>>2];
  $420 = +HEAPF32[$257>>2];
  $421 = $419 - $420;
  $422 = +HEAPF32[$252>>2];
  $423 = +HEAPF32[$318>>2];
  $424 = $422 - $423;
  $425 = $423 + $422;
  $426 = $420 + $419;
  $427 = +HEAPF32[$234>>2];
  $428 = +HEAPF32[$300>>2];
  $429 = $427 - $428;
  $430 = +HEAPF32[$239>>2];
  $431 = +HEAPF32[$305>>2];
  $432 = $430 - $431;
  $433 = $428 + $427;
  $434 = $431 + $430;
  $435 = $429 - $432;
  $436 = $432 + $429;
  $437 = +HEAPF32[$222>>2];
  $438 = +HEAPF32[$286>>2];
  $439 = $437 - $438;
  $440 = +HEAPF32[$227>>2];
  $441 = +HEAPF32[$293>>2];
  $442 = $440 - $441;
  $443 = $438 + $437;
  $444 = $441 + $440;
  $445 = $439 + $421;
  $446 = $439 - $421;
  $447 = $435 + $417;
  $448 = $447 * 0.70710676908493042;
  $449 = $435 - $417;
  $450 = $449 * 0.70710676908493042;
  $451 = $448 + $445;
  HEAPF32[$286>>2] = $451;
  $452 = $445 - $448;
  HEAPF32[$300>>2] = $452;
  $453 = $436 - $418;
  $454 = $453 * 0.70710676908493042;
  $455 = $442 - $424;
  $456 = $454 + $446;
  HEAPF32[$332>>2] = $456;
  $457 = $446 - $454;
  HEAPF32[$318>>2] = $457;
  $458 = $436 + $418;
  $459 = $458 * 0.70710676908493042;
  $460 = $442 + $424;
  $461 = $455 + $450;
  HEAPF32[$323>>2] = $461;
  $462 = $455 - $450;
  HEAPF32[$337>>2] = $462;
  $463 = $460 + $459;
  HEAPF32[$293>>2] = $463;
  $464 = $460 - $459;
  HEAPF32[$305>>2] = $464;
  $465 = $443 + $425;
  $466 = $443 - $425;
  $467 = $433 + $415;
  $468 = $433 - $415;
  $469 = $465 + $467;
  HEAPF32[$222>>2] = $469;
  $470 = $465 - $467;
  HEAPF32[$234>>2] = $470;
  $471 = $434 - $416;
  $472 = $444 - $426;
  $473 = $466 + $471;
  HEAPF32[$268>>2] = $473;
  $474 = $466 - $471;
  HEAPF32[$252>>2] = $474;
  $475 = $434 + $416;
  $476 = $444 + $426;
  $477 = $472 + $468;
  HEAPF32[$257>>2] = $477;
  $478 = $472 - $468;
  HEAPF32[$273>>2] = $478;
  $479 = $476 + $475;
  HEAPF32[$227>>2] = $479;
  $480 = $476 - $475;
  HEAPF32[$239>>2] = $480;
  $481 = (($j$12) + 32)|0;
  $482 = ($481|0)<($points|0);
  if ($482) {
   $j$12 = $481;
  } else {
   break;
  }
 }
 return;
}
function _mdct_forward($init,$in,$out) {
 $init = $init|0;
 $in = $in|0;
 $out = $out|0;
 var $$alloca_mul = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0;
 var $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0;
 var $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0;
 var $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0.0, $169 = 0.0;
 var $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0;
 var $188 = 0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0.0;
 var $205 = 0.0, $206 = 0, $207 = 0.0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0;
 var $223 = 0.0, $224 = 0, $225 = 0, $226 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0;
 var $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0;
 var $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $T$0$i = 0, $T$0$lcssa = 0, $T$028 = 0, $T$1$lcssa = 0, $T$119 = 0, $T$212 = 0, $T$38 = 0, $bit$0$i = 0, $exitcond = 0, $i$0$lcssa = 0, $i$029 = 0, $i$1$lcssa = 0;
 var $i$120 = 0, $i$213 = 0, $i$39 = 0, $init$idx = 0, $init$idx$val = 0, $init$idx2$val = 0, $init$idx3$val = 0, $init$idx4 = 0, $init$idx4$val = 0, $scevgep = 0, $scevgep41 = 0, $scevgep42 = 0, $scevgep43 = 0, $w$06 = 0, $w0$0$i = 0, $w1$0$i = 0, $x0$0$lcssa = 0, $x0$026 = 0, $x0$117 = 0, $x0$210 = 0;
 var $x0$37 = 0, $x1$027 = 0, $x1$1$lcssa = 0, $x1$118 = 0, $x1$211 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$init>>2]|0;
 $1 = $0 >> 1;
 $2 = $0 >> 2;
 $3 = $0 >> 3;
 $4 = $0 << 2;
 $$alloca_mul = $4;
 $5 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $6 = (($5) + ($1<<2)|0);
 $7 = (($in) + ($1<<2)|0);
 $8 = (($7) + ($2<<2)|0);
 $9 = ((($init)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($1<<2)|0);
 $12 = ($3|0)>(0);
 if ($12) {
  $13 = ((($8)) + 4|0);
  $14 = (($3) + -1)|0;
  $15 = $14 >>> 1;
  $16 = (($1) + -2)|0;
  $17 = (($2) + ($1))|0;
  $18 = $15 << 2;
  $T$028 = $11;$i$029 = 0;$x0$026 = $8;$x1$027 = $13;
  while(1) {
   $19 = ((($x0$026)) + -16|0);
   $20 = ((($T$028)) + -8|0);
   $21 = ((($x0$026)) + -8|0);
   $22 = +HEAPF32[$21>>2];
   $23 = +HEAPF32[$x1$027>>2];
   $24 = $23 + $22;
   $25 = +HEAPF32[$19>>2];
   $26 = ((($x1$027)) + 8|0);
   $27 = +HEAPF32[$26>>2];
   $28 = $27 + $25;
   $29 = ((($T$028)) + -4|0);
   $30 = +HEAPF32[$29>>2];
   $31 = $28 * $30;
   $32 = +HEAPF32[$20>>2];
   $33 = $32 * $24;
   $34 = $33 + $31;
   $35 = (($6) + ($i$029<<2)|0);
   HEAPF32[$35>>2] = $34;
   $36 = +HEAPF32[$20>>2];
   $37 = $36 * $28;
   $38 = +HEAPF32[$29>>2];
   $39 = $38 * $24;
   $40 = $37 - $39;
   $41 = $i$029 | 1;
   $42 = (($6) + ($41<<2)|0);
   HEAPF32[$42>>2] = $40;
   $43 = ((($x1$027)) + 16|0);
   $44 = (($i$029) + 2)|0;
   $45 = ($44|0)<($3|0);
   if ($45) {
    $T$028 = $20;$i$029 = $44;$x0$026 = $19;$x1$027 = $43;
   } else {
    break;
   }
  }
  $46 = $15 << 1;
  $47 = (($16) - ($46))|0;
  $48 = (($17) + -4)|0;
  $49 = (($48) - ($18))|0;
  $50 = (($46) + 2)|0;
  $scevgep42 = (($10) + ($47<<2)|0);
  $scevgep43 = (($in) + ($49<<2)|0);
  $T$0$lcssa = $scevgep42;$i$0$lcssa = $50;$x0$0$lcssa = $scevgep43;
 } else {
  $T$0$lcssa = $11;$i$0$lcssa = 0;$x0$0$lcssa = $8;
 }
 $51 = ((($in)) + 4|0);
 $52 = (($1) - ($3))|0;
 $53 = ($i$0$lcssa|0)<($52|0);
 if ($53) {
  $54 = (($1) + -1)|0;
  $55 = (($54) - ($i$0$lcssa))|0;
  $56 = (($55) - ($3))|0;
  $57 = $56 >>> 1;
  $58 = $57 << 1;
  $59 = $57 << 2;
  $60 = (($59) + 5)|0;
  $T$119 = $T$0$lcssa;$i$120 = $i$0$lcssa;$x0$117 = $x0$0$lcssa;$x1$118 = $51;
  while(1) {
   $61 = ((($T$119)) + -8|0);
   $62 = ((($x0$117)) + -16|0);
   $63 = ((($x0$117)) + -8|0);
   $64 = +HEAPF32[$63>>2];
   $65 = +HEAPF32[$x1$118>>2];
   $66 = $64 - $65;
   $67 = +HEAPF32[$62>>2];
   $68 = ((($x1$118)) + 8|0);
   $69 = +HEAPF32[$68>>2];
   $70 = $67 - $69;
   $71 = ((($T$119)) + -4|0);
   $72 = +HEAPF32[$71>>2];
   $73 = $70 * $72;
   $74 = +HEAPF32[$61>>2];
   $75 = $74 * $66;
   $76 = $75 + $73;
   $77 = (($6) + ($i$120<<2)|0);
   HEAPF32[$77>>2] = $76;
   $78 = +HEAPF32[$61>>2];
   $79 = $78 * $70;
   $80 = +HEAPF32[$71>>2];
   $81 = $80 * $66;
   $82 = $79 - $81;
   $83 = $i$120 | 1;
   $84 = (($6) + ($83<<2)|0);
   HEAPF32[$84>>2] = $82;
   $85 = ((($x1$118)) + 16|0);
   $86 = (($i$120) + 2)|0;
   $87 = ($86|0)<($52|0);
   if ($87) {
    $T$119 = $61;$i$120 = $86;$x0$117 = $62;$x1$118 = $85;
   } else {
    break;
   }
  }
  $88 = (($i$0$lcssa) + ($58))|0;
  $89 = (-2 - ($58))|0;
  $90 = (($88) + 2)|0;
  $scevgep = (($in) + ($60<<2)|0);
  $scevgep41 = (($T$0$lcssa) + ($89<<2)|0);
  $T$1$lcssa = $scevgep41;$i$1$lcssa = $90;$x1$1$lcssa = $scevgep;
 } else {
  $T$1$lcssa = $T$0$lcssa;$i$1$lcssa = $i$0$lcssa;$x1$1$lcssa = $51;
 }
 $91 = ($i$1$lcssa|0)<($1|0);
 if ($91) {
  $92 = (($in) + ($0<<2)|0);
  $T$212 = $T$1$lcssa;$i$213 = $i$1$lcssa;$x0$210 = $92;$x1$211 = $x1$1$lcssa;
  while(1) {
   $93 = ((($T$212)) + -8|0);
   $94 = ((($x0$210)) + -16|0);
   $95 = ((($x0$210)) + -8|0);
   $96 = +HEAPF32[$95>>2];
   $97 = -$96;
   $98 = +HEAPF32[$x1$211>>2];
   $99 = $97 - $98;
   $100 = +HEAPF32[$94>>2];
   $101 = -$100;
   $102 = ((($x1$211)) + 8|0);
   $103 = +HEAPF32[$102>>2];
   $104 = $101 - $103;
   $105 = ((($T$212)) + -4|0);
   $106 = +HEAPF32[$105>>2];
   $107 = $104 * $106;
   $108 = +HEAPF32[$93>>2];
   $109 = $108 * $99;
   $110 = $109 + $107;
   $111 = (($6) + ($i$213<<2)|0);
   HEAPF32[$111>>2] = $110;
   $112 = +HEAPF32[$93>>2];
   $113 = $112 * $104;
   $114 = +HEAPF32[$105>>2];
   $115 = $114 * $99;
   $116 = $113 - $115;
   $117 = $i$213 | 1;
   $118 = (($6) + ($117<<2)|0);
   HEAPF32[$118>>2] = $116;
   $119 = ((($x1$211)) + 16|0);
   $120 = (($i$213) + 2)|0;
   $121 = ($120|0)<($1|0);
   if ($121) {
    $T$212 = $93;$i$213 = $120;$x0$210 = $94;$x1$211 = $119;
   } else {
    break;
   }
  }
 }
 $init$idx = ((($init)) + 4|0);
 $init$idx$val = HEAP32[$init$idx>>2]|0;
 _mdct_butterflies($init$idx$val,$10,$6,$1);
 $init$idx2$val = HEAP32[$init>>2]|0;
 $init$idx3$val = HEAP32[$9>>2]|0;
 $init$idx4 = ((($init)) + 12|0);
 $init$idx4$val = HEAP32[$init$idx4>>2]|0;
 $122 = $init$idx2$val >> 1;
 $123 = (($5) + ($122<<2)|0);
 $124 = (($init$idx3$val) + ($init$idx2$val<<2)|0);
 $T$0$i = $124;$bit$0$i = $init$idx4$val;$w0$0$i = $5;$w1$0$i = $123;
 while(1) {
  $125 = HEAP32[$bit$0$i>>2]|0;
  $126 = (($123) + ($125<<2)|0);
  $127 = ((($bit$0$i)) + 4|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = (($123) + ($128<<2)|0);
  $130 = ((($126)) + 4|0);
  $131 = +HEAPF32[$130>>2];
  $132 = ((($129)) + 4|0);
  $133 = +HEAPF32[$132>>2];
  $134 = $131 - $133;
  $135 = +HEAPF32[$126>>2];
  $136 = +HEAPF32[$129>>2];
  $137 = $136 + $135;
  $138 = +HEAPF32[$T$0$i>>2];
  $139 = $137 * $138;
  $140 = ((($T$0$i)) + 4|0);
  $141 = +HEAPF32[$140>>2];
  $142 = $141 * $134;
  $143 = $142 + $139;
  $144 = $141 * $137;
  $145 = $138 * $134;
  $146 = $144 - $145;
  $147 = ((($w1$0$i)) + -16|0);
  $148 = $133 + $131;
  $149 = $148 * 0.5;
  $150 = $135 - $136;
  $151 = $150 * 0.5;
  $152 = $143 + $149;
  HEAPF32[$w0$0$i>>2] = $152;
  $153 = $149 - $143;
  $154 = ((($w1$0$i)) + -8|0);
  HEAPF32[$154>>2] = $153;
  $155 = $146 + $151;
  $156 = ((($w0$0$i)) + 4|0);
  HEAPF32[$156>>2] = $155;
  $157 = $146 - $151;
  $158 = ((($w1$0$i)) + -4|0);
  HEAPF32[$158>>2] = $157;
  $159 = ((($bit$0$i)) + 8|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = (($123) + ($160<<2)|0);
  $162 = ((($bit$0$i)) + 12|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (($123) + ($163<<2)|0);
  $165 = ((($161)) + 4|0);
  $166 = +HEAPF32[$165>>2];
  $167 = ((($164)) + 4|0);
  $168 = +HEAPF32[$167>>2];
  $169 = $166 - $168;
  $170 = +HEAPF32[$161>>2];
  $171 = +HEAPF32[$164>>2];
  $172 = $171 + $170;
  $173 = ((($T$0$i)) + 8|0);
  $174 = +HEAPF32[$173>>2];
  $175 = $172 * $174;
  $176 = ((($T$0$i)) + 12|0);
  $177 = +HEAPF32[$176>>2];
  $178 = $177 * $169;
  $179 = $178 + $175;
  $180 = $177 * $172;
  $181 = $174 * $169;
  $182 = $180 - $181;
  $183 = $168 + $166;
  $184 = $183 * 0.5;
  $185 = $170 - $171;
  $186 = $185 * 0.5;
  $187 = $179 + $184;
  $188 = ((($w0$0$i)) + 8|0);
  HEAPF32[$188>>2] = $187;
  $189 = $184 - $179;
  HEAPF32[$147>>2] = $189;
  $190 = $182 + $186;
  $191 = ((($w0$0$i)) + 12|0);
  HEAPF32[$191>>2] = $190;
  $192 = $182 - $186;
  $193 = ((($w1$0$i)) + -12|0);
  HEAPF32[$193>>2] = $192;
  $194 = ((($T$0$i)) + 16|0);
  $195 = ((($bit$0$i)) + 16|0);
  $196 = ((($w0$0$i)) + 16|0);
  $197 = ($196>>>0)<($147>>>0);
  if ($197) {
   $T$0$i = $194;$bit$0$i = $195;$w0$0$i = $196;$w1$0$i = $147;
  } else {
   break;
  }
 }
 $198 = ($2|0)>(0);
 if (!($198)) {
  STACKTOP = sp;return;
 }
 $199 = (($out) + ($1<<2)|0);
 $200 = (($init$idx3$val) + ($1<<2)|0);
 $201 = ((($init)) + 16|0);
 $T$38 = $200;$i$39 = 0;$w$06 = $5;$x0$37 = $199;
 while(1) {
  $202 = ((($x0$37)) + -4|0);
  $203 = +HEAPF32[$w$06>>2];
  $204 = +HEAPF32[$T$38>>2];
  $205 = $204 * $203;
  $206 = ((($w$06)) + 4|0);
  $207 = +HEAPF32[$206>>2];
  $208 = ((($T$38)) + 4|0);
  $209 = +HEAPF32[$208>>2];
  $210 = $209 * $207;
  $211 = $210 + $205;
  $212 = +HEAPF32[$201>>2];
  $213 = $211 * $212;
  $214 = (($out) + ($i$39<<2)|0);
  HEAPF32[$214>>2] = $213;
  $215 = +HEAPF32[$w$06>>2];
  $216 = +HEAPF32[$208>>2];
  $217 = $216 * $215;
  $218 = +HEAPF32[$206>>2];
  $219 = +HEAPF32[$T$38>>2];
  $220 = $219 * $218;
  $221 = $217 - $220;
  $222 = +HEAPF32[$201>>2];
  $223 = $221 * $222;
  HEAPF32[$202>>2] = $223;
  $224 = ((($w$06)) + 8|0);
  $225 = ((($T$38)) + 8|0);
  $226 = (($i$39) + 1)|0;
  $exitcond = ($226|0)==($2|0);
  if ($exitcond) {
   break;
  } else {
   $T$38 = $225;$i$39 = $226;$w$06 = $224;$x0$37 = $202;
  }
 }
 STACKTOP = sp;return;
}
function _drft_forward($l,$data) {
 $l = $l|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $exitcond7$i = 0, $i$01$i = 0, $iw$02$i = 0, $k1$05$i = 0, $l2$04$i = 0, $na$0$$i = 0, $na$03$i = 0, $na$2$i = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$l>>2]|0;
 $1 = ($0|0)==(1);
 if ($1) {
  return;
 }
 $2 = ((($l)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($0<<2)|0);
 $5 = ((($l)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 if (!($9)) {
  return;
 }
 $10 = (($8) + 1)|0;
 $iw$02$i = $0;$k1$05$i = 0;$l2$04$i = $0;$na$03$i = 1;
 while(1) {
  $11 = (($10) - ($k1$05$i))|0;
  $12 = (($6) + ($11<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($l2$04$i|0) / ($13|0))&-1;
  $15 = (($0|0) / ($l2$04$i|0))&-1;
  $16 = Math_imul($15, $14)|0;
  $17 = (($13) + -1)|0;
  $18 = Math_imul($15, $17)|0;
  $19 = (($iw$02$i) - ($18))|0;
  $20 = (1 - ($na$03$i))|0;
  L9: do {
   switch ($13|0) {
   case 4:  {
    $21 = (($19) + ($15))|0;
    $22 = (($21) + ($15))|0;
    $23 = ($20|0)==(0);
    $24 = (($4) + ($19<<2)|0);
    $25 = ((($24)) + -4|0);
    $26 = (($4) + ($21<<2)|0);
    $27 = ((($26)) + -4|0);
    $28 = (($4) + ($22<<2)|0);
    $29 = ((($28)) + -4|0);
    if ($23) {
     _dradf4($15,$14,$data,$3,$25,$27,$29);
     $na$2$i = 0;
     break L9;
    } else {
     _dradf4($15,$14,$3,$data,$25,$27,$29);
     $na$2$i = $20;
     break L9;
    }
    break;
   }
   case 2:  {
    $30 = ($20|0)==(0);
    $31 = (($4) + ($19<<2)|0);
    $32 = ((($31)) + -4|0);
    if ($30) {
     _dradf2($15,$14,$data,$3,$32);
     $na$2$i = 0;
     break L9;
    } else {
     _dradf2($15,$14,$3,$data,$32);
     $na$2$i = $20;
     break L9;
    }
    break;
   }
   default: {
    $33 = ($15|0)==(1);
    $na$0$$i = $33 ? $na$03$i : $20;
    $34 = ($na$0$$i|0)==(0);
    $35 = (($4) + ($19<<2)|0);
    $36 = ((($35)) + -4|0);
    if ($34) {
     _dradfg($15,$13,$14,$16,$data,$data,$data,$3,$3,$36);
     $na$2$i = 1;
     break L9;
    } else {
     _dradfg($15,$13,$14,$16,$3,$3,$3,$data,$data,$36);
     $na$2$i = 0;
     break L9;
    }
   }
   }
  } while(0);
  $37 = (($k1$05$i) + 1)|0;
  $exitcond7$i = ($37|0)==($8|0);
  if ($exitcond7$i) {
   break;
  } else {
   $iw$02$i = $19;$k1$05$i = $37;$l2$04$i = $14;$na$03$i = $na$2$i;
  }
 }
 $38 = ($na$2$i|0)!=(1);
 $39 = ($0|0)>(0);
 $or$cond$i = $39 & $38;
 if ($or$cond$i) {
  $i$01$i = 0;
 } else {
  return;
 }
 while(1) {
  $40 = (($3) + ($i$01$i<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($data) + ($i$01$i<<2)|0);
  HEAP32[$42>>2] = $41;
  $43 = (($i$01$i) + 1)|0;
  $exitcond$i = ($43|0)==($0|0);
  if ($exitcond$i) {
   break;
  } else {
   $i$01$i = $43;
  }
 }
 return;
}
function _dradf4($ido,$l1,$cc,$ch,$wa1,$wa2,$wa3) {
 $ido = $ido|0;
 $l1 = $l1|0;
 $cc = $cc|0;
 $ch = $ch|0;
 $wa1 = $wa1|0;
 $wa2 = $wa2|0;
 $wa3 = $wa3|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0.0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0, $151 = 0;
 var $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0.0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0;
 var $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0;
 var $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $exitcond = 0, $exitcond23 = 0, $exitcond24 = 0, $i$09 = 0, $k$019 = 0, $k$112 = 0;
 var $k$25 = 0, $t1$018 = 0, $t1$111 = 0, $t1$24 = 0, $t2$017 = 0, $t2$18 = 0, $t2$23 = 0, $t3$016 = 0, $t4$015 = 0, $t4$17 = 0, $t4$22 = 0, $t5$06 = 0, $t6$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($l1, $ido)|0;
 $1 = $0 << 1;
 $2 = ($l1|0)>(0);
 if ($2) {
  $3 = ($0*3)|0;
  $4 = $ido << 2;
  $5 = (($4) + -1)|0;
  $6 = $ido << 1;
  $k$019 = 0;$t1$018 = $0;$t2$017 = $3;$t3$016 = 0;$t4$015 = $1;
  while(1) {
   $7 = (($cc) + ($t1$018<<2)|0);
   $8 = +HEAPF32[$7>>2];
   $9 = (($cc) + ($t2$017<<2)|0);
   $10 = +HEAPF32[$9>>2];
   $11 = $10 + $8;
   $12 = (($cc) + ($t3$016<<2)|0);
   $13 = +HEAPF32[$12>>2];
   $14 = (($cc) + ($t4$015<<2)|0);
   $15 = +HEAPF32[$14>>2];
   $16 = $15 + $13;
   $17 = $16 + $11;
   $18 = $t3$016 << 2;
   $19 = (($ch) + ($18<<2)|0);
   HEAPF32[$19>>2] = $17;
   $20 = $16 - $11;
   $21 = (($5) + ($18))|0;
   $22 = (($ch) + ($21<<2)|0);
   HEAPF32[$22>>2] = $20;
   $23 = +HEAPF32[$12>>2];
   $24 = +HEAPF32[$14>>2];
   $25 = $23 - $24;
   $26 = (($18) + ($6))|0;
   $27 = (($26) + -1)|0;
   $28 = (($ch) + ($27<<2)|0);
   HEAPF32[$28>>2] = $25;
   $29 = +HEAPF32[$9>>2];
   $30 = +HEAPF32[$7>>2];
   $31 = $29 - $30;
   $32 = (($ch) + ($26<<2)|0);
   HEAPF32[$32>>2] = $31;
   $33 = (($t1$018) + ($ido))|0;
   $34 = (($t2$017) + ($ido))|0;
   $35 = (($t3$016) + ($ido))|0;
   $36 = (($t4$015) + ($ido))|0;
   $37 = (($k$019) + 1)|0;
   $exitcond24 = ($37|0)==($l1|0);
   if ($exitcond24) {
    break;
   } else {
    $k$019 = $37;$t1$018 = $33;$t2$017 = $34;$t3$016 = $35;$t4$015 = $36;
   }
  }
 }
 $38 = ($ido|0)<(2);
 if ($38) {
  return;
 }
 $39 = ($ido|0)==(2);
 if (!($39)) {
  if ($2) {
   $40 = $ido << 1;
   $k$112 = 0;$t1$111 = 0;
   while(1) {
    $41 = $t1$111 << 2;
    $42 = (($41) + ($40))|0;
    $i$09 = 2;$t2$18 = $t1$111;$t4$17 = $41;$t5$06 = $42;
    while(1) {
     $43 = (($t2$18) + 2)|0;
     $44 = (($t4$17) + 2)|0;
     $45 = (($t5$06) + -2)|0;
     $46 = (($43) + ($0))|0;
     $47 = (($i$09) + -2)|0;
     $48 = (($wa1) + ($47<<2)|0);
     $49 = +HEAPF32[$48>>2];
     $50 = (($46) + -1)|0;
     $51 = (($cc) + ($50<<2)|0);
     $52 = +HEAPF32[$51>>2];
     $53 = $52 * $49;
     $54 = (($i$09) + -1)|0;
     $55 = (($wa1) + ($54<<2)|0);
     $56 = +HEAPF32[$55>>2];
     $57 = (($cc) + ($46<<2)|0);
     $58 = +HEAPF32[$57>>2];
     $59 = $58 * $56;
     $60 = $59 + $53;
     $61 = $58 * $49;
     $62 = $56 * $52;
     $63 = $61 - $62;
     $64 = (($46) + ($0))|0;
     $65 = (($wa2) + ($47<<2)|0);
     $66 = +HEAPF32[$65>>2];
     $67 = (($64) + -1)|0;
     $68 = (($cc) + ($67<<2)|0);
     $69 = +HEAPF32[$68>>2];
     $70 = $69 * $66;
     $71 = (($wa2) + ($54<<2)|0);
     $72 = +HEAPF32[$71>>2];
     $73 = (($cc) + ($64<<2)|0);
     $74 = +HEAPF32[$73>>2];
     $75 = $74 * $72;
     $76 = $75 + $70;
     $77 = $74 * $66;
     $78 = $72 * $69;
     $79 = $77 - $78;
     $80 = (($64) + ($0))|0;
     $81 = (($wa3) + ($47<<2)|0);
     $82 = +HEAPF32[$81>>2];
     $83 = (($80) + -1)|0;
     $84 = (($cc) + ($83<<2)|0);
     $85 = +HEAPF32[$84>>2];
     $86 = $85 * $82;
     $87 = (($wa3) + ($54<<2)|0);
     $88 = +HEAPF32[$87>>2];
     $89 = (($cc) + ($80<<2)|0);
     $90 = +HEAPF32[$89>>2];
     $91 = $90 * $88;
     $92 = $91 + $86;
     $93 = $90 * $82;
     $94 = $88 * $85;
     $95 = $93 - $94;
     $96 = $92 + $60;
     $97 = $92 - $60;
     $98 = $95 + $63;
     $99 = $63 - $95;
     $100 = (($cc) + ($43<<2)|0);
     $101 = +HEAPF32[$100>>2];
     $102 = $101 + $79;
     $103 = $101 - $79;
     $104 = (($t2$18) + 1)|0;
     $105 = (($cc) + ($104<<2)|0);
     $106 = +HEAPF32[$105>>2];
     $107 = $106 + $76;
     $108 = $106 - $76;
     $109 = $96 + $107;
     $110 = $t4$17 | 1;
     $111 = (($ch) + ($110<<2)|0);
     HEAPF32[$111>>2] = $109;
     $112 = $98 + $102;
     $113 = (($ch) + ($44<<2)|0);
     HEAPF32[$113>>2] = $112;
     $114 = $108 - $99;
     $115 = (($t5$06) + -3)|0;
     $116 = (($ch) + ($115<<2)|0);
     HEAPF32[$116>>2] = $114;
     $117 = $97 - $103;
     $118 = (($ch) + ($45<<2)|0);
     HEAPF32[$118>>2] = $117;
     $119 = $99 + $108;
     $120 = (($44) + ($40))|0;
     $121 = (($120) + -1)|0;
     $122 = (($ch) + ($121<<2)|0);
     HEAPF32[$122>>2] = $119;
     $123 = $97 + $103;
     $124 = (($ch) + ($120<<2)|0);
     HEAPF32[$124>>2] = $123;
     $125 = $107 - $96;
     $126 = (($45) + ($40))|0;
     $127 = (($126) + -1)|0;
     $128 = (($ch) + ($127<<2)|0);
     HEAPF32[$128>>2] = $125;
     $129 = $98 - $102;
     $130 = (($ch) + ($126<<2)|0);
     HEAPF32[$130>>2] = $129;
     $131 = (($i$09) + 2)|0;
     $132 = ($131|0)<($ido|0);
     if ($132) {
      $i$09 = $131;$t2$18 = $43;$t4$17 = $44;$t5$06 = $45;
     } else {
      break;
     }
    }
    $133 = (($t1$111) + ($ido))|0;
    $134 = (($k$112) + 1)|0;
    $exitcond23 = ($134|0)==($l1|0);
    if ($exitcond23) {
     break;
    } else {
     $k$112 = $134;$t1$111 = $133;
    }
   }
  }
  $135 = $ido & 1;
  $136 = ($135|0)==(0);
  if (!($136)) {
   return;
  }
 }
 $137 = (($ido) + -1)|0;
 $138 = (($137) + ($0))|0;
 $139 = $ido << 2;
 $140 = $ido << 1;
 if (!($2)) {
  return;
 }
 $141 = (($138) + ($1))|0;
 $k$25 = 0;$t1$24 = $138;$t2$23 = $141;$t4$22 = $ido;$t6$01 = $ido;
 while(1) {
  $142 = (($cc) + ($t1$24<<2)|0);
  $143 = +HEAPF32[$142>>2];
  $144 = (($cc) + ($t2$23<<2)|0);
  $145 = +HEAPF32[$144>>2];
  $146 = $145 + $143;
  $147 = $146 * -0.70710676908493042;
  $148 = $143 - $145;
  $149 = $148 * 0.70710676908493042;
  $150 = (($t6$01) + -1)|0;
  $151 = (($cc) + ($150<<2)|0);
  $152 = +HEAPF32[$151>>2];
  $153 = $149 + $152;
  $154 = (($t4$22) + -1)|0;
  $155 = (($ch) + ($154<<2)|0);
  HEAPF32[$155>>2] = $153;
  $156 = +HEAPF32[$151>>2];
  $157 = $156 - $149;
  $158 = (($t4$22) + ($140))|0;
  $159 = (($158) + -1)|0;
  $160 = (($ch) + ($159<<2)|0);
  HEAPF32[$160>>2] = $157;
  $161 = (($t1$24) + ($0))|0;
  $162 = (($cc) + ($161<<2)|0);
  $163 = +HEAPF32[$162>>2];
  $164 = $147 - $163;
  $165 = (($ch) + ($t4$22<<2)|0);
  HEAPF32[$165>>2] = $164;
  $166 = +HEAPF32[$162>>2];
  $167 = $166 + $147;
  $168 = (($ch) + ($158<<2)|0);
  HEAPF32[$168>>2] = $167;
  $169 = (($t1$24) + ($ido))|0;
  $170 = (($t2$23) + ($ido))|0;
  $171 = (($t4$22) + ($139))|0;
  $172 = (($t6$01) + ($ido))|0;
  $173 = (($k$25) + 1)|0;
  $exitcond = ($173|0)==($l1|0);
  if ($exitcond) {
   break;
  } else {
   $k$25 = $173;$t1$24 = $169;$t2$23 = $170;$t4$22 = $171;$t6$01 = $172;
  }
 }
 return;
}
function _dradf2($ido,$l1,$cc,$ch,$wa1) {
 $ido = $ido|0;
 $l1 = $l1|0;
 $cc = $cc|0;
 $ch = $ch|0;
 $wa1 = $wa1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0;
 var $81 = 0, $9 = 0, $exitcond = 0, $exitcond23 = 0, $exitcond25 = 0, $i$05$us = 0, $k$016 = 0, $k$111$us = 0, $k$21 = 0, $t1$017 = 0, $t1$112$us = 0, $t1$22 = 0, $t2$018 = 0, $t2$113$us = 0, $t2$23 = 0, $t3$06$us = 0, $t3$14 = 0, $t4$07$us = 0, $t5$08$us = 0, $t6$09$us = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($l1, $ido)|0;
 $1 = $ido << 1;
 $2 = ($l1|0)>(0);
 if ($2) {
  $3 = (($1) + -1)|0;
  $k$016 = 0;$t1$017 = 0;$t2$018 = $0;
  while(1) {
   $4 = (($cc) + ($t1$017<<2)|0);
   $5 = +HEAPF32[$4>>2];
   $6 = (($cc) + ($t2$018<<2)|0);
   $7 = +HEAPF32[$6>>2];
   $8 = $7 + $5;
   $9 = $t1$017 << 1;
   $10 = (($ch) + ($9<<2)|0);
   HEAPF32[$10>>2] = $8;
   $11 = +HEAPF32[$4>>2];
   $12 = +HEAPF32[$6>>2];
   $13 = $11 - $12;
   $14 = (($3) + ($9))|0;
   $15 = (($ch) + ($14<<2)|0);
   HEAPF32[$15>>2] = $13;
   $16 = (($t1$017) + ($ido))|0;
   $17 = (($t2$018) + ($ido))|0;
   $18 = (($k$016) + 1)|0;
   $exitcond25 = ($18|0)==($l1|0);
   if ($exitcond25) {
    break;
   } else {
    $k$016 = $18;$t1$017 = $16;$t2$018 = $17;
   }
  }
 }
 $19 = ($ido|0)<(2);
 if ($19) {
  return;
 }
 $20 = ($ido|0)==(2);
 if (!($20)) {
  if ($2) {
   $k$111$us = 0;$t1$112$us = 0;$t2$113$us = $0;
   while(1) {
    $21 = $t1$112$us << 1;
    $22 = (($21) + ($1))|0;
    $i$05$us = 2;$t3$06$us = $t2$113$us;$t4$07$us = $22;$t5$08$us = $t1$112$us;$t6$09$us = $21;
    while(1) {
     $23 = (($t3$06$us) + 2)|0;
     $24 = (($t4$07$us) + -2)|0;
     $25 = (($t5$08$us) + 2)|0;
     $26 = (($t6$09$us) + 2)|0;
     $27 = (($i$05$us) + -2)|0;
     $28 = (($wa1) + ($27<<2)|0);
     $29 = +HEAPF32[$28>>2];
     $30 = (($t3$06$us) + 1)|0;
     $31 = (($cc) + ($30<<2)|0);
     $32 = +HEAPF32[$31>>2];
     $33 = $32 * $29;
     $34 = (($i$05$us) + -1)|0;
     $35 = (($wa1) + ($34<<2)|0);
     $36 = +HEAPF32[$35>>2];
     $37 = (($cc) + ($23<<2)|0);
     $38 = +HEAPF32[$37>>2];
     $39 = $38 * $36;
     $40 = $39 + $33;
     $41 = $38 * $29;
     $42 = $36 * $32;
     $43 = $41 - $42;
     $44 = (($cc) + ($25<<2)|0);
     $45 = +HEAPF32[$44>>2];
     $46 = $43 + $45;
     $47 = (($ch) + ($26<<2)|0);
     HEAPF32[$47>>2] = $46;
     $48 = +HEAPF32[$44>>2];
     $49 = $43 - $48;
     $50 = (($ch) + ($24<<2)|0);
     HEAPF32[$50>>2] = $49;
     $51 = (($t5$08$us) + 1)|0;
     $52 = (($cc) + ($51<<2)|0);
     $53 = +HEAPF32[$52>>2];
     $54 = $53 + $40;
     $55 = $t6$09$us | 1;
     $56 = (($ch) + ($55<<2)|0);
     HEAPF32[$56>>2] = $54;
     $57 = +HEAPF32[$52>>2];
     $58 = $57 - $40;
     $59 = (($t4$07$us) + -3)|0;
     $60 = (($ch) + ($59<<2)|0);
     HEAPF32[$60>>2] = $58;
     $61 = (($i$05$us) + 2)|0;
     $62 = ($61|0)<($ido|0);
     if ($62) {
      $i$05$us = $61;$t3$06$us = $23;$t4$07$us = $24;$t5$08$us = $25;$t6$09$us = $26;
     } else {
      break;
     }
    }
    $63 = (($t1$112$us) + ($ido))|0;
    $64 = (($t2$113$us) + ($ido))|0;
    $65 = (($k$111$us) + 1)|0;
    $exitcond23 = ($65|0)==($l1|0);
    if ($exitcond23) {
     break;
    } else {
     $k$111$us = $65;$t1$112$us = $63;$t2$113$us = $64;
    }
   }
  }
  $66 = (($ido|0) % 2)&-1;
  $67 = ($66|0)==(1);
  if ($67) {
   return;
  }
 }
 $68 = (($ido) + -1)|0;
 if (!($2)) {
  return;
 }
 $69 = (($0) + ($68))|0;
 $k$21 = 0;$t1$22 = $ido;$t2$23 = $69;$t3$14 = $68;
 while(1) {
  $70 = (($cc) + ($t2$23<<2)|0);
  $71 = +HEAPF32[$70>>2];
  $72 = -$71;
  $73 = (($ch) + ($t1$22<<2)|0);
  HEAPF32[$73>>2] = $72;
  $74 = (($cc) + ($t3$14<<2)|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($t1$22) + -1)|0;
  $77 = (($ch) + ($76<<2)|0);
  HEAP32[$77>>2] = $75;
  $78 = (($t1$22) + ($1))|0;
  $79 = (($t2$23) + ($ido))|0;
  $80 = (($t3$14) + ($ido))|0;
  $81 = (($k$21) + 1)|0;
  $exitcond = ($81|0)==($l1|0);
  if ($exitcond) {
   break;
  } else {
   $k$21 = $81;$t1$22 = $78;$t2$23 = $79;$t3$14 = $80;
  }
 }
 return;
}
function _dradfg($ido,$ip,$l1,$idl1,$cc,$c1,$c2,$ch,$ch2,$wa) {
 $ido = $ido|0;
 $ip = $ip|0;
 $l1 = $l1|0;
 $idl1 = $idl1|0;
 $cc = $cc|0;
 $c1 = $c1|0;
 $c2 = $c2|0;
 $ch = $ch|0;
 $ch2 = $ch2|0;
 $wa = $wa|0;
 var $$not = 0, $$not268 = 0, $$not269 = 0, $$not270 = 0, $$not272 = 0, $$not273 = 0, $$not278 = 0, $$not279 = 0, $$not284 = 0, $$not285 = 0, $$pn = 0, $0 = 0.0, $1 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0;
 var $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0.0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0.0;
 var $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0;
 var $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0.0, $224 = 0, $225 = 0, $226 = 0.0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0;
 var $232 = 0, $233 = 0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0.0, $242 = 0.0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0.0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0.0, $302 = 0.0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0.0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0.0, $342 = 0, $343 = 0, $344 = 0.0, $345 = 0.0, $346 = 0, $347 = 0, $348 = 0.0, $349 = 0.0, $35 = 0, $350 = 0.0, $351 = 0, $352 = 0, $353 = 0, $354 = 0.0, $355 = 0, $356 = 0.0, $357 = 0.0, $358 = 0;
 var $359 = 0.0, $36 = 0.0, $360 = 0.0, $361 = 0.0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0;
 var $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0;
 var $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $ai1$0112 = 0.0, $ai2$0107$us = 0.0, $ar1$0113 = 0.0, $ar2$0108$us = 0.0, $brmerge = 0, $brmerge271 = 0, $brmerge274 = 0, $brmerge280 = 0, $brmerge286 = 0, $cosf = 0.0, $exitcond = 0, $exitcond221 = 0, $exitcond223 = 0, $exitcond224 = 0, $exitcond225 = 0, $exitcond226 = 0, $exitcond228 = 0, $exitcond229 = 0;
 var $exitcond231 = 0, $exitcond232 = 0, $exitcond234 = 0, $exitcond235 = 0, $exitcond237 = 0, $exitcond239 = 0, $exitcond240 = 0, $exitcond241 = 0, $exitcond242 = 0, $exitcond243 = 0, $exitcond245 = 0, $exitcond246 = 0, $exitcond247 = 0, $exitcond249 = 0, $exitcond250 = 0, $exitcond252 = 0, $exitcond253 = 0, $exitcond254 = 0, $exitcond255 = 0, $exitcond256 = 0;
 var $exitcond257 = 0, $exitcond259 = 0, $i$0164$us = 0, $i$1184$us = 0, $i$2142$us = 0, $i$3152$us = 0, $i$475$us = 0, $i$572$us = 0, $i$638$us = 0, $i$728$us = 0, $idij$0165$us = 0, $idij$1185$us = 0, $ik$0202 = 0, $ik$1131 = 0, $ik$294 = 0, $ik$3101$us = 0, $ik$482$us = 0, $is$0175 = 0, $is$1190 = 0, $j$0199$us = 0;
 var $j$1036 = 0, $j$1176 = 0, $j$2191 = 0, $j$3148 = 0, $j$4161 = 0, $j$5127$us = 0, $j$6109$us = 0, $j$787$us = 0, $j$863$us = 0, $j$951 = 0, $k$0194$us = 0, $k$1027$us = 0, $k$1170$us = 0, $k$2179$us = 0, $k$3136$us = 0, $k$4157$us = 0, $k$5121$us = 0, $k$680$us = 0, $k$769$us = 0, $k$856$us = 0;
 var $k$945$us = 0, $l$0116 = 0, $or$cond = 0, $or$cond281 = 0, $or$cond282 = 0, $or$cond283 = 0, $sinf = 0.0, $t1$0198$us = 0, $t1$1062$us = 0, $t1$1150 = 0, $t1$1174 = 0, $t1$1235 = 0, $t1$2189 = 0, $t1$3147 = 0, $t1$4160 = 0, $t1$5126$us = 0, $t1$6115 = 0, $t1$786$us = 0, $t1$879$us = 0, $t1$968$us = 0;
 var $t2$0193$us = 0, $t2$1169$us = 0, $t2$2183$us = 0, $t2$3146 = 0, $t2$4159 = 0, $t2$5125$us = 0, $t2$6114 = 0, $t2$781$us = 0, $t2$878$us = 0, $t2$967$us = 0, $t3$0163$us = 0, $t3$1178$us = 0, $t3$2141$us = 0, $t3$3156$us = 0, $t3$4120$us = 0, $t3$574$us = 0, $t3$661$us = 0, $t3$749 = 0, $t3$834 = 0, $t4$0140$us = 0;
 var $t4$1155$us = 0, $t4$2119$us = 0, $t4$393 = 0, $t4$4106$us = 0, $t4$573$us = 0, $t4$660$us = 0, $t4$748 = 0, $t4$833 = 0, $t5$0134$us = 0, $t5$1150$us = 0, $t5$290 = 0, $t5$3105$us = 0, $t5$453$us = 0, $t5$547 = 0, $t5$632 = 0, $t6$0135$us = 0, $t6$1151$us = 0, $t6$291 = 0, $t6$397$us = 0, $t6$454$us = 0;
 var $t6$541$us = 0, $t6$623$us = 0, $t7$092 = 0, $t7$198$us = 0, $t7$255$us = 0, $t7$342$us = 0, $t7$424$us = 0, $t8$099$us = 0, $t8$143$us = 0, $t8$225$us = 0, $t9$0100$us = 0, $t9$144$us = 0, $t9$226$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+($ip|0));
 $1 = 6.2831854820251465 / $0;
 $cosf = (+Math_cos((+$1)));
 $sinf = (+Math_sin((+$1)));
 $2 = (($ip) + 1)|0;
 $3 = $2 >> 1;
 $4 = (($ido) + -1)|0;
 $5 = $4 >> 1;
 $6 = Math_imul($l1, $ido)|0;
 $7 = Math_imul($ip, $ido)|0;
 $8 = ($ido|0)==(1);
 do {
  if (!($8)) {
   $9 = ($idl1|0)>(0);
   if ($9) {
    $ik$0202 = 0;
    while(1) {
     $20 = (($c2) + ($ik$0202<<2)|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (($ch2) + ($ik$0202<<2)|0);
     HEAP32[$22>>2] = $21;
     $23 = (($ik$0202) + 1)|0;
     $exitcond259 = ($23|0)==($idl1|0);
     if ($exitcond259) {
      break;
     } else {
      $ik$0202 = $23;
     }
    }
   }
   $11 = ($ip|0)>(1);
   $12 = ($l1|0)>(0);
   $or$cond = $11 & $12;
   if ($or$cond) {
    $j$0199$us = 1;$t1$0198$us = 0;
    while(1) {
     $13 = (($t1$0198$us) + ($6))|0;
     $k$0194$us = 0;$t2$0193$us = $13;
     while(1) {
      $14 = (($c1) + ($t2$0193$us<<2)|0);
      $15 = HEAP32[$14>>2]|0;
      $16 = (($ch) + ($t2$0193$us<<2)|0);
      HEAP32[$16>>2] = $15;
      $17 = (($t2$0193$us) + ($ido))|0;
      $18 = (($k$0194$us) + 1)|0;
      $exitcond256 = ($18|0)==($l1|0);
      if ($exitcond256) {
       break;
      } else {
       $k$0194$us = $18;$t2$0193$us = $17;
      }
     }
     $19 = (($j$0199$us) + 1)|0;
     $exitcond257 = ($19|0)==($ip|0);
     if ($exitcond257) {
      break;
     } else {
      $j$0199$us = $19;$t1$0198$us = $13;
     }
    }
   }
   $24 = (0 - ($ido))|0;
   $25 = ($5|0)>($l1|0);
   if ($25) {
    if ($11) {
     $26 = ($ido|0)>(2);
     $is$0175 = $24;$j$1176 = 1;$t1$1174 = 0;
     while(1) {
      $27 = (($t1$1174) + ($6))|0;
      $28 = (($is$0175) + ($ido))|0;
      if ($12) {
       $29 = (($28) + -1)|0;
       if ($26) {
        $30 = (($27) - ($ido))|0;
        $k$1170$us = 0;$t2$1169$us = $30;
        while(1) {
         $31 = (($t2$1169$us) + ($ido))|0;
         $i$0164$us = 2;$idij$0165$us = $29;$t3$0163$us = $31;
         while(1) {
          $32 = (($idij$0165$us) + 2)|0;
          $33 = (($t3$0163$us) + 2)|0;
          $34 = (($idij$0165$us) + 1)|0;
          $35 = (($wa) + ($34<<2)|0);
          $36 = +HEAPF32[$35>>2];
          $37 = (($t3$0163$us) + 1)|0;
          $38 = (($c1) + ($37<<2)|0);
          $39 = +HEAPF32[$38>>2];
          $40 = $39 * $36;
          $41 = (($wa) + ($32<<2)|0);
          $42 = +HEAPF32[$41>>2];
          $43 = (($c1) + ($33<<2)|0);
          $44 = +HEAPF32[$43>>2];
          $45 = $44 * $42;
          $46 = $45 + $40;
          $47 = (($ch) + ($37<<2)|0);
          HEAPF32[$47>>2] = $46;
          $48 = +HEAPF32[$35>>2];
          $49 = +HEAPF32[$43>>2];
          $50 = $49 * $48;
          $51 = +HEAPF32[$41>>2];
          $52 = +HEAPF32[$38>>2];
          $53 = $52 * $51;
          $54 = $50 - $53;
          $55 = (($ch) + ($33<<2)|0);
          HEAPF32[$55>>2] = $54;
          $56 = (($i$0164$us) + 2)|0;
          $57 = ($56|0)<($ido|0);
          if ($57) {
           $i$0164$us = $56;$idij$0165$us = $32;$t3$0163$us = $33;
          } else {
           break;
          }
         }
         $58 = (($k$1170$us) + 1)|0;
         $exitcond252 = ($58|0)==($l1|0);
         if ($exitcond252) {
          break;
         } else {
          $k$1170$us = $58;$t2$1169$us = $31;
         }
        }
       }
      }
      $59 = (($j$1176) + 1)|0;
      $exitcond253 = ($59|0)==($ip|0);
      if ($exitcond253) {
       break;
      } else {
       $is$0175 = $28;$j$1176 = $59;$t1$1174 = $27;
      }
     }
    }
   } else {
    if ($11) {
     $$not = ($ido|0)<(3);
     $$not268 = ($l1|0)<(1);
     $brmerge = $$not | $$not268;
     $is$1190 = $24;$j$2191 = 1;$t1$2189 = 0;
     while(1) {
      $60 = (($is$1190) + ($ido))|0;
      $61 = (($t1$2189) + ($6))|0;
      if (!($brmerge)) {
       $62 = (($60) + -1)|0;
       $i$1184$us = 2;$idij$1185$us = $62;$t2$2183$us = $61;
       while(1) {
        $63 = (($idij$1185$us) + 2)|0;
        $64 = (($t2$2183$us) + 2)|0;
        $65 = (($idij$1185$us) + 1)|0;
        $66 = (($wa) + ($65<<2)|0);
        $67 = (($wa) + ($63<<2)|0);
        $k$2179$us = 0;$t3$1178$us = $64;
        while(1) {
         $68 = +HEAPF32[$66>>2];
         $69 = (($t3$1178$us) + -1)|0;
         $70 = (($c1) + ($69<<2)|0);
         $71 = +HEAPF32[$70>>2];
         $72 = $71 * $68;
         $73 = +HEAPF32[$67>>2];
         $74 = (($c1) + ($t3$1178$us<<2)|0);
         $75 = +HEAPF32[$74>>2];
         $76 = $75 * $73;
         $77 = $76 + $72;
         $78 = (($ch) + ($69<<2)|0);
         HEAPF32[$78>>2] = $77;
         $79 = +HEAPF32[$66>>2];
         $80 = +HEAPF32[$74>>2];
         $81 = $80 * $79;
         $82 = +HEAPF32[$67>>2];
         $83 = +HEAPF32[$70>>2];
         $84 = $83 * $82;
         $85 = $81 - $84;
         $86 = (($ch) + ($t3$1178$us<<2)|0);
         HEAPF32[$86>>2] = $85;
         $87 = (($t3$1178$us) + ($ido))|0;
         $88 = (($k$2179$us) + 1)|0;
         $exitcond254 = ($88|0)==($l1|0);
         if ($exitcond254) {
          break;
         } else {
          $k$2179$us = $88;$t3$1178$us = $87;
         }
        }
        $89 = (($i$1184$us) + 2)|0;
        $90 = ($89|0)<($ido|0);
        if ($90) {
         $i$1184$us = $89;$idij$1185$us = $63;$t2$2183$us = $64;
        } else {
         break;
        }
       }
      }
      $91 = (($j$2191) + 1)|0;
      $exitcond255 = ($91|0)==($ip|0);
      if ($exitcond255) {
       break;
      } else {
       $is$1190 = $60;$j$2191 = $91;$t1$2189 = $61;
      }
     }
    }
   }
   $92 = Math_imul($6, $ip)|0;
   $93 = ($5|0)<($l1|0);
   $94 = ($3|0)>(1);
   if ($93) {
    if (!($94)) {
     break;
    }
    $$not269 = ($ido|0)<(3);
    $$not270 = ($l1|0)<(1);
    $brmerge271 = $$not269 | $$not270;
    $j$3148 = 1;$t1$3147 = 0;$t2$3146 = $92;
    while(1) {
     $95 = (($t1$3147) + ($6))|0;
     $96 = (($t2$3146) - ($6))|0;
     if (!($brmerge271)) {
      $i$2142$us = 2;$t3$2141$us = $95;$t4$0140$us = $96;
      while(1) {
       $97 = (($t3$2141$us) + 2)|0;
       $98 = (($t4$0140$us) + 2)|0;
       $99 = (($97) - ($ido))|0;
       $100 = (($98) - ($ido))|0;
       $k$3136$us = 0;$t5$0134$us = $99;$t6$0135$us = $100;
       while(1) {
        $101 = (($t5$0134$us) + ($ido))|0;
        $102 = (($t6$0135$us) + ($ido))|0;
        $103 = (($101) + -1)|0;
        $104 = (($ch) + ($103<<2)|0);
        $105 = +HEAPF32[$104>>2];
        $106 = (($102) + -1)|0;
        $107 = (($ch) + ($106<<2)|0);
        $108 = +HEAPF32[$107>>2];
        $109 = $108 + $105;
        $110 = (($c1) + ($103<<2)|0);
        HEAPF32[$110>>2] = $109;
        $111 = (($ch) + ($101<<2)|0);
        $112 = +HEAPF32[$111>>2];
        $113 = (($ch) + ($102<<2)|0);
        $114 = +HEAPF32[$113>>2];
        $115 = $112 - $114;
        $116 = (($c1) + ($106<<2)|0);
        HEAPF32[$116>>2] = $115;
        $117 = +HEAPF32[$111>>2];
        $118 = +HEAPF32[$113>>2];
        $119 = $118 + $117;
        $120 = (($c1) + ($101<<2)|0);
        HEAPF32[$120>>2] = $119;
        $121 = +HEAPF32[$107>>2];
        $122 = +HEAPF32[$104>>2];
        $123 = $121 - $122;
        $124 = (($c1) + ($102<<2)|0);
        HEAPF32[$124>>2] = $123;
        $125 = (($k$3136$us) + 1)|0;
        $exitcond246 = ($125|0)==($l1|0);
        if ($exitcond246) {
         break;
        } else {
         $k$3136$us = $125;$t5$0134$us = $101;$t6$0135$us = $102;
        }
       }
       $126 = (($i$2142$us) + 2)|0;
       $127 = ($126|0)<($ido|0);
       if ($127) {
        $i$2142$us = $126;$t3$2141$us = $97;$t4$0140$us = $98;
       } else {
        break;
       }
      }
     }
     $128 = (($j$3148) + 1)|0;
     $exitcond247 = ($128|0)==($3|0);
     if ($exitcond247) {
      break;
     } else {
      $j$3148 = $128;$t1$3147 = $95;$t2$3146 = $96;
     }
    }
   } else {
    if (!($94)) {
     break;
    }
    $$not272 = ($l1|0)<(1);
    $$not273 = ($ido|0)<(3);
    $brmerge274 = $$not272 | $$not273;
    $j$4161 = 1;$t1$4160 = 0;$t2$4159 = $92;
    while(1) {
     $129 = (($t1$4160) + ($6))|0;
     $130 = (($t2$4159) - ($6))|0;
     if (!($brmerge274)) {
      $k$4157$us = 0;$t3$3156$us = $129;$t4$1155$us = $130;
      while(1) {
       $i$3152$us = 2;$t5$1150$us = $t3$3156$us;$t6$1151$us = $t4$1155$us;
       while(1) {
        $131 = (($t5$1150$us) + 2)|0;
        $132 = (($t6$1151$us) + 2)|0;
        $133 = (($t5$1150$us) + 1)|0;
        $134 = (($ch) + ($133<<2)|0);
        $135 = +HEAPF32[$134>>2];
        $136 = (($t6$1151$us) + 1)|0;
        $137 = (($ch) + ($136<<2)|0);
        $138 = +HEAPF32[$137>>2];
        $139 = $138 + $135;
        $140 = (($c1) + ($133<<2)|0);
        HEAPF32[$140>>2] = $139;
        $141 = (($ch) + ($131<<2)|0);
        $142 = +HEAPF32[$141>>2];
        $143 = (($ch) + ($132<<2)|0);
        $144 = +HEAPF32[$143>>2];
        $145 = $142 - $144;
        $146 = (($c1) + ($136<<2)|0);
        HEAPF32[$146>>2] = $145;
        $147 = +HEAPF32[$141>>2];
        $148 = +HEAPF32[$143>>2];
        $149 = $148 + $147;
        $150 = (($c1) + ($131<<2)|0);
        HEAPF32[$150>>2] = $149;
        $151 = +HEAPF32[$137>>2];
        $152 = +HEAPF32[$134>>2];
        $153 = $151 - $152;
        $154 = (($c1) + ($132<<2)|0);
        HEAPF32[$154>>2] = $153;
        $155 = (($i$3152$us) + 2)|0;
        $156 = ($155|0)<($ido|0);
        if ($156) {
         $i$3152$us = $155;$t5$1150$us = $131;$t6$1151$us = $132;
        } else {
         break;
        }
       }
       $157 = (($t3$3156$us) + ($ido))|0;
       $158 = (($t4$1155$us) + ($ido))|0;
       $159 = (($k$4157$us) + 1)|0;
       $exitcond249 = ($159|0)==($l1|0);
       if ($exitcond249) {
        break;
       } else {
        $k$4157$us = $159;$t3$3156$us = $157;$t4$1155$us = $158;
       }
      }
     }
     $160 = (($j$4161) + 1)|0;
     $exitcond250 = ($160|0)==($3|0);
     if ($exitcond250) {
      break;
     } else {
      $j$4161 = $160;$t1$4160 = $129;$t2$4159 = $130;
     }
    }
   }
  }
 } while(0);
 $10 = ($idl1|0)>(0);
 if ($10) {
  $ik$1131 = 0;
  while(1) {
   $161 = (($ch2) + ($ik$1131<<2)|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = (($c2) + ($ik$1131<<2)|0);
   HEAP32[$163>>2] = $162;
   $164 = (($ik$1131) + 1)|0;
   $exitcond245 = ($164|0)==($idl1|0);
   if ($exitcond245) {
    break;
   } else {
    $ik$1131 = $164;
   }
  }
 }
 $165 = Math_imul($idl1, $ip)|0;
 $166 = ($3|0)>(1);
 if ($166) {
  $167 = ($l1|0)>(0);
  if ($167) {
   $j$5127$us = 1;$t1$5126$us = 0;$t2$5125$us = $165;
   while(1) {
    $168 = (($t1$5126$us) + ($6))|0;
    $169 = (($t2$5125$us) - ($6))|0;
    $170 = (($168) - ($ido))|0;
    $171 = (($169) - ($ido))|0;
    $k$5121$us = 0;$t3$4120$us = $170;$t4$2119$us = $171;
    while(1) {
     $172 = (($t3$4120$us) + ($ido))|0;
     $173 = (($t4$2119$us) + ($ido))|0;
     $174 = (($ch) + ($172<<2)|0);
     $175 = +HEAPF32[$174>>2];
     $176 = (($ch) + ($173<<2)|0);
     $177 = +HEAPF32[$176>>2];
     $178 = $177 + $175;
     $179 = (($c1) + ($172<<2)|0);
     HEAPF32[$179>>2] = $178;
     $180 = +HEAPF32[$176>>2];
     $181 = +HEAPF32[$174>>2];
     $182 = $180 - $181;
     $183 = (($c1) + ($173<<2)|0);
     HEAPF32[$183>>2] = $182;
     $184 = (($k$5121$us) + 1)|0;
     $exitcond242 = ($184|0)==($l1|0);
     if ($exitcond242) {
      break;
     } else {
      $k$5121$us = $184;$t3$4120$us = $172;$t4$2119$us = $173;
     }
    }
    $185 = (($j$5127$us) + 1)|0;
    $exitcond243 = ($185|0)==($3|0);
    if ($exitcond243) {
     break;
    } else {
     $j$5127$us = $185;$t1$5126$us = $168;$t2$5125$us = $169;
    }
   }
  }
  $$pn = (($ip) + -1)|0;
  $186 = Math_imul($$pn, $idl1)|0;
  $$not278 = ($3|0)<(3);
  $$not279 = $10 ^ 1;
  $brmerge280 = $$not278 | $$not279;
  $ai1$0112 = 0.0;$ar1$0113 = 1.0;$l$0116 = 1;$t1$6115 = 0;$t2$6114 = $165;
  while(1) {
   $196 = (($t1$6115) + ($idl1))|0;
   $197 = (($t2$6114) - ($idl1))|0;
   $198 = $ar1$0113 * $cosf;
   $199 = $ai1$0112 * $sinf;
   $200 = $198 - $199;
   $201 = $ai1$0112 * $cosf;
   $202 = $ar1$0113 * $sinf;
   $203 = $202 + $201;
   if ($10) {
    $ik$294 = 0;$t4$393 = $196;$t5$290 = $197;$t6$291 = $186;$t7$092 = $idl1;
    while(1) {
     $230 = (($c2) + ($ik$294<<2)|0);
     $231 = +HEAPF32[$230>>2];
     $232 = (($t7$092) + 1)|0;
     $233 = (($c2) + ($t7$092<<2)|0);
     $234 = +HEAPF32[$233>>2];
     $235 = $234 * $200;
     $236 = $235 + $231;
     $237 = (($t4$393) + 1)|0;
     $238 = (($ch2) + ($t4$393<<2)|0);
     HEAPF32[$238>>2] = $236;
     $239 = (($t6$291) + 1)|0;
     $240 = (($c2) + ($t6$291<<2)|0);
     $241 = +HEAPF32[$240>>2];
     $242 = $241 * $203;
     $243 = (($t5$290) + 1)|0;
     $244 = (($ch2) + ($t5$290<<2)|0);
     HEAPF32[$244>>2] = $242;
     $245 = (($ik$294) + 1)|0;
     $exitcond237 = ($245|0)==($idl1|0);
     if ($exitcond237) {
      break;
     } else {
      $ik$294 = $245;$t4$393 = $237;$t5$290 = $243;$t6$291 = $239;$t7$092 = $232;
     }
    }
   }
   if (!($brmerge280)) {
    $ai2$0107$us = $203;$ar2$0108$us = $200;$j$6109$us = 2;$t4$4106$us = $idl1;$t5$3105$us = $186;
    while(1) {
     $204 = (($t4$4106$us) + ($idl1))|0;
     $205 = (($t5$3105$us) - ($idl1))|0;
     $206 = $ar2$0108$us * $200;
     $207 = $ai2$0107$us * $203;
     $208 = $206 - $207;
     $209 = $ai2$0107$us * $200;
     $210 = $ar2$0108$us * $203;
     $211 = $210 + $209;
     $ik$3101$us = 0;$t6$397$us = $196;$t7$198$us = $197;$t8$099$us = $204;$t9$0100$us = $205;
     while(1) {
      $212 = (($t8$099$us) + 1)|0;
      $213 = (($c2) + ($t8$099$us<<2)|0);
      $214 = +HEAPF32[$213>>2];
      $215 = $214 * $208;
      $216 = (($t6$397$us) + 1)|0;
      $217 = (($ch2) + ($t6$397$us<<2)|0);
      $218 = +HEAPF32[$217>>2];
      $219 = $218 + $215;
      HEAPF32[$217>>2] = $219;
      $220 = (($t9$0100$us) + 1)|0;
      $221 = (($c2) + ($t9$0100$us<<2)|0);
      $222 = +HEAPF32[$221>>2];
      $223 = $222 * $211;
      $224 = (($t7$198$us) + 1)|0;
      $225 = (($ch2) + ($t7$198$us<<2)|0);
      $226 = +HEAPF32[$225>>2];
      $227 = $226 + $223;
      HEAPF32[$225>>2] = $227;
      $228 = (($ik$3101$us) + 1)|0;
      $exitcond239 = ($228|0)==($idl1|0);
      if ($exitcond239) {
       break;
      } else {
       $ik$3101$us = $228;$t6$397$us = $216;$t7$198$us = $224;$t8$099$us = $212;$t9$0100$us = $220;
      }
     }
     $229 = (($j$6109$us) + 1)|0;
     $exitcond240 = ($229|0)==($3|0);
     if ($exitcond240) {
      break;
     } else {
      $ai2$0107$us = $211;$ar2$0108$us = $208;$j$6109$us = $229;$t4$4106$us = $204;$t5$3105$us = $205;
     }
    }
   }
   $246 = (($l$0116) + 1)|0;
   $exitcond241 = ($246|0)==($3|0);
   if ($exitcond241) {
    break;
   } else {
    $ai1$0112 = $203;$ar1$0113 = $200;$l$0116 = $246;$t1$6115 = $196;$t2$6114 = $197;
   }
  }
  if ($10) {
   $j$787$us = 1;$t1$786$us = 0;
   while(1) {
    $187 = (($t1$786$us) + ($idl1))|0;
    $ik$482$us = 0;$t2$781$us = $187;
    while(1) {
     $188 = (($t2$781$us) + 1)|0;
     $189 = (($c2) + ($t2$781$us<<2)|0);
     $190 = +HEAPF32[$189>>2];
     $191 = (($ch2) + ($ik$482$us<<2)|0);
     $192 = +HEAPF32[$191>>2];
     $193 = $192 + $190;
     HEAPF32[$191>>2] = $193;
     $194 = (($ik$482$us) + 1)|0;
     $exitcond234 = ($194|0)==($idl1|0);
     if ($exitcond234) {
      break;
     } else {
      $ik$482$us = $194;$t2$781$us = $188;
     }
    }
    $195 = (($j$787$us) + 1)|0;
    $exitcond235 = ($195|0)==($3|0);
    if ($exitcond235) {
     break;
    } else {
     $j$787$us = $195;$t1$786$us = $187;
    }
   }
  }
 }
 $247 = ($ido|0)<($l1|0);
 if ($247) {
  $259 = ($ido|0)>(0);
  $260 = ($l1|0)>(0);
  $or$cond282 = $259 & $260;
  if ($or$cond282) {
   $i$572$us = 0;
   while(1) {
    $k$769$us = 0;$t1$968$us = $i$572$us;$t2$967$us = $i$572$us;
    while(1) {
     $261 = (($ch) + ($t1$968$us<<2)|0);
     $262 = HEAP32[$261>>2]|0;
     $263 = (($cc) + ($t2$967$us<<2)|0);
     HEAP32[$263>>2] = $262;
     $264 = (($t1$968$us) + ($ido))|0;
     $265 = (($t2$967$us) + ($7))|0;
     $266 = (($k$769$us) + 1)|0;
     $exitcond228 = ($266|0)==($l1|0);
     if ($exitcond228) {
      break;
     } else {
      $k$769$us = $266;$t1$968$us = $264;$t2$967$us = $265;
     }
    }
    $267 = (($i$572$us) + 1)|0;
    $exitcond229 = ($267|0)==($ido|0);
    if ($exitcond229) {
     break;
    } else {
     $i$572$us = $267;
    }
   }
  }
 } else {
  $248 = ($l1|0)>(0);
  $249 = ($ido|0)>(0);
  $or$cond281 = $248 & $249;
  if ($or$cond281) {
   $k$680$us = 0;$t1$879$us = 0;$t2$878$us = 0;
   while(1) {
    $i$475$us = 0;$t3$574$us = $t1$879$us;$t4$573$us = $t2$878$us;
    while(1) {
     $250 = (($t3$574$us) + 1)|0;
     $251 = (($ch) + ($t3$574$us<<2)|0);
     $252 = HEAP32[$251>>2]|0;
     $253 = (($t4$573$us) + 1)|0;
     $254 = (($cc) + ($t4$573$us<<2)|0);
     HEAP32[$254>>2] = $252;
     $255 = (($i$475$us) + 1)|0;
     $exitcond231 = ($255|0)==($ido|0);
     if ($exitcond231) {
      break;
     } else {
      $i$475$us = $255;$t3$574$us = $250;$t4$573$us = $253;
     }
    }
    $256 = (($t1$879$us) + ($ido))|0;
    $257 = (($t2$878$us) + ($7))|0;
    $258 = (($k$680$us) + 1)|0;
    $exitcond232 = ($258|0)==($l1|0);
    if ($exitcond232) {
     break;
    } else {
     $k$680$us = $258;$t1$879$us = $256;$t2$878$us = $257;
    }
   }
  }
 }
 $268 = $ido << 1;
 $269 = Math_imul($6, $ip)|0;
 $270 = ($l1|0)>(0);
 $or$cond283 = $166 & $270;
 if ($or$cond283) {
  $j$863$us = 1;$t1$1062$us = 0;$t3$661$us = 0;$t4$660$us = $269;
  while(1) {
   $271 = (($t1$1062$us) + ($268))|0;
   $272 = (($t3$661$us) + ($6))|0;
   $273 = (($t4$660$us) - ($6))|0;
   $k$856$us = 0;$t5$453$us = $271;$t6$454$us = $272;$t7$255$us = $273;
   while(1) {
    $274 = (($ch) + ($t6$454$us<<2)|0);
    $275 = HEAP32[$274>>2]|0;
    $276 = (($t5$453$us) + -1)|0;
    $277 = (($cc) + ($276<<2)|0);
    HEAP32[$277>>2] = $275;
    $278 = (($ch) + ($t7$255$us<<2)|0);
    $279 = HEAP32[$278>>2]|0;
    $280 = (($cc) + ($t5$453$us<<2)|0);
    HEAP32[$280>>2] = $279;
    $281 = (($t5$453$us) + ($7))|0;
    $282 = (($t6$454$us) + ($ido))|0;
    $283 = (($t7$255$us) + ($ido))|0;
    $284 = (($k$856$us) + 1)|0;
    $exitcond225 = ($284|0)==($l1|0);
    if ($exitcond225) {
     break;
    } else {
     $k$856$us = $284;$t5$453$us = $281;$t6$454$us = $282;$t7$255$us = $283;
    }
   }
   $285 = (($j$863$us) + 1)|0;
   $exitcond226 = ($285|0)==($3|0);
   if ($exitcond226) {
    break;
   } else {
    $j$863$us = $285;$t1$1062$us = $271;$t3$661$us = $272;$t4$660$us = $273;
   }
  }
 }
 if ($8) {
  return;
 }
 $286 = ($5|0)<($l1|0);
 $287 = (0 - ($ido))|0;
 if (!($286)) {
  if (!($166)) {
   return;
  }
  $$not284 = ($l1|0)<(1);
  $$not285 = ($ido|0)<(3);
  $brmerge286 = $$not284 | $$not285;
  $j$951 = 1;$t1$1150 = $287;$t3$749 = 0;$t4$748 = 0;$t5$547 = $269;
  while(1) {
   $289 = (($t1$1150) + ($268))|0;
   $290 = (($t3$749) + ($268))|0;
   $291 = (($t4$748) + ($6))|0;
   $292 = (($t5$547) - ($6))|0;
   if (!($brmerge286)) {
    $k$945$us = 0;$t6$541$us = $289;$t7$342$us = $290;$t8$143$us = $291;$t9$144$us = $292;
    while(1) {
     $i$638$us = 2;
     while(1) {
      $293 = (($ido) - ($i$638$us))|0;
      $294 = (($i$638$us) + ($t8$143$us))|0;
      $295 = (($294) + -1)|0;
      $296 = (($ch) + ($295<<2)|0);
      $297 = +HEAPF32[$296>>2];
      $298 = (($i$638$us) + ($t9$144$us))|0;
      $299 = (($298) + -1)|0;
      $300 = (($ch) + ($299<<2)|0);
      $301 = +HEAPF32[$300>>2];
      $302 = $301 + $297;
      $303 = (($i$638$us) + ($t7$342$us))|0;
      $304 = (($303) + -1)|0;
      $305 = (($cc) + ($304<<2)|0);
      HEAPF32[$305>>2] = $302;
      $306 = +HEAPF32[$296>>2];
      $307 = +HEAPF32[$300>>2];
      $308 = $306 - $307;
      $309 = (($293) + ($t6$541$us))|0;
      $310 = (($309) + -1)|0;
      $311 = (($cc) + ($310<<2)|0);
      HEAPF32[$311>>2] = $308;
      $312 = (($ch) + ($294<<2)|0);
      $313 = +HEAPF32[$312>>2];
      $314 = (($ch) + ($298<<2)|0);
      $315 = +HEAPF32[$314>>2];
      $316 = $315 + $313;
      $317 = (($cc) + ($303<<2)|0);
      HEAPF32[$317>>2] = $316;
      $318 = +HEAPF32[$314>>2];
      $319 = +HEAPF32[$312>>2];
      $320 = $318 - $319;
      $321 = (($cc) + ($309<<2)|0);
      HEAPF32[$321>>2] = $320;
      $322 = (($i$638$us) + 2)|0;
      $323 = ($322|0)<($ido|0);
      if ($323) {
       $i$638$us = $322;
      } else {
       break;
      }
     }
     $324 = (($t6$541$us) + ($7))|0;
     $325 = (($t7$342$us) + ($7))|0;
     $326 = (($t8$143$us) + ($ido))|0;
     $327 = (($t9$144$us) + ($ido))|0;
     $328 = (($k$945$us) + 1)|0;
     $exitcond223 = ($328|0)==($l1|0);
     if ($exitcond223) {
      break;
     } else {
      $k$945$us = $328;$t6$541$us = $324;$t7$342$us = $325;$t8$143$us = $326;$t9$144$us = $327;
     }
    }
   }
   $329 = (($j$951) + 1)|0;
   $exitcond224 = ($329|0)==($3|0);
   if ($exitcond224) {
    break;
   } else {
    $j$951 = $329;$t1$1150 = $289;$t3$749 = $290;$t4$748 = $291;$t5$547 = $292;
   }
  }
  return;
 }
 if (!($166)) {
  return;
 }
 $288 = ($ido|0)>(2);
 $j$1036 = 1;$t1$1235 = $287;$t3$834 = 0;$t4$833 = 0;$t5$632 = $269;
 while(1) {
  $330 = (($t1$1235) + ($268))|0;
  $331 = (($t3$834) + ($268))|0;
  $332 = (($t4$833) + ($6))|0;
  $333 = (($t5$632) - ($6))|0;
  if ($288) {
   $334 = (($330) + ($ido))|0;
   if ($270) {
    $i$728$us = 2;
    while(1) {
     $335 = (($334) - ($i$728$us))|0;
     $336 = (($i$728$us) + ($331))|0;
     $337 = (($i$728$us) + ($332))|0;
     $338 = (($i$728$us) + ($333))|0;
     $k$1027$us = 0;$t6$623$us = $335;$t7$424$us = $336;$t8$225$us = $337;$t9$226$us = $338;
     while(1) {
      $339 = (($t8$225$us) + -1)|0;
      $340 = (($ch) + ($339<<2)|0);
      $341 = +HEAPF32[$340>>2];
      $342 = (($t9$226$us) + -1)|0;
      $343 = (($ch) + ($342<<2)|0);
      $344 = +HEAPF32[$343>>2];
      $345 = $344 + $341;
      $346 = (($t7$424$us) + -1)|0;
      $347 = (($cc) + ($346<<2)|0);
      HEAPF32[$347>>2] = $345;
      $348 = +HEAPF32[$340>>2];
      $349 = +HEAPF32[$343>>2];
      $350 = $348 - $349;
      $351 = (($t6$623$us) + -1)|0;
      $352 = (($cc) + ($351<<2)|0);
      HEAPF32[$352>>2] = $350;
      $353 = (($ch) + ($t8$225$us<<2)|0);
      $354 = +HEAPF32[$353>>2];
      $355 = (($ch) + ($t9$226$us<<2)|0);
      $356 = +HEAPF32[$355>>2];
      $357 = $356 + $354;
      $358 = (($cc) + ($t7$424$us<<2)|0);
      HEAPF32[$358>>2] = $357;
      $359 = +HEAPF32[$355>>2];
      $360 = +HEAPF32[$353>>2];
      $361 = $359 - $360;
      $362 = (($cc) + ($t6$623$us<<2)|0);
      HEAPF32[$362>>2] = $361;
      $363 = (($t6$623$us) + ($7))|0;
      $364 = (($t7$424$us) + ($7))|0;
      $365 = (($t8$225$us) + ($ido))|0;
      $366 = (($t9$226$us) + ($ido))|0;
      $367 = (($k$1027$us) + 1)|0;
      $exitcond = ($367|0)==($l1|0);
      if ($exitcond) {
       break;
      } else {
       $k$1027$us = $367;$t6$623$us = $363;$t7$424$us = $364;$t8$225$us = $365;$t9$226$us = $366;
      }
     }
     $368 = (($i$728$us) + 2)|0;
     $369 = ($368|0)<($ido|0);
     if ($369) {
      $i$728$us = $368;
     } else {
      break;
     }
    }
   }
  }
  $370 = (($j$1036) + 1)|0;
  $exitcond221 = ($370|0)==($3|0);
  if ($exitcond221) {
   break;
  } else {
   $j$1036 = $370;$t1$1235 = $330;$t3$834 = $331;$t4$833 = $332;$t5$632 = $333;
  }
 }
 return;
}
function _drft_init($l,$n) {
 $l = $l|0;
 $n = $n|0;
 var $$$i = 0, $$lcssa$i$i = 0, $$lcssa7$i$i = 0, $$lcssa7$not$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $cosf$us$i$i = 0.0, $exitcond37$i$i = 0, $exitcond38$i$i = 0, $exitcond39$i$i = 0, $fi$010$us$i$i = 0.0, $i$021$i$i = 0, $i$19$us$i$i = 0, $ii$08$us$i$i = 0, $indvars$iv$i$i = 0, $indvars$iv$in$i$i = 0, $is$018$i$i = 0, $is$1$lcssa$i$i = 0, $is$112$us$i$i = 0, $j$0$i$i = 0;
 var $j$113$us$i$i = 0, $k1$019$i$i = 0, $l1$017$i$i = 0, $ld$011$us$i$i = 0, $nf$0$i$i = 0, $nf$1$lcssa6$i$i = 0, $nf$1$us$i$i = 0, $nl$0$i$i = 0, $nl$1$i$i = 0, $nl$1$us$i$i = 0, $ntry$0$i$i = 0, $ntry$1$ph$i$i = 0, $or$cond$i$i = 0, $req$0$i = 0, $sinf$us$i$i = 0.0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 HEAP32[$l>>2] = $n;
 $0 = ($n*3)|0;
 $1 = ($n|0)==(0);
 if ($1) {
  $req$0$i = 0;
 } else {
  $2 = ($n*12)|0;
  $3 = ($0>>>0)>(65535);
  if ($3) {
   $4 = (($2>>>0) / ($0>>>0))&-1;
   $5 = ($4|0)==(4);
   $$$i = $5 ? $2 : -1;
   $req$0$i = $$$i;
  } else {
   $req$0$i = $2;
  }
 }
 $6 = (_malloc($req$0$i)|0);
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = ((($6)) + -4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 & 3;
  $11 = ($10|0)==(0);
  if (!($11)) {
   _memset(($6|0),0,($req$0$i|0))|0;
  }
 }
 $12 = ((($l)) + 4|0);
 HEAP32[$12>>2] = $6;
 $13 = (_malloc(128)|0);
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  $15 = ((($13)) + -4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 & 3;
  $18 = ($17|0)==(0);
  if (!($18)) {
   dest=$13; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  }
 }
 $19 = ((($l)) + 8|0);
 HEAP32[$19>>2] = $13;
 $20 = ($n|0)==(1);
 if ($20) {
  return;
 }
 $21 = (($6) + ($n<<2)|0);
 $22 = ((($13)) + 8|0);
 $j$0$i$i = -1;$nf$0$i$i = 0;$nl$0$i$i = $n;$ntry$0$i$i = 0;
 L16: while(1) {
  $23 = (($j$0$i$i) + 1)|0;
  $24 = ($23|0)<(4);
  if ($24) {
   $25 = (59560 + ($23<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $ntry$1$ph$i$i = $26;
  } else {
   $27 = (($ntry$0$i$i) + 2)|0;
   $ntry$1$ph$i$i = $27;
  }
  $28 = ($ntry$1$ph$i$i|0)==(2);
  if ($28) {
   $indvars$iv$in$i$i = $nf$0$i$i;$nl$1$i$i = $nl$0$i$i;
  } else {
   $nf$1$us$i$i = $nf$0$i$i;$nl$1$us$i$i = $nl$0$i$i;
   while(1) {
    $29 = (($nl$1$us$i$i|0) / ($ntry$1$ph$i$i|0))&-1;
    $30 = Math_imul($29, $ntry$1$ph$i$i)|0;
    $31 = ($nl$1$us$i$i|0)==($30|0);
    if (!($31)) {
     $j$0$i$i = $23;$nf$0$i$i = $nf$1$us$i$i;$nl$0$i$i = $nl$1$us$i$i;$ntry$0$i$i = $ntry$1$ph$i$i;
     continue L16;
    }
    $32 = (($nf$1$us$i$i) + 1)|0;
    $33 = (($nf$1$us$i$i) + 2)|0;
    $34 = (($13) + ($33<<2)|0);
    HEAP32[$34>>2] = $ntry$1$ph$i$i;
    $35 = ($29|0)==(1);
    if ($35) {
     label = 24;
     break L16;
    } else {
     $nf$1$us$i$i = $32;$nl$1$us$i$i = $29;
    }
   }
  }
  while(1) {
   $indvars$iv$i$i = (($indvars$iv$in$i$i) + 1)|0;
   $36 = (($nl$1$i$i|0) / 2)&-1;
   $37 = $36 << 1;
   $38 = ($nl$1$i$i|0)==($37|0);
   if (!($38)) {
    $j$0$i$i = $23;$nf$0$i$i = $indvars$iv$in$i$i;$nl$0$i$i = $nl$1$i$i;$ntry$0$i$i = $ntry$1$ph$i$i;
    continue L16;
   }
   $39 = (($indvars$iv$in$i$i) + 2)|0;
   $40 = (($13) + ($39<<2)|0);
   HEAP32[$40>>2] = 2;
   $41 = ($indvars$iv$in$i$i|0)==(0);
   if (!($41)) {
    $42 = ($indvars$iv$in$i$i|0)<(1);
    if (!($42)) {
     $i$021$i$i = 1;
     while(1) {
      $43 = (($indvars$iv$i$i) - ($i$021$i$i))|0;
      $44 = (($43) + 1)|0;
      $45 = (($13) + ($44<<2)|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = (($43) + 2)|0;
      $48 = (($13) + ($47<<2)|0);
      HEAP32[$48>>2] = $46;
      $49 = (($i$021$i$i) + 1)|0;
      $exitcond39$i$i = ($49|0)==($indvars$iv$i$i|0);
      if ($exitcond39$i$i) {
       break;
      } else {
       $i$021$i$i = $49;
      }
     }
    }
    HEAP32[$22>>2] = 2;
   }
   $50 = $nl$1$i$i & -2;
   $51 = ($50|0)==(2);
   if ($51) {
    $$lcssa$i$i = $indvars$iv$i$i;$$lcssa7$i$i = $41;$nf$1$lcssa6$i$i = $indvars$iv$in$i$i;
    break L16;
   } else {
    $indvars$iv$in$i$i = $indvars$iv$i$i;$nl$1$i$i = $36;
   }
  }
 }
 if ((label|0) == 24) {
  $52 = ($nf$1$us$i$i|0)==(0);
  $$lcssa$i$i = $32;$$lcssa7$i$i = $52;$nf$1$lcssa6$i$i = $nf$1$us$i$i;
 }
 HEAP32[$13>>2] = $n;
 $53 = ((($13)) + 4|0);
 HEAP32[$53>>2] = $$lcssa$i$i;
 $54 = (+($n|0));
 $55 = 6.2831854820251465 / $54;
 $$lcssa7$not$i$i = $$lcssa7$i$i ^ 1;
 $56 = ($nf$1$lcssa6$i$i|0)>(0);
 $or$cond$i$i = $56 & $$lcssa7$not$i$i;
 if ($or$cond$i$i) {
  $is$018$i$i = 0;$k1$019$i$i = 0;$l1$017$i$i = 1;
 } else {
  return;
 }
 while(1) {
  $57 = (($k1$019$i$i) + 2)|0;
  $58 = (($13) + ($57<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = Math_imul($59, $l1$017$i$i)|0;
  $61 = (($n|0) / ($60|0))&-1;
  $62 = ($59|0)>(1);
  do {
   if ($62) {
    $63 = ($61|0)>(2);
    $64 = (($59) + -1)|0;
    $65 = Math_imul($61, $64)|0;
    if ($63) {
     $is$112$us$i$i = $is$018$i$i;$j$113$us$i$i = 0;$ld$011$us$i$i = 0;
    } else {
     $66 = (($65) + ($is$018$i$i))|0;
     $is$1$lcssa$i$i = $66;
     break;
    }
    while(1) {
     $67 = (($ld$011$us$i$i) + ($l1$017$i$i))|0;
     $68 = (+($67|0));
     $69 = $68 * $55;
     $fi$010$us$i$i = 0.0;$i$19$us$i$i = $is$112$us$i$i;$ii$08$us$i$i = 2;
     while(1) {
      $70 = $fi$010$us$i$i + 1.0;
      $71 = $69 * $70;
      $cosf$us$i$i = (+Math_cos((+$71)));
      $72 = (($i$19$us$i$i) + 1)|0;
      $73 = (($21) + ($i$19$us$i$i<<2)|0);
      HEAPF32[$73>>2] = $cosf$us$i$i;
      $sinf$us$i$i = (+Math_sin((+$71)));
      $74 = (($i$19$us$i$i) + 2)|0;
      $75 = (($21) + ($72<<2)|0);
      HEAPF32[$75>>2] = $sinf$us$i$i;
      $76 = (($ii$08$us$i$i) + 2)|0;
      $77 = ($76|0)<($61|0);
      if ($77) {
       $fi$010$us$i$i = $70;$i$19$us$i$i = $74;$ii$08$us$i$i = $76;
      } else {
       break;
      }
     }
     $78 = (($is$112$us$i$i) + ($61))|0;
     $79 = (($j$113$us$i$i) + 1)|0;
     $exitcond37$i$i = ($79|0)==($64|0);
     if ($exitcond37$i$i) {
      break;
     } else {
      $is$112$us$i$i = $78;$j$113$us$i$i = $79;$ld$011$us$i$i = $67;
     }
    }
    $80 = (($65) + ($is$018$i$i))|0;
    $is$1$lcssa$i$i = $80;
   } else {
    $is$1$lcssa$i$i = $is$018$i$i;
   }
  } while(0);
  $81 = (($k1$019$i$i) + 1)|0;
  $exitcond38$i$i = ($81|0)==($nf$1$lcssa6$i$i|0);
  if ($exitcond38$i$i) {
   break;
  } else {
   $is$018$i$i = $is$1$lcssa$i$i;$k1$019$i$i = $81;$l1$017$i$i = $60;
  }
 }
 return;
}
function _floor1_pack($i,$opb) {
 $i = $i|0;
 $opb = $opb|0;
 var $$01$i = 0, $$01$i3 = 0, $$maxclass$0 = 0, $$pre = 0, $$pre22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $count$03 = 0, $exitcond = 0, $exitcond21 = 0, $j$016 = 0, $j$112 = 0, $j$25 = 0, $k$09 = 0, $k$14 = 0, $k$2$lcssa = 0;
 var $k$22 = 0, $maxclass$017 = 0, $ret$0$lcssa$i6 = 0, $ret$02$i = 0, $ret$02$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($i)) + 836|0);
 $1 = ((($i)) + 840|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$i>>2]|0;
 _oggpack_write($opb,$3,5);
 $4 = HEAP32[$i>>2]|0;
 $5 = ($4|0)>(0);
 if ($5) {
  $6 = ((($i)) + 4|0);
  $j$016 = 0;$maxclass$017 = -1;
  while(1) {
   $12 = (($6) + ($j$016<<2)|0);
   $13 = HEAP32[$12>>2]|0;
   _oggpack_write($opb,$13,4);
   $14 = HEAP32[$12>>2]|0;
   $15 = ($maxclass$017|0)<($14|0);
   $$maxclass$0 = $15 ? $14 : $maxclass$017;
   $16 = (($j$016) + 1)|0;
   $17 = HEAP32[$i>>2]|0;
   $18 = ($16|0)<($17|0);
   if ($18) {
    $j$016 = $16;$maxclass$017 = $$maxclass$0;
   } else {
    break;
   }
  }
  $7 = ($$maxclass$0|0)<(0);
  if (!($7)) {
   $8 = ((($i)) + 128|0);
   $9 = ((($i)) + 192|0);
   $10 = ((($i)) + 256|0);
   $11 = ((($i)) + 320|0);
   $j$112 = 0;
   while(1) {
    $19 = (($8) + ($j$112<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (($20) + -1)|0;
    _oggpack_write($opb,$21,3);
    $22 = (($9) + ($j$112<<2)|0);
    $23 = HEAP32[$22>>2]|0;
    _oggpack_write($opb,$23,2);
    $24 = HEAP32[$22>>2]|0;
    $25 = ($24|0)==(0);
    if ($25) {
     $k$09 = 0;
     label = 8;
    } else {
     $26 = (($10) + ($j$112<<2)|0);
     $27 = HEAP32[$26>>2]|0;
     _oggpack_write($opb,$27,8);
     $$pre = HEAP32[$22>>2]|0;
     $28 = ($$pre|0)==(31);
     if (!($28)) {
      $k$09 = 0;
      label = 8;
     }
    }
    if ((label|0) == 8) {
     while(1) {
      label = 0;
      $29 = ((($11) + ($j$112<<5)|0) + ($k$09<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($30) + 1)|0;
      _oggpack_write($opb,$31,8);
      $32 = (($k$09) + 1)|0;
      $33 = HEAP32[$22>>2]|0;
      $34 = 1 << $33;
      $35 = ($32|0)<($34|0);
      if ($35) {
       $k$09 = $32;
       label = 8;
      } else {
       break;
      }
     }
    }
    $36 = (($j$112) + 1)|0;
    $exitcond21 = ($j$112|0)==($$maxclass$0|0);
    if ($exitcond21) {
     break;
    } else {
     $j$112 = $36;
    }
   }
  }
 }
 $37 = ((($i)) + 832|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + -1)|0;
 _oggpack_write($opb,$39,2);
 $40 = (($2) + -1)|0;
 $41 = ($40|0)==(0);
 if ($41) {
  _oggpack_write($opb,0,4);
  $ret$0$lcssa$i6 = 0;
 } else {
  $$01$i = $40;$ret$02$i = 0;
  while(1) {
   $42 = $$01$i >>> 1;
   $43 = (($ret$02$i) + 1)|0;
   $44 = ($42|0)==(0);
   if ($44) {
    break;
   } else {
    $$01$i = $42;$ret$02$i = $43;
   }
  }
  _oggpack_write($opb,$43,4);
  $$01$i3 = $40;$ret$02$i2 = 0;
  while(1) {
   $45 = $$01$i3 >>> 1;
   $46 = (($ret$02$i2) + 1)|0;
   $47 = ($45|0)==(0);
   if ($47) {
    $ret$0$lcssa$i6 = $46;
    break;
   } else {
    $$01$i3 = $45;$ret$02$i2 = $46;
   }
  }
 }
 $48 = HEAP32[$i>>2]|0;
 $49 = ($48|0)>(0);
 if (!($49)) {
  return;
 }
 $50 = ((($i)) + 4|0);
 $51 = ((($i)) + 128|0);
 $65 = $48;$count$03 = 0;$j$25 = 0;$k$14 = 0;
 while(1) {
  $52 = (($50) + ($j$25<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($51) + ($53<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + ($count$03))|0;
  $57 = ($k$14|0)<($56|0);
  if ($57) {
   $k$22 = $k$14;
   while(1) {
    $58 = (($k$22) + 2)|0;
    $59 = (($0) + ($58<<2)|0);
    $60 = HEAP32[$59>>2]|0;
    _oggpack_write($opb,$60,$ret$0$lcssa$i6);
    $61 = (($k$22) + 1)|0;
    $exitcond = ($61|0)==($56|0);
    if ($exitcond) {
     break;
    } else {
     $k$22 = $61;
    }
   }
   $$pre22 = HEAP32[$i>>2]|0;
   $64 = $$pre22;$k$2$lcssa = $56;
  } else {
   $64 = $65;$k$2$lcssa = $k$14;
  }
  $62 = (($j$25) + 1)|0;
  $63 = ($62|0)<($64|0);
  if ($63) {
   $65 = $64;$count$03 = $56;$j$25 = $62;$k$14 = $k$2$lcssa;
  } else {
   break;
  }
 }
 return;
}
function _floor1_unpack($vi,$opb) {
 $vi = $vi|0;
 $opb = $opb|0;
 var $$01 = 0, $$maxclass$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phi56Z2D = 0, $$pre$phi58Z2D = 0, $$pre51 = 0, $$pre53 = 0, $$pre54 = 0, $$pre55 = 0, $$pre57 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $count$0$lcssa = 0, $count$025 = 0, $j$039 = 0, $j$134 = 0, $j$227 = 0, $j$317 = 0, $j$416 = 0, $k$031 = 0, $k$126 = 0, $k$2$lcssa = 0, $k$221 = 0, $maxclass$038 = 0, $or$cond = 0, $sortpointer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sortpointer = sp;
 $0 = ((($vi)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_malloc(1120)|0);
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($2)) + -4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 & 3;
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset(($2|0),0,1120)|0;
  }
 }
 $8 = (_oggpack_read($opb,5)|0);
 HEAP32[$2>>2] = $8;
 $9 = ($8|0)>(0);
 L5: do {
  if ($9) {
   $10 = ((($2)) + 4|0);
   $j$039 = 0;$maxclass$038 = -1;
   while(1) {
    $17 = (_oggpack_read($opb,4)|0);
    $18 = (($10) + ($j$039<<2)|0);
    HEAP32[$18>>2] = $17;
    $19 = ($17|0)<(0);
    if ($19) {
     break L5;
    }
    $20 = ($maxclass$038|0)<($17|0);
    $$maxclass$0 = $20 ? $17 : $maxclass$038;
    $21 = (($j$039) + 1)|0;
    $22 = HEAP32[$2>>2]|0;
    $23 = ($21|0)<($22|0);
    if ($23) {
     $j$039 = $21;$maxclass$038 = $$maxclass$0;
    } else {
     break;
    }
   }
   $11 = ($$maxclass$0|0)<(0);
   if ($11) {
    label = 21;
   } else {
    $12 = ((($2)) + 128|0);
    $13 = ((($2)) + 192|0);
    $14 = ((($2)) + 256|0);
    $15 = ((($1)) + 24|0);
    $16 = ((($2)) + 320|0);
    $j$134 = 0;
    while(1) {
     $24 = (_oggpack_read($opb,3)|0);
     $25 = (($24) + 1)|0;
     $26 = (($12) + ($j$134<<2)|0);
     HEAP32[$26>>2] = $25;
     $27 = (_oggpack_read($opb,2)|0);
     $28 = (($13) + ($j$134<<2)|0);
     HEAP32[$28>>2] = $27;
     $29 = ($27|0)<(0);
     if ($29) {
      break L5;
     }
     $30 = ($27|0)==(0);
     if ($30) {
      $$phi$trans$insert = (($14) + ($j$134<<2)|0);
      $$pre = HEAP32[$$phi$trans$insert>>2]|0;
      $33 = $$pre;
     } else {
      $31 = (_oggpack_read($opb,8)|0);
      $32 = (($14) + ($j$134<<2)|0);
      HEAP32[$32>>2] = $31;
      $33 = $31;
     }
     $34 = ($33|0)<(0);
     if ($34) {
      break L5;
     }
     $35 = HEAP32[$15>>2]|0;
     $36 = ($33|0)<($35|0);
     if (!($36)) {
      break L5;
     }
     $37 = HEAP32[$28>>2]|0;
     $38 = ($37|0)==(31);
     if (!($38)) {
      $k$031 = 0;
      while(1) {
       $43 = (_oggpack_read($opb,8)|0);
       $44 = (($43) + -1)|0;
       $45 = ((($16) + ($j$134<<5)|0) + ($k$031<<2)|0);
       HEAP32[$45>>2] = $44;
       $46 = ($43|0)<(0);
       if ($46) {
        break L5;
       }
       $47 = HEAP32[$15>>2]|0;
       $48 = ($43|0)>($47|0);
       $41 = (($k$031) + 1)|0;
       if ($48) {
        break L5;
       }
       $39 = HEAP32[$28>>2]|0;
       $40 = 1 << $39;
       $42 = ($41|0)<($40|0);
       if ($42) {
        $k$031 = $41;
       } else {
        break;
       }
      }
     }
     $49 = (($j$134) + 1)|0;
     $50 = ($j$134|0)<($$maxclass$0|0);
     if ($50) {
      $j$134 = $49;
     } else {
      label = 21;
      break;
     }
    }
   }
  } else {
   label = 21;
  }
 } while(0);
 L27: do {
  if ((label|0) == 21) {
   $51 = (_oggpack_read($opb,2)|0);
   $52 = (($51) + 1)|0;
   $53 = ((($2)) + 832|0);
   HEAP32[$53>>2] = $52;
   $54 = (_oggpack_read($opb,4)|0);
   $55 = ($54|0)<(0);
   if (!($55)) {
    $56 = HEAP32[$2>>2]|0;
    $57 = ($56|0)>(0);
    if ($57) {
     $58 = ((($2)) + 4|0);
     $59 = ((($2)) + 128|0);
     $60 = ((($2)) + 836|0);
     $61 = 1 << $54;
     $94 = $56;$count$025 = 0;$j$227 = 0;$k$126 = 0;
     while(1) {
      $62 = (($58) + ($j$227<<2)|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = (($59) + ($63<<2)|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = (($65) + ($count$025))|0;
      $67 = ($66|0)>(63);
      if ($67) {
       break L27;
      }
      $68 = ($k$126|0)<($66|0);
      if ($68) {
       $k$221 = $k$126;
       while(1) {
        $69 = (_oggpack_read($opb,$54)|0);
        $70 = (($k$221) + 2)|0;
        $71 = (($60) + ($70<<2)|0);
        HEAP32[$71>>2] = $69;
        $72 = ($69|0)>(-1);
        $73 = ($69|0)<($61|0);
        $or$cond = $72 & $73;
        if (!($or$cond)) {
         break L27;
        }
        $74 = (($k$221) + 1)|0;
        $75 = ($74|0)<($66|0);
        if ($75) {
         $k$221 = $74;
        } else {
         break;
        }
       }
       $$pre51 = HEAP32[$2>>2]|0;
       $78 = $$pre51;$k$2$lcssa = $74;
      } else {
       $78 = $94;$k$2$lcssa = $k$126;
      }
      $76 = (($j$227) + 1)|0;
      $77 = ($76|0)<($78|0);
      if ($77) {
       $94 = $78;$count$025 = $66;$j$227 = $76;$k$126 = $k$2$lcssa;
      } else {
       $$pre$phi56Z2D = $60;$$pre$phi58Z2D = $61;$count$0$lcssa = $66;
       break;
      }
     }
    } else {
     $$pre55 = ((($2)) + 836|0);
     $$pre57 = 1 << $54;
     $$pre$phi56Z2D = $$pre55;$$pre$phi58Z2D = $$pre57;$count$0$lcssa = 0;
    }
    HEAP32[$$pre$phi56Z2D>>2] = 0;
    $79 = ((($2)) + 840|0);
    HEAP32[$79>>2] = $$pre$phi58Z2D;
    $80 = (($count$0$lcssa) + 2)|0;
    $81 = ($count$0$lcssa|0)>(-2);
    if ($81) {
     $j$317 = 0;
     while(1) {
      $82 = (($$pre$phi56Z2D) + ($j$317<<2)|0);
      $83 = (($sortpointer) + ($j$317<<2)|0);
      HEAP32[$83>>2] = $82;
      $84 = (($j$317) + 1)|0;
      $85 = ($84|0)<($80|0);
      if ($85) {
       $j$317 = $84;
      } else {
       break;
      }
     }
    }
    _qsort($sortpointer,$80,27);
    $86 = ($80|0)>(1);
    L47: do {
     if ($86) {
      $$pre53 = HEAP32[$sortpointer>>2]|0;
      $$pre54 = HEAP32[$$pre53>>2]|0;
      $92 = $$pre54;$j$416 = 1;
      while(1) {
       $89 = (($sortpointer) + ($j$416<<2)|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = HEAP32[$90>>2]|0;
       $93 = ($92|0)==($91|0);
       $87 = (($j$416) + 1)|0;
       if ($93) {
        break;
       }
       $88 = ($87|0)<($80|0);
       if ($88) {
        $92 = $91;$j$416 = $87;
       } else {
        break L47;
       }
      }
      if ($3) {
       $$01 = 0;
      } else {
       break L27;
      }
      STACKTOP = sp;return ($$01|0);
     }
    } while(0);
    $$01 = $2;
    STACKTOP = sp;return ($$01|0);
   }
  }
 } while(0);
 _free($2);
 $$01 = 0;
 STACKTOP = sp;return ($$01|0);
}
function _icomp($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$b>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 return ($4|0);
}
function _floor1_look($vd,$in) {
 $vd = $vd|0;
 $in = $in|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond1 = 0, $exitcond31 = 0, $hi$05 = 0, $hi$1 = 0;
 var $hx$07 = 0, $hx$1 = 0, $i$026 = 0, $i$121 = 0, $i$218 = 0, $i$316 = 0, $i$413 = 0, $i$510 = 0, $indvars$iv = 0, $indvars$iv$next = 0, $j$08 = 0, $lo$04 = 0, $lo$1 = 0, $lx$06 = 0, $lx$1 = 0, $n$0$lcssa32343639 = 0, $n$0$lcssa33 = 0, $n$025 = 0, $or$cond = 0, $or$cond1 = 0;
 var $sortpointer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sortpointer = sp;
 $0 = (_malloc(1312)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = ((($0)) + -4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3 & 3;
  $5 = ($4|0)==(0);
  if (!($5)) {
   _memset(($0|0),0,1312)|0;
  }
 }
 $6 = ((($0)) + 1296|0);
 HEAP32[$6>>2] = $in;
 $7 = ((($in)) + 836|0);
 $8 = ((($in)) + 840|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 1288|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$in>>2]|0;
 $12 = ($11|0)>(0);
 if ($12) {
  $14 = ((($in)) + 4|0);
  $15 = ((($in)) + 128|0);
  $i$026 = 0;$n$025 = 0;
  while(1) {
   $16 = (($14) + ($i$026<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($15) + ($17<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + ($n$025))|0;
   $21 = (($i$026) + 1)|0;
   $exitcond1 = ($21|0)==($11|0);
   if ($exitcond1) {
    break;
   } else {
    $i$026 = $21;$n$025 = $20;
   }
  }
  $22 = (($20) + 2)|0;
  $23 = ((($0)) + 1284|0);
  HEAP32[$23>>2] = $22;
  $24 = ($20|0)>(-2);
  if ($24) {
   $29 = $22;$n$0$lcssa33 = $20;
   label = 10;
  } else {
   _qsort($sortpointer,$22,27);
   $n$0$lcssa32343639 = $20;
  }
 } else {
  $13 = ((($0)) + 1284|0);
  HEAP32[$13>>2] = 2;
  $29 = 2;$n$0$lcssa33 = 0;
  label = 10;
 }
 if ((label|0) == 10) {
  $i$121 = 0;
  while(1) {
   $25 = (($7) + ($i$121<<2)|0);
   $26 = (($sortpointer) + ($i$121<<2)|0);
   HEAP32[$26>>2] = $25;
   $27 = (($i$121) + 1)|0;
   $28 = ($27|0)<($29|0);
   if ($28) {
    $i$121 = $27;
   } else {
    break;
   }
  }
  _qsort($sortpointer,$29,27);
  $30 = $7;
  $31 = ((($0)) + 260|0);
  $i$218 = 0;
  while(1) {
   $33 = (($sortpointer) + ($i$218<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($34) - ($30))|0;
   $36 = $35 >> 2;
   $37 = (($31) + ($i$218<<2)|0);
   HEAP32[$37>>2] = $36;
   $38 = (($i$218) + 1)|0;
   $39 = ($38|0)<($29|0);
   if ($39) {
    $i$218 = $38;
   } else {
    break;
   }
  }
  $32 = ((($0)) + 520|0);
  $i$316 = 0;
  while(1) {
   $40 = (($31) + ($i$316<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($32) + ($41<<2)|0);
   HEAP32[$42>>2] = $i$316;
   $43 = (($i$316) + 1)|0;
   $44 = ($43|0)<($29|0);
   if ($44) {
    $i$316 = $43;
   } else {
    break;
   }
  }
  $i$413 = 0;
  while(1) {
   $45 = (($31) + ($i$413<<2)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($7) + ($46<<2)|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($0) + ($i$413<<2)|0);
   HEAP32[$49>>2] = $48;
   $50 = (($i$413) + 1)|0;
   $51 = ($50|0)<($29|0);
   if ($51) {
    $i$413 = $50;
   } else {
    $n$0$lcssa32343639 = $n$0$lcssa33;
    break;
   }
  }
 }
 $52 = ((($in)) + 832|0);
 $53 = HEAP32[$52>>2]|0;
 switch ($53|0) {
 case 1:  {
  $54 = ((($0)) + 1292|0);
  HEAP32[$54>>2] = 256;
  break;
 }
 case 2:  {
  $55 = ((($0)) + 1292|0);
  HEAP32[$55>>2] = 128;
  break;
 }
 case 3:  {
  $56 = ((($0)) + 1292|0);
  HEAP32[$56>>2] = 86;
  break;
 }
 case 4:  {
  $57 = ((($0)) + 1292|0);
  HEAP32[$57>>2] = 64;
  break;
 }
 default: {
 }
 }
 $58 = ($n$0$lcssa32343639|0)>(0);
 if (!($58)) {
  STACKTOP = sp;return ($0|0);
 }
 $59 = ((($0)) + 1032|0);
 $60 = ((($0)) + 780|0);
 $i$510 = 0;$indvars$iv = 2;
 while(1) {
  $61 = (($i$510) + 2)|0;
  $62 = (($7) + ($61<<2)|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = HEAP32[$10>>2]|0;
  $hi$05 = 1;$hx$07 = $64;$j$08 = 0;$lo$04 = 0;$lx$06 = 0;
  while(1) {
   $65 = (($7) + ($j$08<<2)|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($66|0)>($lx$06|0);
   $68 = ($66|0)<($63|0);
   $or$cond = $67 & $68;
   $lo$1 = $or$cond ? $j$08 : $lo$04;
   $lx$1 = $or$cond ? $66 : $lx$06;
   $69 = ($66|0)<($hx$07|0);
   $70 = ($66|0)>($63|0);
   $or$cond1 = $69 & $70;
   $hi$1 = $or$cond1 ? $j$08 : $hi$05;
   $hx$1 = $or$cond1 ? $66 : $hx$07;
   $71 = (($j$08) + 1)|0;
   $exitcond = ($71|0)==($indvars$iv|0);
   if ($exitcond) {
    break;
   } else {
    $hi$05 = $hi$1;$hx$07 = $hx$1;$j$08 = $71;$lo$04 = $lo$1;$lx$06 = $lx$1;
   }
  }
  $72 = (($59) + ($i$510<<2)|0);
  HEAP32[$72>>2] = $lo$1;
  $73 = (($60) + ($i$510<<2)|0);
  HEAP32[$73>>2] = $hi$1;
  $74 = (($i$510) + 1)|0;
  $indvars$iv$next = (($indvars$iv) + 1)|0;
  $exitcond31 = ($74|0)==($n$0$lcssa32343639|0);
  if ($exitcond31) {
   break;
  } else {
   $i$510 = $74;$indvars$iv = $indvars$iv$next;
  }
 }
 STACKTOP = sp;return ($0|0);
}
function _floor1_free_info($i) {
 $i = $i|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($i|0)==(0|0);
 if (!($0)) {
  _free($i);
 }
 return;
}
function _floor1_free_look($i) {
 $i = $i|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($i|0)==(0|0);
 if (!($0)) {
  _free($i);
 }
 return;
}
function _floor1_inverse1($vb,$in) {
 $vb = $vb|0;
 $in = $in|0;
 var $$0$i = 0, $$0$p$i = 0, $$01$i = 0, $$01$i3 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cval$1$ph = 0, $cval$113 = 0, $i$017 = 0, $i$112 = 0;
 var $ispos$i = 0, $j$016 = 0, $k$014 = 0, $neg$i = 0, $ret$0$lcssa$i = 0, $ret$0$lcssa$i6 = 0, $ret$02$i = 0, $ret$02$i2 = 0, $val$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($in)) + 1296|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($vb)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 2848|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($vb)) + 4|0);
 $11 = (_oggpack_read($10,1)|0);
 $12 = ($11|0)==(1);
 if (!($12)) {
  $$1 = 0;
  return ($$1|0);
 }
 $13 = ((($in)) + 1284|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 << 2;
 $16 = (($15) + 7)|0;
 $17 = $16 & -8;
 $18 = ((($vb)) + 72|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + ($17))|0;
 $21 = ((($vb)) + 76|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($20|0)>($22|0);
 $24 = ((($vb)) + 68|0);
 $25 = HEAP32[$24>>2]|0;
 if ($23) {
  $26 = ($25|0)==(0|0);
  if (!($26)) {
   $27 = $25;
   $28 = (_malloc(8)|0);
   $29 = ((($vb)) + 80|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($30) + ($19))|0;
   HEAP32[$29>>2] = $31;
   $32 = ((($vb)) + 84|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($28)) + 4|0);
   HEAP32[$34>>2] = $33;
   HEAP32[$28>>2] = $27;
   HEAP32[$32>>2] = $28;
  }
  HEAP32[$21>>2] = $17;
  $35 = (_malloc($17)|0);
  HEAP32[$24>>2] = $35;
  HEAP32[$18>>2] = 0;
  $37 = $35;$38 = 0;
 } else {
  $37 = $25;$38 = $19;
 }
 $36 = (($37) + ($38)|0);
 $39 = (($38) + ($17))|0;
 HEAP32[$18>>2] = $39;
 $40 = ((($in)) + 1292|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + -1)|0;
 $43 = ($42|0)==(0);
 if ($43) {
  $ret$0$lcssa$i = 0;
 } else {
  $$01$i = $42;$ret$02$i = 0;
  while(1) {
   $44 = $$01$i >>> 1;
   $45 = (($ret$02$i) + 1)|0;
   $46 = ($44|0)==(0);
   if ($46) {
    $ret$0$lcssa$i = $45;
    break;
   } else {
    $$01$i = $44;$ret$02$i = $45;
   }
  }
 }
 $47 = (_oggpack_read($10,$ret$0$lcssa$i)|0);
 HEAP32[$36>>2] = $47;
 $48 = HEAP32[$40>>2]|0;
 $49 = (($48) + -1)|0;
 $50 = ($49|0)==(0);
 if ($50) {
  $ret$0$lcssa$i6 = 0;
 } else {
  $$01$i3 = $49;$ret$02$i2 = 0;
  while(1) {
   $51 = $$01$i3 >>> 1;
   $52 = (($ret$02$i2) + 1)|0;
   $53 = ($51|0)==(0);
   if ($53) {
    $ret$0$lcssa$i6 = $52;
    break;
   } else {
    $$01$i3 = $51;$ret$02$i2 = $52;
   }
  }
 }
 $54 = (_oggpack_read($10,$ret$0$lcssa$i6)|0);
 $55 = ((($36)) + 4|0);
 HEAP32[$55>>2] = $54;
 $56 = HEAP32[$1>>2]|0;
 $57 = ($56|0)>(0);
 L18: do {
  if ($57) {
   $i$017 = 0;$j$016 = 2;
   L19: while(1) {
    $62 = (((($1)) + 4|0) + ($i$017<<2)|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (((($1)) + 128|0) + ($63<<2)|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (((($1)) + 192|0) + ($63<<2)|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = 1 << $67;
    $69 = ($67|0)==(0);
    if ($69) {
     $cval$1$ph = 0;
    } else {
     $70 = (((($1)) + 256|0) + ($63<<2)|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = (((($9) + (($71*56)|0)|0)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($73|0)>(0);
     if (!($74)) {
      $$1 = 0;
      label = 38;
      break;
     }
     $75 = (($9) + (($71*56)|0)|0);
     $76 = (_decode_packed_entry_number($75,$10)|0);
     $77 = ($76|0)>(-1);
     if (!($77)) {
      $$1 = 0;
      label = 38;
      break;
     }
     $78 = (((($9) + (($71*56)|0)|0)) + 24|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = (($79) + ($76<<2)|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ($81|0)==(-1);
     if ($82) {
      $$1 = 0;
      label = 38;
      break;
     } else {
      $cval$1$ph = $81;
     }
    }
    $83 = ($65|0)>(0);
    if ($83) {
     $84 = (($68) + -1)|0;
     $cval$113 = $cval$1$ph;$k$014 = 0;
     while(1) {
      $85 = $cval$113 & $84;
      $86 = ((((($1)) + 320|0) + ($63<<5)|0) + ($85<<2)|0);
      $87 = HEAP32[$86>>2]|0;
      $88 = $cval$113 >> $67;
      $89 = ($87|0)>(-1);
      if ($89) {
       $90 = (((($9) + (($87*56)|0)|0)) + 8|0);
       $91 = HEAP32[$90>>2]|0;
       $92 = ($91|0)>(0);
       if (!($92)) {
        label = 22;
        break L19;
       }
       $93 = (($9) + (($87*56)|0)|0);
       $94 = (_decode_packed_entry_number($93,$10)|0);
       $95 = ($94|0)>(-1);
       if (!($95)) {
        label = 22;
        break L19;
       }
       $98 = (((($9) + (($87*56)|0)|0)) + 24|0);
       $99 = HEAP32[$98>>2]|0;
       $100 = (($99) + ($94<<2)|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = (($k$014) + ($j$016))|0;
       $103 = (($36) + ($102<<2)|0);
       HEAP32[$103>>2] = $101;
       $104 = ($101|0)==(-1);
       if ($104) {
        $$1 = 0;
        label = 38;
        break L19;
       }
      } else {
       $105 = (($k$014) + ($j$016))|0;
       $106 = (($36) + ($105<<2)|0);
       HEAP32[$106>>2] = 0;
      }
      $107 = (($k$014) + 1)|0;
      $108 = ($107|0)<($65|0);
      if ($108) {
       $cval$113 = $88;$k$014 = $107;
      } else {
       break;
      }
     }
    }
    $109 = (($65) + ($j$016))|0;
    $110 = (($i$017) + 1)|0;
    $111 = HEAP32[$1>>2]|0;
    $112 = ($110|0)<($111|0);
    if ($112) {
     $i$017 = $110;$j$016 = $109;
    } else {
     break L18;
    }
   }
   if ((label|0) == 22) {
    $96 = (($k$014) + ($j$016))|0;
    $97 = (($36) + ($96<<2)|0);
    HEAP32[$97>>2] = -1;
    $$1 = 0;
    return ($$1|0);
   }
   else if ((label|0) == 38) {
    return ($$1|0);
   }
  }
 } while(0);
 $58 = HEAP32[$13>>2]|0;
 $59 = ($58|0)>(2);
 if (!($59)) {
  $$1 = $36;
  return ($$1|0);
 }
 $60 = ((($in)) + 1032|0);
 $61 = ((($in)) + 780|0);
 $i$112 = 2;
 while(1) {
  $113 = (($i$112) + -2)|0;
  $114 = (($60) + ($113<<2)|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = (((($1)) + 836|0) + ($115<<2)|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = (($61) + ($113<<2)|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (((($1)) + 836|0) + ($119<<2)|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = (($36) + ($115<<2)|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = (($36) + ($119<<2)|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = (((($1)) + 836|0) + ($i$112<<2)|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = $123 & 32767;
  $129 = $125 & 32767;
  $130 = (($129) - ($128))|0;
  $131 = (($121) - ($117))|0;
  $ispos$i = ($130|0)>(-1);
  $neg$i = (0 - ($130))|0;
  $132 = $ispos$i ? $130 : $neg$i;
  $133 = (($127) - ($117))|0;
  $134 = Math_imul($132, $133)|0;
  $135 = (($134|0) / ($131|0))&-1;
  $136 = ($130|0)<(0);
  $137 = (0 - ($135))|0;
  $$0$p$i = $136 ? $137 : $135;
  $$0$i = (($$0$p$i) + ($128))|0;
  $138 = HEAP32[$40>>2]|0;
  $139 = (($138) - ($$0$i))|0;
  $140 = (($36) + ($i$112<<2)|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = ($141|0)==(0);
  if ($142) {
   $167 = $$0$i | 32768;
   HEAP32[$140>>2] = $167;
  } else {
   $143 = ($139|0)<($$0$i|0);
   $144 = $143 ? $139 : $$0$i;
   $145 = $144 << 1;
   $146 = ($141|0)<($145|0);
   do {
    if ($146) {
     $151 = $141 & 1;
     $152 = ($151|0)==(0);
     if ($152) {
      $156 = $141 >> 1;
      $val$0 = $156;
      break;
     } else {
      $153 = (($141) + 1)|0;
      $154 = $153 >> 1;
      $155 = (0 - ($154))|0;
      $val$0 = $155;
      break;
     }
    } else {
     $147 = ($139|0)>($$0$i|0);
     if ($147) {
      $148 = (($141) - ($$0$i))|0;
      $val$0 = $148;
      break;
     } else {
      $149 = (($141) - ($139))|0;
      $150 = $149 ^ -1;
      $val$0 = $150;
      break;
     }
    }
   } while(0);
   $157 = (($val$0) + ($$0$i))|0;
   $158 = $157 & 32767;
   HEAP32[$140>>2] = $158;
   $159 = HEAP32[$114>>2]|0;
   $160 = (($36) + ($159<<2)|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = $161 & 32767;
   HEAP32[$160>>2] = $162;
   $163 = HEAP32[$118>>2]|0;
   $164 = (($36) + ($163<<2)|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = $165 & 32767;
   HEAP32[$164>>2] = $166;
  }
  $168 = (($i$112) + 1)|0;
  $169 = HEAP32[$13>>2]|0;
  $170 = ($168|0)<($169|0);
  if ($170) {
   $i$112 = $168;
  } else {
   $$1 = $36;
   break;
  }
 }
 return ($$1|0);
}
function _floor1_inverse2($vb,$in,$memo,$out) {
 $vb = $vb|0;
 $in = $in|0;
 $memo = $memo|0;
 $out = $out|0;
 var $$0 = 0, $$pn$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $8 = 0, $9 = 0;
 var $err$04$i = 0, $err$1$i = 0, $exitcond = 0, $exitcond1 = 0, $hx$0$lcssa = 0, $hx$03 = 0, $hx$1 = 0, $ispos$i = 0, $ispos1$i = 0, $j$02 = 0, $j$11 = 0, $lx$04 = 0, $lx$1 = 0, $ly$0$lcssa = 0, $ly$05 = 0, $ly$1 = 0, $neg$i = 0, $neg2$i = 0, $x1$n$i = 0, $y$03$i = 0;
 var $y$1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($in)) + 1296|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($vb)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($vb)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11|0) / 2)&-1;
 $13 = ($memo|0)==(0|0);
 if ($13) {
  $77 = $12 << 2;
  _memset(($out|0),0,($77|0))|0;
  $$0 = 0;
  return ($$0|0);
 }
 $14 = HEAP32[$memo>>2]|0;
 $15 = ((($1)) + 832|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = Math_imul($16, $14)|0;
 $18 = ($17|0)<(0);
 $19 = ($17|0)>(255);
 $20 = $19 ? 255 : $17;
 $21 = $18 ? 0 : $20;
 $22 = ((($in)) + 1284|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)>(1);
 if ($24) {
  $25 = ((($in)) + 260|0);
  $hx$03 = 0;$j$02 = 1;$lx$04 = 0;$ly$05 = $21;
  while(1) {
   $29 = (($25) + ($j$02<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($memo) + ($30<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $32 & 32767;
   $34 = ($33|0)==($32|0);
   if ($34) {
    $35 = (((($1)) + 836|0) + ($30<<2)|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = Math_imul($16, $32)|0;
    $38 = ($37|0)<(0);
    $39 = ($37|0)>(255);
    $40 = $39 ? 255 : $37;
    $41 = $38 ? 0 : $40;
    $42 = (($41) - ($ly$05))|0;
    $43 = (($36) - ($lx$04))|0;
    $ispos$i = ($42|0)>(-1);
    $neg$i = (0 - ($42))|0;
    $44 = $ispos$i ? $42 : $neg$i;
    $45 = (($42|0) / ($43|0))&-1;
    $46 = $42 >> 31;
    $47 = $46 | 1;
    $48 = Math_imul($45, $43)|0;
    $ispos1$i = ($48|0)>(-1);
    $neg2$i = (0 - ($48))|0;
    $49 = $ispos1$i ? $48 : $neg2$i;
    $50 = (($44) - ($49))|0;
    $51 = ($12|0)>($36|0);
    $x1$n$i = $51 ? $36 : $12;
    $52 = ($x1$n$i|0)>($lx$04|0);
    if ($52) {
     $53 = (59604 + ($ly$05<<2)|0);
     $54 = +HEAPF32[$53>>2];
     $55 = (($out) + ($lx$04<<2)|0);
     $56 = +HEAPF32[$55>>2];
     $57 = $56 * $54;
     HEAPF32[$55>>2] = $57;
    }
    $58 = (($lx$04) + 1)|0;
    $59 = ($58|0)<($x1$n$i|0);
    if ($59) {
     $67 = $58;$err$04$i = 0;$y$03$i = $ly$05;
     while(1) {
      $60 = (($err$04$i) + ($50))|0;
      $61 = ($60|0)<($43|0);
      $62 = $61 ? 0 : $47;
      $63 = $61 ? 0 : $43;
      $err$1$i = (($60) - ($63))|0;
      $$pn$i = (($y$03$i) + ($45))|0;
      $y$1$i = (($$pn$i) + ($62))|0;
      $64 = (59604 + ($y$1$i<<2)|0);
      $65 = +HEAPF32[$64>>2];
      $66 = (($out) + ($67<<2)|0);
      $68 = +HEAPF32[$66>>2];
      $69 = $68 * $65;
      HEAPF32[$66>>2] = $69;
      $70 = (($67) + 1)|0;
      $71 = ($70|0)<($x1$n$i|0);
      if ($71) {
       $67 = $70;$err$04$i = $err$1$i;$y$03$i = $y$1$i;
      } else {
       $hx$1 = $36;$lx$1 = $36;$ly$1 = $41;
       break;
      }
     }
    } else {
     $hx$1 = $36;$lx$1 = $36;$ly$1 = $41;
    }
   } else {
    $hx$1 = $hx$03;$lx$1 = $lx$04;$ly$1 = $ly$05;
   }
   $72 = (($j$02) + 1)|0;
   $exitcond1 = ($72|0)==($23|0);
   if ($exitcond1) {
    $hx$0$lcssa = $hx$1;$ly$0$lcssa = $ly$1;
    break;
   } else {
    $hx$03 = $hx$1;$j$02 = $72;$lx$04 = $lx$1;$ly$05 = $ly$1;
   }
  }
 } else {
  $hx$0$lcssa = 0;$ly$0$lcssa = $21;
 }
 $26 = ($hx$0$lcssa|0)<($12|0);
 if (!($26)) {
  $$0 = 1;
  return ($$0|0);
 }
 $27 = (59604 + ($ly$0$lcssa<<2)|0);
 $28 = +HEAPF32[$27>>2];
 $j$11 = $hx$0$lcssa;
 while(1) {
  $73 = (($out) + ($j$11<<2)|0);
  $74 = +HEAPF32[$73>>2];
  $75 = $74 * $28;
  HEAPF32[$73>>2] = $75;
  $76 = (($j$11) + 1)|0;
  $exitcond = ($76|0)==($12|0);
  if ($exitcond) {
   $$0 = 1;
   break;
  } else {
   $j$11 = $76;
  }
 }
 return ($$0|0);
}
function _floor1_fit($vb,$look,$logmdct,$logmask) {
 $vb = $vb|0;
 $look = $look|0;
 $logmdct = $logmdct|0;
 $logmask = $logmask|0;
 var $$$0$i = 0, $$$i$i = 0, $$$i$i27 = 0, $$$i$i58 = 0, $$$i5$i = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i28 = 0, $$0$i$i59 = 0, $$0$i10 = 0, $$0$i54 = 0, $$0$i6$i = 0, $$0$i63 = 0, $$0$i7 = 0, $$0$i8 = 0, $$0$p$i = 0, $$pn$i = 0, $$pre = 0, $$pre118 = 0, $$pre119 = 0;
 var $$val$i = 0.0, $$val$i26 = 0.0, $$val$i61 = 0.0, $$val4$i = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0, $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0;
 var $239 = 0, $24 = 0.0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0.0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0.0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0.0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0;
 var $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $err$010$i = 0, $err$1$i = 0, $exitcond = 0, $exitcond111 = 0, $exitcond112 = 0, $exitcond114 = 0, $exitcond116 = 0, $exitcond117 = 0, $fit_valueA = 0, $fit_valueB = 0, $fits = 0, $hineighbor = 0, $hy0 = 0, $hy1 = 0, $i$01$i = 0, $i$01$i25 = 0, $i$0106 = 0;
 var $i$1104 = 0, $i$3100 = 0, $i$595 = 0, $i$686 = 0, $i$777 = 0, $ispos$i = 0, $ispos$i56 = 0, $ispos2$i = 0, $j$079 = 0, $j$079$in = 0, $j$1 = 0, $j$182 = 0, $j$183 = 0, $loneighbor = 0, $ly0 = 0, $ly1 = 0, $memo = 0, $mse$0$lcssa$i = 0, $mse$011$i = 0, $n$0$lcssa$i = 0;
 var $n$012$i = 0, $na$0$lcssa$i = 0, $na$0$lcssa$i47 = 0, $na$07$i = 0, $na$07$i19 = 0, $na$1$i = 0, $na$1$i34 = 0, $nb$0$lcssa$i = 0, $nb$0$lcssa$i41 = 0, $nb$013$i = 0, $nb$013$i13 = 0, $nb$1$i = 0, $nb$1$i40 = 0, $neg$i = 0, $neg$i57 = 0, $neg3$i = 0, $nonzero$094 = 0, $nonzero$1 = 0, $or$cond = 0, $or$cond$i = 0;
 var $or$cond6 = 0, $output$0 = 0, $x1$$i = 0, $x2a$0$lcssa$i = 0, $x2a$0$lcssa$i50 = 0, $x2a$04$i = 0, $x2a$04$i22 = 0, $x2a$1$i = 0, $x2a$1$i31 = 0, $x2b$0$lcssa$i = 0, $x2b$0$lcssa$i44 = 0, $x2b$010$i = 0, $x2b$010$i16 = 0, $x2b$1$i = 0, $x2b$1$i37 = 0, $xa$0$lcssa$i = 0, $xa$0$lcssa$i52 = 0, $xa$02$i = 0, $xa$02$i24 = 0, $xa$1$i = 0;
 var $xa$1$i29 = 0, $xb$0$lcssa$i = 0, $xb$0$lcssa$i46 = 0, $xb$08$i = 0, $xb$08$i18 = 0, $xb$1$i = 0, $xb$1$i35 = 0, $xya$0$lcssa$i = 0, $xya$0$lcssa$i48 = 0, $xya$06$i = 0, $xya$06$i20 = 0, $xya$1$i = 0, $xya$1$i33 = 0, $xyb$0$lcssa$i = 0, $xyb$0$lcssa$i42 = 0, $xyb$012$i = 0, $xyb$012$i14 = 0, $xyb$1$i = 0, $xyb$1$i39 = 0, $y$09$i = 0;
 var $y$1$i = 0, $y0 = 0, $y1 = 0, $y2a$0$lcssa$i = 0, $y2a$0$lcssa$i49 = 0, $y2a$05$i = 0, $y2a$05$i21 = 0, $y2a$1$i = 0, $y2a$1$i32 = 0, $y2b$0$lcssa$i = 0, $y2b$0$lcssa$i43 = 0, $y2b$011$i = 0, $y2b$011$i15 = 0, $y2b$1$i = 0, $y2b$1$i38 = 0, $ya$0$lcssa$i = 0, $ya$0$lcssa$i51 = 0, $ya$03$i = 0, $ya$03$i23 = 0, $ya$1$i = 0;
 var $ya$1$i30 = 0, $yb$0$lcssa$i = 0, $yb$0$lcssa$i45 = 0, $yb$09$i = 0, $yb$09$i17 = 0, $yb$1$i = 0, $yb$1$i36 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4912|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fits = sp + 1328|0;
 $fit_valueA = sp + 1064|0;
 $fit_valueB = sp + 804|0;
 $loneighbor = sp + 544|0;
 $hineighbor = sp + 284|0;
 $memo = sp + 24|0;
 $y0 = sp + 20|0;
 $y1 = sp + 16|0;
 $ly0 = sp + 12|0;
 $ly1 = sp + 8|0;
 $hy0 = sp + 4|0;
 $hy1 = sp;
 $0 = ((($look)) + 1296|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($look)) + 1288|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($look)) + 1284|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 if ($6) {
  $i$0106 = 0;
  while(1) {
   $7 = (($fit_valueA) + ($i$0106<<2)|0);
   HEAP32[$7>>2] = -200;
   $8 = (($i$0106) + 1)|0;
   $exitcond117 = ($8|0)==($5|0);
   if ($exitcond117) {
    $i$1104 = 0;
    break;
   } else {
    $i$0106 = $8;
   }
  }
  while(1) {
   $9 = (($fit_valueB) + ($i$1104<<2)|0);
   HEAP32[$9>>2] = -200;
   $10 = (($i$1104) + 1)|0;
   $exitcond116 = ($10|0)==($5|0);
   if ($exitcond116) {
    break;
   } else {
    $i$1104 = $10;
   }
  }
  $11 = $5 << 2;
  _memset(($loneighbor|0),0,($11|0))|0;
  $i$3100 = 0;
  while(1) {
   $12 = (($hineighbor) + ($i$3100<<2)|0);
   HEAP32[$12>>2] = 1;
   $13 = (($i$3100) + 1)|0;
   $exitcond114 = ($13|0)==($5|0);
   if ($exitcond114) {
    break;
   } else {
    $i$3100 = $13;
   }
  }
  _memset(($memo|0),-1,($11|0))|0;
  $15 = ($5|0)>(1);
  if (!($15)) {
   $output$0 = 0;
   STACKTOP = sp;return ($output$0|0);
  }
  $16 = (($3) + -1)|0;
  $17 = ((($1)) + 1112|0);
  $18 = (($5) + -1)|0;
  $$pre = HEAP32[$look>>2]|0;
  $73 = $$pre;$i$595 = 0;$nonzero$094 = 0;
  while(1) {
   $69 = (($i$595) + 1)|0;
   $70 = (($look) + ($69<<2)|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (($fits) + (($i$595*56)|0)|0);
   dest=$72; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   HEAP32[$72>>2] = $73;
   $74 = (((($fits) + (($i$595*56)|0)|0)) + 4|0);
   HEAP32[$74>>2] = $71;
   $75 = ($71|0)<($3|0);
   $x1$$i = $75 ? $71 : $16;
   $76 = ($x1$$i|0)<($73|0);
   if ($76) {
    $na$0$lcssa$i47 = 0;$nb$0$lcssa$i41 = 0;$x2a$0$lcssa$i50 = 0;$x2b$0$lcssa$i44 = 0;$xa$0$lcssa$i52 = 0;$xb$0$lcssa$i46 = 0;$xya$0$lcssa$i48 = 0;$xyb$0$lcssa$i42 = 0;$y2a$0$lcssa$i49 = 0;$y2b$0$lcssa$i43 = 0;$ya$0$lcssa$i51 = 0;$yb$0$lcssa$i45 = 0;
   } else {
    $i$01$i25 = $73;$na$07$i19 = 0;$nb$013$i13 = 0;$x2a$04$i22 = 0;$x2b$010$i16 = 0;$xa$02$i24 = 0;$xb$08$i18 = 0;$xya$06$i20 = 0;$xyb$012$i14 = 0;$y2a$05$i21 = 0;$y2b$011$i15 = 0;$ya$03$i23 = 0;$yb$09$i17 = 0;
    while(1) {
     $77 = (($logmask) + ($i$01$i25<<2)|0);
     $$val$i26 = +HEAPF32[$77>>2];
     $78 = $$val$i26 * 7.3142857551574707;
     $79 = $78 + 1023.5;
     $80 = (~~(($79)));
     $81 = ($80|0)>(1023);
     $82 = ($80|0)<(0);
     $$$i$i27 = $82 ? 0 : $80;
     $$0$i$i28 = $81 ? 1023 : $$$i$i27;
     $83 = ($$0$i$i28|0)==(0);
     do {
      if ($83) {
       $na$1$i34 = $na$07$i19;$nb$1$i40 = $nb$013$i13;$x2a$1$i31 = $x2a$04$i22;$x2b$1$i37 = $x2b$010$i16;$xa$1$i29 = $xa$02$i24;$xb$1$i35 = $xb$08$i18;$xya$1$i33 = $xya$06$i20;$xyb$1$i39 = $xyb$012$i14;$y2a$1$i32 = $y2a$05$i21;$y2b$1$i38 = $y2b$011$i15;$ya$1$i30 = $ya$03$i23;$yb$1$i36 = $yb$09$i17;
      } else {
       $84 = (($logmdct) + ($i$01$i25<<2)|0);
       $85 = +HEAPF32[$84>>2];
       $86 = +HEAPF32[$17>>2];
       $87 = $86 + $85;
       $88 = !($87 >= $$val$i26);
       if ($88) {
        $100 = (($i$01$i25) + ($xb$08$i18))|0;
        $101 = (($$0$i$i28) + ($yb$09$i17))|0;
        $102 = Math_imul($i$01$i25, $i$01$i25)|0;
        $103 = (($102) + ($x2b$010$i16))|0;
        $104 = Math_imul($80, $80)|0;
        $105 = $82 ? 0 : $104;
        $106 = $81 ? 1046529 : $105;
        $107 = (($106) + ($y2b$011$i15))|0;
        $108 = Math_imul($$0$i$i28, $i$01$i25)|0;
        $109 = (($108) + ($xyb$012$i14))|0;
        $110 = (($nb$013$i13) + 1)|0;
        $na$1$i34 = $na$07$i19;$nb$1$i40 = $110;$x2a$1$i31 = $x2a$04$i22;$x2b$1$i37 = $103;$xa$1$i29 = $xa$02$i24;$xb$1$i35 = $100;$xya$1$i33 = $xya$06$i20;$xyb$1$i39 = $109;$y2a$1$i32 = $y2a$05$i21;$y2b$1$i38 = $107;$ya$1$i30 = $ya$03$i23;$yb$1$i36 = $101;
        break;
       } else {
        $89 = (($i$01$i25) + ($xa$02$i24))|0;
        $90 = (($$0$i$i28) + ($ya$03$i23))|0;
        $91 = Math_imul($i$01$i25, $i$01$i25)|0;
        $92 = (($91) + ($x2a$04$i22))|0;
        $93 = Math_imul($80, $80)|0;
        $94 = $82 ? 0 : $93;
        $95 = $81 ? 1046529 : $94;
        $96 = (($95) + ($y2a$05$i21))|0;
        $97 = Math_imul($$0$i$i28, $i$01$i25)|0;
        $98 = (($97) + ($xya$06$i20))|0;
        $99 = (($na$07$i19) + 1)|0;
        $na$1$i34 = $99;$nb$1$i40 = $nb$013$i13;$x2a$1$i31 = $92;$x2b$1$i37 = $x2b$010$i16;$xa$1$i29 = $89;$xb$1$i35 = $xb$08$i18;$xya$1$i33 = $98;$xyb$1$i39 = $xyb$012$i14;$y2a$1$i32 = $96;$y2b$1$i38 = $y2b$011$i15;$ya$1$i30 = $90;$yb$1$i36 = $yb$09$i17;
        break;
       }
      }
     } while(0);
     $111 = (($i$01$i25) + 1)|0;
     $112 = ($i$01$i25|0)<($x1$$i|0);
     if ($112) {
      $i$01$i25 = $111;$na$07$i19 = $na$1$i34;$nb$013$i13 = $nb$1$i40;$x2a$04$i22 = $x2a$1$i31;$x2b$010$i16 = $x2b$1$i37;$xa$02$i24 = $xa$1$i29;$xb$08$i18 = $xb$1$i35;$xya$06$i20 = $xya$1$i33;$xyb$012$i14 = $xyb$1$i39;$y2a$05$i21 = $y2a$1$i32;$y2b$011$i15 = $y2b$1$i38;$ya$03$i23 = $ya$1$i30;$yb$09$i17 = $yb$1$i36;
     } else {
      $na$0$lcssa$i47 = $na$1$i34;$nb$0$lcssa$i41 = $nb$1$i40;$x2a$0$lcssa$i50 = $x2a$1$i31;$x2b$0$lcssa$i44 = $x2b$1$i37;$xa$0$lcssa$i52 = $xa$1$i29;$xb$0$lcssa$i46 = $xb$1$i35;$xya$0$lcssa$i48 = $xya$1$i33;$xyb$0$lcssa$i42 = $xyb$1$i39;$y2a$0$lcssa$i49 = $y2a$1$i32;$y2b$0$lcssa$i43 = $y2b$1$i38;$ya$0$lcssa$i51 = $ya$1$i30;$yb$0$lcssa$i45 = $yb$1$i36;
      break;
     }
    }
   }
   $113 = (((($fits) + (($i$595*56)|0)|0)) + 8|0);
   HEAP32[$113>>2] = $xa$0$lcssa$i52;
   $114 = (((($fits) + (($i$595*56)|0)|0)) + 12|0);
   HEAP32[$114>>2] = $ya$0$lcssa$i51;
   $115 = (((($fits) + (($i$595*56)|0)|0)) + 16|0);
   HEAP32[$115>>2] = $x2a$0$lcssa$i50;
   $116 = (((($fits) + (($i$595*56)|0)|0)) + 20|0);
   HEAP32[$116>>2] = $y2a$0$lcssa$i49;
   $117 = (((($fits) + (($i$595*56)|0)|0)) + 24|0);
   HEAP32[$117>>2] = $xya$0$lcssa$i48;
   $118 = (((($fits) + (($i$595*56)|0)|0)) + 28|0);
   HEAP32[$118>>2] = $na$0$lcssa$i47;
   $119 = (((($fits) + (($i$595*56)|0)|0)) + 32|0);
   HEAP32[$119>>2] = $xb$0$lcssa$i46;
   $120 = (((($fits) + (($i$595*56)|0)|0)) + 36|0);
   HEAP32[$120>>2] = $yb$0$lcssa$i45;
   $121 = (((($fits) + (($i$595*56)|0)|0)) + 40|0);
   HEAP32[$121>>2] = $x2b$0$lcssa$i44;
   $122 = (((($fits) + (($i$595*56)|0)|0)) + 44|0);
   HEAP32[$122>>2] = $y2b$0$lcssa$i43;
   $123 = (((($fits) + (($i$595*56)|0)|0)) + 48|0);
   HEAP32[$123>>2] = $xyb$0$lcssa$i42;
   $124 = (((($fits) + (($i$595*56)|0)|0)) + 52|0);
   HEAP32[$124>>2] = $nb$0$lcssa$i41;
   $125 = (($na$0$lcssa$i47) + ($nonzero$094))|0;
   $exitcond112 = ($69|0)==($18|0);
   if ($exitcond112) {
    $nonzero$1 = $125;
    break;
   } else {
    $73 = $71;$i$595 = $69;$nonzero$094 = $125;
   }
  }
 } else {
  $14 = ($5|0)==(0);
  if (!($14)) {
   $output$0 = 0;
   STACKTOP = sp;return ($output$0|0);
  }
  $19 = ((($fits)) + 4|0);
  dest=$fits; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAP32[$19>>2] = $3;
  $20 = ($3|0)<(1);
  if ($20) {
   $na$0$lcssa$i = 0;$nb$0$lcssa$i = 0;$x2a$0$lcssa$i = 0;$x2b$0$lcssa$i = 0;$xa$0$lcssa$i = 0;$xb$0$lcssa$i = 0;$xya$0$lcssa$i = 0;$xyb$0$lcssa$i = 0;$y2a$0$lcssa$i = 0;$y2b$0$lcssa$i = 0;$ya$0$lcssa$i = 0;$yb$0$lcssa$i = 0;
  } else {
   $21 = ((($1)) + 1112|0);
   $i$01$i = 0;$na$07$i = 0;$nb$013$i = 0;$x2a$04$i = 0;$x2b$010$i = 0;$xa$02$i = 0;$xb$08$i = 0;$xya$06$i = 0;$xyb$012$i = 0;$y2a$05$i = 0;$y2b$011$i = 0;$ya$03$i = 0;$yb$09$i = 0;
   while(1) {
    $22 = (($logmask) + ($i$01$i<<2)|0);
    $$val$i = +HEAPF32[$22>>2];
    $23 = $$val$i * 7.3142857551574707;
    $24 = $23 + 1023.5;
    $25 = (~~(($24)));
    $26 = ($25|0)>(1023);
    $27 = ($25|0)<(0);
    $$$i$i = $27 ? 0 : $25;
    $$0$i$i = $26 ? 1023 : $$$i$i;
    $28 = ($$0$i$i|0)==(0);
    do {
     if ($28) {
      $na$1$i = $na$07$i;$nb$1$i = $nb$013$i;$x2a$1$i = $x2a$04$i;$x2b$1$i = $x2b$010$i;$xa$1$i = $xa$02$i;$xb$1$i = $xb$08$i;$xya$1$i = $xya$06$i;$xyb$1$i = $xyb$012$i;$y2a$1$i = $y2a$05$i;$y2b$1$i = $y2b$011$i;$ya$1$i = $ya$03$i;$yb$1$i = $yb$09$i;
     } else {
      $29 = (($logmdct) + ($i$01$i<<2)|0);
      $30 = +HEAPF32[$29>>2];
      $31 = +HEAPF32[$21>>2];
      $32 = $31 + $30;
      $33 = !($32 >= $$val$i);
      if ($33) {
       $45 = (($i$01$i) + ($xb$08$i))|0;
       $46 = (($$0$i$i) + ($yb$09$i))|0;
       $47 = Math_imul($i$01$i, $i$01$i)|0;
       $48 = (($47) + ($x2b$010$i))|0;
       $49 = Math_imul($25, $25)|0;
       $50 = $27 ? 0 : $49;
       $51 = $26 ? 1046529 : $50;
       $52 = (($51) + ($y2b$011$i))|0;
       $53 = Math_imul($$0$i$i, $i$01$i)|0;
       $54 = (($53) + ($xyb$012$i))|0;
       $55 = (($nb$013$i) + 1)|0;
       $na$1$i = $na$07$i;$nb$1$i = $55;$x2a$1$i = $x2a$04$i;$x2b$1$i = $48;$xa$1$i = $xa$02$i;$xb$1$i = $45;$xya$1$i = $xya$06$i;$xyb$1$i = $54;$y2a$1$i = $y2a$05$i;$y2b$1$i = $52;$ya$1$i = $ya$03$i;$yb$1$i = $46;
       break;
      } else {
       $34 = (($i$01$i) + ($xa$02$i))|0;
       $35 = (($$0$i$i) + ($ya$03$i))|0;
       $36 = Math_imul($i$01$i, $i$01$i)|0;
       $37 = (($36) + ($x2a$04$i))|0;
       $38 = Math_imul($25, $25)|0;
       $39 = $27 ? 0 : $38;
       $40 = $26 ? 1046529 : $39;
       $41 = (($40) + ($y2a$05$i))|0;
       $42 = Math_imul($$0$i$i, $i$01$i)|0;
       $43 = (($42) + ($xya$06$i))|0;
       $44 = (($na$07$i) + 1)|0;
       $na$1$i = $44;$nb$1$i = $nb$013$i;$x2a$1$i = $37;$x2b$1$i = $x2b$010$i;$xa$1$i = $34;$xb$1$i = $xb$08$i;$xya$1$i = $43;$xyb$1$i = $xyb$012$i;$y2a$1$i = $41;$y2b$1$i = $y2b$011$i;$ya$1$i = $35;$yb$1$i = $yb$09$i;
       break;
      }
     }
    } while(0);
    $56 = (($i$01$i) + 1)|0;
    $exitcond111 = ($56|0)==($3|0);
    if ($exitcond111) {
     $na$0$lcssa$i = $na$1$i;$nb$0$lcssa$i = $nb$1$i;$x2a$0$lcssa$i = $x2a$1$i;$x2b$0$lcssa$i = $x2b$1$i;$xa$0$lcssa$i = $xa$1$i;$xb$0$lcssa$i = $xb$1$i;$xya$0$lcssa$i = $xya$1$i;$xyb$0$lcssa$i = $xyb$1$i;$y2a$0$lcssa$i = $y2a$1$i;$y2b$0$lcssa$i = $y2b$1$i;$ya$0$lcssa$i = $ya$1$i;$yb$0$lcssa$i = $yb$1$i;
     break;
    } else {
     $i$01$i = $56;$na$07$i = $na$1$i;$nb$013$i = $nb$1$i;$x2a$04$i = $x2a$1$i;$x2b$010$i = $x2b$1$i;$xa$02$i = $xa$1$i;$xb$08$i = $xb$1$i;$xya$06$i = $xya$1$i;$xyb$012$i = $xyb$1$i;$y2a$05$i = $y2a$1$i;$y2b$011$i = $y2b$1$i;$ya$03$i = $ya$1$i;$yb$09$i = $yb$1$i;
    }
   }
  }
  $57 = ((($fits)) + 8|0);
  HEAP32[$57>>2] = $xa$0$lcssa$i;
  $58 = ((($fits)) + 12|0);
  HEAP32[$58>>2] = $ya$0$lcssa$i;
  $59 = ((($fits)) + 16|0);
  HEAP32[$59>>2] = $x2a$0$lcssa$i;
  $60 = ((($fits)) + 20|0);
  HEAP32[$60>>2] = $y2a$0$lcssa$i;
  $61 = ((($fits)) + 24|0);
  HEAP32[$61>>2] = $xya$0$lcssa$i;
  $62 = ((($fits)) + 28|0);
  HEAP32[$62>>2] = $na$0$lcssa$i;
  $63 = ((($fits)) + 32|0);
  HEAP32[$63>>2] = $xb$0$lcssa$i;
  $64 = ((($fits)) + 36|0);
  HEAP32[$64>>2] = $yb$0$lcssa$i;
  $65 = ((($fits)) + 40|0);
  HEAP32[$65>>2] = $x2b$0$lcssa$i;
  $66 = ((($fits)) + 44|0);
  HEAP32[$66>>2] = $y2b$0$lcssa$i;
  $67 = ((($fits)) + 48|0);
  HEAP32[$67>>2] = $xyb$0$lcssa$i;
  $68 = ((($fits)) + 52|0);
  HEAP32[$68>>2] = $nb$0$lcssa$i;
  $nonzero$1 = $na$0$lcssa$i;
 }
 $126 = ($nonzero$1|0)==(0);
 if ($126) {
  $output$0 = 0;
  STACKTOP = sp;return ($output$0|0);
 }
 HEAP32[$y0>>2] = -200;
 HEAP32[$y1>>2] = -200;
 $127 = (($5) + -1)|0;
 (_fit_line($fits,$127,$y0,$y1,$1)|0);
 $128 = HEAP32[$y0>>2]|0;
 HEAP32[$fit_valueA>>2] = $128;
 HEAP32[$fit_valueB>>2] = $128;
 $129 = HEAP32[$y1>>2]|0;
 $130 = ((($fit_valueB)) + 4|0);
 HEAP32[$130>>2] = $129;
 $131 = ((($fit_valueA)) + 4|0);
 HEAP32[$131>>2] = $129;
 $132 = ($5|0)>(2);
 do {
  if ($132) {
   $133 = ((($1)) + 1112|0);
   $134 = ((($1)) + 1096|0);
   $135 = ((($1)) + 1100|0);
   $136 = ((($1)) + 1104|0);
   $i$686 = 2;
   L46: while(1) {
    $137 = (((($look)) + 520|0) + ($i$686<<2)|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = (($loneighbor) + ($138<<2)|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = (($hineighbor) + ($138<<2)|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = (($memo) + ($140<<2)|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = ($144|0)==($142|0);
    L48: do {
     if (!($145)) {
      $146 = (((($look)) + 520|0) + ($140<<2)|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = (((($look)) + 520|0) + ($142<<2)|0);
      $149 = HEAP32[$148>>2]|0;
      HEAP32[$143>>2] = $142;
      $150 = (((($1)) + 836|0) + ($140<<2)|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = (((($1)) + 836|0) + ($142<<2)|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = (($fit_valueA) + ($140<<2)|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = ($155|0)<(0);
      $157 = (($fit_valueB) + ($140<<2)|0);
      $158 = HEAP32[$157>>2]|0;
      if ($156) {
       $$0$i54 = $158;
      } else {
       $159 = ($158|0)<(0);
       if ($159) {
        $$0$i54 = $155;
       } else {
        $160 = (($158) + ($155))|0;
        $161 = $160 >> 1;
        $$0$i54 = $161;
       }
      }
      $162 = (($fit_valueA) + ($142<<2)|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = ($163|0)<(0);
      $165 = (($fit_valueB) + ($142<<2)|0);
      $166 = HEAP32[$165>>2]|0;
      if ($164) {
       $$0$i63 = $166;
      } else {
       $167 = ($166|0)<(0);
       if ($167) {
        $$0$i63 = $163;
       } else {
        $168 = (($166) + ($163))|0;
        $169 = $168 >> 1;
        $$0$i63 = $169;
       }
      }
      $170 = ($$0$i54|0)==(-1);
      $171 = ($$0$i63|0)==(-1);
      $or$cond = $170 | $171;
      if ($or$cond) {
       label = 35;
       break L46;
      }
      $172 = (($$0$i63) - ($$0$i54))|0;
      $173 = (($153) - ($151))|0;
      $ispos$i56 = ($172|0)>(-1);
      $neg$i57 = (0 - ($172))|0;
      $174 = $ispos$i56 ? $172 : $neg$i57;
      $175 = (($172|0) / ($173|0))&-1;
      $176 = $172 >> 31;
      $177 = $176 | 1;
      $178 = (($logmask) + ($151<<2)|0);
      $$val4$i = +HEAPF32[$178>>2];
      $179 = $$val4$i * 7.3142857551574707;
      $180 = $179 + 1023.5;
      $181 = (~~(($180)));
      $182 = ($181|0)>(1023);
      $183 = ($181|0)<(0);
      $$$i$i58 = $183 ? 0 : $181;
      $$0$i$i59 = $182 ? 1023 : $$$i$i58;
      $184 = Math_imul($175, $173)|0;
      $ispos2$i = ($184|0)>(-1);
      $neg3$i = (0 - ($184))|0;
      $185 = $ispos2$i ? $184 : $neg3$i;
      $186 = (($174) - ($185))|0;
      $187 = (($$0$i54) - ($$0$i$i59))|0;
      $188 = Math_imul($187, $187)|0;
      $189 = (($logmdct) + ($151<<2)|0);
      $190 = +HEAPF32[$189>>2];
      $191 = +HEAPF32[$133>>2];
      $192 = $191 + $190;
      $193 = !($192 >= $$val4$i);
      if ($193) {
       label = 39;
      } else {
       $194 = (+($$0$i54|0));
       $195 = +HEAPF32[$134>>2];
       $196 = $195 + $194;
       $197 = (+($$0$i$i59|0));
       $198 = $196 < $197;
       if (!($198)) {
        $199 = +HEAPF32[$135>>2];
        $200 = $194 - $199;
        $201 = $200 > $197;
        if (!($201)) {
         label = 39;
        }
       }
      }
      L62: do {
       if ((label|0) == 39) {
        label = 0;
        $202 = (($151) + 1)|0;
        $203 = ($202|0)<($153|0);
        if ($203) {
         $209 = $202;$err$010$i = 0;$mse$011$i = $188;$n$012$i = 1;$y$09$i = $$0$i54;
         while(1) {
          $204 = (($err$010$i) + ($186))|0;
          $205 = ($204|0)<($173|0);
          $206 = $205 ? 0 : $177;
          $207 = $205 ? 0 : $173;
          $err$1$i = (($204) - ($207))|0;
          $$pn$i = (($y$09$i) + ($175))|0;
          $y$1$i = (($$pn$i) + ($206))|0;
          $208 = (($logmask) + ($209<<2)|0);
          $$val$i61 = +HEAPF32[$208>>2];
          $210 = $$val$i61 * 7.3142857551574707;
          $211 = $210 + 1023.5;
          $212 = (~~(($211)));
          $213 = ($212|0)>(1023);
          $214 = ($212|0)<(0);
          $$$i5$i = $214 ? 0 : $212;
          $$0$i6$i = $213 ? 1023 : $$$i5$i;
          $215 = (($y$1$i) - ($$0$i6$i))|0;
          $216 = Math_imul($215, $215)|0;
          $217 = (($216) + ($mse$011$i))|0;
          $218 = (($n$012$i) + 1)|0;
          $219 = (($logmdct) + ($209<<2)|0);
          $220 = +HEAPF32[$219>>2];
          $221 = $220 + $191;
          $222 = $221 >= $$val$i61;
          $223 = ($$0$i6$i|0)!=(0);
          $or$cond$i = $222 & $223;
          if ($or$cond$i) {
           $224 = (+($y$1$i|0));
           $225 = +HEAPF32[$134>>2];
           $226 = $225 + $224;
           $227 = (+($$0$i6$i|0));
           $228 = $226 < $227;
           if ($228) {
            break L62;
           }
           $229 = +HEAPF32[$135>>2];
           $230 = $224 - $229;
           $231 = $230 > $227;
           if ($231) {
            break L62;
           }
          }
          $232 = (($209) + 1)|0;
          $233 = ($232|0)<($153|0);
          if ($233) {
           $209 = $232;$err$010$i = $err$1$i;$mse$011$i = $217;$n$012$i = $218;$y$09$i = $y$1$i;
          } else {
           $mse$0$lcssa$i = $217;$n$0$lcssa$i = $218;
           break;
          }
         }
        } else {
         $mse$0$lcssa$i = $188;$n$0$lcssa$i = 1;
        }
        $234 = +HEAPF32[$134>>2];
        $235 = $234 * $234;
        $236 = (+($n$0$lcssa$i|0));
        $237 = $235 / $236;
        $238 = +HEAPF32[$136>>2];
        $239 = $237 > $238;
        if (!($239)) {
         $240 = +HEAPF32[$135>>2];
         $241 = $240 * $240;
         $242 = $241 / $236;
         $243 = $242 > $238;
         if (!($243)) {
          $244 = (($mse$0$lcssa$i|0) / ($n$0$lcssa$i|0))&-1;
          $245 = (+($244|0));
          $246 = $245 > $238;
          if ($246) {
           break;
          }
         }
        }
        $279 = (($fit_valueA) + ($i$686<<2)|0);
        HEAP32[$279>>2] = -200;
        $280 = (($fit_valueB) + ($i$686<<2)|0);
        HEAP32[$280>>2] = -200;
        break L48;
       }
      } while(0);
      HEAP32[$ly0>>2] = -200;
      HEAP32[$ly1>>2] = -200;
      HEAP32[$hy0>>2] = -200;
      HEAP32[$hy1>>2] = -200;
      $247 = (($fits) + (($147*56)|0)|0);
      $248 = (($138) - ($147))|0;
      $249 = (_fit_line($247,$248,$ly0,$ly1,$1)|0);
      $250 = (($fits) + (($138*56)|0)|0);
      $251 = (($149) - ($138))|0;
      $252 = (_fit_line($250,$251,$hy0,$hy1,$1)|0);
      $253 = ($249|0)!=(0);
      if ($253) {
       HEAP32[$ly0>>2] = $$0$i54;
       $254 = HEAP32[$hy0>>2]|0;
       HEAP32[$ly1>>2] = $254;
      }
      $255 = ($252|0)==(0);
      if ($255) {
       label = 52;
      } else {
       $256 = HEAP32[$ly1>>2]|0;
       HEAP32[$hy0>>2] = $256;
       HEAP32[$hy1>>2] = $$0$i63;
       if ($253) {
        $257 = (($fit_valueA) + ($i$686<<2)|0);
        HEAP32[$257>>2] = -200;
        $258 = (($fit_valueB) + ($i$686<<2)|0);
        HEAP32[$258>>2] = -200;
       } else {
        label = 52;
       }
      }
      L83: do {
       if ((label|0) == 52) {
        label = 0;
        $259 = HEAP32[$ly0>>2]|0;
        HEAP32[$157>>2] = $259;
        $260 = ($140|0)==(0);
        if ($260) {
         HEAP32[$fit_valueA>>2] = $259;
        }
        $261 = HEAP32[$ly1>>2]|0;
        $262 = (($fit_valueA) + ($i$686<<2)|0);
        HEAP32[$262>>2] = $261;
        $263 = HEAP32[$hy0>>2]|0;
        $264 = (($fit_valueB) + ($i$686<<2)|0);
        HEAP32[$264>>2] = $263;
        $265 = HEAP32[$hy1>>2]|0;
        HEAP32[$162>>2] = $265;
        $266 = ($142|0)==(1);
        if ($266) {
         HEAP32[$130>>2] = $265;
        }
        $267 = $263 & $261;
        $268 = ($267|0)>(-1);
        if ($268) {
         $269 = ($138|0)>(0);
         L92: do {
          if ($269) {
           $j$079$in = $138;
           while(1) {
            $j$079 = (($j$079$in) + -1)|0;
            $271 = (($hineighbor) + ($j$079<<2)|0);
            $272 = HEAP32[$271>>2]|0;
            $273 = ($272|0)==($142|0);
            if (!($273)) {
             break L92;
            }
            HEAP32[$271>>2] = $i$686;
            $274 = ($j$079$in|0)>(1);
            if ($274) {
             $j$079$in = $j$079;
            } else {
             break;
            }
           }
          }
         } while(0);
         $j$182 = (($138) + 1)|0;
         $270 = ($j$182|0)<($5|0);
         if ($270) {
          $j$183 = $j$182;
          while(1) {
           $275 = (($loneighbor) + ($j$183<<2)|0);
           $276 = HEAP32[$275>>2]|0;
           $277 = ($276|0)==($140|0);
           if (!($277)) {
            break L83;
           }
           HEAP32[$275>>2] = $i$686;
           $j$1 = (($j$183) + 1)|0;
           $278 = ($j$1|0)<($5|0);
           if ($278) {
            $j$183 = $j$1;
           } else {
            break;
           }
          }
         }
        }
       }
      } while(0);
     }
    } while(0);
    $281 = (($i$686) + 1)|0;
    $282 = ($281|0)<($5|0);
    if ($282) {
     $i$686 = $281;
    } else {
     label = 66;
     break;
    }
   }
   if ((label|0) == 35) {
    _exit(1);
    // unreachable;
   }
   else if ((label|0) == 66) {
    $$pre118 = HEAP32[$fit_valueA>>2]|0;
    $$pre119 = HEAP32[$fit_valueB>>2]|0;
    $308 = $$pre118;$310 = $$pre119;
    break;
   }
  } else {
   $308 = $128;$310 = $128;
  }
 } while(0);
 $283 = $5 << 2;
 $284 = (($283) + 7)|0;
 $285 = $284 & -8;
 $286 = ((($vb)) + 72|0);
 $287 = HEAP32[$286>>2]|0;
 $288 = (($287) + ($285))|0;
 $289 = ((($vb)) + 76|0);
 $290 = HEAP32[$289>>2]|0;
 $291 = ($288|0)>($290|0);
 $292 = ((($vb)) + 68|0);
 $293 = HEAP32[$292>>2]|0;
 if ($291) {
  $294 = ($293|0)==(0|0);
  if (!($294)) {
   $295 = $293;
   $296 = (_malloc(8)|0);
   $297 = ((($vb)) + 80|0);
   $298 = HEAP32[$297>>2]|0;
   $299 = (($298) + ($287))|0;
   HEAP32[$297>>2] = $299;
   $300 = ((($vb)) + 84|0);
   $301 = HEAP32[$300>>2]|0;
   $302 = ((($296)) + 4|0);
   HEAP32[$302>>2] = $301;
   HEAP32[$296>>2] = $295;
   HEAP32[$300>>2] = $296;
  }
  HEAP32[$289>>2] = $285;
  $303 = (_malloc($285)|0);
  HEAP32[$292>>2] = $303;
  HEAP32[$286>>2] = 0;
  $305 = $303;$306 = 0;
 } else {
  $305 = $293;$306 = $287;
 }
 $304 = (($305) + ($306)|0);
 $307 = (($306) + ($285))|0;
 HEAP32[$286>>2] = $307;
 $309 = ($308|0)<(0);
 if ($309) {
  $$0$i10 = $310;
 } else {
  $311 = ($310|0)<(0);
  if ($311) {
   $$0$i10 = $308;
  } else {
   $312 = (($310) + ($308))|0;
   $313 = $312 >> 1;
   $$0$i10 = $313;
  }
 }
 HEAP32[$304>>2] = $$0$i10;
 $314 = HEAP32[$131>>2]|0;
 $315 = ($314|0)<(0);
 $316 = HEAP32[$130>>2]|0;
 if ($315) {
  $$0$i8 = $316;
 } else {
  $317 = ($316|0)<(0);
  if ($317) {
   $$0$i8 = $314;
  } else {
   $318 = (($316) + ($314))|0;
   $319 = $318 >> 1;
   $$0$i8 = $319;
  }
 }
 $320 = ((($304)) + 4|0);
 HEAP32[$320>>2] = $$0$i8;
 if ($132) {
  $i$777 = 2;
  while(1) {
   $321 = (($i$777) + -2)|0;
   $322 = (((($look)) + 1032|0) + ($321<<2)|0);
   $323 = HEAP32[$322>>2]|0;
   $324 = (((($look)) + 780|0) + ($321<<2)|0);
   $325 = HEAP32[$324>>2]|0;
   $326 = (((($1)) + 836|0) + ($323<<2)|0);
   $327 = HEAP32[$326>>2]|0;
   $328 = (((($1)) + 836|0) + ($325<<2)|0);
   $329 = HEAP32[$328>>2]|0;
   $330 = (($304) + ($323<<2)|0);
   $331 = HEAP32[$330>>2]|0;
   $332 = (($304) + ($325<<2)|0);
   $333 = HEAP32[$332>>2]|0;
   $334 = (((($1)) + 836|0) + ($i$777<<2)|0);
   $335 = HEAP32[$334>>2]|0;
   $336 = $331 & 32767;
   $337 = $333 & 32767;
   $338 = (($337) - ($336))|0;
   $339 = (($329) - ($327))|0;
   $ispos$i = ($338|0)>(-1);
   $neg$i = (0 - ($338))|0;
   $340 = $ispos$i ? $338 : $neg$i;
   $341 = (($335) - ($327))|0;
   $342 = Math_imul($340, $341)|0;
   $343 = (($342|0) / ($339|0))&-1;
   $344 = ($338|0)<(0);
   $345 = (0 - ($343))|0;
   $$0$p$i = $344 ? $345 : $343;
   $$0$i7 = (($$0$p$i) + ($336))|0;
   $346 = (($fit_valueA) + ($i$777<<2)|0);
   $347 = HEAP32[$346>>2]|0;
   $348 = ($347|0)<(0);
   $349 = (($fit_valueB) + ($i$777<<2)|0);
   $350 = HEAP32[$349>>2]|0;
   if ($348) {
    $$0$i = $350;
   } else {
    $351 = ($350|0)<(0);
    if ($351) {
     $$0$i = $347;
    } else {
     $352 = (($350) + ($347))|0;
     $353 = $352 >> 1;
     $$0$i = $353;
    }
   }
   $354 = ($$0$i|0)<(0);
   $355 = ($$0$i7|0)==($$0$i|0);
   $or$cond6 = $354 | $355;
   $356 = $$0$i7 | 32768;
   $$$0$i = $or$cond6 ? $356 : $$0$i;
   $357 = (($304) + ($i$777<<2)|0);
   HEAP32[$357>>2] = $$$0$i;
   $358 = (($i$777) + 1)|0;
   $exitcond = ($358|0)==($5|0);
   if ($exitcond) {
    break;
   } else {
    $i$777 = $358;
   }
  }
 }
 $output$0 = $304;
 STACKTOP = sp;return ($output$0|0);
}
function _fit_line($a,$fits,$y0,$y1,$info) {
 $a = $a|0;
 $fits = $fits|0;
 $y0 = $y0|0;
 $y1 = $y1|0;
 $info = $info|0;
 var $$0 = 0, $$0$i = 0.0, $$0$i2 = 0.0, $$pr = 0, $$pre = 0, $$pre15 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0;
 var $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0;
 var $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0;
 var $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $bn$0$lcssa = 0.0, $bn$01 = 0.0, $bn$1 = 0.0, $bn$2 = 0.0, $exitcond = 0, $i$02 = 0, $x2b$0$lcssa = 0.0;
 var $x2b$04 = 0.0, $x2b$1 = 0.0, $x2b$2 = 0.0, $xb$0$lcssa = 0.0, $xb$06 = 0.0, $xb$1 = 0.0, $xb$2 = 0.0, $xyb$0$lcssa = 0.0, $xyb$03 = 0.0, $xyb$1 = 0.0, $xyb$2 = 0.0, $y$0$i = 0.0, $y$0$i1 = 0.0, $yb$0$lcssa = 0.0, $yb$05 = 0.0, $yb$1 = 0.0, $yb$2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = (($fits) + -1)|0;
 $2 = (((($a) + (($1*56)|0)|0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($fits|0)>(0);
 if ($4) {
  $5 = ((($info)) + 1108|0);
  $6 = +HEAPF32[$5>>2];
  $bn$01 = 0.0;$i$02 = 0;$x2b$04 = 0.0;$xb$06 = 0.0;$xyb$03 = 0.0;$yb$05 = 0.0;
  while(1) {
   $7 = (((($a) + (($i$02*56)|0)|0)) + 52|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (((($a) + (($i$02*56)|0)|0)) + 28|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($10) + ($8))|0;
   $12 = (+($11|0));
   $13 = $12 * $6;
   $14 = (($10) + 1)|0;
   $15 = (+($14|0));
   $16 = $13 / $15;
   $17 = $16;
   $18 = $17 + 1.0;
   $19 = (((($a) + (($i$02*56)|0)|0)) + 32|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (+($20|0));
   $22 = (((($a) + (($i$02*56)|0)|0)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (+($23|0));
   $25 = $18 * $24;
   $26 = $21 + $xb$06;
   $27 = $26 + $25;
   $28 = (((($a) + (($i$02*56)|0)|0)) + 36|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (+($29|0));
   $31 = (((($a) + (($i$02*56)|0)|0)) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (+($32|0));
   $34 = $33 * $18;
   $35 = $30 + $yb$05;
   $36 = $35 + $34;
   $37 = (((($a) + (($i$02*56)|0)|0)) + 40|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (+($38|0));
   $40 = (((($a) + (($i$02*56)|0)|0)) + 16|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (+($41|0));
   $43 = $42 * $18;
   $44 = $39 + $x2b$04;
   $45 = $44 + $43;
   $46 = (((($a) + (($i$02*56)|0)|0)) + 48|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (+($47|0));
   $49 = (((($a) + (($i$02*56)|0)|0)) + 24|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (+($50|0));
   $52 = $51 * $18;
   $53 = $48 + $xyb$03;
   $54 = $53 + $52;
   $55 = (+($8|0));
   $56 = (+($10|0));
   $57 = $18 * $56;
   $58 = $55 + $bn$01;
   $59 = $58 + $57;
   $60 = (($i$02) + 1)|0;
   $exitcond = ($60|0)==($fits|0);
   if ($exitcond) {
    $bn$0$lcssa = $59;$x2b$0$lcssa = $45;$xb$0$lcssa = $27;$xyb$0$lcssa = $54;$yb$0$lcssa = $36;
    break;
   } else {
    $bn$01 = $59;$i$02 = $60;$x2b$04 = $45;$xb$06 = $27;$xyb$03 = $54;$yb$05 = $36;
   }
  }
 } else {
  $bn$0$lcssa = 0.0;$x2b$0$lcssa = 0.0;$xb$0$lcssa = 0.0;$xyb$0$lcssa = 0.0;$yb$0$lcssa = 0.0;
 }
 $61 = HEAP32[$y0>>2]|0;
 $62 = ($61|0)>(-1);
 if ($62) {
  $63 = (+($0|0));
  $64 = $xb$0$lcssa + $63;
  $65 = (+($61|0));
  $66 = $65 + $yb$0$lcssa;
  $67 = Math_imul($0, $0)|0;
  $68 = (+($67|0));
  $69 = $x2b$0$lcssa + $68;
  $70 = Math_imul($61, $0)|0;
  $71 = (+($70|0));
  $72 = $71 + $xyb$0$lcssa;
  $73 = $bn$0$lcssa + 1.0;
  $bn$1 = $73;$x2b$1 = $69;$xb$1 = $64;$xyb$1 = $72;$yb$1 = $66;
 } else {
  $bn$1 = $bn$0$lcssa;$x2b$1 = $x2b$0$lcssa;$xb$1 = $xb$0$lcssa;$xyb$1 = $xyb$0$lcssa;$yb$1 = $yb$0$lcssa;
 }
 $74 = HEAP32[$y1>>2]|0;
 $75 = ($74|0)>(-1);
 if ($75) {
  $76 = (+($3|0));
  $77 = $xb$1 + $76;
  $78 = (+($74|0));
  $79 = $78 + $yb$1;
  $80 = Math_imul($3, $3)|0;
  $81 = (+($80|0));
  $82 = $x2b$1 + $81;
  $83 = Math_imul($74, $3)|0;
  $84 = (+($83|0));
  $85 = $84 + $xyb$1;
  $86 = $bn$1 + 1.0;
  $bn$2 = $86;$x2b$2 = $82;$xb$2 = $77;$xyb$2 = $85;$yb$2 = $79;
 } else {
  $bn$2 = $bn$1;$x2b$2 = $x2b$1;$xb$2 = $xb$1;$xyb$2 = $xyb$1;$yb$2 = $yb$1;
 }
 $87 = $x2b$2 * $bn$2;
 $88 = $xb$2 * $xb$2;
 $89 = $87 - $88;
 $90 = $89 > 0.0;
 if (!($90)) {
  HEAP32[$y0>>2] = 0;
  HEAP32[$y1>>2] = 0;
  $$0 = 1;
  return ($$0|0);
 }
 $91 = $yb$2 * $x2b$2;
 $92 = $xb$2 * $xyb$2;
 $93 = $91 - $92;
 $94 = $93 / $89;
 $95 = $xyb$2 * $bn$2;
 $96 = $xb$2 * $yb$2;
 $97 = $95 - $96;
 $98 = $97 / $89;
 $99 = (+($0|0));
 $100 = $98 * $99;
 $101 = $100 + $94;
 HEAPF64[tempDoublePtr>>3] = $101;$102 = HEAP32[tempDoublePtr>>2]|0;
 $103 = HEAP32[tempDoublePtr+4>>2]|0;
 $104 = $103 & 2146435072;
 $105 = ($104>>>0)>(1126170624);
 $106 = (0)>(0);
 $107 = ($104|0)==(1126170624);
 $108 = $107 & $106;
 $109 = $105 | $108;
 if ($109) {
  $$0$i = $101;
 } else {
  $110 = ($103|0)<(0);
  $111 = $101 + -4503599627370496.0;
  $112 = $111 + 4503599627370496.0;
  $113 = $101 + 4503599627370496.0;
  $114 = $113 + -4503599627370496.0;
  $y$0$i = $110 ? $112 : $114;
  $115 = $y$0$i == 0.0;
  if ($115) {
   $116 = $110 ? -0.0 : 0.0;
   $$0$i = $116;
  } else {
   $$0$i = $y$0$i;
  }
 }
 $117 = (~~(($$0$i)));
 HEAP32[$y0>>2] = $117;
 $118 = (+($3|0));
 $119 = $98 * $118;
 $120 = $119 + $94;
 HEAPF64[tempDoublePtr>>3] = $120;$121 = HEAP32[tempDoublePtr>>2]|0;
 $122 = HEAP32[tempDoublePtr+4>>2]|0;
 $123 = $122 & 2146435072;
 $124 = ($123>>>0)>(1126170624);
 $125 = (0)>(0);
 $126 = ($123|0)==(1126170624);
 $127 = $126 & $125;
 $128 = $124 | $127;
 if ($128) {
  $$0$i2 = $120;
 } else {
  $129 = ($122|0)<(0);
  $130 = $120 + -4503599627370496.0;
  $131 = $130 + 4503599627370496.0;
  $132 = $120 + 4503599627370496.0;
  $133 = $132 + -4503599627370496.0;
  $y$0$i1 = $129 ? $131 : $133;
  $134 = $y$0$i1 == 0.0;
  if ($134) {
   $135 = $129 ? -0.0 : 0.0;
   $$0$i2 = $135;
  } else {
   $$0$i2 = $y$0$i1;
  }
 }
 $136 = (~~(($$0$i2)));
 HEAP32[$y1>>2] = $136;
 $137 = HEAP32[$y0>>2]|0;
 $138 = ($137|0)>(1023);
 if ($138) {
  HEAP32[$y0>>2] = 1023;
  $$pr = HEAP32[$y1>>2]|0;
  $139 = $$pr;$145 = 1023;
 } else {
  $139 = $136;$145 = $137;
 }
 $140 = ($139|0)>(1023);
 if ($140) {
  HEAP32[$y1>>2] = 1023;
  $$pre = HEAP32[$y0>>2]|0;
  $141 = $$pre;$146 = 1023;
 } else {
  $141 = $145;$146 = $139;
 }
 $142 = ($141|0)<(0);
 if ($142) {
  HEAP32[$y0>>2] = 0;
  $$pre15 = HEAP32[$y1>>2]|0;
  $143 = $$pre15;
 } else {
  $143 = $146;
 }
 $144 = ($143|0)<(0);
 if (!($144)) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$y1>>2] = 0;
 $$0 = 0;
 return ($$0|0);
}
function _floor0_unpack($vi,$opb) {
 $vi = $vi|0;
 $opb = $opb|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j$01 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vi)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_malloc(96)|0);
 $3 = (_oggpack_read($opb,8)|0);
 HEAP32[$2>>2] = $3;
 $4 = (_oggpack_read($opb,16)|0);
 $5 = ((($2)) + 4|0);
 HEAP32[$5>>2] = $4;
 $6 = (_oggpack_read($opb,16)|0);
 $7 = ((($2)) + 8|0);
 HEAP32[$7>>2] = $6;
 $8 = (_oggpack_read($opb,6)|0);
 $9 = ((($2)) + 12|0);
 HEAP32[$9>>2] = $8;
 $10 = (_oggpack_read($opb,8)|0);
 $11 = ((($2)) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (_oggpack_read($opb,4)|0);
 $13 = (($12) + 1)|0;
 $14 = ((($2)) + 20|0);
 HEAP32[$14>>2] = $13;
 $15 = ($3|0)<(1);
 L1: do {
  if ($15) {
   $37 = ($2|0)==(0|0);
   if ($37) {
    $$0 = 0;
    return ($$0|0);
   }
  } else {
   $16 = ($4|0)<(1);
   if (!($16)) {
    $17 = ($6|0)<(1);
    $18 = ($12|0)<(0);
    $or$cond = $18 | $17;
    if (!($or$cond)) {
     $19 = ($12|0)>(-1);
     if (!($19)) {
      $$0 = $2;
      return ($$0|0);
     }
     $20 = ((($2)) + 24|0);
     $21 = ((($1)) + 24|0);
     $j$01 = 0;
     while(1) {
      $25 = (_oggpack_read($opb,8)|0);
      $26 = (($20) + ($j$01<<2)|0);
      HEAP32[$26>>2] = $25;
      $27 = ($25|0)<(0);
      if ($27) {
       break L1;
      }
      $28 = HEAP32[$21>>2]|0;
      $29 = ($25|0)<($28|0);
      if (!($29)) {
       break L1;
      }
      $30 = (((($1)) + 1824|0) + ($25<<2)|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ((($31)) + 12|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($33|0)==(0);
      if ($34) {
       break L1;
      }
      $35 = HEAP32[$31>>2]|0;
      $36 = ($35|0)<(1);
      $23 = (($j$01) + 1)|0;
      if ($36) {
       break L1;
      }
      $22 = HEAP32[$14>>2]|0;
      $24 = ($23|0)<($22|0);
      if ($24) {
       $j$01 = $23;
      } else {
       $$0 = $2;
       break;
      }
     }
     return ($$0|0);
    }
   }
  }
 } while(0);
 _free($2);
 $$0 = 0;
 return ($$0|0);
}
function _floor0_look($vd,$i) {
 $vd = $vd|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (_malloc(32)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = ((($0)) + -4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3 & 3;
  $5 = ($4|0)==(0);
  if (!($5)) {
   dest=$0; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  }
 }
 $6 = HEAP32[$i>>2]|0;
 $7 = ((($0)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($i)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$0>>2] = $9;
 $10 = ((($0)) + 20|0);
 HEAP32[$10>>2] = $i;
 $11 = (_malloc(8)|0);
 $12 = ($11|0)==(0|0);
 if ($12) {
  $21 = ((($0)) + 8|0);
  HEAP32[$21>>2] = $11;
  return ($0|0);
 }
 $13 = ((($11)) + -4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 3;
 $16 = ($15|0)==(0);
 if ($16) {
  $21 = ((($0)) + 8|0);
  HEAP32[$21>>2] = $11;
  return ($0|0);
 }
 $17 = $11;
 $18 = $17;
 HEAP8[$18>>0]=0&255;HEAP8[$18+1>>0]=(0>>8)&255;HEAP8[$18+2>>0]=(0>>16)&255;HEAP8[$18+3>>0]=0>>24;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP8[$20>>0]=0&255;HEAP8[$20+1>>0]=(0>>8)&255;HEAP8[$20+2>>0]=(0>>16)&255;HEAP8[$20+3>>0]=0>>24;
 $21 = ((($0)) + 8|0);
 HEAP32[$21>>2] = $11;
 return ($0|0);
}
function _floor0_free_info($i) {
 $i = $i|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($i|0)==(0|0);
 if (!($0)) {
  _free($i);
 }
 return;
}
function _floor0_free_look($i) {
 $i = $i|0;
 var $$in = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($i|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($i)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$2>>2]|0;
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$in = $2;
  } else {
   _free($4);
   $$pre = HEAP32[$1>>2]|0;
   $$in = $$pre;
  }
  $6 = ((($$in)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $9 = $$in;
  } else {
   _free($7);
   $$pre1 = HEAP32[$1>>2]|0;
   $9 = $$pre1;
  }
  _free($9);
 }
 _free($i);
 return;
}
function _floor0_inverse1($vb,$i) {
 $vb = $vb|0;
 $i = $i|0;
 var $$01$i = 0, $$2 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $i$08$i = 0, $i$1$lcssa$i = 0, $i$15$i = 0, $j$04$i = 0, $j$08 = 0, $j$1$lcssa = 0, $j$15 = 0, $k$04 = 0, $last$09 = 0.0, $ret$0$lcssa$i = 0, $ret$02$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($i)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($vb)) + 4|0);
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_oggpack_read($2,$4)|0);
 $6 = ($5|0)>(0);
 if (!($6)) {
  $$2 = 0;
  return ($$2|0);
 }
 $7 = HEAP32[$3>>2]|0;
 $8 = 1 << $7;
 $9 = (($8) + -1)|0;
 $10 = (+($5|0));
 $11 = (+($9|0));
 $12 = $10 / $11;
 $13 = ((($1)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (+($14|0));
 $16 = $12 * $15;
 $17 = ((($1)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0);
 if ($19) {
  $ret$0$lcssa$i = 0;
 } else {
  $$01$i = $18;$ret$02$i = 0;
  while(1) {
   $20 = $$01$i >>> 1;
   $21 = (($ret$02$i) + 1)|0;
   $22 = ($20|0)==(0);
   if ($22) {
    $ret$0$lcssa$i = $21;
    break;
   } else {
    $$01$i = $20;$ret$02$i = $21;
   }
  }
 }
 $23 = (_oggpack_read($2,$ret$0$lcssa$i)|0);
 $24 = ($23|0)==(-1);
 if ($24) {
  $$2 = 0;
  return ($$2|0);
 }
 $25 = HEAP32[$17>>2]|0;
 $26 = ($23|0)<($25|0);
 if (!($26)) {
  $$2 = 0;
  return ($$2|0);
 }
 $27 = ((($vb)) + 64|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 28|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 2848|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (((($1)) + 24|0) + ($23<<2)|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34) + (($36*56)|0)|0);
 $38 = ((($i)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$37>>2]|0;
 $41 = (($40) + ($39))|0;
 $42 = $41 << 2;
 $43 = (($42) + 11)|0;
 $44 = $43 & -8;
 $45 = ((($vb)) + 72|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + ($44))|0;
 $48 = ((($vb)) + 76|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($47|0)>($49|0);
 $51 = ((($vb)) + 68|0);
 $52 = HEAP32[$51>>2]|0;
 if ($50) {
  $53 = ($52|0)==(0|0);
  if (!($53)) {
   $54 = $52;
   $55 = (_malloc(8)|0);
   $56 = ((($vb)) + 80|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($57) + ($46))|0;
   HEAP32[$56>>2] = $58;
   $59 = ((($vb)) + 84|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ((($55)) + 4|0);
   HEAP32[$61>>2] = $60;
   HEAP32[$55>>2] = $54;
   HEAP32[$59>>2] = $55;
  }
  HEAP32[$48>>2] = $44;
  $62 = (_malloc($44)|0);
  HEAP32[$51>>2] = $62;
  HEAP32[$45>>2] = 0;
  $$pre = HEAP32[$38>>2]|0;
  $64 = $62;$65 = 0;$70 = $$pre;
 } else {
  $64 = $52;$65 = $46;$70 = $39;
 }
 $63 = (($64) + ($65)|0);
 $66 = (($65) + ($44))|0;
 HEAP32[$45>>2] = $66;
 $67 = (((($34) + (($36*56)|0)|0)) + 8|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($68|0)>(0);
 $71 = ($70|0)>(0);
 L20: do {
  if ($69) {
   if ($71) {
    $73 = (((($34) + (($36*56)|0)|0)) + 16|0);
    $i$08$i = 0;
    while(1) {
     $75 = (_decode_packed_entry_number($37,$2)|0);
     $76 = ($75|0)==(-1);
     if ($76) {
      $$2 = 0;
      break;
     }
     $77 = HEAP32[$73>>2]|0;
     $78 = HEAP32[$37>>2]|0;
     $79 = Math_imul($78, $75)|0;
     $80 = (($77) + ($79<<2)|0);
     $81 = ($i$08$i|0)<($70|0);
     L26: do {
      if ($81) {
       $i$15$i = $i$08$i;$j$04$i = 0;
       while(1) {
        $82 = ($j$04$i|0)<($78|0);
        if (!($82)) {
         $i$1$lcssa$i = $i$15$i;
         break L26;
        }
        $83 = (($j$04$i) + 1)|0;
        $84 = (($80) + ($j$04$i<<2)|0);
        $85 = HEAP32[$84>>2]|0;
        $86 = (($i$15$i) + 1)|0;
        $87 = (($63) + ($i$15$i<<2)|0);
        HEAP32[$87>>2] = $85;
        $88 = ($86|0)<($70|0);
        if ($88) {
         $i$15$i = $86;$j$04$i = $83;
        } else {
         $i$1$lcssa$i = $86;
         break;
        }
       }
      } else {
       $i$1$lcssa$i = $i$08$i;
      }
     } while(0);
     $74 = ($i$1$lcssa$i|0)<($70|0);
     if ($74) {
      $i$08$i = $i$1$lcssa$i;
     } else {
      break L20;
     }
    }
    return ($$2|0);
   }
  } else {
   if ($71) {
    $72 = $70 << 2;
    _memset(($63|0),0,($72|0))|0;
   }
  }
 } while(0);
 $89 = HEAP32[$38>>2]|0;
 $90 = ($89|0)>(0);
 if ($90) {
  $j$08 = 0;$last$09 = 0.0;
  while(1) {
   $91 = ($j$08|0)<($89|0);
   L38: do {
    if ($91) {
     $92 = HEAP32[$37>>2]|0;
     $j$15 = $j$08;$k$04 = 0;
     while(1) {
      $93 = ($k$04|0)<($92|0);
      if (!($93)) {
       $j$1$lcssa = $j$15;
       break L38;
      }
      $94 = (($63) + ($j$15<<2)|0);
      $95 = +HEAPF32[$94>>2];
      $96 = $95 + $last$09;
      HEAPF32[$94>>2] = $96;
      $97 = (($k$04) + 1)|0;
      $98 = (($j$15) + 1)|0;
      $99 = ($98|0)<($89|0);
      if ($99) {
       $j$15 = $98;$k$04 = $97;
      } else {
       $j$1$lcssa = $98;
       break;
      }
     }
    } else {
     $j$1$lcssa = $j$08;
    }
   } while(0);
   $100 = (($j$1$lcssa) + -1)|0;
   $101 = (($63) + ($100<<2)|0);
   $102 = +HEAPF32[$101>>2];
   $103 = ($j$1$lcssa|0)<($89|0);
   if ($103) {
    $j$08 = $j$1$lcssa;$last$09 = $102;
   } else {
    break;
   }
  }
 }
 $104 = (($63) + ($89<<2)|0);
 HEAPF32[$104>>2] = $16;
 $$2 = $63;
 return ($$2|0);
}
function _floor0_inverse2($vb,$i,$memo,$out) {
 $vb = $vb|0;
 $i = $i|0;
 $memo = $memo|0;
 $out = $out|0;
 var $$$i = 0, $$0 = 0, $$lcssa$i = 0, $$lcssa$us$i = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0;
 var $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0;
 var $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0;
 var $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0;
 var $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0;
 var $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0;
 var $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $exitcond$i = 0, $i$012$i = 0, $i$19$i = 0, $i$19$us$i = 0, $j$0$lcssa$i = 0, $j$01$i = 0, $j$01$us$i = 0, $p$02$us$i = 0.0, $p$1$i = 0.0, $p$1$in$i = 0.0, $p$1$us$i = 0.0, $q$03$us$i = 0.0, $q$1$i = 0.0, $q$1$us$i = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($i)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($vb)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($i)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = ((($vb)) + 64|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($3<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16|0) / 2)&-1;
  $18 = HEAP32[$i>>2]|0;
  $19 = ((($1)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (+($20|0));
  $22 = $17 << 2;
  $23 = (($22) + 4)|0;
  $24 = (_malloc($23)|0);
  HEAP32[$6>>2] = $24;
  $25 = ($16|0)>(1);
  L3: do {
   if ($25) {
    $26 = (+($18|0));
    $27 = $21 * $21;
    $28 = $27 * 4.624999938585006E-9;
    $29 = $28;
    $30 = (+Math_atan((+$29)));
    $31 = $30 * 2.2400000095367432;
    $32 = $21 * 3.6999999429099262E-4;
    $33 = $32;
    $34 = (+Math_atan((+$33)));
    $35 = $34 * 13.100000381469727;
    $36 = $21 * 4.9999998736893758E-5;
    $37 = $36;
    $38 = $31 + $37;
    $39 = $38 + $35;
    $40 = $26 / $39;
    $41 = $40;
    $42 = HEAP32[$19>>2]|0;
    $43 = (+($42|0));
    $44 = $43 * 0.5;
    $45 = (+($17|0));
    $46 = $44 / $45;
    $47 = $41;
    $48 = HEAP32[$4>>2]|0;
    $49 = (($48) + ($3<<2)|0);
    $50 = HEAP32[$49>>2]|0;
    $70 = $18;$j$01$i = 0;
    while(1) {
     $51 = (+($j$01$i|0));
     $52 = $51 * $46;
     $53 = $52 * 7.3999998858198524E-4;
     $54 = $53;
     $55 = (+Math_atan((+$54)));
     $56 = $55 * 13.100000381469727;
     $57 = $52 * $52;
     $58 = $57 * 1.8499999754340024E-8;
     $59 = $58;
     $60 = (+Math_atan((+$59)));
     $61 = $60 * 2.2400000095367432;
     $62 = $61 + $56;
     $63 = $52 * 9.9999997473787516E-5;
     $64 = $63;
     $65 = $62 + $64;
     $66 = $65 * $47;
     $67 = (+Math_floor((+$66)));
     $68 = (~~(($67)));
     $69 = ($68|0)<($70|0);
     $71 = (($70) + -1)|0;
     $$$i = $69 ? $68 : $71;
     $72 = (($50) + ($j$01$i<<2)|0);
     HEAP32[$72>>2] = $$$i;
     $73 = (($j$01$i) + 1)|0;
     $74 = ($73|0)<($17|0);
     if (!($74)) {
      $j$0$lcssa$i = $73;
      break L3;
     }
     $$pre$i = HEAP32[$i>>2]|0;
     $70 = $$pre$i;$j$01$i = $73;
    }
   } else {
    $j$0$lcssa$i = 0;
   }
  } while(0);
  $75 = HEAP32[$4>>2]|0;
  $76 = (($75) + ($3<<2)|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($77) + ($j$0$lcssa$i<<2)|0);
  HEAP32[$78>>2] = -1;
  $79 = (((($i)) + 12|0) + ($3<<2)|0);
  HEAP32[$79>>2] = $17;
 }
 $80 = ($memo|0)==(0|0);
 if ($80) {
  $216 = ((($i)) + 12|0);
  $217 = (($216) + ($3<<2)|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = $218 << 2;
  _memset(($out|0),0,($219|0))|0;
  $$0 = 0;
  return ($$0|0);
 }
 $81 = ((($i)) + 4|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = (($memo) + ($82<<2)|0);
 $84 = +HEAPF32[$83>>2];
 $85 = HEAP32[$4>>2]|0;
 $86 = (($85) + ($3<<2)|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ((($i)) + 12|0);
 $89 = (($88) + ($3<<2)|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = HEAP32[$i>>2]|0;
 $92 = ((($1)) + 16|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = (+($93|0));
 $95 = (+($91|0));
 $96 = 3.1415926535897931 / $95;
 $97 = $96;
 $98 = ($82|0)>(0);
 if ($98) {
  $i$012$i = 0;
  while(1) {
   $168 = (($memo) + ($i$012$i<<2)|0);
   $169 = +HEAPF32[$168>>2];
   $170 = $169;
   $171 = (+Math_cos((+$170)));
   $172 = $171 * 2.0;
   $173 = $172;
   HEAPF32[$168>>2] = $173;
   $174 = (($i$012$i) + 1)|0;
   $exitcond$i = ($174|0)==($82|0);
   if ($exitcond$i) {
    break;
   } else {
    $i$012$i = $174;
   }
  }
 }
 $99 = ($90|0)>(0);
 if (!($99)) {
  $$0 = 1;
  return ($$0|0);
 }
 $100 = ($82|0)>(1);
 $101 = $84;
 $102 = $94;
 if (!($100)) {
  $103 = ($82|0)==(1);
  $i$19$i = 0;
  while(1) {
   $176 = (($87) + ($i$19$i<<2)|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = (+($177|0));
   $179 = $178 * $97;
   $180 = $179;
   $181 = (+Math_cos((+$180)));
   $182 = $181 * 2.0;
   $183 = $182;
   if ($103) {
    $184 = +HEAPF32[$memo>>2];
    $185 = $183 - $184;
    $186 = $185 * 0.5;
    $187 = $183 * $183;
    $188 = 4.0 - $187;
    $189 = $186 * $186;
    $p$1$in$i = $188;$q$1$i = $189;
   } else {
    $190 = 2.0 - $183;
    $191 = $183 + 2.0;
    $192 = $191 * 0.25;
    $p$1$in$i = $190;$q$1$i = $192;
   }
   $p$1$i = $p$1$in$i * 0.25;
   $193 = $q$1$i + $p$1$i;
   $194 = $193;
   $195 = (+Math_sqrt((+$194)));
   $196 = $101 / $195;
   $197 = $196 - $102;
   $198 = $197 * 0.1151292473077774;
   $199 = (+Math_exp((+$198)));
   $200 = $199;
   $201 = (($out) + ($i$19$i<<2)|0);
   $202 = +HEAPF32[$201>>2];
   $203 = $202 * $200;
   HEAPF32[$201>>2] = $203;
   $204 = (($i$19$i) + 1)|0;
   $205 = (($87) + ($204<<2)|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = ($206|0)==($177|0);
   if ($207) {
    $209 = $204;
    while(1) {
     $208 = (($out) + ($209<<2)|0);
     $210 = +HEAPF32[$208>>2];
     $211 = $210 * $200;
     HEAPF32[$208>>2] = $211;
     $212 = (($209) + 1)|0;
     $213 = (($87) + ($212<<2)|0);
     $214 = HEAP32[$213>>2]|0;
     $215 = ($214|0)==($177|0);
     if ($215) {
      $209 = $212;
     } else {
      $$lcssa$i = $212;
      break;
     }
    }
   } else {
    $$lcssa$i = $204;
   }
   $175 = ($$lcssa$i|0)<($90|0);
   if ($175) {
    $i$19$i = $$lcssa$i;
   } else {
    $$0 = 1;
    break;
   }
  }
  return ($$0|0);
 }
 $104 = (($82) + -2)|0;
 $105 = $104 & -2;
 $106 = (($105) + 3)|0;
 $107 = $104 | 1;
 $108 = ($106|0)==($82|0);
 $109 = (($107) + 1)|0;
 $110 = (($memo) + ($109<<2)|0);
 $i$19$us$i = 0;
 while(1) {
  $111 = (($87) + ($i$19$us$i<<2)|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = (+($112|0));
  $114 = $113 * $97;
  $115 = $114;
  $116 = (+Math_cos((+$115)));
  $117 = $116 * 2.0;
  $118 = $117;
  $j$01$us$i = 1;$p$02$us$i = 0.5;$q$03$us$i = 0.5;
  while(1) {
   $158 = (($j$01$us$i) + -1)|0;
   $159 = (($memo) + ($158<<2)|0);
   $160 = +HEAPF32[$159>>2];
   $161 = $118 - $160;
   $125 = $161 * $q$03$us$i;
   $162 = (($memo) + ($j$01$us$i<<2)|0);
   $163 = +HEAPF32[$162>>2];
   $164 = $118 - $163;
   $121 = $164 * $p$02$us$i;
   $165 = (($j$01$us$i) + 2)|0;
   $166 = ($165|0)<($82|0);
   if ($166) {
    $j$01$us$i = $165;$p$02$us$i = $121;$q$03$us$i = $125;
   } else {
    break;
   }
  }
  if ($108) {
   $127 = +HEAPF32[$110>>2];
   $128 = $118 - $127;
   $129 = $128 * $125;
   $130 = $118 * $118;
   $131 = 4.0 - $130;
   $132 = $121 * $121;
   $133 = $132 * $131;
   $134 = $129 * $129;
   $p$1$us$i = $133;$q$1$us$i = $134;
  } else {
   $119 = 2.0 - $118;
   $120 = $121 * $121;
   $122 = $120 * $119;
   $123 = $118 + 2.0;
   $124 = $125 * $125;
   $126 = $124 * $123;
   $p$1$us$i = $122;$q$1$us$i = $126;
  }
  $135 = $q$1$us$i + $p$1$us$i;
  $136 = $135;
  $137 = (+Math_sqrt((+$136)));
  $138 = $101 / $137;
  $139 = $138 - $102;
  $140 = $139 * 0.1151292473077774;
  $141 = (+Math_exp((+$140)));
  $142 = $141;
  $143 = (($out) + ($i$19$us$i<<2)|0);
  $144 = +HEAPF32[$143>>2];
  $145 = $144 * $142;
  HEAPF32[$143>>2] = $145;
  $146 = (($i$19$us$i) + 1)|0;
  $147 = (($87) + ($146<<2)|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = ($148|0)==($112|0);
  if ($149) {
   $151 = $146;
   while(1) {
    $150 = (($out) + ($151<<2)|0);
    $152 = +HEAPF32[$150>>2];
    $153 = $152 * $142;
    HEAPF32[$150>>2] = $153;
    $154 = (($151) + 1)|0;
    $155 = (($87) + ($154<<2)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($112|0);
    if ($157) {
     $151 = $154;
    } else {
     $$lcssa$us$i = $154;
     break;
    }
   }
  } else {
   $$lcssa$us$i = $146;
  }
  $167 = ($$lcssa$us$i|0)<($90|0);
  if ($167) {
   $i$19$us$i = $$lcssa$us$i;
  } else {
   $$0 = 1;
   break;
  }
 }
 return ($$0|0);
}
function _res0_unpack($vi,$opb) {
 $vi = $vi|0;
 $opb = $opb|0;
 var $$0 = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $acc$0$lcssa37 = 0;
 var $acc$029 = 0, $cascade$0 = 0, $cascade$1 = 0, $cond = 0, $dim$021 = 0, $j$030 = 0, $j$126 = 0, $j$223 = 0, $partvals$022 = 0, $ret$0$lcssa$i = 0, $ret$02$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc(2840)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = ((($0)) + -4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3 & 3;
  $5 = ($4|0)==(0);
  if (!($5)) {
   _memset(($0|0),0,2840)|0;
  }
 }
 $6 = ((($vi)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_oggpack_read($opb,24)|0);
 HEAP32[$0>>2] = $8;
 $9 = (_oggpack_read($opb,24)|0);
 $10 = ((($0)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (_oggpack_read($opb,24)|0);
 $12 = (($11) + 1)|0;
 $13 = ((($0)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = (_oggpack_read($opb,6)|0);
 $15 = (($14) + 1)|0;
 $16 = ((($0)) + 12|0);
 HEAP32[$16>>2] = $15;
 $17 = (_oggpack_read($opb,8)|0);
 $18 = ((($0)) + 20|0);
 HEAP32[$18>>2] = $17;
 $19 = ($17|0)<(0);
 L5: do {
  if (!($19)) {
   $20 = ($14|0)>(-1);
   if ($20) {
    $21 = ((($0)) + 24|0);
    $acc$029 = 0;$j$030 = 0;
    while(1) {
     $25 = (_oggpack_read($opb,3)|0);
     $26 = (_oggpack_read($opb,1)|0);
     $27 = ($26|0)<(0);
     if ($27) {
      break L5;
     }
     $28 = ($26|0)==(0);
     if ($28) {
      $cascade$1 = $25;
     } else {
      $29 = (_oggpack_read($opb,5)|0);
      $30 = ($29|0)<(0);
      $31 = $29 << 3;
      $32 = $30 ? 0 : $31;
      $cascade$0 = $32 | $25;
      $33 = $29 >> 31;
      $34 = $33 & 2;
      $cond = ($34|0)==(0);
      if ($cond) {
       $cascade$1 = $cascade$0;
      } else {
       break L5;
      }
     }
     $35 = (($21) + ($j$030<<2)|0);
     HEAP32[$35>>2] = $cascade$1;
     $36 = ($cascade$1|0)==(0);
     if ($36) {
      $ret$0$lcssa$i = 0;
     } else {
      $$01$i = $cascade$1;$ret$02$i = 0;
      while(1) {
       $37 = $$01$i & 1;
       $38 = (($37) + ($ret$02$i))|0;
       $39 = $$01$i >>> 1;
       $40 = ($39|0)==(0);
       if ($40) {
        $ret$0$lcssa$i = $38;
        break;
       } else {
        $$01$i = $39;$ret$02$i = $38;
       }
      }
     }
     $22 = (($ret$0$lcssa$i) + ($acc$029))|0;
     $41 = (($j$030) + 1)|0;
     $42 = HEAP32[$16>>2]|0;
     $43 = ($41|0)<($42|0);
     if ($43) {
      $acc$029 = $22;$j$030 = $41;
     } else {
      break;
     }
    }
    $23 = ($22|0)>(0);
    if ($23) {
     $24 = ((($0)) + 280|0);
     $j$126 = 0;
     while(1) {
      $44 = (_oggpack_read($opb,8)|0);
      $45 = ($44|0)<(0);
      if ($45) {
       break L5;
      }
      $46 = (($24) + ($j$126<<2)|0);
      HEAP32[$46>>2] = $44;
      $47 = (($j$126) + 1)|0;
      $48 = ($47|0)<($22|0);
      if ($48) {
       $j$126 = $47;
      } else {
       $76 = 1;$acc$0$lcssa37 = $22;
       break;
      }
     }
    } else {
     $76 = 0;$acc$0$lcssa37 = $22;
    }
   } else {
    $76 = 0;$acc$0$lcssa37 = 0;
   }
   $49 = HEAP32[$18>>2]|0;
   $50 = ((($7)) + 24|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($49|0)<($51|0);
   if ($52) {
    if ($76) {
     $53 = ((($0)) + 280|0);
     $j$223 = 0;
     while(1) {
      $56 = (($53) + ($j$223<<2)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)<($51|0);
      if (!($58)) {
       break L5;
      }
      $59 = (((($7)) + 1824|0) + ($57<<2)|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ((($60)) + 12|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)==(0);
      $54 = (($j$223) + 1)|0;
      if ($63) {
       break L5;
      }
      $55 = ($54|0)<($acc$0$lcssa37|0);
      if ($55) {
       $j$223 = $54;
      } else {
       break;
      }
     }
    }
    $64 = (((($7)) + 1824|0) + ($49<<2)|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ((($65)) + 4|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = HEAP32[$65>>2]|0;
    $69 = ($68|0)<(1);
    if (!($69)) {
     $70 = HEAP32[$16>>2]|0;
     $dim$021 = $68;$partvals$022 = 1;
     while(1) {
      $73 = Math_imul($70, $partvals$022)|0;
      $74 = ($73|0)>($67|0);
      if ($74) {
       break L5;
      }
      $71 = (($dim$021) + -1)|0;
      $72 = ($dim$021|0)>(1);
      if ($72) {
       $dim$021 = $71;$partvals$022 = $73;
      } else {
       break;
      }
     }
     $75 = ((($0)) + 16|0);
     HEAP32[$75>>2] = $73;
     $$0 = $0;
     return ($$0|0);
    }
   }
  }
 } while(0);
 _free($0);
 $$0 = 0;
 return ($$0|0);
}
function _res0_look($vd,$vr) {
 $vd = $vd|0;
 $vr = $vr|0;
 var $$$i = 0, $$$i2 = 0, $$01$i = 0, $$cast = 0, $$maxstage$0 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $acc$016 = 0, $acc$112 = 0, $acc$2 = 0, $acc$3 = 0, $exitcond = 0, $exitcond10 = 0, $exitcond11 = 0, $exitcond12 = 0, $exitcond24 = 0, $exitcond25 = 0, $j$018 = 0, $j$18 = 0, $j$24 = 0, $j$24$us = 0, $k$013 = 0, $k$11$us = 0, $maxstage$0$lcssa = 0, $maxstage$017 = 0, $maxstage$2 = 0;
 var $mult$03$us = 0, $req$0$i = 0, $req$0$i3 = 0, $ret$02$i = 0, $val$02$us = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (_malloc(44)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = ((($0)) + -4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3 & 3;
  $5 = ($4|0)==(0);
  if (!($5)) {
   dest=$0; stop=dest+44|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  }
 }
 $6 = ((($vd)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$0>>2] = $vr;
 $10 = ((($vr)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 4|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($9)) + 2848|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($0)) + 12|0);
 HEAP32[$15>>2] = $14;
 $$cast = $14;
 $16 = ((($vr)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($$cast) + (($17*56)|0)|0);
 $19 = ((($0)) + 16|0);
 HEAP32[$19>>2] = $18;
 $20 = HEAP32[$18>>2]|0;
 $21 = ($11|0)==(0);
 if ($21) {
  $req$0$i = 0;
 } else {
  $22 = $11 << 2;
  $23 = ($11>>>0)>(65535);
  if ($23) {
   $24 = (($22>>>0) / ($11>>>0))&-1;
   $25 = ($24|0)==(4);
   $$$i = $25 ? $22 : -1;
   $req$0$i = $$$i;
  } else {
   $req$0$i = $22;
  }
 }
 $26 = (_malloc($req$0$i)|0);
 $27 = ($26|0)==(0|0);
 if (!($27)) {
  $28 = ((($26)) + -4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $29 & 3;
  $31 = ($30|0)==(0);
  if (!($31)) {
   _memset(($26|0),0,($req$0$i|0))|0;
  }
 }
 $32 = ((($0)) + 20|0);
 HEAP32[$32>>2] = $26;
 $33 = ($11|0)>(0);
 if ($33) {
  $34 = ((($vr)) + 24|0);
  $35 = ((($vr)) + 280|0);
  $acc$016 = 0;$j$018 = 0;$maxstage$017 = 0;
  while(1) {
   $36 = (($34) + ($j$018<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)==(0);
   if ($38) {
    $acc$3 = $acc$016;$maxstage$2 = $maxstage$017;
   } else {
    $$01$i = $37;$ret$02$i = 0;
    while(1) {
     $39 = $$01$i >>> 1;
     $40 = (($ret$02$i) + 1)|0;
     $41 = ($39|0)==(0);
     if ($41) {
      break;
     } else {
      $$01$i = $39;$ret$02$i = $40;
     }
    }
    $42 = ($40|0)>($maxstage$017|0);
    $$maxstage$0 = $42 ? $40 : $maxstage$017;
    $43 = $40 << 2;
    $44 = ($40>>>0)>(65535);
    if ($44) {
     $45 = (($43>>>0) / ($40>>>0))&-1;
     $46 = ($45|0)==(4);
     $$$i2 = $46 ? $43 : -1;
     $req$0$i3 = $$$i2;
    } else {
     $req$0$i3 = $43;
    }
    $47 = (_malloc($req$0$i3)|0);
    $48 = ($47|0)==(0|0);
    if (!($48)) {
     $49 = ((($47)) + -4|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = $50 & 3;
     $52 = ($51|0)==(0);
     if (!($52)) {
      _memset(($47|0),0,($req$0$i3|0))|0;
     }
    }
    $53 = (($26) + ($j$018<<2)|0);
    HEAP32[$53>>2] = $47;
    $54 = ($ret$02$i|0)>(-1);
    if ($54) {
     $55 = HEAP32[$36>>2]|0;
     $acc$112 = $acc$016;$k$013 = 0;
     while(1) {
      $56 = 1 << $k$013;
      $57 = $55 & $56;
      $58 = ($57|0)==(0);
      if ($58) {
       $acc$2 = $acc$112;
      } else {
       $59 = HEAP32[$13>>2]|0;
       $60 = (($acc$112) + 1)|0;
       $61 = (($35) + ($acc$112<<2)|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = (($59) + (($62*56)|0)|0);
       $64 = HEAP32[$53>>2]|0;
       $65 = (($64) + ($k$013<<2)|0);
       HEAP32[$65>>2] = $63;
       $acc$2 = $60;
      }
      $66 = (($k$013) + 1)|0;
      $exitcond25 = ($66|0)==($40|0);
      if ($exitcond25) {
       $acc$3 = $acc$2;$maxstage$2 = $$maxstage$0;
       break;
      } else {
       $acc$112 = $acc$2;$k$013 = $66;
      }
     }
    } else {
     $acc$3 = $acc$016;$maxstage$2 = $$maxstage$0;
    }
   }
   $67 = (($j$018) + 1)|0;
   $exitcond12 = ($67|0)==($11|0);
   if ($exitcond12) {
    $maxstage$0$lcssa = $maxstage$2;
    break;
   } else {
    $acc$016 = $acc$3;$j$018 = $67;$maxstage$017 = $maxstage$2;
   }
  }
 } else {
  $maxstage$0$lcssa = 0;
 }
 $68 = ((($0)) + 24|0);
 HEAP32[$68>>2] = 1;
 $69 = ($20|0)>(0);
 if ($69) {
  $70 = HEAP32[$12>>2]|0;
  $72 = 1;$j$18 = 0;
  while(1) {
   $71 = Math_imul($72, $70)|0;
   $73 = (($j$18) + 1)|0;
   $exitcond24 = ($73|0)==($20|0);
   if ($exitcond24) {
    break;
   } else {
    $72 = $71;$j$18 = $73;
   }
  }
  HEAP32[$68>>2] = $71;
  $76 = $71;
 } else {
  $76 = 1;
 }
 $74 = ((($0)) + 8|0);
 HEAP32[$74>>2] = $maxstage$0$lcssa;
 $75 = $76 << 2;
 $77 = (_malloc($75)|0);
 $78 = ((($0)) + 28|0);
 HEAP32[$78>>2] = $77;
 $79 = ($76|0)>(0);
 if (!($79)) {
  return ($0|0);
 }
 $80 = $20 << 2;
 if (!($69)) {
  $j$24 = 0;
  while(1) {
   $92 = (_malloc($80)|0);
   $93 = (($77) + ($j$24<<2)|0);
   HEAP32[$93>>2] = $92;
   $94 = (($j$24) + 1)|0;
   $exitcond11 = ($94|0)==($76|0);
   if ($exitcond11) {
    break;
   } else {
    $j$24 = $94;
   }
  }
  return ($0|0);
 }
 $81 = HEAP32[$12>>2]|0;
 $j$24$us = 0;
 while(1) {
  $82 = (_malloc($80)|0);
  $83 = (($77) + ($j$24$us<<2)|0);
  HEAP32[$83>>2] = $82;
  $84 = (($77) + ($j$24$us<<2)|0);
  $85 = HEAP32[$84>>2]|0;
  $$pn = $76;$k$11$us = 0;$val$02$us = $j$24$us;
  while(1) {
   $mult$03$us = (($$pn|0) / ($81|0))&-1;
   $86 = (($val$02$us|0) / ($mult$03$us|0))&-1;
   $87 = Math_imul($86, $mult$03$us)|0;
   $88 = (($val$02$us) - ($87))|0;
   $89 = (($85) + ($k$11$us<<2)|0);
   HEAP32[$89>>2] = $86;
   $90 = (($k$11$us) + 1)|0;
   $exitcond = ($90|0)==($20|0);
   if ($exitcond) {
    break;
   } else {
    $$pn = $mult$03$us;$k$11$us = $90;$val$02$us = $88;
   }
  }
  $91 = (($j$24$us) + 1)|0;
  $exitcond10 = ($91|0)==($76|0);
  if ($exitcond10) {
   break;
  } else {
   $j$24$us = $91;
  }
 }
 return ($0|0);
}
function _res0_free_info($i) {
 $i = $i|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($i|0)==(0|0);
 if (!($0)) {
  _free($i);
 }
 return;
}
function _res0_free_look($i) {
 $i = $i|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j$03 = 0, $j$12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($i|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($i)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 $4 = ((($i)) + 20|0);
 if ($3) {
  $24 = $2;$j$03 = 0;
  while(1) {
   $5 = HEAP32[$4>>2]|0;
   $6 = (($5) + ($j$03<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $11 = $24;
   } else {
    _free($7);
    $$pre = HEAP32[$1>>2]|0;
    $11 = $$pre;
   }
   $9 = (($j$03) + 1)|0;
   $10 = ($9|0)<($11|0);
   if ($10) {
    $24 = $11;$j$03 = $9;
   } else {
    break;
   }
  }
 }
 $12 = HEAP32[$4>>2]|0;
 _free($12);
 $13 = ((($i)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)>(0);
 $16 = ((($i)) + 28|0);
 if ($15) {
  $j$12 = 0;
  while(1) {
   $17 = HEAP32[$16>>2]|0;
   $18 = (($17) + ($j$12<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   _free($19);
   $20 = (($j$12) + 1)|0;
   $21 = HEAP32[$13>>2]|0;
   $22 = ($20|0)<($21|0);
   if ($22) {
    $j$12 = $20;
   } else {
    break;
   }
  }
 }
 $23 = HEAP32[$16>>2]|0;
 _free($23);
 _free($i);
 return;
}
function _res0_inverse($vb,$vl,$in,$nonzero,$ch) {
 $vb = $vb|0;
 $vl = $vl|0;
 $in = $in|0;
 $nonzero = $nonzero|0;
 $ch = $ch|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $used$02 = 0, $used$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ch|0)>(0);
 if ($0) {
  $i$01 = 0;$used$02 = 0;
 } else {
  return 0;
 }
 while(1) {
  $1 = (($nonzero) + ($i$01<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   $used$1 = $used$02;
  } else {
   $4 = (($in) + ($i$01<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($used$02) + 1)|0;
   $7 = (($in) + ($used$02<<2)|0);
   HEAP32[$7>>2] = $5;
   $used$1 = $6;
  }
  $8 = (($i$01) + 1)|0;
  $exitcond = ($8|0)==($ch|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $8;$used$02 = $used$1;
  }
 }
 $9 = ($used$1|0)==(0);
 if ($9) {
  return 0;
 }
 __01inverse($vb,$vl,$in,$used$1,28);
 return 0;
}
function __01inverse($vb,$vl,$in,$ch,$decodepart) {
 $vb = $vb|0;
 $vl = $vl|0;
 $in = $in|0;
 $ch = $ch|0;
 $decodepart = $decodepart|0;
 var $$ = 0, $$alloca_mul = 0, $$not = 0, $$not34 = 0, $$pre = 0, $$pre3 = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $exitcond = 0, $i$026 = 0, $i$1$lcssa = 0, $i$123$us = 0, $j$031 = 0, $j$118 = 0, $j$219$us = 0, $k$022$us = 0, $l$025 = 0, $or$cond$us = 0;
 var $or$cond21 = 0, $s$029 = 0, $umax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vl>>2]|0;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($vl)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($vb)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 >> 1;
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)<($8|0);
 $$ = $11 ? $10 : $8;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($$) - ($12))|0;
 $14 = ($13|0)>(0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = (($13|0) / ($2|0))&-1;
 $16 = $ch << 2;
 $$alloca_mul = $16;
 $17 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $18 = ($ch|0)>(0);
 if ($18) {
  $19 = (($5) + -1)|0;
  $20 = (($19) + ($15))|0;
  $21 = (($20|0) / ($5|0))&-1;
  $22 = $21 << 2;
  $23 = (($22) + 7)|0;
  $24 = $23 & -8;
  $25 = ((($vb)) + 72|0);
  $26 = ((($vb)) + 76|0);
  $27 = ((($vb)) + 68|0);
  $28 = ((($vb)) + 80|0);
  $29 = ((($vb)) + 84|0);
  $$pre3 = HEAP32[$25>>2]|0;
  $$pre4 = HEAP32[$27>>2]|0;
  $41 = $$pre3;$44 = $$pre4;$j$031 = 0;
  while(1) {
   $40 = (($41) + ($24))|0;
   $42 = HEAP32[$26>>2]|0;
   $43 = ($40|0)>($42|0);
   if ($43) {
    $45 = ($44|0)==(0|0);
    if (!($45)) {
     $46 = $44;
     $47 = (_malloc(8)|0);
     $48 = HEAP32[$28>>2]|0;
     $49 = (($48) + ($41))|0;
     HEAP32[$28>>2] = $49;
     $50 = HEAP32[$29>>2]|0;
     $51 = ((($47)) + 4|0);
     HEAP32[$51>>2] = $50;
     HEAP32[$47>>2] = $46;
     HEAP32[$29>>2] = $47;
    }
    HEAP32[$26>>2] = $24;
    $52 = (_malloc($24)|0);
    HEAP32[$27>>2] = $52;
    HEAP32[$25>>2] = 0;
    $54 = $52;$55 = 0;
   } else {
    $54 = $44;$55 = $41;
   }
   $53 = (($54) + ($55)|0);
   $56 = (($55) + ($24))|0;
   HEAP32[$25>>2] = $56;
   $57 = (($17) + ($j$031<<2)|0);
   HEAP32[$57>>2] = $53;
   $58 = (($j$031) + 1)|0;
   $exitcond = ($58|0)==($ch|0);
   if ($exitcond) {
    break;
   } else {
    $41 = $56;$44 = $54;$j$031 = $58;
   }
  }
 }
 $30 = ((($vl)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)>(0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $33 = ($15|0)>(0);
 $34 = ($5|0)>(0);
 $35 = ((($vl)) + 20|0);
 $36 = ((($vb)) + 4|0);
 $37 = ((($0)) + 16|0);
 $38 = ((($vl)) + 28|0);
 $39 = (0 - ($5))|0;
 $$not34 = ($ch|0)<(1);
 $121 = $31;$s$029 = 0;
 L18: while(1) {
  if ($33) {
   $59 = 1 << $s$029;
   $$not = ($s$029|0)!=(0);
   $brmerge = $$not | $$not34;
   $i$026 = 0;$l$025 = 0;
   while(1) {
    if (!($brmerge)) {
     $j$118 = 0;
     while(1) {
      $96 = HEAP32[$3>>2]|0;
      $97 = ((($96)) + 8|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = ($98|0)>(0);
      if (!($99)) {
       label = 32;
       break L18;
      }
      $100 = (_decode_packed_entry_number($96,$36)|0);
      $101 = ($100|0)>(-1);
      if (!($101)) {
       label = 32;
       break L18;
      }
      $102 = ((($96)) + 24|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = (($103) + ($100<<2)|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = ($105|0)==(-1);
      if ($106) {
       label = 32;
       break L18;
      }
      $107 = HEAP32[$37>>2]|0;
      $108 = ($105|0)<($107|0);
      if (!($108)) {
       label = 32;
       break L18;
      }
      $109 = HEAP32[$38>>2]|0;
      $110 = (($109) + ($105<<2)|0);
      $111 = HEAP32[$110>>2]|0;
      $112 = (($17) + ($j$118<<2)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = (($113) + ($l$025<<2)|0);
      HEAP32[$114>>2] = $111;
      $115 = ($111|0)==(0);
      $94 = (($j$118) + 1)|0;
      if ($115) {
       label = 32;
       break L18;
      }
      $95 = ($94|0)<($ch|0);
      if ($95) {
       $j$118 = $94;
      } else {
       break;
      }
     }
    }
    $60 = ($i$026|0)<($15|0);
    $or$cond21 = $34 & $60;
    do {
     if ($or$cond21) {
      if ($18) {
       $i$123$us = $i$026;$k$022$us = 0;
      } else {
       $61 = (($i$026) - ($15))|0;
       $62 = ($61>>>0)<($39>>>0);
       $umax = $62 ? $39 : $61;
       $63 = (($i$026) - ($umax))|0;
       $i$1$lcssa = $63;
       break;
      }
      while(1) {
       $66 = Math_imul($i$123$us, $2)|0;
       $j$219$us = 0;
       while(1) {
        $64 = HEAP32[$0>>2]|0;
        $65 = (($64) + ($66))|0;
        $67 = (($17) + ($j$219$us<<2)|0);
        $68 = HEAP32[$67>>2]|0;
        $69 = (($68) + ($l$025<<2)|0);
        $70 = HEAP32[$69>>2]|0;
        $71 = (($70) + ($k$022$us<<2)|0);
        $72 = HEAP32[$71>>2]|0;
        $73 = (((($0)) + 24|0) + ($72<<2)|0);
        $74 = HEAP32[$73>>2]|0;
        $75 = $74 & $59;
        $76 = ($75|0)==(0);
        if (!($76)) {
         $77 = HEAP32[$35>>2]|0;
         $78 = (($77) + ($72<<2)|0);
         $79 = HEAP32[$78>>2]|0;
         $80 = (($79) + ($s$029<<2)|0);
         $81 = HEAP32[$80>>2]|0;
         $82 = ($81|0)==(0|0);
         if (!($82)) {
          $83 = (($in) + ($j$219$us<<2)|0);
          $84 = HEAP32[$83>>2]|0;
          $85 = (($84) + ($65<<2)|0);
          $86 = (FUNCTION_TABLE_iiiii[$decodepart & 31]($81,$85,$36,$2)|0);
          $87 = ($86|0)==(-1);
          if ($87) {
           label = 32;
           break L18;
          }
         }
        }
        $88 = (($j$219$us) + 1)|0;
        $89 = ($88|0)<($ch|0);
        if ($89) {
         $j$219$us = $88;
        } else {
         break;
        }
       }
       $90 = (($k$022$us) + 1)|0;
       $91 = (($i$123$us) + 1)|0;
       $92 = ($90|0)<($5|0);
       $93 = ($91|0)<($15|0);
       $or$cond$us = $92 & $93;
       if ($or$cond$us) {
        $i$123$us = $91;$k$022$us = $90;
       } else {
        $i$1$lcssa = $91;
        break;
       }
      }
     } else {
      $i$1$lcssa = $i$026;
     }
    } while(0);
    $116 = (($l$025) + 1)|0;
    $117 = ($i$1$lcssa|0)<($15|0);
    if ($117) {
     $i$026 = $i$1$lcssa;$l$025 = $116;
    } else {
     break;
    }
   }
   $$pre = HEAP32[$30>>2]|0;
   $120 = $$pre;
  } else {
   $120 = $121;
  }
  $118 = (($s$029) + 1)|0;
  $119 = ($118|0)<($120|0);
  if ($119) {
   $121 = $120;$s$029 = $118;
  } else {
   label = 32;
   break;
  }
 }
 if ((label|0) == 32) {
  STACKTOP = sp;return;
 }
}
function _res0_pack($vr,$opb) {
 $vr = $vr|0;
 $opb = $opb|0;
 var $$01$i = 0, $$01$i2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $acc$03 = 0, $exitcond = 0, $j$02 = 0, $j$11 = 0, $ret$0$lcssa$i = 0, $ret$02$i = 0, $ret$02$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vr>>2]|0;
 _oggpack_write($opb,$0,24);
 $1 = ((($vr)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 _oggpack_write($opb,$2,24);
 $3 = ((($vr)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + -1)|0;
 _oggpack_write($opb,$5,24);
 $6 = ((($vr)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -1)|0;
 _oggpack_write($opb,$8,6);
 $9 = ((($vr)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 _oggpack_write($opb,$10,8);
 $11 = HEAP32[$6>>2]|0;
 $12 = ($11|0)>(0);
 if (!($12)) {
  return;
 }
 $13 = ((($vr)) + 24|0);
 $acc$03 = 0;$j$02 = 0;
 while(1) {
  $17 = (($13) + ($j$02<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0);
  if ($19) {
   label = 9;
  } else {
   $$01$i2 = $18;$ret$02$i1 = 0;
   while(1) {
    $20 = $$01$i2 >>> 1;
    $21 = (($ret$02$i1) + 1)|0;
    $22 = ($20|0)==(0);
    if ($22) {
     break;
    } else {
     $$01$i2 = $20;$ret$02$i1 = $21;
    }
   }
   $23 = ($ret$02$i1|0)>(2);
   if ($23) {
    _oggpack_write($opb,$18,3);
    _oggpack_write($opb,1,1);
    $24 = HEAP32[$17>>2]|0;
    $25 = $24 >> 3;
    _oggpack_write($opb,$25,5);
   } else {
    label = 9;
   }
  }
  if ((label|0) == 9) {
   label = 0;
   _oggpack_write($opb,$18,4);
  }
  $26 = HEAP32[$17>>2]|0;
  $27 = ($26|0)==(0);
  if ($27) {
   $ret$0$lcssa$i = 0;
  } else {
   $$01$i = $26;$ret$02$i = 0;
   while(1) {
    $28 = $$01$i & 1;
    $29 = (($28) + ($ret$02$i))|0;
    $30 = $$01$i >>> 1;
    $31 = ($30|0)==(0);
    if ($31) {
     $ret$0$lcssa$i = $29;
     break;
    } else {
     $$01$i = $30;$ret$02$i = $29;
    }
   }
  }
  $14 = (($ret$0$lcssa$i) + ($acc$03))|0;
  $32 = (($j$02) + 1)|0;
  $33 = HEAP32[$6>>2]|0;
  $34 = ($32|0)<($33|0);
  if ($34) {
   $acc$03 = $14;$j$02 = $32;
  } else {
   break;
  }
 }
 $15 = ($14|0)>(0);
 if (!($15)) {
  return;
 }
 $16 = ((($vr)) + 280|0);
 $j$11 = 0;
 while(1) {
  $35 = (($16) + ($j$11<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  _oggpack_write($opb,$36,8);
  $37 = (($j$11) + 1)|0;
  $exitcond = ($37|0)==($14|0);
  if ($exitcond) {
   break;
  } else {
   $j$11 = $37;
  }
 }
 return;
}
function _res1_class($vb,$vl,$in,$nonzero,$ch) {
 $vb = $vb|0;
 $vl = $vl|0;
 $in = $in|0;
 $nonzero = $nonzero|0;
 $ch = $ch|0;
 var $$0 = 0, $$max$0$us$i$us = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ent$06$us$i$us = 0, $exitcond = 0, $exitcond$i = 0, $exitcond47$i = 0, $exitcond48$i$us = 0, $exitcond49$i = 0, $exitcond49$i$us = 0;
 var $exitcond50$i = 0, $exitcond51$i = 0, $i$020$i = 0, $i$04 = 0, $i$117$i = 0, $ispos$us$i$us = 0, $j$015$i = 0, $j$015$us$i = 0, $j$015$us$i$us = 0, $j$015$us24$i = 0, $k$04$us$i$us = 0, $k$1$lcssa$us$i$ph$us = 0, $k$1$lcssa$us29$i = 0, $k$18$us$i$us = 0, $k$18$us27$i = 0, $max$05$us$i$us = 0, $neg$us$i$us = 0, $or$cond$us$i$us = 0, $used$05 = 0, $used$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ch|0)>(0);
 if ($0) {
  $i$04 = 0;$used$05 = 0;
 } else {
  $$0 = 0;
  return ($$0|0);
 }
 while(1) {
  $1 = (($nonzero) + ($i$04<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   $used$1 = $used$05;
  } else {
   $4 = (($in) + ($i$04<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($used$05) + 1)|0;
   $7 = (($in) + ($used$05<<2)|0);
   HEAP32[$7>>2] = $5;
   $used$1 = $6;
  }
  $8 = (($i$04) + 1)|0;
  $exitcond = ($8|0)==($ch|0);
  if ($exitcond) {
   break;
  } else {
   $i$04 = $8;$used$05 = $used$1;
  }
 }
 $9 = ($used$1|0)==(0);
 if ($9) {
  $$0 = 0;
  return ($$0|0);
 }
 $10 = HEAP32[$vl>>2]|0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($10)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($10)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$10>>2]|0;
 $18 = (($16) - ($17))|0;
 $19 = (($18|0) / ($12|0))&-1;
 $20 = $used$1 << 2;
 $21 = (($20) + 7)|0;
 $22 = $21 & -8;
 $23 = ((($vb)) + 72|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + ($22))|0;
 $26 = ((($vb)) + 76|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($25|0)>($27|0);
 $29 = ((($vb)) + 68|0);
 $30 = HEAP32[$29>>2]|0;
 if ($28) {
  $31 = ($30|0)==(0|0);
  if (!($31)) {
   $32 = $30;
   $33 = (_malloc(8)|0);
   $34 = ((($vb)) + 80|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($35) + ($24))|0;
   HEAP32[$34>>2] = $36;
   $37 = ((($vb)) + 84|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ((($33)) + 4|0);
   HEAP32[$39>>2] = $38;
   HEAP32[$33>>2] = $32;
   HEAP32[$37>>2] = $33;
  }
  HEAP32[$26>>2] = $22;
  $40 = (_malloc($22)|0);
  HEAP32[$29>>2] = $40;
  HEAP32[$23>>2] = 0;
  $42 = $40;$43 = 0;
 } else {
  $42 = $30;$43 = $24;
 }
 $41 = (($42) + ($43)|0);
 $44 = (($43) + ($22))|0;
 HEAP32[$23>>2] = $44;
 $45 = (+($12|0));
 $46 = 100.0 / $45;
 $47 = $46;
 $48 = ($used$1|0)>(0);
 L18: do {
  if ($48) {
   $49 = $19 << 2;
   $50 = (($49) + 7)|0;
   $51 = $50 & -8;
   $52 = ((($vb)) + 80|0);
   $53 = ((($vb)) + 84|0);
   $59 = $44;$62 = $42;$i$020$i = 0;
   while(1) {
    $58 = (($59) + ($51))|0;
    $60 = HEAP32[$26>>2]|0;
    $61 = ($58|0)>($60|0);
    if ($61) {
     $63 = ($62|0)==(0|0);
     if (!($63)) {
      $64 = $62;
      $65 = (_malloc(8)|0);
      $66 = HEAP32[$52>>2]|0;
      $67 = (($66) + ($59))|0;
      HEAP32[$52>>2] = $67;
      $68 = HEAP32[$53>>2]|0;
      $69 = ((($65)) + 4|0);
      HEAP32[$69>>2] = $68;
      HEAP32[$65>>2] = $64;
      HEAP32[$53>>2] = $65;
     }
     HEAP32[$26>>2] = $51;
     $70 = (_malloc($51)|0);
     HEAP32[$29>>2] = $70;
     HEAP32[$23>>2] = 0;
     $72 = $70;$73 = 0;
    } else {
     $72 = $62;$73 = $59;
    }
    $71 = (($72) + ($73)|0);
    $74 = (($73) + ($51))|0;
    HEAP32[$23>>2] = $74;
    $75 = (($41) + ($i$020$i<<2)|0);
    HEAP32[$75>>2] = $71;
    _memset(($71|0),0,($49|0))|0;
    $76 = (($i$020$i) + 1)|0;
    $exitcond51$i = ($76|0)==($used$1|0);
    if ($exitcond51$i) {
     break L18;
    }
    $$pre = HEAP32[$23>>2]|0;
    $$pre6 = HEAP32[$29>>2]|0;
    $59 = $$pre;$62 = $$pre6;$i$020$i = $76;
   }
  }
 } while(0);
 $54 = ($19|0)>(0);
 if ($54) {
  $55 = ($12|0)>(0);
  $56 = (($14) + -1)|0;
  $57 = ($14|0)>(1);
  $i$117$i = 0;
  while(1) {
   $77 = Math_imul($i$117$i, $12)|0;
   $78 = HEAP32[$10>>2]|0;
   $79 = (($78) + ($77))|0;
   L34: do {
    if ($48) {
     if (!($55)) {
      if ($57) {
       $j$015$us24$i = 0;
      } else {
       $j$015$i = 0;
       while(1) {
        $121 = (($41) + ($j$015$i<<2)|0);
        $122 = HEAP32[$121>>2]|0;
        $123 = (($122) + ($i$117$i<<2)|0);
        HEAP32[$123>>2] = 0;
        $124 = (($j$015$i) + 1)|0;
        $exitcond$i = ($124|0)==($used$1|0);
        if ($exitcond$i) {
         break L34;
        } else {
         $j$015$i = $124;
        }
       }
      }
      while(1) {
       $k$18$us27$i = 0;
       while(1) {
        $109 = (((($10)) + 2328|0) + ($k$18$us27$i<<2)|0);
        $110 = HEAP32[$109>>2]|0;
        $111 = ($110|0)<(0);
        if (!($111)) {
         $112 = (((($10)) + 2584|0) + ($k$18$us27$i<<2)|0);
         $113 = HEAP32[$112>>2]|0;
         $114 = ($113|0)==(0);
         if (!($114)) {
          $k$1$lcssa$us29$i = $k$18$us27$i;
          break;
         }
        }
        $119 = (($k$18$us27$i) + 1)|0;
        $120 = ($119|0)<($56|0);
        if ($120) {
         $k$18$us27$i = $119;
        } else {
         $k$1$lcssa$us29$i = $119;
         break;
        }
       }
       $115 = (($41) + ($j$015$us24$i<<2)|0);
       $116 = HEAP32[$115>>2]|0;
       $117 = (($116) + ($i$117$i<<2)|0);
       HEAP32[$117>>2] = $k$1$lcssa$us29$i;
       $118 = (($j$015$us24$i) + 1)|0;
       $exitcond47$i = ($118|0)==($used$1|0);
       if ($exitcond47$i) {
        break L34;
       } else {
        $j$015$us24$i = $118;
       }
      }
     }
     if ($57) {
      $j$015$us$i$us = 0;
     } else {
      $j$015$us$i = 0;
      while(1) {
       $105 = (($41) + ($j$015$us$i<<2)|0);
       $106 = HEAP32[$105>>2]|0;
       $107 = (($106) + ($i$117$i<<2)|0);
       HEAP32[$107>>2] = 0;
       $108 = (($j$015$us$i) + 1)|0;
       $exitcond49$i = ($108|0)==($used$1|0);
       if ($exitcond49$i) {
        break L34;
       } else {
        $j$015$us$i = $108;
       }
      }
     }
     while(1) {
      $80 = (($in) + ($j$015$us$i$us<<2)|0);
      $81 = HEAP32[$80>>2]|0;
      $ent$06$us$i$us = 0;$k$04$us$i$us = 0;$max$05$us$i$us = 0;
      while(1) {
       $82 = (($79) + ($k$04$us$i$us))|0;
       $83 = (($81) + ($82<<2)|0);
       $84 = HEAP32[$83>>2]|0;
       $ispos$us$i$us = ($84|0)>(-1);
       $neg$us$i$us = (0 - ($84))|0;
       $85 = $ispos$us$i$us ? $84 : $neg$us$i$us;
       $86 = ($85|0)>($max$05$us$i$us|0);
       $$max$0$us$i$us = $86 ? $85 : $max$05$us$i$us;
       $87 = (($85) + ($ent$06$us$i$us))|0;
       $88 = (($k$04$us$i$us) + 1)|0;
       $exitcond48$i$us = ($88|0)==($12|0);
       if ($exitcond48$i$us) {
        break;
       } else {
        $ent$06$us$i$us = $87;$k$04$us$i$us = $88;$max$05$us$i$us = $$max$0$us$i$us;
       }
      }
      $89 = (+($87|0));
      $90 = $89 * $47;
      $91 = (~~(($90)));
      $k$18$us$i$us = 0;
      while(1) {
       $92 = (((($10)) + 2328|0) + ($k$18$us$i$us<<2)|0);
       $93 = HEAP32[$92>>2]|0;
       $94 = ($$max$0$us$i$us|0)>($93|0);
       if (!($94)) {
        $95 = (((($10)) + 2584|0) + ($k$18$us$i$us<<2)|0);
        $96 = HEAP32[$95>>2]|0;
        $97 = ($96|0)<(0);
        $98 = ($91|0)<($96|0);
        $or$cond$us$i$us = $97 | $98;
        if ($or$cond$us$i$us) {
         $k$1$lcssa$us$i$ph$us = $k$18$us$i$us;
         break;
        }
       }
       $99 = (($k$18$us$i$us) + 1)|0;
       $100 = ($99|0)<($56|0);
       if ($100) {
        $k$18$us$i$us = $99;
       } else {
        $k$1$lcssa$us$i$ph$us = $99;
        break;
       }
      }
      $101 = (($41) + ($j$015$us$i$us<<2)|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = (($102) + ($i$117$i<<2)|0);
      HEAP32[$103>>2] = $k$1$lcssa$us$i$ph$us;
      $104 = (($j$015$us$i$us) + 1)|0;
      $exitcond49$i$us = ($104|0)==($used$1|0);
      if ($exitcond49$i$us) {
       break;
      } else {
       $j$015$us$i$us = $104;
      }
     }
    }
   } while(0);
   $125 = (($i$117$i) + 1)|0;
   $exitcond50$i = ($125|0)==($19|0);
   if ($exitcond50$i) {
    break;
   } else {
    $i$117$i = $125;
   }
  }
 }
 $126 = ((($vl)) + 40|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = (($127) + 1)|0;
 HEAP32[$126>>2] = $128;
 $$0 = $41;
 return ($$0|0);
}
function _res1_forward($opb,$vb,$vl,$in,$nonzero,$ch,$partword,$submap) {
 $opb = $opb|0;
 $vb = $vb|0;
 $vl = $vl|0;
 $in = $in|0;
 $nonzero = $nonzero|0;
 $ch = $ch|0;
 $partword = $partword|0;
 $submap = $submap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $used$02 = 0, $used$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ch|0)>(0);
 if ($0) {
  $i$01 = 0;$used$02 = 0;
 } else {
  return 0;
 }
 while(1) {
  $1 = (($nonzero) + ($i$01<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   $used$1 = $used$02;
  } else {
   $4 = (($in) + ($i$01<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($used$02) + 1)|0;
   $7 = (($in) + ($used$02<<2)|0);
   HEAP32[$7>>2] = $5;
   $used$1 = $6;
  }
  $8 = (($i$01) + 1)|0;
  $exitcond = ($8|0)==($ch|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $8;$used$02 = $used$1;
  }
 }
 $9 = ($used$1|0)==(0);
 if ($9) {
  return 0;
 }
 __01forward($opb,$vl,$in,$used$1,$partword);
 return 0;
}
function __01forward($opb,$vl,$in,$ch,$partword) {
 $opb = $opb|0;
 $vl = $vl|0;
 $in = $in|0;
 $ch = $ch|0;
 $partword = $partword|0;
 var $$0$i = 0, $$0$i1 = 0, $$0$i3 = 0, $$08$i$i = 0, $$lcssa$i$i = 0, $$lcssa$us$i$i = 0, $$lcssa6$i$i = 0, $$lcssa6$us$i$i = 0, $$not = 0, $$not29 = 0, $$pre$i = 0, $$pre46 = 0, $$pre47 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $best$019$i$i = 0, $best$019$us$i$i = 0, $best$2$i$i = 0, $best$2$us$i$i = 0, $bits$0$lcssa$i = 0, $bits$09$i = 0, $brmerge = 0, $e$i$i = 0, $exitcond = 0;
 var $exitcond$i = 0, $exitcond$i$i = 0, $exitcond20$i = 0, $exitcond21$i = 0, $exitcond41 = 0, $exitcond42 = 0, $exitcond43 = 0, $exitcond46$i$i = 0, $exitcond47$i$i = 0, $exitcond48$i$i = 0, $i$010$i = 0, $i$024 = 0, $i$033$i$i = 0, $i$1$lcssa = 0, $i$121 = 0, $i$128$i$i = 0, $i$220$i$i = 0, $i$220$us$i$i = 0, $i$37$i$i = 0, $index$031$i$i = 0;
 var $index$126$i$i = 0, $index$2$i$i = 0, $index$3$lcssa$i$i = 0, $index$318$i$i = 0, $index$318$us$i$i = 0, $index$5$i$i = 0, $index$5$us$i$i = 0, $index$6$i$i = 0, $j$013 = 0, $j$013$us = 0, $j$09$us$i$i = 0, $j$112$i$i = 0, $j$112$us$i$i = 0, $j$115 = 0, $k$012$us = 0, $k$120 = 0, $o$032$i$i = 0, $o$127$i$i = 0, $or$cond = 0, $or$cond$i$i = 0;
 var $or$cond$us$i$i = 0, $or$cond19 = 0, $or$cond36$i$i = 0, $p$i$i = 0, $resbits = 0, $resvals = 0, $s$026 = 0, $scevgep$i = 0, $this$010$us$i$i = 0, $val$011$us = 0, $val$1$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1088|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p$i$i = sp + 1056|0;
 $e$i$i = sp + 1024|0;
 $resbits = sp + 512|0;
 $resvals = sp;
 $0 = HEAP32[$vl>>2]|0;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($vl)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$0>>2]|0;
 $11 = (($9) - ($10))|0;
 $12 = (($11|0) / ($2|0))&-1;
 _memset(($resbits|0),0,512)|0;
 _memset(($resvals|0),0,512)|0;
 $13 = ((($vl)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)>(0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = ($12|0)>(0);
 $17 = ($7|0)>(0);
 $18 = ($ch|0)>(0);
 $19 = ((($vl)) + 20|0);
 $20 = ((($vl)) + 32|0);
 $21 = ($7|0)>(1);
 $22 = ((($vl)) + 36|0);
 $$not29 = ($ch|0)<(1);
 $277 = $14;$s$026 = 0;
 while(1) {
  if ($16) {
   $23 = ($s$026|0)==(0);
   $24 = 1 << $s$026;
   $$not = $23 ^ 1;
   $brmerge = $$not29 | $$not;
   $i$024 = 0;
   while(1) {
    L10: do {
     if (!($brmerge)) {
      if ($21) {
       $j$013$us = 0;
      } else {
       $j$013 = 0;
       while(1) {
        $66 = (($partword) + ($j$013<<2)|0);
        $67 = HEAP32[$66>>2]|0;
        $68 = (($67) + ($i$024<<2)|0);
        $69 = HEAP32[$68>>2]|0;
        $70 = HEAP32[$5>>2]|0;
        $71 = ((($70)) + 4|0);
        $72 = HEAP32[$71>>2]|0;
        $73 = ($69|0)<($72|0);
        if ($73) {
         $74 = ($69|0)<(0);
         if ($74) {
          $$0$i1 = 0;
         } else {
          $75 = ((($70)) + 12|0);
          $76 = HEAP32[$75>>2]|0;
          $77 = ((($76)) + 4|0);
          $78 = HEAP32[$77>>2]|0;
          $79 = ($78|0)>($69|0);
          if ($79) {
           $80 = ((($70)) + 20|0);
           $81 = HEAP32[$80>>2]|0;
           $82 = (($81) + ($69<<2)|0);
           $83 = HEAP32[$82>>2]|0;
           $84 = ((($76)) + 8|0);
           $85 = HEAP32[$84>>2]|0;
           $86 = (($85) + ($69)|0);
           $87 = HEAP8[$86>>0]|0;
           $88 = $87 << 24 >> 24;
           _oggpack_write($opb,$83,$88);
           $89 = HEAP32[$75>>2]|0;
           $90 = ((($89)) + 8|0);
           $91 = HEAP32[$90>>2]|0;
           $92 = (($91) + ($69)|0);
           $93 = HEAP8[$92>>0]|0;
           $94 = $93 << 24 >> 24;
           $$0$i1 = $94;
          } else {
           $$0$i1 = 0;
          }
         }
         $95 = HEAP32[$22>>2]|0;
         $96 = (($95) + ($$0$i1))|0;
         HEAP32[$22>>2] = $96;
        }
        $97 = (($j$013) + 1)|0;
        $exitcond = ($97|0)==($ch|0);
        if ($exitcond) {
         break L10;
        } else {
         $j$013 = $97;
        }
       }
      }
      while(1) {
       $26 = (($partword) + ($j$013$us<<2)|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = (($27) + ($i$024<<2)|0);
       $29 = HEAP32[$28>>2]|0;
       $k$012$us = 1;$val$011$us = $29;
       while(1) {
        $55 = Math_imul($val$011$us, $4)|0;
        $56 = (($k$012$us) + ($i$024))|0;
        $57 = ($56|0)<($12|0);
        if ($57) {
         $58 = (($27) + ($56<<2)|0);
         $59 = HEAP32[$58>>2]|0;
         $60 = (($59) + ($55))|0;
         $val$1$us = $60;
        } else {
         $val$1$us = $55;
        }
        $61 = (($k$012$us) + 1)|0;
        $exitcond41 = ($61|0)==($7|0);
        if ($exitcond41) {
         break;
        } else {
         $k$012$us = $61;$val$011$us = $val$1$us;
        }
       }
       $32 = HEAP32[$5>>2]|0;
       $62 = ((($32)) + 4|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = ($val$1$us|0)<($63|0);
       if ($64) {
        $30 = ($val$1$us|0)<(0);
        if ($30) {
         $$0$i = 0;
        } else {
         $31 = ((($32)) + 12|0);
         $33 = HEAP32[$31>>2]|0;
         $34 = ((($33)) + 4|0);
         $35 = HEAP32[$34>>2]|0;
         $36 = ($35|0)>($val$1$us|0);
         if ($36) {
          $37 = ((($32)) + 20|0);
          $38 = HEAP32[$37>>2]|0;
          $39 = (($38) + ($val$1$us<<2)|0);
          $40 = HEAP32[$39>>2]|0;
          $41 = ((($33)) + 8|0);
          $42 = HEAP32[$41>>2]|0;
          $43 = (($42) + ($val$1$us)|0);
          $44 = HEAP8[$43>>0]|0;
          $45 = $44 << 24 >> 24;
          _oggpack_write($opb,$40,$45);
          $46 = HEAP32[$31>>2]|0;
          $47 = ((($46)) + 8|0);
          $48 = HEAP32[$47>>2]|0;
          $49 = (($48) + ($val$1$us)|0);
          $50 = HEAP8[$49>>0]|0;
          $51 = $50 << 24 >> 24;
          $$0$i = $51;
         } else {
          $$0$i = 0;
         }
        }
        $52 = HEAP32[$22>>2]|0;
        $53 = (($52) + ($$0$i))|0;
        HEAP32[$22>>2] = $53;
       }
       $54 = (($j$013$us) + 1)|0;
       $exitcond42 = ($54|0)==($ch|0);
       if ($exitcond42) {
        break;
       } else {
        $j$013$us = $54;
       }
      }
     }
    } while(0);
    $65 = ($i$024|0)<($12|0);
    $or$cond19 = $17 & $65;
    if ($or$cond19) {
     $i$121 = $i$024;$k$120 = 0;
     while(1) {
      $98 = Math_imul($i$121, $2)|0;
      $99 = HEAP32[$0>>2]|0;
      $100 = (($99) + ($98))|0;
      if ($18) {
       $j$115 = 0;
       while(1) {
        $101 = (($partword) + ($j$115<<2)|0);
        $102 = HEAP32[$101>>2]|0;
        $103 = (($102) + ($i$121<<2)|0);
        $104 = HEAP32[$103>>2]|0;
        if ($23) {
         $105 = (($resvals) + ($104<<2)|0);
         $106 = HEAP32[$105>>2]|0;
         $107 = (($106) + ($2))|0;
         HEAP32[$105>>2] = $107;
        }
        $108 = (((($0)) + 24|0) + ($104<<2)|0);
        $109 = HEAP32[$108>>2]|0;
        $110 = $109 & $24;
        $111 = ($110|0)==(0);
        if (!($111)) {
         $112 = HEAP32[$19>>2]|0;
         $113 = (($112) + ($104<<2)|0);
         $114 = HEAP32[$113>>2]|0;
         $115 = (($114) + ($s$026<<2)|0);
         $116 = HEAP32[$115>>2]|0;
         $117 = ($116|0)==(0|0);
         if (!($117)) {
          $118 = (($in) + ($j$115<<2)|0);
          $119 = HEAP32[$118>>2]|0;
          $120 = (($119) + ($100<<2)|0);
          $121 = HEAP32[$116>>2]|0;
          $122 = (($2|0) / ($121|0))&-1;
          $123 = ($122|0)>(0);
          if ($123) {
           $124 = ((($116)) + 48|0);
           $125 = ((($116)) + 52|0);
           $126 = ((($116)) + 44|0);
           $127 = ((($116)) + 12|0);
           $128 = ((($116)) + 4|0);
           $129 = ((($116)) + 20|0);
           $136 = $121;$bits$09$i = 0;$i$010$i = 0;
           while(1) {
            $130 = Math_imul($i$010$i, $121)|0;
            $scevgep$i = (($120) + ($130<<2)|0);
            $131 = HEAP32[$124>>2]|0;
            $132 = HEAP32[$125>>2]|0;
            $133 = HEAP32[$126>>2]|0;
            $134 = $133 >> 1;
            ;HEAP32[$p$i$i>>2]=0|0;HEAP32[$p$i$i+4>>2]=0|0;HEAP32[$p$i$i+8>>2]=0|0;HEAP32[$p$i$i+12>>2]=0|0;HEAP32[$p$i$i+16>>2]=0|0;HEAP32[$p$i$i+20>>2]=0|0;HEAP32[$p$i$i+24>>2]=0|0;HEAP32[$p$i$i+28>>2]=0|0;
            $135 = ($132|0)==(1);
            $137 = ($136|0)>(0);
            do {
             if ($135) {
              if (!($137)) {
               $index$2$i$i = 0;
               break;
              }
              $141 = (($133) + -1)|0;
              $142 = $136 << 2;
              _memcpy(($p$i$i|0),($scevgep$i|0),($142|0))|0;
              $i$128$i$i = 0;$index$126$i$i = 0;$o$127$i$i = $136;
              while(1) {
               $165 = (($o$127$i$i) + -1)|0;
               $166 = (($scevgep$i) + ($165<<2)|0);
               $167 = HEAP32[$166>>2]|0;
               $168 = (($167) - ($131))|0;
               $169 = ($168|0)<($134|0);
               if ($169) {
                $170 = (($134) - ($168))|0;
                $171 = $170 << 1;
                $172 = (($171) + -1)|0;
                $176 = $172;
               } else {
                $173 = (($168) - ($134))|0;
                $174 = $173 << 1;
                $176 = $174;
               }
               $175 = Math_imul($index$126$i$i, $133)|0;
               $177 = ($176|0)<(0);
               $178 = ($176|0)>=($133|0);
               $179 = $178 ? $141 : $176;
               $180 = $177 ? 0 : $179;
               $181 = (($180) + ($175))|0;
               $182 = (($i$128$i$i) + 1)|0;
               $exitcond47$i$i = ($182|0)==($136|0);
               if ($exitcond47$i$i) {
                $index$2$i$i = $181;
                break;
               } else {
                $i$128$i$i = $182;$index$126$i$i = $181;$o$127$i$i = $165;
               }
              }
             } else {
              if (!($137)) {
               $index$2$i$i = 0;
               break;
              }
              $138 = $132 >> 1;
              $139 = (($138) - ($131))|0;
              $140 = (($133) + -1)|0;
              $i$033$i$i = 0;$index$031$i$i = 0;$o$032$i$i = $136;
              while(1) {
               $143 = (($o$032$i$i) + -1)|0;
               $144 = (($scevgep$i) + ($143<<2)|0);
               $145 = HEAP32[$144>>2]|0;
               $146 = (($139) + ($145))|0;
               $147 = (($146|0) / ($132|0))&-1;
               $148 = ($147|0)<($134|0);
               if ($148) {
                $149 = (($134) - ($147))|0;
                $150 = $149 << 1;
                $151 = (($150) + -1)|0;
                $155 = $151;
               } else {
                $152 = (($147) - ($134))|0;
                $153 = $152 << 1;
                $155 = $153;
               }
               $154 = Math_imul($index$031$i$i, $133)|0;
               $156 = ($155|0)<(0);
               $157 = ($155|0)>=($133|0);
               $158 = $157 ? $140 : $155;
               $159 = $156 ? 0 : $158;
               $160 = (($159) + ($154))|0;
               $161 = Math_imul($147, $132)|0;
               $162 = (($161) + ($131))|0;
               $163 = (($p$i$i) + ($143<<2)|0);
               HEAP32[$163>>2] = $162;
               $164 = (($i$033$i$i) + 1)|0;
               $exitcond48$i$i = ($164|0)==($136|0);
               if ($exitcond48$i$i) {
                $index$2$i$i = $160;
                break;
               } else {
                $i$033$i$i = $164;$index$031$i$i = $160;$o$032$i$i = $143;
               }
              }
             }
            } while(0);
            $183 = HEAP32[$127>>2]|0;
            $184 = ((($183)) + 8|0);
            $185 = HEAP32[$184>>2]|0;
            $186 = (($185) + ($index$2$i$i)|0);
            $187 = HEAP8[$186>>0]|0;
            $188 = ($187<<24>>24)<(1);
            if ($188) {
             ;HEAP32[$e$i$i>>2]=0|0;HEAP32[$e$i$i+4>>2]=0|0;HEAP32[$e$i$i+8>>2]=0|0;HEAP32[$e$i$i+12>>2]=0|0;HEAP32[$e$i$i+16>>2]=0|0;HEAP32[$e$i$i+20>>2]=0|0;HEAP32[$e$i$i+24>>2]=0|0;HEAP32[$e$i$i+28>>2]=0|0;
             $189 = (($133) + -1)|0;
             $190 = Math_imul($189, $132)|0;
             $191 = (($190) + ($131))|0;
             $192 = HEAP32[$128>>2]|0;
             $193 = ($192|0)>(0);
             L74: do {
              if ($193) {
               if ($137) {
                $best$019$us$i$i = -1;$i$220$us$i$i = 0;$index$318$us$i$i = $index$2$i$i;
               } else {
                $best$019$i$i = -1;$i$220$i$i = 0;$index$318$i$i = $index$2$i$i;
                while(1) {
                 $219 = (($185) + ($i$220$i$i)|0);
                 $220 = HEAP8[$219>>0]|0;
                 $221 = ($220<<24>>24)>(0);
                 do {
                  if ($221) {
                   $222 = ($best$019$i$i|0)==(-1);
                   $223 = ($best$019$i$i|0)>(0);
                   $or$cond$i$i = $222 | $223;
                   if (!($or$cond$i$i)) {
                    $best$2$i$i = $best$019$i$i;$index$5$i$i = $index$318$i$i;
                    break;
                   }
                   ;HEAP32[$p$i$i>>2]=HEAP32[$e$i$i>>2]|0;HEAP32[$p$i$i+4>>2]=HEAP32[$e$i$i+4>>2]|0;HEAP32[$p$i$i+8>>2]=HEAP32[$e$i$i+8>>2]|0;HEAP32[$p$i$i+12>>2]=HEAP32[$e$i$i+12>>2]|0;HEAP32[$p$i$i+16>>2]=HEAP32[$e$i$i+16>>2]|0;HEAP32[$p$i$i+20>>2]=HEAP32[$e$i$i+20>>2]|0;HEAP32[$p$i$i+24>>2]=HEAP32[$e$i$i+24>>2]|0;HEAP32[$p$i$i+28>>2]=HEAP32[$e$i$i+28>>2]|0;
                   $best$2$i$i = 0;$index$5$i$i = $i$220$i$i;
                  } else {
                   $best$2$i$i = $best$019$i$i;$index$5$i$i = $index$318$i$i;
                  }
                 } while(0);
                 $224 = HEAP32[$e$i$i>>2]|0;
                 $225 = ($224|0)<($191|0);
                 if ($225) {
                  $$lcssa$i$i = $e$i$i;$$lcssa6$i$i = $224;
                 } else {
                  $227 = $e$i$i;$j$112$i$i = 0;
                  while(1) {
                   $226 = (($j$112$i$i) + 1)|0;
                   HEAP32[$227>>2] = 0;
                   $228 = (($e$i$i) + ($226<<2)|0);
                   $229 = HEAP32[$228>>2]|0;
                   $230 = ($229|0)<($191|0);
                   if ($230) {
                    $$lcssa$i$i = $228;$$lcssa6$i$i = $229;
                    break;
                   } else {
                    $227 = $228;$j$112$i$i = $226;
                   }
                  }
                 }
                 $231 = ($$lcssa6$i$i|0)>(-1);
                 if ($231) {
                  $232 = (($$lcssa6$i$i) + ($132))|0;
                  HEAP32[$$lcssa$i$i>>2] = $232;
                  $234 = $232;
                 } else {
                  $234 = $$lcssa6$i$i;
                 }
                 $233 = (0 - ($234))|0;
                 HEAP32[$$lcssa$i$i>>2] = $233;
                 $235 = (($i$220$i$i) + 1)|0;
                 $exitcond$i = ($235|0)==($192|0);
                 if ($exitcond$i) {
                  $index$3$lcssa$i$i = $index$5$i$i;
                  break L74;
                 } else {
                  $best$019$i$i = $best$2$i$i;$i$220$i$i = $235;$index$318$i$i = $index$5$i$i;
                 }
                }
               }
               while(1) {
                $194 = (($185) + ($i$220$us$i$i)|0);
                $195 = HEAP8[$194>>0]|0;
                $196 = ($195<<24>>24)>(0);
                do {
                 if ($196) {
                  $j$09$us$i$i = 0;$this$010$us$i$i = 0;
                  while(1) {
                   $209 = (($e$i$i) + ($j$09$us$i$i<<2)|0);
                   $210 = HEAP32[$209>>2]|0;
                   $211 = (($scevgep$i) + ($j$09$us$i$i<<2)|0);
                   $212 = HEAP32[$211>>2]|0;
                   $213 = (($210) - ($212))|0;
                   $214 = Math_imul($213, $213)|0;
                   $215 = (($214) + ($this$010$us$i$i))|0;
                   $216 = (($j$09$us$i$i) + 1)|0;
                   $exitcond46$i$i = ($216|0)==($136|0);
                   if ($exitcond46$i$i) {
                    break;
                   } else {
                    $j$09$us$i$i = $216;$this$010$us$i$i = $215;
                   }
                  }
                  $217 = ($best$019$us$i$i|0)==(-1);
                  $218 = ($215|0)<($best$019$us$i$i|0);
                  $or$cond$us$i$i = $217 | $218;
                  if (!($or$cond$us$i$i)) {
                   $best$2$us$i$i = $best$019$us$i$i;$index$5$us$i$i = $index$318$us$i$i;
                   break;
                  }
                  ;HEAP32[$p$i$i>>2]=HEAP32[$e$i$i>>2]|0;HEAP32[$p$i$i+4>>2]=HEAP32[$e$i$i+4>>2]|0;HEAP32[$p$i$i+8>>2]=HEAP32[$e$i$i+8>>2]|0;HEAP32[$p$i$i+12>>2]=HEAP32[$e$i$i+12>>2]|0;HEAP32[$p$i$i+16>>2]=HEAP32[$e$i$i+16>>2]|0;HEAP32[$p$i$i+20>>2]=HEAP32[$e$i$i+20>>2]|0;HEAP32[$p$i$i+24>>2]=HEAP32[$e$i$i+24>>2]|0;HEAP32[$p$i$i+28>>2]=HEAP32[$e$i$i+28>>2]|0;
                  $best$2$us$i$i = $215;$index$5$us$i$i = $i$220$us$i$i;
                 } else {
                  $best$2$us$i$i = $best$019$us$i$i;$index$5$us$i$i = $index$318$us$i$i;
                 }
                } while(0);
                $197 = HEAP32[$e$i$i>>2]|0;
                $198 = ($197|0)<($191|0);
                if ($198) {
                 $$lcssa$us$i$i = $e$i$i;$$lcssa6$us$i$i = $197;
                } else {
                 $200 = $e$i$i;$j$112$us$i$i = 0;
                 while(1) {
                  $199 = (($j$112$us$i$i) + 1)|0;
                  HEAP32[$200>>2] = 0;
                  $201 = (($e$i$i) + ($199<<2)|0);
                  $202 = HEAP32[$201>>2]|0;
                  $203 = ($202|0)<($191|0);
                  if ($203) {
                   $$lcssa$us$i$i = $201;$$lcssa6$us$i$i = $202;
                   break;
                  } else {
                   $200 = $201;$j$112$us$i$i = $199;
                  }
                 }
                }
                $204 = ($$lcssa6$us$i$i|0)>(-1);
                if ($204) {
                 $205 = (($$lcssa6$us$i$i) + ($132))|0;
                 HEAP32[$$lcssa$us$i$i>>2] = $205;
                 $207 = $205;
                } else {
                 $207 = $$lcssa6$us$i$i;
                }
                $206 = (0 - ($207))|0;
                HEAP32[$$lcssa$us$i$i>>2] = $206;
                $208 = (($i$220$us$i$i) + 1)|0;
                $exitcond20$i = ($208|0)==($192|0);
                if ($exitcond20$i) {
                 $index$3$lcssa$i$i = $index$5$us$i$i;
                 break;
                } else {
                 $best$019$us$i$i = $best$2$us$i$i;$i$220$us$i$i = $208;$index$318$us$i$i = $index$5$us$i$i;
                }
               }
              } else {
               $index$3$lcssa$i$i = $index$2$i$i;
              }
             } while(0);
             $index$6$i$i = $index$3$lcssa$i$i;
            } else {
             $index$6$i$i = $index$2$i$i;
            }
            $236 = ($index$6$i$i|0)>(-1);
            $or$cond36$i$i = $137 & $236;
            if ($or$cond36$i$i) {
             $$08$i$i = $scevgep$i;$i$37$i$i = 0;
             while(1) {
              $237 = (($p$i$i) + ($i$37$i$i<<2)|0);
              $238 = HEAP32[$237>>2]|0;
              $239 = ((($$08$i$i)) + 4|0);
              $240 = HEAP32[$$08$i$i>>2]|0;
              $241 = (($240) - ($238))|0;
              HEAP32[$$08$i$i>>2] = $241;
              $242 = (($i$37$i$i) + 1)|0;
              $exitcond$i$i = ($242|0)==($136|0);
              if ($exitcond$i$i) {
               break;
              } else {
               $$08$i$i = $239;$i$37$i$i = $242;
              }
             }
            }
            $243 = ($index$6$i$i|0)<(0);
            do {
             if ($243) {
              $$0$i3 = 0;
             } else {
              $244 = ((($183)) + 4|0);
              $245 = HEAP32[$244>>2]|0;
              $246 = ($245|0)>($index$6$i$i|0);
              if (!($246)) {
               $$0$i3 = 0;
               break;
              }
              $247 = HEAP32[$129>>2]|0;
              $248 = (($247) + ($index$6$i$i<<2)|0);
              $249 = HEAP32[$248>>2]|0;
              $250 = (($185) + ($index$6$i$i)|0);
              $251 = HEAP8[$250>>0]|0;
              $252 = $251 << 24 >> 24;
              _oggpack_write($opb,$249,$252);
              $253 = HEAP32[$127>>2]|0;
              $254 = ((($253)) + 8|0);
              $255 = HEAP32[$254>>2]|0;
              $256 = (($255) + ($index$6$i$i)|0);
              $257 = HEAP8[$256>>0]|0;
              $258 = $257 << 24 >> 24;
              $$0$i3 = $258;
             }
            } while(0);
            $259 = (($$0$i3) + ($bits$09$i))|0;
            $260 = (($i$010$i) + 1)|0;
            $exitcond21$i = ($260|0)==($122|0);
            if ($exitcond21$i) {
             break;
            }
            $$pre$i = HEAP32[$116>>2]|0;
            $136 = $$pre$i;$bits$09$i = $259;$i$010$i = $260;
           }
           $$pre46 = HEAP32[$101>>2]|0;
           $264 = $$pre46;$bits$0$lcssa$i = $259;
          } else {
           $264 = $102;$bits$0$lcssa$i = 0;
          }
          $261 = HEAP32[$20>>2]|0;
          $262 = (($261) + ($bits$0$lcssa$i))|0;
          HEAP32[$20>>2] = $262;
          $263 = (($264) + ($i$121<<2)|0);
          $265 = HEAP32[$263>>2]|0;
          $266 = (($resbits) + ($265<<2)|0);
          $267 = HEAP32[$266>>2]|0;
          $268 = (($267) + ($bits$0$lcssa$i))|0;
          HEAP32[$266>>2] = $268;
         }
        }
        $269 = (($j$115) + 1)|0;
        $exitcond43 = ($269|0)==($ch|0);
        if ($exitcond43) {
         break;
        } else {
         $j$115 = $269;
        }
       }
      }
      $270 = (($k$120) + 1)|0;
      $271 = (($i$121) + 1)|0;
      $272 = ($270|0)<($7|0);
      $273 = ($271|0)<($12|0);
      $or$cond = $272 & $273;
      if ($or$cond) {
       $i$121 = $271;$k$120 = $270;
      } else {
       $i$1$lcssa = $271;
       break;
      }
     }
    } else {
     $i$1$lcssa = $i$024;
    }
    $25 = ($i$1$lcssa|0)<($12|0);
    if ($25) {
     $i$024 = $i$1$lcssa;
    } else {
     break;
    }
   }
   $$pre47 = HEAP32[$13>>2]|0;
   $276 = $$pre47;
  } else {
   $276 = $277;
  }
  $274 = (($s$026) + 1)|0;
  $275 = ($274|0)<($276|0);
  if ($275) {
   $277 = $276;$s$026 = $274;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _res1_inverse($vb,$vl,$in,$nonzero,$ch) {
 $vb = $vb|0;
 $vl = $vl|0;
 $in = $in|0;
 $nonzero = $nonzero|0;
 $ch = $ch|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $used$02 = 0, $used$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ch|0)>(0);
 if ($0) {
  $i$01 = 0;$used$02 = 0;
 } else {
  return 0;
 }
 while(1) {
  $1 = (($nonzero) + ($i$01<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   $used$1 = $used$02;
  } else {
   $4 = (($in) + ($i$01<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($used$02) + 1)|0;
   $7 = (($in) + ($used$02<<2)|0);
   HEAP32[$7>>2] = $5;
   $used$1 = $6;
  }
  $8 = (($i$01) + 1)|0;
  $exitcond = ($8|0)==($ch|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $8;$used$02 = $used$1;
  }
 }
 $9 = ($used$1|0)==(0);
 if ($9) {
  return 0;
 }
 __01inverse($vb,$vl,$in,$used$1,29);
 return 0;
}
function _res2_class($vb,$vl,$in,$nonzero,$ch) {
 $vb = $vb|0;
 $vl = $vl|0;
 $in = $in|0;
 $nonzero = $nonzero|0;
 $ch = $ch|0;
 var $$0 = 0, $$angmax$1$us$us$i$us = 0, $$magmax$0$us$us$i$us = 0, $$magmax$0$us29$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $angmax$09$us$us$i$us = 0, $angmax$15$us$us$i$us = 0, $exitcond = 0, $exitcond$i$us = 0, $exitcond47$i = 0, $exitcond47$i$us = 0, $exitcond48$i$us = 0, $i$021$i$us = 0, $i$021$us$i = 0, $i$021$us$i$us = 0, $i$04 = 0, $ispos$us$us$i$us = 0, $ispos$us27$i = 0;
 var $ispos1$us$us$i$us = 0, $j$07$us$us$i$us = 0, $j$07$us25$i = 0, $j$1$lcssa$i$ph$us = 0, $j$1$lcssa$us$i = 0, $j$1$lcssa$us$i$us = 0, $j$114$i$us = 0, $j$114$us$i = 0, $j$114$us$i$us = 0, $k$04$us$us$i$us = 0, $l$020$us$i = 0, $l$020$us$i$us = 0, $l$16$us$us$i$us = 0, $l$16$us26$i = 0, $magmax$08$us$us$i$us = 0, $magmax$08$us24$i = 0, $neg$us$us$i$us = 0, $neg$us28$i = 0, $neg2$us$us$i$us = 0, $not$ = 0;
 var $used$0$ = 0, $used$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ch|0)>(0);
 if ($0) {
  $i$04 = 0;$used$05 = 0;
 } else {
  $$0 = 0;
  return ($$0|0);
 }
 while(1) {
  $1 = (($nonzero) + ($i$04<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $not$ = ($2|0)!=(0);
  $3 = $not$&1;
  $used$0$ = (($3) + ($used$05))|0;
  $4 = (($i$04) + 1)|0;
  $exitcond = ($4|0)==($ch|0);
  if ($exitcond) {
   break;
  } else {
   $i$04 = $4;$used$05 = $used$0$;
  }
 }
 $5 = ($used$0$|0)==(0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = HEAP32[$vl>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($6)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($6)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$6>>2]|0;
 $14 = (($12) - ($13))|0;
 $15 = (($14|0) / ($8|0))&-1;
 $16 = ((($vb)) + 72|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 8)|0;
 $19 = ((($vb)) + 76|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($18|0)>($20|0);
 $22 = ((($vb)) + 68|0);
 $23 = HEAP32[$22>>2]|0;
 if ($21) {
  $24 = ($23|0)==(0|0);
  if (!($24)) {
   $25 = $23;
   $26 = (_malloc(8)|0);
   $27 = ((($vb)) + 80|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) + ($17))|0;
   HEAP32[$27>>2] = $29;
   $30 = ((($vb)) + 84|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($26)) + 4|0);
   HEAP32[$32>>2] = $31;
   HEAP32[$26>>2] = $25;
   HEAP32[$30>>2] = $26;
  }
  HEAP32[$19>>2] = 8;
  $33 = (_malloc(8)|0);
  HEAP32[$22>>2] = $33;
  HEAP32[$16>>2] = 0;
  $$pre = HEAP32[$19>>2]|0;
  $35 = $33;$36 = 0;$43 = $$pre;
 } else {
  $35 = $23;$36 = $17;$43 = $20;
 }
 $34 = (($35) + ($36)|0);
 $37 = (($36) + 8)|0;
 HEAP32[$16>>2] = $37;
 $38 = $15 << 2;
 $39 = (($38) + 7)|0;
 $40 = $39 & -8;
 $41 = (($37) + ($40))|0;
 $42 = ($41|0)>($43|0);
 if ($42) {
  $44 = ($35|0)==(0|0);
  if (!($44)) {
   $45 = $35;
   $46 = (_malloc(8)|0);
   $47 = ((($vb)) + 80|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($48) + ($37))|0;
   HEAP32[$47>>2] = $49;
   $50 = ((($vb)) + 84|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ((($46)) + 4|0);
   HEAP32[$52>>2] = $51;
   HEAP32[$46>>2] = $45;
   HEAP32[$50>>2] = $46;
  }
  HEAP32[$19>>2] = $40;
  $53 = (_malloc($40)|0);
  HEAP32[$22>>2] = $53;
  HEAP32[$16>>2] = 0;
  $55 = $53;$56 = 0;
 } else {
  $55 = $35;$56 = $37;
 }
 $54 = (($55) + ($56)|0);
 $57 = (($56) + ($40))|0;
 HEAP32[$16>>2] = $57;
 HEAP32[$34>>2] = $54;
 _memset(($54|0),0,($38|0))|0;
 $58 = ($15|0)>(0);
 L21: do {
  if ($58) {
   $59 = ($8|0)>(0);
   $60 = (($10) + -1)|0;
   $61 = ($10|0)>(1);
   $62 = HEAP32[$34>>2]|0;
   if (!($59)) {
    if ($61) {
     $i$021$i$us = 0;
    } else {
     _memset(($62|0),0,($38|0))|0;
     break;
    }
    while(1) {
     $j$114$i$us = 0;
     while(1) {
      $63 = (((($6)) + 2328|0) + ($j$114$i$us<<2)|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)<(0);
      if (!($65)) {
       $66 = (((($6)) + 2584|0) + ($j$114$i$us<<2)|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = ($67|0)<(0);
       if (!($68)) {
        $j$1$lcssa$i$ph$us = $j$114$i$us;
        break;
       }
      }
      $69 = (($j$114$i$us) + 1)|0;
      $70 = ($69|0)<($60|0);
      if ($70) {
       $j$114$i$us = $69;
      } else {
       $j$1$lcssa$i$ph$us = $69;
       break;
      }
     }
     $71 = (($62) + ($i$021$i$us<<2)|0);
     HEAP32[$71>>2] = $j$1$lcssa$i$ph$us;
     $72 = (($i$021$i$us) + 1)|0;
     $exitcond48$i$us = ($72|0)==($15|0);
     if ($exitcond48$i$us) {
      break L21;
     } else {
      $i$021$i$us = $72;
     }
    }
   }
   $73 = ($ch|0)>(1);
   $74 = HEAP32[$6>>2]|0;
   $75 = (($74|0) / ($ch|0))&-1;
   if ($73) {
    $i$021$us$i$us = 0;$l$020$us$i$us = $75;
   } else {
    $i$021$us$i = 0;$l$020$us$i = $75;
    while(1) {
     $112 = HEAP32[$in>>2]|0;
     $j$07$us25$i = 0;$l$16$us26$i = $l$020$us$i;$magmax$08$us24$i = 0;
     while(1) {
      $111 = (($112) + ($l$16$us26$i<<2)|0);
      $113 = HEAP32[$111>>2]|0;
      $ispos$us27$i = ($113|0)>(-1);
      $neg$us28$i = (0 - ($113))|0;
      $114 = $ispos$us27$i ? $113 : $neg$us28$i;
      $115 = ($114|0)>($magmax$08$us24$i|0);
      $$magmax$0$us29$i = $115 ? $114 : $magmax$08$us24$i;
      $116 = (($l$16$us26$i) + 1)|0;
      $117 = (($j$07$us25$i) + ($ch))|0;
      $118 = ($117|0)<($8|0);
      if ($118) {
       $j$07$us25$i = $117;$l$16$us26$i = $116;$magmax$08$us24$i = $$magmax$0$us29$i;
      } else {
       break;
      }
     }
     L42: do {
      if ($61) {
       $j$114$us$i = 0;
       while(1) {
        $101 = (((($6)) + 2328|0) + ($j$114$us$i<<2)|0);
        $102 = HEAP32[$101>>2]|0;
        $103 = ($$magmax$0$us29$i|0)>($102|0);
        if (!($103)) {
         $104 = (((($6)) + 2584|0) + ($j$114$us$i<<2)|0);
         $105 = HEAP32[$104>>2]|0;
         $106 = ($105|0)<(0);
         if (!($106)) {
          $j$1$lcssa$us$i = $j$114$us$i;
          break L42;
         }
        }
        $109 = (($j$114$us$i) + 1)|0;
        $110 = ($109|0)<($60|0);
        if ($110) {
         $j$114$us$i = $109;
        } else {
         $j$1$lcssa$us$i = $109;
         break;
        }
       }
      } else {
       $j$1$lcssa$us$i = 0;
      }
     } while(0);
     $107 = (($62) + ($i$021$us$i<<2)|0);
     HEAP32[$107>>2] = $j$1$lcssa$us$i;
     $108 = (($i$021$us$i) + 1)|0;
     $exitcond47$i = ($108|0)==($15|0);
     if ($exitcond47$i) {
      break L21;
     } else {
      $i$021$us$i = $108;$l$020$us$i = $116;
     }
    }
   }
   while(1) {
    $76 = HEAP32[$in>>2]|0;
    $angmax$09$us$us$i$us = 0;$j$07$us$us$i$us = 0;$l$16$us$us$i$us = $l$020$us$i$us;$magmax$08$us$us$i$us = 0;
    while(1) {
     $77 = (($76) + ($l$16$us$us$i$us<<2)|0);
     $78 = HEAP32[$77>>2]|0;
     $neg$us$us$i$us = (0 - ($78))|0;
     $angmax$15$us$us$i$us = $angmax$09$us$us$i$us;$k$04$us$us$i$us = 1;
     while(1) {
      $79 = (($in) + ($k$04$us$us$i$us<<2)|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = (($80) + ($l$16$us$us$i$us<<2)|0);
      $82 = HEAP32[$81>>2]|0;
      $ispos1$us$us$i$us = ($82|0)>(-1);
      $neg2$us$us$i$us = (0 - ($82))|0;
      $83 = $ispos1$us$us$i$us ? $82 : $neg2$us$us$i$us;
      $84 = ($83|0)>($angmax$15$us$us$i$us|0);
      $$angmax$1$us$us$i$us = $84 ? $83 : $angmax$15$us$us$i$us;
      $85 = (($k$04$us$us$i$us) + 1)|0;
      $exitcond$i$us = ($85|0)==($ch|0);
      if ($exitcond$i$us) {
       break;
      } else {
       $angmax$15$us$us$i$us = $$angmax$1$us$us$i$us;$k$04$us$us$i$us = $85;
      }
     }
     $ispos$us$us$i$us = ($78|0)>(-1);
     $86 = $ispos$us$us$i$us ? $78 : $neg$us$us$i$us;
     $87 = ($86|0)>($magmax$08$us$us$i$us|0);
     $$magmax$0$us$us$i$us = $87 ? $86 : $magmax$08$us$us$i$us;
     $88 = (($l$16$us$us$i$us) + 1)|0;
     $89 = (($j$07$us$us$i$us) + ($ch))|0;
     $90 = ($89|0)<($8|0);
     if ($90) {
      $angmax$09$us$us$i$us = $$angmax$1$us$us$i$us;$j$07$us$us$i$us = $89;$l$16$us$us$i$us = $88;$magmax$08$us$us$i$us = $$magmax$0$us$us$i$us;
     } else {
      break;
     }
    }
    L57: do {
     if ($61) {
      $j$114$us$i$us = 0;
      while(1) {
       $91 = (((($6)) + 2328|0) + ($j$114$us$i$us<<2)|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = ($$magmax$0$us$us$i$us|0)>($92|0);
       if (!($93)) {
        $94 = (((($6)) + 2584|0) + ($j$114$us$i$us<<2)|0);
        $95 = HEAP32[$94>>2]|0;
        $96 = ($$angmax$1$us$us$i$us|0)>($95|0);
        if (!($96)) {
         $j$1$lcssa$us$i$us = $j$114$us$i$us;
         break L57;
        }
       }
       $97 = (($j$114$us$i$us) + 1)|0;
       $98 = ($97|0)<($60|0);
       if ($98) {
        $j$114$us$i$us = $97;
       } else {
        $j$1$lcssa$us$i$us = $97;
        break;
       }
      }
     } else {
      $j$1$lcssa$us$i$us = 0;
     }
    } while(0);
    $99 = (($62) + ($i$021$us$i$us<<2)|0);
    HEAP32[$99>>2] = $j$1$lcssa$us$i$us;
    $100 = (($i$021$us$i$us) + 1)|0;
    $exitcond47$i$us = ($100|0)==($15|0);
    if ($exitcond47$i$us) {
     break;
    } else {
     $i$021$us$i$us = $100;$l$020$us$i$us = $88;
    }
   }
  }
 } while(0);
 $119 = ((($vl)) + 40|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = (($120) + 1)|0;
 HEAP32[$119>>2] = $121;
 $$0 = $34;
 return ($$0|0);
}
function _res2_forward($opb,$vb,$vl,$in,$nonzero,$ch,$partword,$submap) {
 $opb = $opb|0;
 $vb = $vb|0;
 $vl = $vl|0;
 $in = $in|0;
 $nonzero = $nonzero|0;
 $ch = $ch|0;
 $partword = $partword|0;
 $submap = $submap|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond9 = 0, $i$03 = 0, $i$03$us = 0, $j$01$us = 0, $k$02$us = 0, $not$ = 0, $not$$us = 0, $used$0$ = 0, $used$0$$us = 0, $used$0$lcssa = 0, $used$04 = 0;
 var $used$04$us = 0, $work = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $work = sp;
 $0 = ((($vb)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1|0) / 2)&-1;
 $3 = $ch << 2;
 $4 = Math_imul($3, $2)|0;
 $5 = (($4) + 7)|0;
 $6 = $5 & -8;
 $7 = ((($vb)) + 72|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($6))|0;
 $10 = ((($vb)) + 76|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9|0)>($11|0);
 $13 = ((($vb)) + 68|0);
 $14 = HEAP32[$13>>2]|0;
 if ($12) {
  $15 = ($14|0)==(0|0);
  if (!($15)) {
   $16 = $14;
   $17 = (_malloc(8)|0);
   $18 = ((($vb)) + 80|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + ($8))|0;
   HEAP32[$18>>2] = $20;
   $21 = ((($vb)) + 84|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($17)) + 4|0);
   HEAP32[$23>>2] = $22;
   HEAP32[$17>>2] = $16;
   HEAP32[$21>>2] = $17;
  }
  HEAP32[$10>>2] = $6;
  $24 = (_malloc($6)|0);
  HEAP32[$13>>2] = $24;
  HEAP32[$7>>2] = 0;
  $26 = $24;$27 = 0;
 } else {
  $26 = $14;$27 = $8;
 }
 $25 = (($26) + ($27)|0);
 $28 = (($27) + ($6))|0;
 HEAP32[$7>>2] = $28;
 HEAP32[$work>>2] = $25;
 $29 = ($ch|0)>(0);
 if (!($29)) {
  STACKTOP = sp;return 0;
 }
 $30 = ($1|0)>(1);
 if ($30) {
  $i$03$us = 0;$used$04$us = 0;
  while(1) {
   $31 = (($in) + ($i$03$us<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($nonzero) + ($i$03$us<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $not$$us = ($34|0)!=(0);
   $j$01$us = 0;$k$02$us = $i$03$us;
   while(1) {
    $35 = (($32) + ($j$01$us<<2)|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (($25) + ($k$02$us<<2)|0);
    HEAP32[$37>>2] = $36;
    $38 = (($j$01$us) + 1)|0;
    $39 = (($k$02$us) + ($ch))|0;
    $40 = ($38|0)<($2|0);
    if ($40) {
     $j$01$us = $38;$k$02$us = $39;
    } else {
     break;
    }
   }
   $41 = $not$$us&1;
   $used$0$$us = (($41) + ($used$04$us))|0;
   $42 = (($i$03$us) + 1)|0;
   $exitcond = ($42|0)==($ch|0);
   if ($exitcond) {
    $used$0$lcssa = $used$0$$us;
    break;
   } else {
    $i$03$us = $42;$used$04$us = $used$0$$us;
   }
  }
 } else {
  $i$03 = 0;$used$04 = 0;
  while(1) {
   $43 = (($nonzero) + ($i$03<<2)|0);
   $44 = HEAP32[$43>>2]|0;
   $not$ = ($44|0)!=(0);
   $45 = $not$&1;
   $used$0$ = (($45) + ($used$04))|0;
   $46 = (($i$03) + 1)|0;
   $exitcond9 = ($46|0)==($ch|0);
   if ($exitcond9) {
    $used$0$lcssa = $used$0$;
    break;
   } else {
    $i$03 = $46;$used$04 = $used$0$;
   }
  }
 }
 $47 = ($used$0$lcssa|0)==(0);
 if ($47) {
  STACKTOP = sp;return 0;
 }
 __01forward($opb,$vl,$work,1,$partword);
 STACKTOP = sp;return 0;
}
function _res2_inverse($vb,$vl,$in,$nonzero,$ch) {
 $vb = $vb|0;
 $vl = $vl|0;
 $in = $in|0;
 $nonzero = $nonzero|0;
 $ch = $ch|0;
 var $$ = 0, $$$i = 0, $$$i13 = 0, $$i$1$i = 0, $$i$1$i12 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $chptr$07$i = 0, $chptr$07$i6 = 0, $chptr$1$lcssa$i = 0, $chptr$1$lcssa$i3 = 0, $chptr$14$i = 0, $chptr$14$i9 = 0, $exitcond = 0, $exitcond25 = 0, $i$0$lcssa = 0, $i$021 = 0;
 var $i$06$i = 0, $i$06$i7 = 0, $i$1$lcssa$i = 0, $i$1$lcssa$i4 = 0, $i$117 = 0, $i$117$us = 0, $i$13$i = 0, $i$13$i10 = 0, $i$2$lcssa = 0, $i$2$lcssa$us = 0, $i$215 = 0, $i$215$us = 0, $j$02$i = 0, $j$02$i11 = 0, $k$014 = 0, $k$014$us = 0, $l$016 = 0, $l$016$us = 0, $or$cond = 0, $or$cond$us = 0;
 var $or$cond13 = 0, $or$cond13$us = 0, $s$019 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vl>>2]|0;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($vl)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($vb)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = Math_imul($7, $ch)|0;
 $9 = $8 >> 1;
 $10 = ((($0)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)<($9|0);
 $$ = $12 ? $11 : $9;
 $13 = HEAP32[$0>>2]|0;
 $14 = (($$) - ($13))|0;
 $15 = ($14|0)>(0);
 if (!($15)) {
  return 0;
 }
 $16 = (($14|0) / ($2|0))&-1;
 $17 = (($5) + -1)|0;
 $18 = (($17) + ($16))|0;
 $19 = (($18|0) / ($5|0))&-1;
 $20 = $19 << 2;
 $21 = (($20) + 7)|0;
 $22 = $21 & -8;
 $23 = ((($vb)) + 72|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + ($22))|0;
 $26 = ((($vb)) + 76|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($25|0)>($27|0);
 $29 = ((($vb)) + 68|0);
 $30 = HEAP32[$29>>2]|0;
 if ($28) {
  $31 = ($30|0)==(0|0);
  if (!($31)) {
   $32 = $30;
   $33 = (_malloc(8)|0);
   $34 = ((($vb)) + 80|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($35) + ($24))|0;
   HEAP32[$34>>2] = $36;
   $37 = ((($vb)) + 84|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ((($33)) + 4|0);
   HEAP32[$39>>2] = $38;
   HEAP32[$33>>2] = $32;
   HEAP32[$37>>2] = $33;
  }
  HEAP32[$26>>2] = $22;
  $40 = (_malloc($22)|0);
  HEAP32[$29>>2] = $40;
  HEAP32[$23>>2] = 0;
  $42 = $40;$43 = 0;
 } else {
  $42 = $30;$43 = $24;
 }
 $41 = (($42) + ($43)|0);
 $44 = (($43) + ($22))|0;
 HEAP32[$23>>2] = $44;
 $45 = ($ch|0)>(0);
 L10: do {
  if ($45) {
   $i$021 = 0;
   while(1) {
    $46 = (($nonzero) + ($i$021<<2)|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($47|0)==(0);
    if (!($48)) {
     $i$0$lcssa = $i$021;
     break L10;
    }
    $49 = (($i$021) + 1)|0;
    $50 = ($49|0)<($ch|0);
    if ($50) {
     $i$021 = $49;
    } else {
     $i$0$lcssa = $49;
     break;
    }
   }
  } else {
   $i$0$lcssa = 0;
  }
 } while(0);
 $51 = ($i$0$lcssa|0)==($ch|0);
 if ($51) {
  return 0;
 }
 $52 = ((($vl)) + 8|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)>(0);
 if (!($54)) {
  return 0;
 }
 $55 = ($16|0)>(0);
 $56 = ((($vb)) + 4|0);
 $57 = ((($0)) + 16|0);
 $58 = ((($vl)) + 28|0);
 $59 = ($5|0)>(0);
 $60 = ((($vl)) + 20|0);
 $s$019 = 0;
 L21: while(1) {
  L23: do {
   if ($55) {
    $61 = ($s$019|0)==(0);
    $62 = 1 << $s$019;
    if ($61) {
     $i$117$us = 0;$l$016$us = 0;
    } else {
     $i$117 = 0;$l$016 = 0;
     while(1) {
      $130 = ($i$117|0)<($16|0);
      $or$cond13 = $59 & $130;
      if ($or$cond13) {
       $131 = (($41) + ($l$016<<2)|0);
       $i$215 = $i$117;$k$014 = 0;
       while(1) {
        $132 = HEAP32[$131>>2]|0;
        $133 = (($132) + ($k$014<<2)|0);
        $134 = HEAP32[$133>>2]|0;
        $135 = (((($0)) + 24|0) + ($134<<2)|0);
        $136 = HEAP32[$135>>2]|0;
        $137 = $136 & $62;
        $138 = ($137|0)==(0);
        if (!($138)) {
         $139 = HEAP32[$60>>2]|0;
         $140 = (($139) + ($134<<2)|0);
         $141 = HEAP32[$140>>2]|0;
         $142 = (($141) + ($s$019<<2)|0);
         $143 = HEAP32[$142>>2]|0;
         $144 = ($143|0)==(0|0);
         if (!($144)) {
          $145 = Math_imul($i$215, $2)|0;
          $146 = HEAP32[$0>>2]|0;
          $147 = (($146) + ($145))|0;
          $148 = ((($143)) + 8|0);
          $149 = HEAP32[$148>>2]|0;
          $150 = ($149|0)>(0);
          if ($150) {
           $151 = (($147|0) / ($ch|0))&-1;
           $152 = (($2) + ($147))|0;
           $153 = (($152|0) / ($ch|0))&-1;
           $154 = ($151|0)<($153|0);
           if ($154) {
            $155 = ((($143)) + 16|0);
            $chptr$07$i6 = 0;$i$06$i7 = $151;
            while(1) {
             $157 = (_decode_packed_entry_number($143,$56)|0);
             $158 = ($157|0)==(-1);
             if ($158) {
              label = 46;
              break L21;
             }
             $159 = HEAP32[$155>>2]|0;
             $160 = HEAP32[$143>>2]|0;
             $161 = Math_imul($160, $157)|0;
             $162 = (($159) + ($161<<2)|0);
             $163 = ($160|0)>(0);
             if ($163) {
              $chptr$14$i9 = $chptr$07$i6;$i$13$i10 = $i$06$i7;$j$02$i11 = 0;
              while(1) {
               $164 = (($162) + ($j$02$i11<<2)|0);
               $165 = +HEAPF32[$164>>2];
               $166 = (($chptr$14$i9) + 1)|0;
               $167 = (($in) + ($chptr$14$i9<<2)|0);
               $168 = HEAP32[$167>>2]|0;
               $169 = (($168) + ($i$13$i10<<2)|0);
               $170 = +HEAPF32[$169>>2];
               $171 = $170 + $165;
               HEAPF32[$169>>2] = $171;
               $172 = ($166|0)==($ch|0);
               $173 = $172&1;
               $$i$1$i12 = (($173) + ($i$13$i10))|0;
               $$$i13 = $172 ? 0 : $166;
               $174 = (($j$02$i11) + 1)|0;
               $exitcond = ($174|0)==($160|0);
               if ($exitcond) {
                $chptr$1$lcssa$i3 = $$$i13;$i$1$lcssa$i4 = $$i$1$i12;
                break;
               } else {
                $chptr$14$i9 = $$$i13;$i$13$i10 = $$i$1$i12;$j$02$i11 = $174;
               }
              }
             } else {
              $chptr$1$lcssa$i3 = $chptr$07$i6;$i$1$lcssa$i4 = $i$06$i7;
             }
             $156 = ($i$1$lcssa$i4|0)<($153|0);
             if ($156) {
              $chptr$07$i6 = $chptr$1$lcssa$i3;$i$06$i7 = $i$1$lcssa$i4;
             } else {
              break;
             }
            }
           }
          }
         }
        }
        $175 = (($k$014) + 1)|0;
        $176 = (($i$215) + 1)|0;
        $177 = ($175|0)<($5|0);
        $178 = ($176|0)<($16|0);
        $or$cond = $177 & $178;
        if ($or$cond) {
         $i$215 = $176;$k$014 = $175;
        } else {
         $i$2$lcssa = $176;
         break;
        }
       }
      } else {
       $i$2$lcssa = $i$117;
      }
      $179 = (($l$016) + 1)|0;
      $180 = ($i$2$lcssa|0)<($16|0);
      if ($180) {
       $i$117 = $i$2$lcssa;$l$016 = $179;
      } else {
       break L23;
      }
     }
    }
    while(1) {
     $63 = HEAP32[$3>>2]|0;
     $64 = ((($63)) + 8|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = ($65|0)>(0);
     if (!($66)) {
      label = 46;
      break L21;
     }
     $67 = (_decode_packed_entry_number($63,$56)|0);
     $68 = ($67|0)>(-1);
     if (!($68)) {
      label = 46;
      break L21;
     }
     $69 = ((($63)) + 24|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = (($70) + ($67<<2)|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = ($72|0)==(-1);
     if ($73) {
      label = 46;
      break L21;
     }
     $74 = HEAP32[$57>>2]|0;
     $75 = ($72|0)<($74|0);
     if (!($75)) {
      label = 46;
      break L21;
     }
     $76 = HEAP32[$58>>2]|0;
     $77 = (($76) + ($72<<2)|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = (($41) + ($l$016$us<<2)|0);
     HEAP32[$79>>2] = $78;
     $80 = ($78|0)==(0|0);
     if ($80) {
      label = 46;
      break L21;
     }
     $129 = ($i$117$us|0)<($16|0);
     $or$cond13$us = $59 & $129;
     L53: do {
      if ($or$cond13$us) {
       $84 = $78;$i$215$us = $i$117$us;$k$014$us = 0;
       while(1) {
        $83 = (($84) + ($k$014$us<<2)|0);
        $85 = HEAP32[$83>>2]|0;
        $86 = (((($0)) + 24|0) + ($85<<2)|0);
        $87 = HEAP32[$86>>2]|0;
        $88 = $87 & $62;
        $89 = ($88|0)==(0);
        do {
         if (!($89)) {
          $90 = HEAP32[$60>>2]|0;
          $91 = (($90) + ($85<<2)|0);
          $92 = HEAP32[$91>>2]|0;
          $93 = HEAP32[$92>>2]|0;
          $94 = ($93|0)==(0|0);
          if ($94) {
           break;
          }
          $95 = Math_imul($i$215$us, $2)|0;
          $96 = HEAP32[$0>>2]|0;
          $97 = (($96) + ($95))|0;
          $98 = ((($93)) + 8|0);
          $99 = HEAP32[$98>>2]|0;
          $100 = ($99|0)>(0);
          if (!($100)) {
           break;
          }
          $101 = (($97|0) / ($ch|0))&-1;
          $102 = (($2) + ($97))|0;
          $103 = (($102|0) / ($ch|0))&-1;
          $104 = ($101|0)<($103|0);
          if (!($104)) {
           break;
          }
          $105 = ((($93)) + 16|0);
          $chptr$07$i = 0;$i$06$i = $101;
          while(1) {
           $107 = (_decode_packed_entry_number($93,$56)|0);
           $108 = ($107|0)==(-1);
           if ($108) {
            label = 46;
            break L21;
           }
           $109 = HEAP32[$105>>2]|0;
           $110 = HEAP32[$93>>2]|0;
           $111 = Math_imul($110, $107)|0;
           $112 = (($109) + ($111<<2)|0);
           $113 = ($110|0)>(0);
           if ($113) {
            $chptr$14$i = $chptr$07$i;$i$13$i = $i$06$i;$j$02$i = 0;
            while(1) {
             $114 = (($112) + ($j$02$i<<2)|0);
             $115 = +HEAPF32[$114>>2];
             $116 = (($chptr$14$i) + 1)|0;
             $117 = (($in) + ($chptr$14$i<<2)|0);
             $118 = HEAP32[$117>>2]|0;
             $119 = (($118) + ($i$13$i<<2)|0);
             $120 = +HEAPF32[$119>>2];
             $121 = $120 + $115;
             HEAPF32[$119>>2] = $121;
             $122 = ($116|0)==($ch|0);
             $123 = $122&1;
             $$i$1$i = (($123) + ($i$13$i))|0;
             $$$i = $122 ? 0 : $116;
             $124 = (($j$02$i) + 1)|0;
             $exitcond25 = ($124|0)==($110|0);
             if ($exitcond25) {
              $chptr$1$lcssa$i = $$$i;$i$1$lcssa$i = $$i$1$i;
              break;
             } else {
              $chptr$14$i = $$$i;$i$13$i = $$i$1$i;$j$02$i = $124;
             }
            }
           } else {
            $chptr$1$lcssa$i = $chptr$07$i;$i$1$lcssa$i = $i$06$i;
           }
           $106 = ($i$1$lcssa$i|0)<($103|0);
           if ($106) {
            $chptr$07$i = $chptr$1$lcssa$i;$i$06$i = $i$1$lcssa$i;
           } else {
            break;
           }
          }
         }
        } while(0);
        $125 = (($k$014$us) + 1)|0;
        $126 = (($i$215$us) + 1)|0;
        $127 = ($125|0)<($5|0);
        $128 = ($126|0)<($16|0);
        $or$cond$us = $127 & $128;
        if (!($or$cond$us)) {
         $i$2$lcssa$us = $126;
         break L53;
        }
        $$pre = HEAP32[$79>>2]|0;
        $84 = $$pre;$i$215$us = $126;$k$014$us = $125;
       }
      } else {
       $i$2$lcssa$us = $i$117$us;
      }
     } while(0);
     $81 = (($l$016$us) + 1)|0;
     $82 = ($i$2$lcssa$us|0)<($16|0);
     if ($82) {
      $i$117$us = $i$2$lcssa$us;$l$016$us = $81;
     } else {
      break;
     }
    }
   }
  } while(0);
  $181 = (($s$019) + 1)|0;
  $182 = HEAP32[$52>>2]|0;
  $183 = ($181|0)<($182|0);
  if ($183) {
   $s$019 = $181;
  } else {
   label = 46;
   break;
  }
 }
 if ((label|0) == 46) {
  return 0;
 }
 return (0)|0;
}
function _mapping0_pack($vi,$vm,$opb) {
 $vi = $vi|0;
 $vm = $vm|0;
 $opb = $opb|0;
 var $$01$i = 0, $$01$i3 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$05 = 0, $i$13 = 0;
 var $i$22 = 0, $ret$0$lcssa$i = 0, $ret$0$lcssa$i6 = 0, $ret$02$i = 0, $ret$02$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vm>>2]|0;
 $1 = ($0|0)>(1);
 if ($1) {
  _oggpack_write($opb,1,1);
  $2 = HEAP32[$vm>>2]|0;
  $3 = (($2) + -1)|0;
  _oggpack_write($opb,$3,4);
 } else {
  _oggpack_write($opb,0,1);
 }
 $4 = ((($vm)) + 1156|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 if ($6) {
  _oggpack_write($opb,1,1);
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + -1)|0;
  _oggpack_write($opb,$8,8);
  $9 = HEAP32[$4>>2]|0;
  $10 = ($9|0)>(0);
  if ($10) {
   $11 = ((($vm)) + 1160|0);
   $12 = ((($vi)) + 4|0);
   $13 = ((($vm)) + 2184|0);
   $i$05 = 0;
   while(1) {
    $14 = (($11) + ($i$05<<2)|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = HEAP32[$12>>2]|0;
    $17 = (($16) + -1)|0;
    $18 = ($17|0)==(0);
    if ($18) {
     $ret$0$lcssa$i = 0;
    } else {
     $$01$i = $17;$ret$02$i = 0;
     while(1) {
      $19 = $$01$i >>> 1;
      $20 = (($ret$02$i) + 1)|0;
      $21 = ($19|0)==(0);
      if ($21) {
       $ret$0$lcssa$i = $20;
       break;
      } else {
       $$01$i = $19;$ret$02$i = $20;
      }
     }
    }
    _oggpack_write($opb,$15,$ret$0$lcssa$i);
    $22 = (($13) + ($i$05<<2)|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = HEAP32[$12>>2]|0;
    $25 = (($24) + -1)|0;
    $26 = ($25|0)==(0);
    if ($26) {
     $ret$0$lcssa$i6 = 0;
    } else {
     $$01$i3 = $25;$ret$02$i2 = 0;
     while(1) {
      $27 = $$01$i3 >>> 1;
      $28 = (($ret$02$i2) + 1)|0;
      $29 = ($27|0)==(0);
      if ($29) {
       $ret$0$lcssa$i6 = $28;
       break;
      } else {
       $$01$i3 = $27;$ret$02$i2 = $28;
      }
     }
    }
    _oggpack_write($opb,$23,$ret$0$lcssa$i6);
    $30 = (($i$05) + 1)|0;
    $31 = HEAP32[$4>>2]|0;
    $32 = ($30|0)<($31|0);
    if ($32) {
     $i$05 = $30;
    } else {
     break;
    }
   }
  }
 } else {
  _oggpack_write($opb,0,1);
 }
 _oggpack_write($opb,0,2);
 $33 = HEAP32[$vm>>2]|0;
 $34 = ($33|0)>(1);
 if ($34) {
  $35 = ((($vi)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)>(0);
  if ($37) {
   $38 = ((($vm)) + 4|0);
   $i$13 = 0;
   while(1) {
    $43 = (($38) + ($i$13<<2)|0);
    $44 = HEAP32[$43>>2]|0;
    _oggpack_write($opb,$44,4);
    $45 = (($i$13) + 1)|0;
    $46 = HEAP32[$35>>2]|0;
    $47 = ($45|0)<($46|0);
    if ($47) {
     $i$13 = $45;
    } else {
     break;
    }
   }
   $$pre = HEAP32[$vm>>2]|0;
   $39 = $$pre;
   label = 17;
  }
 } else {
  $39 = $33;
  label = 17;
 }
 if ((label|0) == 17) {
  $40 = ($39|0)>(0);
  if (!($40)) {
   return;
  }
 }
 $41 = ((($vm)) + 1028|0);
 $42 = ((($vm)) + 1092|0);
 $i$22 = 0;
 while(1) {
  _oggpack_write($opb,0,8);
  $48 = (($41) + ($i$22<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  _oggpack_write($opb,$49,8);
  $50 = (($42) + ($i$22<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  _oggpack_write($opb,$51,8);
  $52 = (($i$22) + 1)|0;
  $53 = HEAP32[$vm>>2]|0;
  $54 = ($52|0)<($53|0);
  if ($54) {
   $i$22 = $52;
  } else {
   break;
  }
 }
 return;
}
function _mapping0_forward($vb) {
 $vb = $vb|0;
 var $$ = 0, $$$i = 0, $$0$i$i = 0, $$0$i119 = 0, $$0$i17$i = 0, $$0$i9$i = 0, $$0$p$i$i = 0, $$01$i$i = 0, $$01$i12$i = 0, $$01$i4$i = 0, $$3 = 0, $$alloca_mul = 0, $$alloca_mul1 = 0, $$alloca_mul3 = 0, $$alloca_mul5 = 0, $$in = 0, $$lcssa = 0, $$phi$trans$insert$i = 0, $$pn$i$i = 0, $$pre = 0;
 var $$pre$i = 0, $$pre$phi55Z2D = 0, $$pre$phi57Z2D = 0, $$pre$phiZ2D = 0, $$pre135 = 0, $$pre136 = 0, $$pre137 = 0, $$pre138 = 0, $$pre139 = 0, $$pre140 = 0, $$pre141 = 0, $$pre142 = 0, $$pre143 = 0, $$pre144 = 0, $$pre145 = 0, $$pre146 = 0, $$pre147 = 0, $$pre148 = 0, $$pre50$i = 0, $$pre51$i = 0;
 var $$pre53 = 0, $$pre54 = 0, $$pre56 = 0, $$sink$i = 0, $$val$0$i = 0.0, $$val$0$i15 = 0.0, $$val$0$us$i = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0;
 var $1009 = 0, $101 = 0.0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0.0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0;
 var $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0;
 var $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0.0, $1060 = 0, $1061 = 0, $1062 = 0;
 var $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0.0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0.0, $1080 = 0;
 var $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0.0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0;
 var $11 = 0, $110 = 0.0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0.0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0;
 var $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0;
 var $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0.0, $1150 = 0, $1151 = 0, $1152 = 0;
 var $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0;
 var $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0.0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0;
 var $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0;
 var $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0;
 var $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0;
 var $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0;
 var $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0;
 var $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0;
 var $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0;
 var $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0;
 var $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0;
 var $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0;
 var $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0;
 var $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0;
 var $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0;
 var $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0;
 var $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0;
 var $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0;
 var $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0;
 var $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0;
 var $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0.0, $361 = 0, $362 = 0.0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0, $377 = 0, $378 = 0.0, $379 = 0.0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0.0, $384 = 0.0, $385 = 0, $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0, $395 = 0, $396 = 0.0, $397 = 0.0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0.0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0.0, $43 = 0, $430 = 0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0, $435 = 0;
 var $436 = 0.0, $437 = 0.0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0.0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0.0, $458 = 0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0.0, $462 = 0, $463 = 0, $464 = 0.0, $465 = 0.0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0.0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
 var $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0;
 var $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0;
 var $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0;
 var $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0;
 var $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $bookas$i = 0, $ch_in_bundle$0$lcssa = 0, $ch_in_bundle$012 = 0, $ch_in_bundle$1 = 0, $ch_in_bundle$2$lcssa = 0, $ch_in_bundle$218 = 0, $ch_in_bundle$3 = 0, $cshift$022$i = 0, $cshift$022$us$i = 0, $cval$0$lcssa$i = 0, $cval$0$lcssa$i122 = 0, $cval$021$i = 0, $cval$021$us$i = 0, $de$0$us$i = 0.0, $err$04$i$i = 0;
 var $err$1$i$i = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i106 = 0, $exitcond$i115 = 0, $exitcond$i21 = 0, $exitcond$i26 = 0, $exitcond$i34 = 0, $exitcond$i42 = 0, $exitcond$i50 = 0, $exitcond$i58 = 0, $exitcond$i66 = 0, $exitcond$i74 = 0, $exitcond$i82 = 0, $exitcond$i90 = 0, $exitcond$i98 = 0, $exitcond3$i = 0, $exitcond3$i16 = 0, $exitcond46$i = 0, $exitcond47$i = 0;
 var $exitcond48$i = 0, $exitcond49$i = 0, $fabs = 0.0, $fabs6$us = 0.0, $global_ampmax$0$lcssa = 0.0, $global_ampmax$042 = 0.0, $global_ampmax$042$us = 0.0, $global_ampmax$1 = 0.0, $global_ampmax$1$us = 0.0, $hx$0$lcssa$i = 0, $hx$012$i = 0, $hx$1$i = 0, $i$01$i = 0, $i$01$i13 = 0, $i$01$us$i = 0, $i$02$i = 0, $i$02$i105 = 0, $i$02$i25 = 0, $i$02$i33 = 0, $i$02$i41 = 0;
 var $i$02$i49 = 0, $i$02$i57 = 0, $i$02$i65 = 0, $i$02$i73 = 0, $i$02$i81 = 0, $i$02$i89 = 0, $i$02$i97 = 0, $i$040$i = 0, $i$043 = 0, $i$043$us = 0, $i$134 = 0, $i$135$i = 0, $i$210 = 0, $i$231$i = 0, $i$323 = 0, $ispos$i$i = 0, $ispos$i2$i = 0, $ispos1$i$i = 0, $j$030$i = 0, $j$038$us = 0;
 var $j$111$i = 0, $j$128 = 0, $j$210$i = 0, $j$211 = 0, $j$317 = 0, $k$017$i = 0, $k$123$i = 0, $k$123$us$i = 0, $k$227 = 0, $k$227$i = 0, $l$019$us$i = 0, $lx$013$i = 0, $lx$1$i = 0, $ly$0$lcssa$i = 0, $ly$014$i = 0, $ly$1$i = 0, $maxval$i = 0, $neg$i$i = 0, $neg$i3$i = 0, $neg2$i$i = 0;
 var $not$ = 0, $not$$i = 0, $not$$i111 = 0, $not$$i120 = 0, $or$cond$i = 0, $or$cond$i103 = 0, $or$cond$i114 = 0, $or$cond$i23 = 0, $or$cond$i31 = 0, $or$cond$i39 = 0, $or$cond$i47 = 0, $or$cond$i55 = 0, $or$cond$i63 = 0, $or$cond$i71 = 0, $or$cond$i79 = 0, $or$cond$i87 = 0, $or$cond$i95 = 0, $out$i = 0, $output$0$i = 0, $output$0$i100 = 0;
 var $output$0$i108 = 0, $output$0$i28 = 0, $output$0$i36 = 0, $output$0$i44 = 0, $output$0$i52 = 0, $output$0$i60 = 0, $output$0$i68 = 0, $output$0$i76 = 0, $output$0$i84 = 0, $output$0$i92 = 0, $ret$0$lcssa$i$i = 0, $ret$0$lcssa$i15$i = 0, $ret$0$lcssa$i7$i = 0, $ret$02$i$i = 0, $ret$02$i11$i = 0, $ret$02$i3$i = 0, $storemerge = 0.0, $val$0$i = 0.0, $val$0$i113 = 0, $val$0$i14 = 0.0;
 var $val$0$us$i = 0.0, $val1$0$i = 0, $x1$n$i$i = 0, $y$03$i$i = 0, $y$1$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $out$i = sp + 64|0;
 $bookas$i = sp + 32|0;
 $maxval$i = sp;
 $0 = ((($vb)) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 104|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($vb)) + 104|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($vb)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($3)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 << 2;
 $$alloca_mul = $14;
 $15 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $16 = (($14) + 7)|0;
 $17 = $16 & -8;
 $18 = ((($vb)) + 72|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + ($17))|0;
 $21 = ((($vb)) + 76|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($20|0)>($22|0);
 $24 = ((($vb)) + 68|0);
 $25 = HEAP32[$24>>2]|0;
 if ($23) {
  $26 = ($25|0)==(0|0);
  if (!($26)) {
   $27 = $25;
   $28 = (_malloc(8)|0);
   $29 = ((($vb)) + 80|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($30) + ($19))|0;
   HEAP32[$29>>2] = $31;
   $32 = ((($vb)) + 84|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($28)) + 4|0);
   HEAP32[$34>>2] = $33;
   HEAP32[$28>>2] = $27;
   HEAP32[$32>>2] = $28;
  }
  HEAP32[$21>>2] = $17;
  $35 = (_malloc($17)|0);
  HEAP32[$24>>2] = $35;
  HEAP32[$18>>2] = 0;
  $$pre135 = HEAP32[$12>>2]|0;
  $$pre136 = HEAP32[$21>>2]|0;
  $37 = $35;$38 = 0;$41 = $$pre135;$46 = $$pre136;
 } else {
  $37 = $25;$38 = $19;$41 = $13;$46 = $22;
 }
 $36 = (($37) + ($38)|0);
 $39 = (($38) + ($17))|0;
 HEAP32[$18>>2] = $39;
 $40 = $41 << 2;
 $42 = (($40) + 7)|0;
 $43 = $42 & -8;
 $44 = (($39) + ($43))|0;
 $45 = ($44|0)>($46|0);
 if ($45) {
  $47 = ($37|0)==(0|0);
  if (!($47)) {
   $48 = $37;
   $49 = (_malloc(8)|0);
   $50 = ((($vb)) + 80|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) + ($39))|0;
   HEAP32[$50>>2] = $52;
   $53 = ((($vb)) + 84|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($49)) + 4|0);
   HEAP32[$55>>2] = $54;
   HEAP32[$49>>2] = $48;
   HEAP32[$53>>2] = $49;
  }
  HEAP32[$21>>2] = $43;
  $56 = (_malloc($43)|0);
  HEAP32[$24>>2] = $56;
  HEAP32[$18>>2] = 0;
  $$pre137 = HEAP32[$12>>2]|0;
  $$pre138 = HEAP32[$21>>2]|0;
  $58 = $56;$59 = 0;$62 = $$pre137;$67 = $$pre138;
 } else {
  $58 = $37;$59 = $39;$62 = $41;$67 = $46;
 }
 $57 = (($58) + ($59)|0);
 $60 = (($59) + ($43))|0;
 HEAP32[$18>>2] = $60;
 $61 = $62 << 2;
 $63 = (($61) + 7)|0;
 $64 = $63 & -8;
 $65 = (($60) + ($64))|0;
 $66 = ($65|0)>($67|0);
 if ($66) {
  $68 = ($58|0)==(0|0);
  if (!($68)) {
   $69 = $58;
   $70 = (_malloc(8)|0);
   $71 = ((($vb)) + 80|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($72) + ($60))|0;
   HEAP32[$71>>2] = $73;
   $74 = ((($vb)) + 84|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = ((($70)) + 4|0);
   HEAP32[$76>>2] = $75;
   HEAP32[$70>>2] = $69;
   HEAP32[$74>>2] = $70;
  }
  HEAP32[$21>>2] = $64;
  $77 = (_malloc($64)|0);
  HEAP32[$24>>2] = $77;
  HEAP32[$18>>2] = 0;
  $$pre139 = HEAP32[$12>>2]|0;
  $79 = $77;$80 = 0;$85 = $$pre139;
 } else {
  $79 = $58;$80 = $60;$85 = $62;
 }
 $78 = (($79) + ($80)|0);
 $81 = (($80) + ($64))|0;
 HEAP32[$18>>2] = $81;
 $82 = ((($9)) + 4|0);
 $83 = +HEAPF32[$82>>2];
 $84 = $85 << 2;
 $$alloca_mul1 = $84;
 $86 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul1)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $87 = ((($9)) + 8|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ((($vb)) + 28|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (((($5)) + 544|0) + ($90<<2)|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ((($7)) + 56|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (($94) + (($88*52)|0)|0);
 $96 = ($90|0)!=(0);
 $97 = $96 ? 2 : 0;
 $98 = (($95) + (($97*52)|0)|0);
 $99 = ((($vb)) + 40|0);
 HEAP32[$99>>2] = $90;
 $100 = ($85|0)>(0);
 L19: do {
  if ($100) {
   $101 = (+($11|0));
   $102 = 4.0 / $101;
   $103 = (($11|0) / 2)&-1;
   $104 = $103 << 2;
   $fabs = (+Math_abs((+$102)));
   $105 = (HEAPF32[tempDoublePtr>>2]=$fabs,HEAP32[tempDoublePtr>>2]|0);
   $106 = (+($105>>>0));
   $107 = $106 * 7.1771142984289327E-7;
   $108 = $107 + -764.6162109375;
   $109 = $108;
   $110 = $109 + 0.34499999999999997;
   $111 = $110;
   $112 = ((($7)) + 4|0);
   $113 = ((($vb)) + 24|0);
   $114 = ((($vb)) + 32|0);
   $115 = $111 + -764.6162109375;
   $116 = (($11) + -1)|0;
   $117 = ($116|0)>(1);
   $118 = $111 + -382.30810546875;
   $119 = (($104) + 7)|0;
   $120 = $119 & -8;
   $121 = ((($vb)) + 80|0);
   $122 = ((($vb)) + 84|0);
   if ($117) {
    $127 = $81;$130 = $79;$global_ampmax$042$us = $83;$i$043$us = 0;
   } else {
    $212 = $81;$215 = $79;$global_ampmax$042 = $83;$i$043 = 0;
    while(1) {
     $208 = HEAP32[$vb>>2]|0;
     $209 = (($208) + ($i$043<<2)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = (($212) + ($120))|0;
     $213 = HEAP32[$21>>2]|0;
     $214 = ($211|0)>($213|0);
     if ($214) {
      $216 = ($215|0)==(0|0);
      if (!($216)) {
       $217 = $215;
       $218 = (_malloc(8)|0);
       $219 = HEAP32[$121>>2]|0;
       $220 = (($219) + ($212))|0;
       HEAP32[$121>>2] = $220;
       $221 = HEAP32[$122>>2]|0;
       $222 = ((($218)) + 4|0);
       HEAP32[$222>>2] = $221;
       HEAP32[$218>>2] = $217;
       HEAP32[$122>>2] = $218;
      }
      HEAP32[$21>>2] = $120;
      $223 = (_malloc($120)|0);
      HEAP32[$24>>2] = $223;
      HEAP32[$18>>2] = 0;
      $$pre142 = HEAP32[$21>>2]|0;
      $225 = $223;$226 = 0;$231 = $$pre142;
     } else {
      $225 = $215;$226 = $212;$231 = $213;
     }
     $224 = (($225) + ($226)|0);
     $227 = (($226) + ($120))|0;
     HEAP32[$18>>2] = $227;
     $228 = (($57) + ($i$043<<2)|0);
     HEAP32[$228>>2] = $224;
     $229 = (($227) + ($120))|0;
     $230 = ($229|0)>($231|0);
     $232 = HEAP32[$24>>2]|0;
     if ($230) {
      $233 = ($232|0)==(0|0);
      if (!($233)) {
       $234 = $232;
       $235 = (_malloc(8)|0);
       $236 = HEAP32[$121>>2]|0;
       $237 = (($236) + ($227))|0;
       HEAP32[$121>>2] = $237;
       $238 = HEAP32[$122>>2]|0;
       $239 = ((($235)) + 4|0);
       HEAP32[$239>>2] = $238;
       HEAP32[$235>>2] = $234;
       HEAP32[$122>>2] = $235;
      }
      HEAP32[$21>>2] = $120;
      $240 = (_malloc($120)|0);
      HEAP32[$24>>2] = $240;
      HEAP32[$18>>2] = 0;
      $242 = $240;$243 = 0;
     } else {
      $242 = $232;$243 = $227;
     }
     $241 = (($242) + ($243)|0);
     $244 = (($243) + ($120))|0;
     HEAP32[$18>>2] = $244;
     $245 = (($36) + ($i$043<<2)|0);
     HEAP32[$245>>2] = $241;
     $246 = HEAP32[$113>>2]|0;
     $247 = HEAP32[$89>>2]|0;
     $248 = HEAP32[$114>>2]|0;
     __vorbis_apply_window($210,$112,$5,$246,$247,$248);
     $249 = HEAP32[$89>>2]|0;
     $250 = (((($7)) + 12|0) + ($249<<2)|0);
     $251 = HEAP32[$250>>2]|0;
     $252 = HEAP32[$251>>2]|0;
     $253 = HEAP32[$245>>2]|0;
     _mdct_forward($252,$210,$253);
     $254 = HEAP32[$89>>2]|0;
     $255 = (((($7)) + 20|0) + (($254*12)|0)|0);
     _drft_forward($255,$210);
     $256 = HEAP32[$210>>2]|0;
     $257 = $256 & 2147483647;
     $258 = (+($257>>>0));
     $259 = $258 * 7.1771142984289327E-7;
     $260 = $115 + $259;
     $261 = $260;
     $262 = $261 + 0.34499999999999997;
     $263 = $262;
     HEAPF32[$210>>2] = $263;
     $264 = (($86) + ($i$043<<2)|0);
     $265 = $263 > 0.0;
     $storemerge = $265 ? 0.0 : $263;
     HEAPF32[$264>>2] = $storemerge;
     $266 = $storemerge > $global_ampmax$042;
     $global_ampmax$1 = $266 ? $storemerge : $global_ampmax$042;
     $267 = (($i$043) + 1)|0;
     $268 = HEAP32[$12>>2]|0;
     $269 = ($267|0)<($268|0);
     if (!($269)) {
      $$pre$phi55Z2D = $104;$$pre$phiZ2D = $103;$global_ampmax$0$lcssa = $global_ampmax$1;
      break L19;
     }
     $$pre140 = HEAP32[$18>>2]|0;
     $$pre141 = HEAP32[$24>>2]|0;
     $212 = $$pre140;$215 = $$pre141;$global_ampmax$042 = $global_ampmax$1;$i$043 = $267;
    }
   }
   while(1) {
    $123 = HEAP32[$vb>>2]|0;
    $124 = (($123) + ($i$043$us<<2)|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = (($127) + ($120))|0;
    $128 = HEAP32[$21>>2]|0;
    $129 = ($126|0)>($128|0);
    if ($129) {
     $131 = ($130|0)==(0|0);
     if (!($131)) {
      $132 = $130;
      $133 = (_malloc(8)|0);
      $134 = HEAP32[$121>>2]|0;
      $135 = (($134) + ($127))|0;
      HEAP32[$121>>2] = $135;
      $136 = HEAP32[$122>>2]|0;
      $137 = ((($133)) + 4|0);
      HEAP32[$137>>2] = $136;
      HEAP32[$133>>2] = $132;
      HEAP32[$122>>2] = $133;
     }
     HEAP32[$21>>2] = $120;
     $138 = (_malloc($120)|0);
     HEAP32[$24>>2] = $138;
     HEAP32[$18>>2] = 0;
     $$pre145 = HEAP32[$21>>2]|0;
     $140 = $138;$141 = 0;$146 = $$pre145;
    } else {
     $140 = $130;$141 = $127;$146 = $128;
    }
    $139 = (($140) + ($141)|0);
    $142 = (($141) + ($120))|0;
    HEAP32[$18>>2] = $142;
    $143 = (($57) + ($i$043$us<<2)|0);
    HEAP32[$143>>2] = $139;
    $144 = (($142) + ($120))|0;
    $145 = ($144|0)>($146|0);
    $147 = HEAP32[$24>>2]|0;
    if ($145) {
     $148 = ($147|0)==(0|0);
     if (!($148)) {
      $149 = $147;
      $150 = (_malloc(8)|0);
      $151 = HEAP32[$121>>2]|0;
      $152 = (($151) + ($142))|0;
      HEAP32[$121>>2] = $152;
      $153 = HEAP32[$122>>2]|0;
      $154 = ((($150)) + 4|0);
      HEAP32[$154>>2] = $153;
      HEAP32[$150>>2] = $149;
      HEAP32[$122>>2] = $150;
     }
     HEAP32[$21>>2] = $120;
     $155 = (_malloc($120)|0);
     HEAP32[$24>>2] = $155;
     HEAP32[$18>>2] = 0;
     $157 = $155;$158 = 0;
    } else {
     $157 = $147;$158 = $142;
    }
    $156 = (($157) + ($158)|0);
    $159 = (($158) + ($120))|0;
    HEAP32[$18>>2] = $159;
    $160 = (($36) + ($i$043$us<<2)|0);
    HEAP32[$160>>2] = $156;
    $161 = HEAP32[$113>>2]|0;
    $162 = HEAP32[$89>>2]|0;
    $163 = HEAP32[$114>>2]|0;
    __vorbis_apply_window($125,$112,$5,$161,$162,$163);
    $164 = HEAP32[$89>>2]|0;
    $165 = (((($7)) + 12|0) + ($164<<2)|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = HEAP32[$166>>2]|0;
    $168 = HEAP32[$160>>2]|0;
    _mdct_forward($167,$125,$168);
    $169 = HEAP32[$89>>2]|0;
    $170 = (((($7)) + 20|0) + (($169*12)|0)|0);
    _drft_forward($170,$125);
    $171 = HEAP32[$125>>2]|0;
    $172 = $171 & 2147483647;
    $173 = (+($172>>>0));
    $174 = $173 * 7.1771142984289327E-7;
    $175 = $115 + $174;
    $176 = $175;
    $177 = $176 + 0.34499999999999997;
    $178 = $177;
    HEAPF32[$125>>2] = $178;
    $179 = (($86) + ($i$043$us<<2)|0);
    HEAPF32[$179>>2] = $178;
    $203 = $178;$j$038$us = 1;
    while(1) {
     $185 = (($125) + ($j$038$us<<2)|0);
     $186 = +HEAPF32[$185>>2];
     $187 = $186 * $186;
     $188 = (($j$038$us) + 1)|0;
     $189 = (($125) + ($188<<2)|0);
     $190 = +HEAPF32[$189>>2];
     $191 = $190 * $190;
     $192 = $191 + $187;
     $fabs6$us = (+Math_abs((+$192)));
     $193 = (HEAPF32[tempDoublePtr>>2]=$fabs6$us,HEAP32[tempDoublePtr>>2]|0);
     $194 = (+($193>>>0));
     $195 = $194 * 3.5885571492144663E-7;
     $196 = $118 + $195;
     $197 = $196;
     $198 = $197 + 0.34499999999999997;
     $199 = $198;
     $200 = $188 >> 1;
     $201 = (($125) + ($200<<2)|0);
     HEAPF32[$201>>2] = $199;
     $202 = $199 > $203;
     if ($202) {
      HEAPF32[$179>>2] = $199;
      $207 = $199;
     } else {
      $207 = $203;
     }
     $204 = (($j$038$us) + 2)|0;
     $205 = ($204|0)<($116|0);
     if ($205) {
      $203 = $207;$j$038$us = $204;
     } else {
      break;
     }
    }
    $206 = $207 > 0.0;
    if ($206) {
     HEAPF32[$179>>2] = 0.0;
     $181 = 0.0;
    } else {
     $181 = $207;
    }
    $180 = $181 > $global_ampmax$042$us;
    $global_ampmax$1$us = $180 ? $181 : $global_ampmax$042$us;
    $182 = (($i$043$us) + 1)|0;
    $183 = HEAP32[$12>>2]|0;
    $184 = ($182|0)<($183|0);
    if (!($184)) {
     $$pre$phi55Z2D = $104;$$pre$phiZ2D = $103;$global_ampmax$0$lcssa = $global_ampmax$1$us;
     break L19;
    }
    $$pre143 = HEAP32[$18>>2]|0;
    $$pre144 = HEAP32[$24>>2]|0;
    $127 = $$pre143;$130 = $$pre144;$global_ampmax$042$us = $global_ampmax$1$us;$i$043$us = $182;
   }
  } else {
   $$pre53 = (($11|0) / 2)&-1;
   $$pre54 = $$pre53 << 2;
   $$pre$phi55Z2D = $$pre54;$$pre$phiZ2D = $$pre53;$global_ampmax$0$lcssa = $83;
  }
 } while(0);
 $270 = (($$pre$phi55Z2D) + 7)|0;
 $271 = $270 & -8;
 $272 = HEAP32[$18>>2]|0;
 $273 = (($272) + ($271))|0;
 $274 = HEAP32[$21>>2]|0;
 $275 = ($273|0)>($274|0);
 $276 = HEAP32[$24>>2]|0;
 if ($275) {
  $277 = ($276|0)==(0|0);
  if (!($277)) {
   $278 = $276;
   $279 = (_malloc(8)|0);
   $280 = ((($vb)) + 80|0);
   $281 = HEAP32[$280>>2]|0;
   $282 = (($281) + ($272))|0;
   HEAP32[$280>>2] = $282;
   $283 = ((($vb)) + 84|0);
   $284 = HEAP32[$283>>2]|0;
   $285 = ((($279)) + 4|0);
   HEAP32[$285>>2] = $284;
   HEAP32[$279>>2] = $278;
   HEAP32[$283>>2] = $279;
  }
  HEAP32[$21>>2] = $271;
  $286 = (_malloc($271)|0);
  HEAP32[$24>>2] = $286;
  HEAP32[$18>>2] = 0;
  $$pre146 = HEAP32[$21>>2]|0;
  $288 = $286;$289 = 0;$293 = $$pre146;
 } else {
  $288 = $276;$289 = $272;$293 = $274;
 }
 $287 = (($288) + ($289)|0);
 $290 = (($289) + ($271))|0;
 HEAP32[$18>>2] = $290;
 $291 = (($290) + ($271))|0;
 $292 = ($291|0)>($293|0);
 if ($292) {
  $294 = ($288|0)==(0|0);
  if (!($294)) {
   $295 = $288;
   $296 = (_malloc(8)|0);
   $297 = ((($vb)) + 80|0);
   $298 = HEAP32[$297>>2]|0;
   $299 = (($298) + ($290))|0;
   HEAP32[$297>>2] = $299;
   $300 = ((($vb)) + 84|0);
   $301 = HEAP32[$300>>2]|0;
   $302 = ((($296)) + 4|0);
   HEAP32[$302>>2] = $301;
   HEAP32[$296>>2] = $295;
   HEAP32[$300>>2] = $296;
  }
  HEAP32[$21>>2] = $271;
  $303 = (_malloc($271)|0);
  HEAP32[$24>>2] = $303;
  HEAP32[$18>>2] = 0;
  $305 = $303;$306 = 0;
 } else {
  $305 = $288;$306 = $290;
 }
 $304 = (($305) + ($306)|0);
 $307 = (($306) + ($271))|0;
 HEAP32[$18>>2] = $307;
 $308 = HEAP32[$12>>2]|0;
 $309 = ($308|0)>(0);
 L75: do {
  if ($309) {
   $310 = ($11|0)>(1);
   $311 = ((($7)) + 48|0);
   $312 = ((($vb)) + 80|0);
   $313 = ((($vb)) + 84|0);
   $314 = ((($98)) + 4|0);
   $315 = ((($98)) + 48|0);
   $316 = ((($98)) + 12|0);
   $326 = $307;$329 = $305;$i$134 = 0;
   while(1) {
    $317 = (((($92)) + 4|0) + ($i$134<<2)|0);
    $318 = HEAP32[$317>>2]|0;
    $319 = (($36) + ($i$134<<2)|0);
    $320 = HEAP32[$319>>2]|0;
    $321 = HEAP32[$vb>>2]|0;
    $322 = (($321) + ($i$134<<2)|0);
    $323 = HEAP32[$322>>2]|0;
    $324 = (($323) + ($$pre$phiZ2D<<2)|0);
    HEAP32[$99>>2] = $90;
    $325 = (($326) + 64)|0;
    $327 = HEAP32[$21>>2]|0;
    $328 = ($325|0)>($327|0);
    if ($328) {
     $330 = ($329|0)==(0|0);
     if (!($330)) {
      $331 = $329;
      $332 = (_malloc(8)|0);
      $333 = HEAP32[$312>>2]|0;
      $334 = (($333) + ($326))|0;
      HEAP32[$312>>2] = $334;
      $335 = HEAP32[$313>>2]|0;
      $336 = ((($332)) + 4|0);
      HEAP32[$336>>2] = $335;
      HEAP32[$332>>2] = $331;
      HEAP32[$313>>2] = $332;
     }
     HEAP32[$21>>2] = 64;
     $337 = (_malloc(64)|0);
     HEAP32[$24>>2] = $337;
     HEAP32[$18>>2] = 0;
     $339 = $337;$340 = 0;
    } else {
     $339 = $329;$340 = $326;
    }
    $338 = (($339) + ($340)|0);
    $341 = (($340) + 64)|0;
    HEAP32[$18>>2] = $341;
    $342 = (($78) + ($i$134<<2)|0);
    HEAP32[$342>>2] = $338;
    dest=$338; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    if ($310) {
     $j$128 = 0;
     while(1) {
      $343 = (($320) + ($j$128<<2)|0);
      $344 = HEAP32[$343>>2]|0;
      $345 = $344 & 2147483647;
      $346 = (+($345>>>0));
      $347 = $346 * 7.1771142984289327E-7;
      $348 = $347 + -764.6162109375;
      $349 = $348;
      $350 = $349 + 0.34499999999999997;
      $351 = $350;
      $352 = (($324) + ($j$128<<2)|0);
      HEAPF32[$352>>2] = $351;
      $353 = (($j$128) + 1)|0;
      $354 = ($353|0)<($$pre$phiZ2D|0);
      if ($354) {
       $j$128 = $353;
      } else {
       break;
      }
     }
    }
    __vp_noisemask($98,$324,$287);
    $355 = (($86) + ($i$134<<2)|0);
    $356 = +HEAPF32[$355>>2];
    __vp_tonemask($98,$323,$304,$global_ampmax$0$lcssa,$356);
    $357 = HEAP32[$98>>2]|0;
    $358 = HEAP32[$314>>2]|0;
    $359 = ((($358)) + 16|0);
    $360 = +HEAPF32[$359>>2];
    $361 = ($357|0)>(0);
    if ($361) {
     $362 = +HEAPF32[$315>>2];
     $363 = HEAP32[$316>>2]|0;
     $364 = ((($363)) + 4|0);
     $365 = HEAP32[$364>>2]|0;
     $366 = ((($358)) + 108|0);
     $367 = $362;
     $368 = $367 * 0.0050000000000000001;
     $369 = $367 * 2.9999999999999997E-4;
     $i$01$us$i = 0;
     while(1) {
      $370 = (($287) + ($i$01$us$i<<2)|0);
      $371 = +HEAPF32[$370>>2];
      $372 = (($365) + ($i$01$us$i<<2)|0);
      $373 = +HEAPF32[$372>>2];
      $374 = $373 + $371;
      $375 = +HEAPF32[$366>>2];
      $376 = $374 > $375;
      $val$0$us$i = $376 ? $375 : $374;
      $377 = (($304) + ($i$01$us$i<<2)|0);
      $378 = +HEAPF32[$377>>2];
      $379 = $378 + $360;
      $380 = $val$0$us$i < $379;
      $$val$0$us$i = $380 ? $379 : $val$0$us$i;
      $381 = (($323) + ($i$01$us$i<<2)|0);
      HEAPF32[$381>>2] = $$val$0$us$i;
      $382 = (($324) + ($i$01$us$i<<2)|0);
      $383 = +HEAPF32[$382>>2];
      $384 = $val$0$us$i - $383;
      $385 = $384 > -17.200000762939453;
      $386 = $384 + 17.200000762939453;
      $387 = $386;
      if ($385) {
       $391 = $368 * $387;
       $392 = 1.0 - $391;
       $393 = $392;
       $394 = $393 < 0.0;
       if ($394) {
        $de$0$us$i = 9.9999997473787516E-5;
       } else {
        $de$0$us$i = $393;
       }
      } else {
       $388 = $369 * $387;
       $389 = 1.0 - $388;
       $390 = $389;
       $de$0$us$i = $390;
      }
      $395 = (($320) + ($i$01$us$i<<2)|0);
      $396 = +HEAPF32[$395>>2];
      $397 = $396 * $de$0$us$i;
      HEAPF32[$395>>2] = $397;
      $398 = (($i$01$us$i) + 1)|0;
      $exitcond$i = ($398|0)==($357|0);
      if ($exitcond$i) {
       break;
      } else {
       $i$01$us$i = $398;
      }
     }
    }
    $399 = (((($92)) + 1028|0) + ($318<<2)|0);
    $400 = HEAP32[$399>>2]|0;
    $401 = (((($5)) + 800|0) + ($400<<2)|0);
    $402 = HEAP32[$401>>2]|0;
    $403 = ($402|0)==(1);
    if (!($403)) {
     $$3 = -1;
     break;
    }
    $404 = HEAP32[$311>>2]|0;
    $405 = (($404) + ($400<<2)|0);
    $406 = HEAP32[$405>>2]|0;
    $407 = (_floor1_fit($vb,$406,$324,$323)|0);
    $408 = HEAP32[$342>>2]|0;
    $409 = ((($408)) + 28|0);
    HEAP32[$409>>2] = $407;
    $410 = HEAP32[$0>>2]|0;
    $411 = ((($410)) + 104|0);
    $412 = HEAP32[$411>>2]|0;
    $413 = ((($412)) + 80|0);
    $414 = HEAP32[$413>>2]|0;
    $not$$i = ($414|0)==(0);
    if (!($not$$i)) {
     $415 = HEAP32[$342>>2]|0;
     $416 = ((($415)) + 28|0);
     $417 = HEAP32[$416>>2]|0;
     $418 = ($417|0)==(0|0);
     if (!($418)) {
      $419 = HEAP32[$98>>2]|0;
      $420 = HEAP32[$314>>2]|0;
      $421 = ((($420)) + 20|0);
      $422 = +HEAPF32[$421>>2];
      $423 = ($419|0)>(0);
      if ($423) {
       $424 = HEAP32[$316>>2]|0;
       $425 = ((($424)) + 8|0);
       $426 = HEAP32[$425>>2]|0;
       $427 = ((($420)) + 108|0);
       $i$01$i = 0;
       while(1) {
        $428 = (($287) + ($i$01$i<<2)|0);
        $429 = +HEAPF32[$428>>2];
        $430 = (($426) + ($i$01$i<<2)|0);
        $431 = +HEAPF32[$430>>2];
        $432 = $431 + $429;
        $433 = +HEAPF32[$427>>2];
        $434 = $432 > $433;
        $val$0$i = $434 ? $433 : $432;
        $435 = (($304) + ($i$01$i<<2)|0);
        $436 = +HEAPF32[$435>>2];
        $437 = $436 + $422;
        $438 = $val$0$i < $437;
        $$val$0$i = $438 ? $437 : $val$0$i;
        $439 = (($323) + ($i$01$i<<2)|0);
        HEAPF32[$439>>2] = $$val$0$i;
        $440 = (($i$01$i) + 1)|0;
        $exitcond3$i = ($440|0)==($419|0);
        if ($exitcond3$i) {
         break;
        } else {
         $i$01$i = $440;
        }
       }
      }
      $441 = HEAP32[$399>>2]|0;
      $442 = HEAP32[$311>>2]|0;
      $443 = (($442) + ($441<<2)|0);
      $444 = HEAP32[$443>>2]|0;
      $445 = (_floor1_fit($vb,$444,$324,$323)|0);
      $446 = HEAP32[$342>>2]|0;
      $447 = ((($446)) + 56|0);
      HEAP32[$447>>2] = $445;
      $448 = HEAP32[$98>>2]|0;
      $449 = HEAP32[$314>>2]|0;
      $450 = ((($449)) + 12|0);
      $451 = +HEAPF32[$450>>2];
      $452 = ($448|0)>(0);
      if ($452) {
       $453 = HEAP32[$316>>2]|0;
       $454 = HEAP32[$453>>2]|0;
       $455 = ((($449)) + 108|0);
       $i$01$i13 = 0;
       while(1) {
        $456 = (($287) + ($i$01$i13<<2)|0);
        $457 = +HEAPF32[$456>>2];
        $458 = (($454) + ($i$01$i13<<2)|0);
        $459 = +HEAPF32[$458>>2];
        $460 = $459 + $457;
        $461 = +HEAPF32[$455>>2];
        $462 = $460 > $461;
        $val$0$i14 = $462 ? $461 : $460;
        $463 = (($304) + ($i$01$i13<<2)|0);
        $464 = +HEAPF32[$463>>2];
        $465 = $464 + $451;
        $466 = $val$0$i14 < $465;
        $$val$0$i15 = $466 ? $465 : $val$0$i14;
        $467 = (($323) + ($i$01$i13<<2)|0);
        HEAPF32[$467>>2] = $$val$0$i15;
        $468 = (($i$01$i13) + 1)|0;
        $exitcond3$i16 = ($468|0)==($448|0);
        if ($exitcond3$i16) {
         break;
        } else {
         $i$01$i13 = $468;
        }
       }
      }
      $469 = HEAP32[$399>>2]|0;
      $470 = HEAP32[$311>>2]|0;
      $471 = (($470) + ($469<<2)|0);
      $472 = HEAP32[$471>>2]|0;
      $473 = (_floor1_fit($vb,$472,$324,$323)|0);
      $474 = HEAP32[$342>>2]|0;
      HEAP32[$474>>2] = $473;
      $475 = HEAP32[$399>>2]|0;
      $476 = HEAP32[$311>>2]|0;
      $477 = (($476) + ($475<<2)|0);
      $478 = HEAP32[$477>>2]|0;
      $479 = HEAP32[$342>>2]|0;
      $480 = HEAP32[$479>>2]|0;
      $481 = ((($479)) + 28|0);
      $482 = HEAP32[$481>>2]|0;
      $483 = ((($478)) + 1284|0);
      $484 = HEAP32[$483>>2]|0;
      $485 = ($480|0)!=(0|0);
      $486 = ($482|0)!=(0|0);
      $or$cond$i = $485 & $486;
      do {
       if ($or$cond$i) {
        $487 = $484 << 2;
        $488 = (($487) + 7)|0;
        $489 = $488 & -8;
        $490 = HEAP32[$18>>2]|0;
        $491 = (($490) + ($489))|0;
        $492 = HEAP32[$21>>2]|0;
        $493 = ($491|0)>($492|0);
        $494 = HEAP32[$24>>2]|0;
        if ($493) {
         $495 = ($494|0)==(0|0);
         if (!($495)) {
          $496 = $494;
          $497 = (_malloc(8)|0);
          $498 = HEAP32[$312>>2]|0;
          $499 = (($498) + ($490))|0;
          HEAP32[$312>>2] = $499;
          $500 = HEAP32[$313>>2]|0;
          $501 = ((($497)) + 4|0);
          HEAP32[$501>>2] = $500;
          HEAP32[$497>>2] = $496;
          HEAP32[$313>>2] = $497;
         }
         HEAP32[$21>>2] = $489;
         $502 = (_malloc($489)|0);
         HEAP32[$24>>2] = $502;
         HEAP32[$18>>2] = 0;
         $504 = $502;$505 = 0;
        } else {
         $504 = $494;$505 = $490;
        }
        $503 = (($504) + ($505)|0);
        $506 = (($505) + ($489))|0;
        HEAP32[$18>>2] = $506;
        $507 = ($484|0)>(0);
        if ($507) {
         $i$02$i = 0;
        } else {
         $output$0$i = $503;
         break;
        }
        while(1) {
         $508 = (($480) + ($i$02$i<<2)|0);
         $509 = HEAP32[$508>>2]|0;
         $510 = $509 & 32767;
         $511 = ($510*56174)|0;
         $512 = (($482) + ($i$02$i<<2)|0);
         $513 = HEAP32[$512>>2]|0;
         $514 = $513 & 32767;
         $515 = ($514*9362)|0;
         $516 = (($511) + 32768)|0;
         $517 = (($516) + ($515))|0;
         $518 = $517 >> 16;
         $519 = (($503) + ($i$02$i<<2)|0);
         HEAP32[$519>>2] = $518;
         $520 = HEAP32[$508>>2]|0;
         $521 = $520 & 32768;
         $522 = ($521|0)==(0);
         do {
          if (!($522)) {
           $523 = HEAP32[$512>>2]|0;
           $524 = $523 & 32768;
           $525 = ($524|0)==(0);
           if ($525) {
            break;
           }
           $526 = $518 | 32768;
           HEAP32[$519>>2] = $526;
          }
         } while(0);
         $527 = (($i$02$i) + 1)|0;
         $exitcond$i21 = ($527|0)==($484|0);
         if ($exitcond$i21) {
          $output$0$i = $503;
          break;
         } else {
          $i$02$i = $527;
         }
        }
       } else {
        $output$0$i = 0;
       }
      } while(0);
      $528 = HEAP32[$342>>2]|0;
      $529 = ((($528)) + 4|0);
      HEAP32[$529>>2] = $output$0$i;
      $530 = HEAP32[$399>>2]|0;
      $531 = HEAP32[$311>>2]|0;
      $532 = (($531) + ($530<<2)|0);
      $533 = HEAP32[$532>>2]|0;
      $534 = HEAP32[$342>>2]|0;
      $535 = HEAP32[$534>>2]|0;
      $536 = ((($534)) + 28|0);
      $537 = HEAP32[$536>>2]|0;
      $538 = ((($533)) + 1284|0);
      $539 = HEAP32[$538>>2]|0;
      $540 = ($535|0)!=(0|0);
      $541 = ($537|0)!=(0|0);
      $or$cond$i23 = $540 & $541;
      do {
       if ($or$cond$i23) {
        $542 = $539 << 2;
        $543 = (($542) + 7)|0;
        $544 = $543 & -8;
        $545 = HEAP32[$18>>2]|0;
        $546 = (($545) + ($544))|0;
        $547 = HEAP32[$21>>2]|0;
        $548 = ($546|0)>($547|0);
        $549 = HEAP32[$24>>2]|0;
        if ($548) {
         $550 = ($549|0)==(0|0);
         if (!($550)) {
          $551 = $549;
          $552 = (_malloc(8)|0);
          $553 = HEAP32[$312>>2]|0;
          $554 = (($553) + ($545))|0;
          HEAP32[$312>>2] = $554;
          $555 = HEAP32[$313>>2]|0;
          $556 = ((($552)) + 4|0);
          HEAP32[$556>>2] = $555;
          HEAP32[$552>>2] = $551;
          HEAP32[$313>>2] = $552;
         }
         HEAP32[$21>>2] = $544;
         $557 = (_malloc($544)|0);
         HEAP32[$24>>2] = $557;
         HEAP32[$18>>2] = 0;
         $559 = $557;$560 = 0;
        } else {
         $559 = $549;$560 = $545;
        }
        $558 = (($559) + ($560)|0);
        $561 = (($560) + ($544))|0;
        HEAP32[$18>>2] = $561;
        $562 = ($539|0)>(0);
        if ($562) {
         $i$02$i25 = 0;
        } else {
         $output$0$i28 = $558;
         break;
        }
        while(1) {
         $563 = (($535) + ($i$02$i25<<2)|0);
         $564 = HEAP32[$563>>2]|0;
         $565 = $564 & 32767;
         $566 = ($565*46812)|0;
         $567 = (($537) + ($i$02$i25<<2)|0);
         $568 = HEAP32[$567>>2]|0;
         $569 = $568 & 32767;
         $570 = ($569*18724)|0;
         $571 = (($566) + 32768)|0;
         $572 = (($571) + ($570))|0;
         $573 = $572 >> 16;
         $574 = (($558) + ($i$02$i25<<2)|0);
         HEAP32[$574>>2] = $573;
         $575 = HEAP32[$563>>2]|0;
         $576 = $575 & 32768;
         $577 = ($576|0)==(0);
         do {
          if (!($577)) {
           $578 = HEAP32[$567>>2]|0;
           $579 = $578 & 32768;
           $580 = ($579|0)==(0);
           if ($580) {
            break;
           }
           $581 = $573 | 32768;
           HEAP32[$574>>2] = $581;
          }
         } while(0);
         $582 = (($i$02$i25) + 1)|0;
         $exitcond$i26 = ($582|0)==($539|0);
         if ($exitcond$i26) {
          $output$0$i28 = $558;
          break;
         } else {
          $i$02$i25 = $582;
         }
        }
       } else {
        $output$0$i28 = 0;
       }
      } while(0);
      $583 = HEAP32[$342>>2]|0;
      $584 = ((($583)) + 8|0);
      HEAP32[$584>>2] = $output$0$i28;
      $585 = HEAP32[$399>>2]|0;
      $586 = HEAP32[$311>>2]|0;
      $587 = (($586) + ($585<<2)|0);
      $588 = HEAP32[$587>>2]|0;
      $589 = HEAP32[$342>>2]|0;
      $590 = HEAP32[$589>>2]|0;
      $591 = ((($589)) + 28|0);
      $592 = HEAP32[$591>>2]|0;
      $593 = ((($588)) + 1284|0);
      $594 = HEAP32[$593>>2]|0;
      $595 = ($590|0)!=(0|0);
      $596 = ($592|0)!=(0|0);
      $or$cond$i31 = $595 & $596;
      do {
       if ($or$cond$i31) {
        $597 = $594 << 2;
        $598 = (($597) + 7)|0;
        $599 = $598 & -8;
        $600 = HEAP32[$18>>2]|0;
        $601 = (($600) + ($599))|0;
        $602 = HEAP32[$21>>2]|0;
        $603 = ($601|0)>($602|0);
        $604 = HEAP32[$24>>2]|0;
        if ($603) {
         $605 = ($604|0)==(0|0);
         if (!($605)) {
          $606 = $604;
          $607 = (_malloc(8)|0);
          $608 = HEAP32[$312>>2]|0;
          $609 = (($608) + ($600))|0;
          HEAP32[$312>>2] = $609;
          $610 = HEAP32[$313>>2]|0;
          $611 = ((($607)) + 4|0);
          HEAP32[$611>>2] = $610;
          HEAP32[$607>>2] = $606;
          HEAP32[$313>>2] = $607;
         }
         HEAP32[$21>>2] = $599;
         $612 = (_malloc($599)|0);
         HEAP32[$24>>2] = $612;
         HEAP32[$18>>2] = 0;
         $614 = $612;$615 = 0;
        } else {
         $614 = $604;$615 = $600;
        }
        $613 = (($614) + ($615)|0);
        $616 = (($615) + ($599))|0;
        HEAP32[$18>>2] = $616;
        $617 = ($594|0)>(0);
        if ($617) {
         $i$02$i33 = 0;
        } else {
         $output$0$i36 = $613;
         break;
        }
        while(1) {
         $618 = (($590) + ($i$02$i33<<2)|0);
         $619 = HEAP32[$618>>2]|0;
         $620 = $619 & 32767;
         $621 = ($620*37450)|0;
         $622 = (($592) + ($i$02$i33<<2)|0);
         $623 = HEAP32[$622>>2]|0;
         $624 = $623 & 32767;
         $625 = ($624*28086)|0;
         $626 = (($621) + 32768)|0;
         $627 = (($626) + ($625))|0;
         $628 = $627 >> 16;
         $629 = (($613) + ($i$02$i33<<2)|0);
         HEAP32[$629>>2] = $628;
         $630 = HEAP32[$618>>2]|0;
         $631 = $630 & 32768;
         $632 = ($631|0)==(0);
         do {
          if (!($632)) {
           $633 = HEAP32[$622>>2]|0;
           $634 = $633 & 32768;
           $635 = ($634|0)==(0);
           if ($635) {
            break;
           }
           $636 = $628 | 32768;
           HEAP32[$629>>2] = $636;
          }
         } while(0);
         $637 = (($i$02$i33) + 1)|0;
         $exitcond$i34 = ($637|0)==($594|0);
         if ($exitcond$i34) {
          $output$0$i36 = $613;
          break;
         } else {
          $i$02$i33 = $637;
         }
        }
       } else {
        $output$0$i36 = 0;
       }
      } while(0);
      $638 = HEAP32[$342>>2]|0;
      $639 = ((($638)) + 12|0);
      HEAP32[$639>>2] = $output$0$i36;
      $640 = HEAP32[$399>>2]|0;
      $641 = HEAP32[$311>>2]|0;
      $642 = (($641) + ($640<<2)|0);
      $643 = HEAP32[$642>>2]|0;
      $644 = HEAP32[$342>>2]|0;
      $645 = HEAP32[$644>>2]|0;
      $646 = ((($644)) + 28|0);
      $647 = HEAP32[$646>>2]|0;
      $648 = ((($643)) + 1284|0);
      $649 = HEAP32[$648>>2]|0;
      $650 = ($645|0)!=(0|0);
      $651 = ($647|0)!=(0|0);
      $or$cond$i39 = $650 & $651;
      do {
       if ($or$cond$i39) {
        $652 = $649 << 2;
        $653 = (($652) + 7)|0;
        $654 = $653 & -8;
        $655 = HEAP32[$18>>2]|0;
        $656 = (($655) + ($654))|0;
        $657 = HEAP32[$21>>2]|0;
        $658 = ($656|0)>($657|0);
        $659 = HEAP32[$24>>2]|0;
        if ($658) {
         $660 = ($659|0)==(0|0);
         if (!($660)) {
          $661 = $659;
          $662 = (_malloc(8)|0);
          $663 = HEAP32[$312>>2]|0;
          $664 = (($663) + ($655))|0;
          HEAP32[$312>>2] = $664;
          $665 = HEAP32[$313>>2]|0;
          $666 = ((($662)) + 4|0);
          HEAP32[$666>>2] = $665;
          HEAP32[$662>>2] = $661;
          HEAP32[$313>>2] = $662;
         }
         HEAP32[$21>>2] = $654;
         $667 = (_malloc($654)|0);
         HEAP32[$24>>2] = $667;
         HEAP32[$18>>2] = 0;
         $669 = $667;$670 = 0;
        } else {
         $669 = $659;$670 = $655;
        }
        $668 = (($669) + ($670)|0);
        $671 = (($670) + ($654))|0;
        HEAP32[$18>>2] = $671;
        $672 = ($649|0)>(0);
        if ($672) {
         $i$02$i41 = 0;
        } else {
         $output$0$i44 = $668;
         break;
        }
        while(1) {
         $673 = (($645) + ($i$02$i41<<2)|0);
         $674 = HEAP32[$673>>2]|0;
         $675 = $674 & 32767;
         $676 = ($675*28087)|0;
         $677 = (($647) + ($i$02$i41<<2)|0);
         $678 = HEAP32[$677>>2]|0;
         $679 = $678 & 32767;
         $680 = ($679*37449)|0;
         $681 = (($676) + 32768)|0;
         $682 = (($681) + ($680))|0;
         $683 = $682 >> 16;
         $684 = (($668) + ($i$02$i41<<2)|0);
         HEAP32[$684>>2] = $683;
         $685 = HEAP32[$673>>2]|0;
         $686 = $685 & 32768;
         $687 = ($686|0)==(0);
         do {
          if (!($687)) {
           $688 = HEAP32[$677>>2]|0;
           $689 = $688 & 32768;
           $690 = ($689|0)==(0);
           if ($690) {
            break;
           }
           $691 = $683 | 32768;
           HEAP32[$684>>2] = $691;
          }
         } while(0);
         $692 = (($i$02$i41) + 1)|0;
         $exitcond$i42 = ($692|0)==($649|0);
         if ($exitcond$i42) {
          $output$0$i44 = $668;
          break;
         } else {
          $i$02$i41 = $692;
         }
        }
       } else {
        $output$0$i44 = 0;
       }
      } while(0);
      $693 = HEAP32[$342>>2]|0;
      $694 = ((($693)) + 16|0);
      HEAP32[$694>>2] = $output$0$i44;
      $695 = HEAP32[$399>>2]|0;
      $696 = HEAP32[$311>>2]|0;
      $697 = (($696) + ($695<<2)|0);
      $698 = HEAP32[$697>>2]|0;
      $699 = HEAP32[$342>>2]|0;
      $700 = HEAP32[$699>>2]|0;
      $701 = ((($699)) + 28|0);
      $702 = HEAP32[$701>>2]|0;
      $703 = ((($698)) + 1284|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = ($700|0)!=(0|0);
      $706 = ($702|0)!=(0|0);
      $or$cond$i47 = $705 & $706;
      do {
       if ($or$cond$i47) {
        $707 = $704 << 2;
        $708 = (($707) + 7)|0;
        $709 = $708 & -8;
        $710 = HEAP32[$18>>2]|0;
        $711 = (($710) + ($709))|0;
        $712 = HEAP32[$21>>2]|0;
        $713 = ($711|0)>($712|0);
        $714 = HEAP32[$24>>2]|0;
        if ($713) {
         $715 = ($714|0)==(0|0);
         if (!($715)) {
          $716 = $714;
          $717 = (_malloc(8)|0);
          $718 = HEAP32[$312>>2]|0;
          $719 = (($718) + ($710))|0;
          HEAP32[$312>>2] = $719;
          $720 = HEAP32[$313>>2]|0;
          $721 = ((($717)) + 4|0);
          HEAP32[$721>>2] = $720;
          HEAP32[$717>>2] = $716;
          HEAP32[$313>>2] = $717;
         }
         HEAP32[$21>>2] = $709;
         $722 = (_malloc($709)|0);
         HEAP32[$24>>2] = $722;
         HEAP32[$18>>2] = 0;
         $724 = $722;$725 = 0;
        } else {
         $724 = $714;$725 = $710;
        }
        $723 = (($724) + ($725)|0);
        $726 = (($725) + ($709))|0;
        HEAP32[$18>>2] = $726;
        $727 = ($704|0)>(0);
        if ($727) {
         $i$02$i49 = 0;
        } else {
         $output$0$i52 = $723;
         break;
        }
        while(1) {
         $728 = (($700) + ($i$02$i49<<2)|0);
         $729 = HEAP32[$728>>2]|0;
         $730 = $729 & 32767;
         $731 = ($730*18725)|0;
         $732 = (($702) + ($i$02$i49<<2)|0);
         $733 = HEAP32[$732>>2]|0;
         $734 = $733 & 32767;
         $735 = ($734*46811)|0;
         $736 = (($731) + 32768)|0;
         $737 = (($736) + ($735))|0;
         $738 = $737 >> 16;
         $739 = (($723) + ($i$02$i49<<2)|0);
         HEAP32[$739>>2] = $738;
         $740 = HEAP32[$728>>2]|0;
         $741 = $740 & 32768;
         $742 = ($741|0)==(0);
         do {
          if (!($742)) {
           $743 = HEAP32[$732>>2]|0;
           $744 = $743 & 32768;
           $745 = ($744|0)==(0);
           if ($745) {
            break;
           }
           $746 = $738 | 32768;
           HEAP32[$739>>2] = $746;
          }
         } while(0);
         $747 = (($i$02$i49) + 1)|0;
         $exitcond$i50 = ($747|0)==($704|0);
         if ($exitcond$i50) {
          $output$0$i52 = $723;
          break;
         } else {
          $i$02$i49 = $747;
         }
        }
       } else {
        $output$0$i52 = 0;
       }
      } while(0);
      $748 = HEAP32[$342>>2]|0;
      $749 = ((($748)) + 20|0);
      HEAP32[$749>>2] = $output$0$i52;
      $750 = HEAP32[$399>>2]|0;
      $751 = HEAP32[$311>>2]|0;
      $752 = (($751) + ($750<<2)|0);
      $753 = HEAP32[$752>>2]|0;
      $754 = HEAP32[$342>>2]|0;
      $755 = HEAP32[$754>>2]|0;
      $756 = ((($754)) + 28|0);
      $757 = HEAP32[$756>>2]|0;
      $758 = ((($753)) + 1284|0);
      $759 = HEAP32[$758>>2]|0;
      $760 = ($755|0)!=(0|0);
      $761 = ($757|0)!=(0|0);
      $or$cond$i55 = $760 & $761;
      do {
       if ($or$cond$i55) {
        $762 = $759 << 2;
        $763 = (($762) + 7)|0;
        $764 = $763 & -8;
        $765 = HEAP32[$18>>2]|0;
        $766 = (($765) + ($764))|0;
        $767 = HEAP32[$21>>2]|0;
        $768 = ($766|0)>($767|0);
        $769 = HEAP32[$24>>2]|0;
        if ($768) {
         $770 = ($769|0)==(0|0);
         if (!($770)) {
          $771 = $769;
          $772 = (_malloc(8)|0);
          $773 = HEAP32[$312>>2]|0;
          $774 = (($773) + ($765))|0;
          HEAP32[$312>>2] = $774;
          $775 = HEAP32[$313>>2]|0;
          $776 = ((($772)) + 4|0);
          HEAP32[$776>>2] = $775;
          HEAP32[$772>>2] = $771;
          HEAP32[$313>>2] = $772;
         }
         HEAP32[$21>>2] = $764;
         $777 = (_malloc($764)|0);
         HEAP32[$24>>2] = $777;
         HEAP32[$18>>2] = 0;
         $779 = $777;$780 = 0;
        } else {
         $779 = $769;$780 = $765;
        }
        $778 = (($779) + ($780)|0);
        $781 = (($780) + ($764))|0;
        HEAP32[$18>>2] = $781;
        $782 = ($759|0)>(0);
        if ($782) {
         $i$02$i57 = 0;
        } else {
         $output$0$i60 = $778;
         break;
        }
        while(1) {
         $783 = (($755) + ($i$02$i57<<2)|0);
         $784 = HEAP32[$783>>2]|0;
         $785 = $784 & 32767;
         $786 = ($785*9363)|0;
         $787 = (($757) + ($i$02$i57<<2)|0);
         $788 = HEAP32[$787>>2]|0;
         $789 = $788 & 32767;
         $790 = ($789*56173)|0;
         $791 = (($786) + 32768)|0;
         $792 = (($791) + ($790))|0;
         $793 = $792 >> 16;
         $794 = (($778) + ($i$02$i57<<2)|0);
         HEAP32[$794>>2] = $793;
         $795 = HEAP32[$783>>2]|0;
         $796 = $795 & 32768;
         $797 = ($796|0)==(0);
         do {
          if (!($797)) {
           $798 = HEAP32[$787>>2]|0;
           $799 = $798 & 32768;
           $800 = ($799|0)==(0);
           if ($800) {
            break;
           }
           $801 = $793 | 32768;
           HEAP32[$794>>2] = $801;
          }
         } while(0);
         $802 = (($i$02$i57) + 1)|0;
         $exitcond$i58 = ($802|0)==($759|0);
         if ($exitcond$i58) {
          $output$0$i60 = $778;
          break;
         } else {
          $i$02$i57 = $802;
         }
        }
       } else {
        $output$0$i60 = 0;
       }
      } while(0);
      $803 = HEAP32[$342>>2]|0;
      $804 = ((($803)) + 24|0);
      HEAP32[$804>>2] = $output$0$i60;
      $805 = HEAP32[$399>>2]|0;
      $806 = HEAP32[$311>>2]|0;
      $807 = (($806) + ($805<<2)|0);
      $808 = HEAP32[$807>>2]|0;
      $809 = HEAP32[$342>>2]|0;
      $810 = ((($809)) + 28|0);
      $811 = HEAP32[$810>>2]|0;
      $812 = ((($809)) + 56|0);
      $813 = HEAP32[$812>>2]|0;
      $814 = ((($808)) + 1284|0);
      $815 = HEAP32[$814>>2]|0;
      $816 = ($811|0)!=(0|0);
      $817 = ($813|0)!=(0|0);
      $or$cond$i63 = $816 & $817;
      do {
       if ($or$cond$i63) {
        $818 = $815 << 2;
        $819 = (($818) + 7)|0;
        $820 = $819 & -8;
        $821 = HEAP32[$18>>2]|0;
        $822 = (($821) + ($820))|0;
        $823 = HEAP32[$21>>2]|0;
        $824 = ($822|0)>($823|0);
        $825 = HEAP32[$24>>2]|0;
        if ($824) {
         $826 = ($825|0)==(0|0);
         if (!($826)) {
          $827 = $825;
          $828 = (_malloc(8)|0);
          $829 = HEAP32[$312>>2]|0;
          $830 = (($829) + ($821))|0;
          HEAP32[$312>>2] = $830;
          $831 = HEAP32[$313>>2]|0;
          $832 = ((($828)) + 4|0);
          HEAP32[$832>>2] = $831;
          HEAP32[$828>>2] = $827;
          HEAP32[$313>>2] = $828;
         }
         HEAP32[$21>>2] = $820;
         $833 = (_malloc($820)|0);
         HEAP32[$24>>2] = $833;
         HEAP32[$18>>2] = 0;
         $835 = $833;$836 = 0;
        } else {
         $835 = $825;$836 = $821;
        }
        $834 = (($835) + ($836)|0);
        $837 = (($836) + ($820))|0;
        HEAP32[$18>>2] = $837;
        $838 = ($815|0)>(0);
        if ($838) {
         $i$02$i65 = 0;
        } else {
         $output$0$i68 = $834;
         break;
        }
        while(1) {
         $839 = (($811) + ($i$02$i65<<2)|0);
         $840 = HEAP32[$839>>2]|0;
         $841 = $840 & 32767;
         $842 = ($841*56174)|0;
         $843 = (($813) + ($i$02$i65<<2)|0);
         $844 = HEAP32[$843>>2]|0;
         $845 = $844 & 32767;
         $846 = ($845*9362)|0;
         $847 = (($842) + 32768)|0;
         $848 = (($847) + ($846))|0;
         $849 = $848 >> 16;
         $850 = (($834) + ($i$02$i65<<2)|0);
         HEAP32[$850>>2] = $849;
         $851 = HEAP32[$839>>2]|0;
         $852 = $851 & 32768;
         $853 = ($852|0)==(0);
         do {
          if (!($853)) {
           $854 = HEAP32[$843>>2]|0;
           $855 = $854 & 32768;
           $856 = ($855|0)==(0);
           if ($856) {
            break;
           }
           $857 = $849 | 32768;
           HEAP32[$850>>2] = $857;
          }
         } while(0);
         $858 = (($i$02$i65) + 1)|0;
         $exitcond$i66 = ($858|0)==($815|0);
         if ($exitcond$i66) {
          $output$0$i68 = $834;
          break;
         } else {
          $i$02$i65 = $858;
         }
        }
       } else {
        $output$0$i68 = 0;
       }
      } while(0);
      $859 = HEAP32[$342>>2]|0;
      $860 = ((($859)) + 32|0);
      HEAP32[$860>>2] = $output$0$i68;
      $861 = HEAP32[$399>>2]|0;
      $862 = HEAP32[$311>>2]|0;
      $863 = (($862) + ($861<<2)|0);
      $864 = HEAP32[$863>>2]|0;
      $865 = HEAP32[$342>>2]|0;
      $866 = ((($865)) + 28|0);
      $867 = HEAP32[$866>>2]|0;
      $868 = ((($865)) + 56|0);
      $869 = HEAP32[$868>>2]|0;
      $870 = ((($864)) + 1284|0);
      $871 = HEAP32[$870>>2]|0;
      $872 = ($867|0)!=(0|0);
      $873 = ($869|0)!=(0|0);
      $or$cond$i71 = $872 & $873;
      do {
       if ($or$cond$i71) {
        $874 = $871 << 2;
        $875 = (($874) + 7)|0;
        $876 = $875 & -8;
        $877 = HEAP32[$18>>2]|0;
        $878 = (($877) + ($876))|0;
        $879 = HEAP32[$21>>2]|0;
        $880 = ($878|0)>($879|0);
        $881 = HEAP32[$24>>2]|0;
        if ($880) {
         $882 = ($881|0)==(0|0);
         if (!($882)) {
          $883 = $881;
          $884 = (_malloc(8)|0);
          $885 = HEAP32[$312>>2]|0;
          $886 = (($885) + ($877))|0;
          HEAP32[$312>>2] = $886;
          $887 = HEAP32[$313>>2]|0;
          $888 = ((($884)) + 4|0);
          HEAP32[$888>>2] = $887;
          HEAP32[$884>>2] = $883;
          HEAP32[$313>>2] = $884;
         }
         HEAP32[$21>>2] = $876;
         $889 = (_malloc($876)|0);
         HEAP32[$24>>2] = $889;
         HEAP32[$18>>2] = 0;
         $891 = $889;$892 = 0;
        } else {
         $891 = $881;$892 = $877;
        }
        $890 = (($891) + ($892)|0);
        $893 = (($892) + ($876))|0;
        HEAP32[$18>>2] = $893;
        $894 = ($871|0)>(0);
        if ($894) {
         $i$02$i73 = 0;
        } else {
         $output$0$i76 = $890;
         break;
        }
        while(1) {
         $895 = (($867) + ($i$02$i73<<2)|0);
         $896 = HEAP32[$895>>2]|0;
         $897 = $896 & 32767;
         $898 = ($897*46812)|0;
         $899 = (($869) + ($i$02$i73<<2)|0);
         $900 = HEAP32[$899>>2]|0;
         $901 = $900 & 32767;
         $902 = ($901*18724)|0;
         $903 = (($898) + 32768)|0;
         $904 = (($903) + ($902))|0;
         $905 = $904 >> 16;
         $906 = (($890) + ($i$02$i73<<2)|0);
         HEAP32[$906>>2] = $905;
         $907 = HEAP32[$895>>2]|0;
         $908 = $907 & 32768;
         $909 = ($908|0)==(0);
         do {
          if (!($909)) {
           $910 = HEAP32[$899>>2]|0;
           $911 = $910 & 32768;
           $912 = ($911|0)==(0);
           if ($912) {
            break;
           }
           $913 = $905 | 32768;
           HEAP32[$906>>2] = $913;
          }
         } while(0);
         $914 = (($i$02$i73) + 1)|0;
         $exitcond$i74 = ($914|0)==($871|0);
         if ($exitcond$i74) {
          $output$0$i76 = $890;
          break;
         } else {
          $i$02$i73 = $914;
         }
        }
       } else {
        $output$0$i76 = 0;
       }
      } while(0);
      $915 = HEAP32[$342>>2]|0;
      $916 = ((($915)) + 36|0);
      HEAP32[$916>>2] = $output$0$i76;
      $917 = HEAP32[$399>>2]|0;
      $918 = HEAP32[$311>>2]|0;
      $919 = (($918) + ($917<<2)|0);
      $920 = HEAP32[$919>>2]|0;
      $921 = HEAP32[$342>>2]|0;
      $922 = ((($921)) + 28|0);
      $923 = HEAP32[$922>>2]|0;
      $924 = ((($921)) + 56|0);
      $925 = HEAP32[$924>>2]|0;
      $926 = ((($920)) + 1284|0);
      $927 = HEAP32[$926>>2]|0;
      $928 = ($923|0)!=(0|0);
      $929 = ($925|0)!=(0|0);
      $or$cond$i79 = $928 & $929;
      do {
       if ($or$cond$i79) {
        $930 = $927 << 2;
        $931 = (($930) + 7)|0;
        $932 = $931 & -8;
        $933 = HEAP32[$18>>2]|0;
        $934 = (($933) + ($932))|0;
        $935 = HEAP32[$21>>2]|0;
        $936 = ($934|0)>($935|0);
        $937 = HEAP32[$24>>2]|0;
        if ($936) {
         $938 = ($937|0)==(0|0);
         if (!($938)) {
          $939 = $937;
          $940 = (_malloc(8)|0);
          $941 = HEAP32[$312>>2]|0;
          $942 = (($941) + ($933))|0;
          HEAP32[$312>>2] = $942;
          $943 = HEAP32[$313>>2]|0;
          $944 = ((($940)) + 4|0);
          HEAP32[$944>>2] = $943;
          HEAP32[$940>>2] = $939;
          HEAP32[$313>>2] = $940;
         }
         HEAP32[$21>>2] = $932;
         $945 = (_malloc($932)|0);
         HEAP32[$24>>2] = $945;
         HEAP32[$18>>2] = 0;
         $947 = $945;$948 = 0;
        } else {
         $947 = $937;$948 = $933;
        }
        $946 = (($947) + ($948)|0);
        $949 = (($948) + ($932))|0;
        HEAP32[$18>>2] = $949;
        $950 = ($927|0)>(0);
        if ($950) {
         $i$02$i81 = 0;
        } else {
         $output$0$i84 = $946;
         break;
        }
        while(1) {
         $951 = (($923) + ($i$02$i81<<2)|0);
         $952 = HEAP32[$951>>2]|0;
         $953 = $952 & 32767;
         $954 = ($953*37450)|0;
         $955 = (($925) + ($i$02$i81<<2)|0);
         $956 = HEAP32[$955>>2]|0;
         $957 = $956 & 32767;
         $958 = ($957*28086)|0;
         $959 = (($954) + 32768)|0;
         $960 = (($959) + ($958))|0;
         $961 = $960 >> 16;
         $962 = (($946) + ($i$02$i81<<2)|0);
         HEAP32[$962>>2] = $961;
         $963 = HEAP32[$951>>2]|0;
         $964 = $963 & 32768;
         $965 = ($964|0)==(0);
         do {
          if (!($965)) {
           $966 = HEAP32[$955>>2]|0;
           $967 = $966 & 32768;
           $968 = ($967|0)==(0);
           if ($968) {
            break;
           }
           $969 = $961 | 32768;
           HEAP32[$962>>2] = $969;
          }
         } while(0);
         $970 = (($i$02$i81) + 1)|0;
         $exitcond$i82 = ($970|0)==($927|0);
         if ($exitcond$i82) {
          $output$0$i84 = $946;
          break;
         } else {
          $i$02$i81 = $970;
         }
        }
       } else {
        $output$0$i84 = 0;
       }
      } while(0);
      $971 = HEAP32[$342>>2]|0;
      $972 = ((($971)) + 40|0);
      HEAP32[$972>>2] = $output$0$i84;
      $973 = HEAP32[$399>>2]|0;
      $974 = HEAP32[$311>>2]|0;
      $975 = (($974) + ($973<<2)|0);
      $976 = HEAP32[$975>>2]|0;
      $977 = HEAP32[$342>>2]|0;
      $978 = ((($977)) + 28|0);
      $979 = HEAP32[$978>>2]|0;
      $980 = ((($977)) + 56|0);
      $981 = HEAP32[$980>>2]|0;
      $982 = ((($976)) + 1284|0);
      $983 = HEAP32[$982>>2]|0;
      $984 = ($979|0)!=(0|0);
      $985 = ($981|0)!=(0|0);
      $or$cond$i87 = $984 & $985;
      do {
       if ($or$cond$i87) {
        $986 = $983 << 2;
        $987 = (($986) + 7)|0;
        $988 = $987 & -8;
        $989 = HEAP32[$18>>2]|0;
        $990 = (($989) + ($988))|0;
        $991 = HEAP32[$21>>2]|0;
        $992 = ($990|0)>($991|0);
        $993 = HEAP32[$24>>2]|0;
        if ($992) {
         $994 = ($993|0)==(0|0);
         if (!($994)) {
          $995 = $993;
          $996 = (_malloc(8)|0);
          $997 = HEAP32[$312>>2]|0;
          $998 = (($997) + ($989))|0;
          HEAP32[$312>>2] = $998;
          $999 = HEAP32[$313>>2]|0;
          $1000 = ((($996)) + 4|0);
          HEAP32[$1000>>2] = $999;
          HEAP32[$996>>2] = $995;
          HEAP32[$313>>2] = $996;
         }
         HEAP32[$21>>2] = $988;
         $1001 = (_malloc($988)|0);
         HEAP32[$24>>2] = $1001;
         HEAP32[$18>>2] = 0;
         $1003 = $1001;$1004 = 0;
        } else {
         $1003 = $993;$1004 = $989;
        }
        $1002 = (($1003) + ($1004)|0);
        $1005 = (($1004) + ($988))|0;
        HEAP32[$18>>2] = $1005;
        $1006 = ($983|0)>(0);
        if ($1006) {
         $i$02$i89 = 0;
        } else {
         $output$0$i92 = $1002;
         break;
        }
        while(1) {
         $1007 = (($979) + ($i$02$i89<<2)|0);
         $1008 = HEAP32[$1007>>2]|0;
         $1009 = $1008 & 32767;
         $1010 = ($1009*28087)|0;
         $1011 = (($981) + ($i$02$i89<<2)|0);
         $1012 = HEAP32[$1011>>2]|0;
         $1013 = $1012 & 32767;
         $1014 = ($1013*37449)|0;
         $1015 = (($1010) + 32768)|0;
         $1016 = (($1015) + ($1014))|0;
         $1017 = $1016 >> 16;
         $1018 = (($1002) + ($i$02$i89<<2)|0);
         HEAP32[$1018>>2] = $1017;
         $1019 = HEAP32[$1007>>2]|0;
         $1020 = $1019 & 32768;
         $1021 = ($1020|0)==(0);
         do {
          if (!($1021)) {
           $1022 = HEAP32[$1011>>2]|0;
           $1023 = $1022 & 32768;
           $1024 = ($1023|0)==(0);
           if ($1024) {
            break;
           }
           $1025 = $1017 | 32768;
           HEAP32[$1018>>2] = $1025;
          }
         } while(0);
         $1026 = (($i$02$i89) + 1)|0;
         $exitcond$i90 = ($1026|0)==($983|0);
         if ($exitcond$i90) {
          $output$0$i92 = $1002;
          break;
         } else {
          $i$02$i89 = $1026;
         }
        }
       } else {
        $output$0$i92 = 0;
       }
      } while(0);
      $1027 = HEAP32[$342>>2]|0;
      $1028 = ((($1027)) + 44|0);
      HEAP32[$1028>>2] = $output$0$i92;
      $1029 = HEAP32[$399>>2]|0;
      $1030 = HEAP32[$311>>2]|0;
      $1031 = (($1030) + ($1029<<2)|0);
      $1032 = HEAP32[$1031>>2]|0;
      $1033 = HEAP32[$342>>2]|0;
      $1034 = ((($1033)) + 28|0);
      $1035 = HEAP32[$1034>>2]|0;
      $1036 = ((($1033)) + 56|0);
      $1037 = HEAP32[$1036>>2]|0;
      $1038 = ((($1032)) + 1284|0);
      $1039 = HEAP32[$1038>>2]|0;
      $1040 = ($1035|0)!=(0|0);
      $1041 = ($1037|0)!=(0|0);
      $or$cond$i95 = $1040 & $1041;
      do {
       if ($or$cond$i95) {
        $1042 = $1039 << 2;
        $1043 = (($1042) + 7)|0;
        $1044 = $1043 & -8;
        $1045 = HEAP32[$18>>2]|0;
        $1046 = (($1045) + ($1044))|0;
        $1047 = HEAP32[$21>>2]|0;
        $1048 = ($1046|0)>($1047|0);
        $1049 = HEAP32[$24>>2]|0;
        if ($1048) {
         $1050 = ($1049|0)==(0|0);
         if (!($1050)) {
          $1051 = $1049;
          $1052 = (_malloc(8)|0);
          $1053 = HEAP32[$312>>2]|0;
          $1054 = (($1053) + ($1045))|0;
          HEAP32[$312>>2] = $1054;
          $1055 = HEAP32[$313>>2]|0;
          $1056 = ((($1052)) + 4|0);
          HEAP32[$1056>>2] = $1055;
          HEAP32[$1052>>2] = $1051;
          HEAP32[$313>>2] = $1052;
         }
         HEAP32[$21>>2] = $1044;
         $1057 = (_malloc($1044)|0);
         HEAP32[$24>>2] = $1057;
         HEAP32[$18>>2] = 0;
         $1059 = $1057;$1060 = 0;
        } else {
         $1059 = $1049;$1060 = $1045;
        }
        $1058 = (($1059) + ($1060)|0);
        $1061 = (($1060) + ($1044))|0;
        HEAP32[$18>>2] = $1061;
        $1062 = ($1039|0)>(0);
        if ($1062) {
         $i$02$i97 = 0;
        } else {
         $output$0$i100 = $1058;
         break;
        }
        while(1) {
         $1063 = (($1035) + ($i$02$i97<<2)|0);
         $1064 = HEAP32[$1063>>2]|0;
         $1065 = $1064 & 32767;
         $1066 = ($1065*18725)|0;
         $1067 = (($1037) + ($i$02$i97<<2)|0);
         $1068 = HEAP32[$1067>>2]|0;
         $1069 = $1068 & 32767;
         $1070 = ($1069*46811)|0;
         $1071 = (($1066) + 32768)|0;
         $1072 = (($1071) + ($1070))|0;
         $1073 = $1072 >> 16;
         $1074 = (($1058) + ($i$02$i97<<2)|0);
         HEAP32[$1074>>2] = $1073;
         $1075 = HEAP32[$1063>>2]|0;
         $1076 = $1075 & 32768;
         $1077 = ($1076|0)==(0);
         do {
          if (!($1077)) {
           $1078 = HEAP32[$1067>>2]|0;
           $1079 = $1078 & 32768;
           $1080 = ($1079|0)==(0);
           if ($1080) {
            break;
           }
           $1081 = $1073 | 32768;
           HEAP32[$1074>>2] = $1081;
          }
         } while(0);
         $1082 = (($i$02$i97) + 1)|0;
         $exitcond$i98 = ($1082|0)==($1039|0);
         if ($exitcond$i98) {
          $output$0$i100 = $1058;
          break;
         } else {
          $i$02$i97 = $1082;
         }
        }
       } else {
        $output$0$i100 = 0;
       }
      } while(0);
      $1083 = HEAP32[$342>>2]|0;
      $1084 = ((($1083)) + 48|0);
      HEAP32[$1084>>2] = $output$0$i100;
      $1085 = HEAP32[$399>>2]|0;
      $1086 = HEAP32[$311>>2]|0;
      $1087 = (($1086) + ($1085<<2)|0);
      $1088 = HEAP32[$1087>>2]|0;
      $1089 = HEAP32[$342>>2]|0;
      $1090 = ((($1089)) + 28|0);
      $1091 = HEAP32[$1090>>2]|0;
      $1092 = ((($1089)) + 56|0);
      $1093 = HEAP32[$1092>>2]|0;
      $1094 = ((($1088)) + 1284|0);
      $1095 = HEAP32[$1094>>2]|0;
      $1096 = ($1091|0)!=(0|0);
      $1097 = ($1093|0)!=(0|0);
      $or$cond$i103 = $1096 & $1097;
      do {
       if ($or$cond$i103) {
        $1098 = $1095 << 2;
        $1099 = (($1098) + 7)|0;
        $1100 = $1099 & -8;
        $1101 = HEAP32[$18>>2]|0;
        $1102 = (($1101) + ($1100))|0;
        $1103 = HEAP32[$21>>2]|0;
        $1104 = ($1102|0)>($1103|0);
        $1105 = HEAP32[$24>>2]|0;
        if ($1104) {
         $1106 = ($1105|0)==(0|0);
         if (!($1106)) {
          $1107 = $1105;
          $1108 = (_malloc(8)|0);
          $1109 = HEAP32[$312>>2]|0;
          $1110 = (($1109) + ($1101))|0;
          HEAP32[$312>>2] = $1110;
          $1111 = HEAP32[$313>>2]|0;
          $1112 = ((($1108)) + 4|0);
          HEAP32[$1112>>2] = $1111;
          HEAP32[$1108>>2] = $1107;
          HEAP32[$313>>2] = $1108;
         }
         HEAP32[$21>>2] = $1100;
         $1113 = (_malloc($1100)|0);
         HEAP32[$24>>2] = $1113;
         HEAP32[$18>>2] = 0;
         $1115 = $1113;$1116 = 0;
        } else {
         $1115 = $1105;$1116 = $1101;
        }
        $1114 = (($1115) + ($1116)|0);
        $1117 = (($1116) + ($1100))|0;
        HEAP32[$18>>2] = $1117;
        $1118 = ($1095|0)>(0);
        if ($1118) {
         $i$02$i105 = 0;
        } else {
         $output$0$i108 = $1114;
         break;
        }
        while(1) {
         $1119 = (($1091) + ($i$02$i105<<2)|0);
         $1120 = HEAP32[$1119>>2]|0;
         $1121 = $1120 & 32767;
         $1122 = ($1121*9363)|0;
         $1123 = (($1093) + ($i$02$i105<<2)|0);
         $1124 = HEAP32[$1123>>2]|0;
         $1125 = $1124 & 32767;
         $1126 = ($1125*56173)|0;
         $1127 = (($1122) + 32768)|0;
         $1128 = (($1127) + ($1126))|0;
         $1129 = $1128 >> 16;
         $1130 = (($1114) + ($i$02$i105<<2)|0);
         HEAP32[$1130>>2] = $1129;
         $1131 = HEAP32[$1119>>2]|0;
         $1132 = $1131 & 32768;
         $1133 = ($1132|0)==(0);
         do {
          if (!($1133)) {
           $1134 = HEAP32[$1123>>2]|0;
           $1135 = $1134 & 32768;
           $1136 = ($1135|0)==(0);
           if ($1136) {
            break;
           }
           $1137 = $1129 | 32768;
           HEAP32[$1130>>2] = $1137;
          }
         } while(0);
         $1138 = (($i$02$i105) + 1)|0;
         $exitcond$i106 = ($1138|0)==($1095|0);
         if ($exitcond$i106) {
          $output$0$i108 = $1114;
          break;
         } else {
          $i$02$i105 = $1138;
         }
        }
       } else {
        $output$0$i108 = 0;
       }
      } while(0);
      $1139 = HEAP32[$342>>2]|0;
      $1140 = ((($1139)) + 52|0);
      HEAP32[$1140>>2] = $output$0$i108;
     }
    }
    $1141 = (($i$134) + 1)|0;
    $1142 = HEAP32[$12>>2]|0;
    $1143 = ($1141|0)<($1142|0);
    if (!($1143)) {
     $$pre$phi57Z2D = $311;$1145 = $1142;
     break L75;
    }
    $$pre147 = HEAP32[$18>>2]|0;
    $$pre148 = HEAP32[$24>>2]|0;
    $326 = $$pre147;$329 = $$pre148;$i$134 = $1141;
   }
   STACKTOP = sp;return ($$3|0);
  } else {
   $$pre56 = ((($7)) + 48|0);
   $$pre$phi57Z2D = $$pre56;$1145 = $308;
  }
 } while(0);
 HEAPF32[$82>>2] = $global_ampmax$0$lcssa;
 $1144 = $1145 << 2;
 $$alloca_mul3 = $1144;
 $1146 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul3)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $$alloca_mul5 = $1144;
 $1147 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul5)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $1148 = HEAP32[$0>>2]|0;
 $1149 = ((($1148)) + 104|0);
 $1150 = HEAP32[$1149>>2]|0;
 $1151 = ((($1150)) + 80|0);
 $1152 = HEAP32[$1151>>2]|0;
 $not$$i111 = ($1152|0)!=(0);
 $1153 = $not$$i111 ? 0 : 7;
 $1154 = ((($7)) + 44|0);
 $1155 = ((($vb)) + 24|0);
 $1156 = ((($vb)) + 32|0);
 $1157 = ((($5)) + 2868|0);
 $1158 = ((($7)) + 52|0);
 $1159 = ((($out$i)) + 4|0);
 $k$227 = $1153;
 while(1) {
  $1160 = (((($9)) + 12|0) + ($k$227<<2)|0);
  $1161 = HEAP32[$1160>>2]|0;
  _oggpack_write($1161,0,1);
  $1162 = HEAP32[$1154>>2]|0;
  _oggpack_write($1161,$90,$1162);
  $1163 = HEAP32[$89>>2]|0;
  $1164 = ($1163|0)==(0);
  if (!($1164)) {
   $1165 = HEAP32[$1155>>2]|0;
   _oggpack_write($1161,$1165,1);
   $1166 = HEAP32[$1156>>2]|0;
   _oggpack_write($1161,$1166,1);
  }
  $1167 = HEAP32[$12>>2]|0;
  $1168 = ($1167|0)>(0);
  if ($1168) {
   $i$210 = 0;
   while(1) {
    $1169 = (((($92)) + 4|0) + ($i$210<<2)|0);
    $1170 = HEAP32[$1169>>2]|0;
    $1171 = (($57) + ($i$210<<2)|0);
    $1172 = HEAP32[$1171>>2]|0;
    $1173 = (((($92)) + 1028|0) + ($1170<<2)|0);
    $1174 = HEAP32[$1173>>2]|0;
    $1175 = HEAP32[$$pre$phi57Z2D>>2]|0;
    $1176 = (($1175) + ($1174<<2)|0);
    $1177 = HEAP32[$1176>>2]|0;
    $1178 = (($78) + ($i$210<<2)|0);
    $1179 = HEAP32[$1178>>2]|0;
    $1180 = (($1179) + ($k$227<<2)|0);
    $1181 = HEAP32[$1180>>2]|0;
    $1182 = ((($1177)) + 1296|0);
    $1183 = HEAP32[$1182>>2]|0;
    $1184 = ((($1177)) + 1284|0);
    $1185 = HEAP32[$1184>>2]|0;
    $1186 = HEAP32[$0>>2]|0;
    $1187 = ((($1186)) + 4|0);
    $1188 = HEAP32[$1187>>2]|0;
    $1189 = ((($1188)) + 28|0);
    $1190 = HEAP32[$1189>>2]|0;
    $1191 = ((($1190)) + 2848|0);
    $1192 = HEAP32[$1191>>2]|0;
    $1193 = ($1181|0)==(0|0);
    do {
     if ($1193) {
      _oggpack_write($1161,0,1);
      $1449 = HEAP32[$10>>2]|0;
      $1450 = (($1449|0) / 2)&-1;
      $1451 = $1450 << 2;
      _memset(($1172|0),0,($1451|0))|0;
      $$0$i119 = 0;
     } else {
      $1194 = ($1185|0)>(0);
      L309: do {
       if ($1194) {
        $1195 = ((($1183)) + 832|0);
        $i$040$i = 0;
        while(1) {
         $1196 = (($1181) + ($i$040$i<<2)|0);
         $1197 = HEAP32[$1196>>2]|0;
         $1198 = $1197 & 32767;
         $1199 = HEAP32[$1195>>2]|0;
         switch ($1199|0) {
         case 1:  {
          $1200 = $1198 >>> 2;
          $val$0$i113 = $1200;
          break;
         }
         case 2:  {
          $1201 = $1198 >>> 3;
          $val$0$i113 = $1201;
          break;
         }
         case 3:  {
          $1202 = (($1198>>>0) / 12)&-1;
          $val$0$i113 = $1202;
          break;
         }
         case 4:  {
          $1203 = $1198 >>> 4;
          $val$0$i113 = $1203;
          break;
         }
         default: {
          $val$0$i113 = $1198;
         }
         }
         $1204 = $1197 & 32768;
         $1205 = $1204 | $val$0$i113;
         HEAP32[$1196>>2] = $1205;
         $1206 = (($i$040$i) + 1)|0;
         $exitcond49$i = ($1206|0)==($1185|0);
         if ($exitcond49$i) {
          break L309;
         } else {
          $i$040$i = $1206;
         }
        }
       }
      } while(0);
      $1207 = HEAP32[$1181>>2]|0;
      HEAP32[$out$i>>2] = $1207;
      $1208 = ((($1181)) + 4|0);
      $1209 = HEAP32[$1208>>2]|0;
      HEAP32[$1159>>2] = $1209;
      $1210 = ($1185|0)>(2);
      $1211 = ((($1177)) + 1292|0);
      if ($1210) {
       $i$135$i = 2;
       while(1) {
        $1212 = (($i$135$i) + -2)|0;
        $1213 = (((($1177)) + 1032|0) + ($1212<<2)|0);
        $1214 = HEAP32[$1213>>2]|0;
        $1215 = (((($1177)) + 780|0) + ($1212<<2)|0);
        $1216 = HEAP32[$1215>>2]|0;
        $1217 = (((($1183)) + 836|0) + ($1214<<2)|0);
        $1218 = HEAP32[$1217>>2]|0;
        $1219 = (((($1183)) + 836|0) + ($1216<<2)|0);
        $1220 = HEAP32[$1219>>2]|0;
        $1221 = (($1181) + ($1214<<2)|0);
        $1222 = HEAP32[$1221>>2]|0;
        $1223 = (($1181) + ($1216<<2)|0);
        $1224 = HEAP32[$1223>>2]|0;
        $1225 = (((($1183)) + 836|0) + ($i$135$i<<2)|0);
        $1226 = HEAP32[$1225>>2]|0;
        $1227 = $1222 & 32767;
        $1228 = $1224 & 32767;
        $1229 = (($1228) - ($1227))|0;
        $1230 = (($1220) - ($1218))|0;
        $ispos$i$i = ($1229|0)>(-1);
        $neg$i$i = (0 - ($1229))|0;
        $1231 = $ispos$i$i ? $1229 : $neg$i$i;
        $1232 = (($1226) - ($1218))|0;
        $1233 = Math_imul($1231, $1232)|0;
        $1234 = (($1233|0) / ($1230|0))&-1;
        $1235 = ($1229|0)<(0);
        $1236 = (0 - ($1234))|0;
        $$0$p$i$i = $1235 ? $1236 : $1234;
        $$0$i$i = (($$0$p$i$i) + ($1227))|0;
        $1237 = (($1181) + ($i$135$i<<2)|0);
        $1238 = HEAP32[$1237>>2]|0;
        $1239 = $1238 & 32768;
        $1240 = ($1239|0)!=(0);
        $1241 = ($1238|0)==($$0$i$i|0);
        $or$cond$i114 = $1240 | $1241;
        if ($or$cond$i114) {
         $1242 = $$0$i$i | 32768;
         HEAP32[$1237>>2] = $1242;
         $1243 = (($out$i) + ($i$135$i<<2)|0);
         HEAP32[$1243>>2] = 0;
        } else {
         $1244 = HEAP32[$1211>>2]|0;
         $1245 = (($1244) - ($$0$i$i))|0;
         $1246 = ($1245|0)<($$0$i$i|0);
         $$$i = $1246 ? $1245 : $$0$i$i;
         $1247 = (($1238) - ($$0$i$i))|0;
         $1248 = ($1247|0)<(0);
         do {
          if ($1248) {
           $1249 = (0 - ($$$i))|0;
           $1250 = ($1247|0)<($1249|0);
           if ($1250) {
            $1251 = $1247 ^ -1;
            $1252 = (($$$i) + ($1251))|0;
            $val1$0$i = $1252;
            break;
           } else {
            $1253 = $1247 << 1;
            $1254 = $1253 ^ -1;
            $val1$0$i = $1254;
            break;
           }
          } else {
           $1255 = ($$$i|0)>($1247|0);
           if ($1255) {
            $1257 = $1247 << 1;
            $val1$0$i = $1257;
            break;
           } else {
            $1256 = (($$$i) + ($1247))|0;
            $val1$0$i = $1256;
            break;
           }
          }
         } while(0);
         $1258 = (($out$i) + ($i$135$i<<2)|0);
         HEAP32[$1258>>2] = $val1$0$i;
         HEAP32[$1221>>2] = $1227;
         $1259 = HEAP32[$1223>>2]|0;
         $1260 = $1259 & 32767;
         HEAP32[$1223>>2] = $1260;
        }
        $1261 = (($i$135$i) + 1)|0;
        $exitcond48$i = ($1261|0)==($1185|0);
        if ($exitcond48$i) {
         break;
        } else {
         $i$135$i = $1261;
        }
       }
       $$pre$i = HEAP32[$out$i>>2]|0;
       $$pre50$i = HEAP32[$1159>>2]|0;
       $1280 = $$pre$i;$1287 = $$pre50$i;
      } else {
       $1280 = $1207;$1287 = $1209;
      }
      _oggpack_write($1161,1,1);
      $1262 = ((($1177)) + 1308|0);
      $1263 = HEAP32[$1262>>2]|0;
      $1264 = (($1263) + 1)|0;
      HEAP32[$1262>>2] = $1264;
      $1265 = HEAP32[$1211>>2]|0;
      $1266 = (($1265) + -1)|0;
      $1267 = ($1266|0)==(0);
      if ($1267) {
       $1268 = ((($1177)) + 1304|0);
       $1269 = HEAP32[$1268>>2]|0;
       HEAP32[$1268>>2] = $1269;
       $1389 = $1268;$ret$0$lcssa$i7$i = 0;
      } else {
       $$01$i$i = $1266;$ret$02$i$i = 0;
       while(1) {
        $1270 = $$01$i$i >>> 1;
        $1271 = (($ret$02$i$i) + 1)|0;
        $1272 = ($1270|0)==(0);
        if ($1272) {
         $ret$0$lcssa$i$i = $1271;
         break;
        } else {
         $$01$i$i = $1270;$ret$02$i$i = $1271;
        }
       }
       $1273 = $ret$0$lcssa$i$i << 1;
       $1274 = ((($1177)) + 1304|0);
       $1275 = HEAP32[$1274>>2]|0;
       $1276 = (($1275) + ($1273))|0;
       HEAP32[$1274>>2] = $1276;
       if ($1267) {
        $1389 = $1274;$ret$0$lcssa$i7$i = 0;
       } else {
        $$01$i4$i = $1266;$ret$02$i3$i = 0;
        while(1) {
         $1277 = $$01$i4$i >>> 1;
         $1278 = (($ret$02$i3$i) + 1)|0;
         $1279 = ($1277|0)==(0);
         if ($1279) {
          $1389 = $1274;$ret$0$lcssa$i7$i = $1278;
          break;
         } else {
          $$01$i4$i = $1277;$ret$02$i3$i = $1278;
         }
        }
       }
      }
      _oggpack_write($1161,$1280,$ret$0$lcssa$i7$i);
      $1281 = HEAP32[$1211>>2]|0;
      $1282 = (($1281) + -1)|0;
      $1283 = ($1282|0)==(0);
      if ($1283) {
       $ret$0$lcssa$i15$i = 0;
      } else {
       $$01$i12$i = $1282;$ret$02$i11$i = 0;
       while(1) {
        $1284 = $$01$i12$i >>> 1;
        $1285 = (($ret$02$i11$i) + 1)|0;
        $1286 = ($1284|0)==(0);
        if ($1286) {
         $ret$0$lcssa$i15$i = $1285;
         break;
        } else {
         $$01$i12$i = $1284;$ret$02$i11$i = $1285;
        }
       }
      }
      _oggpack_write($1161,$1287,$ret$0$lcssa$i15$i);
      $1288 = HEAP32[$1183>>2]|0;
      $1289 = ($1288|0)>(0);
      if ($1289) {
       $1290 = ((($1177)) + 1300|0);
       $i$231$i = 0;$j$030$i = 2;
       while(1) {
        $1291 = (((($1183)) + 4|0) + ($i$231$i<<2)|0);
        $1292 = HEAP32[$1291>>2]|0;
        $1293 = (((($1183)) + 128|0) + ($1292<<2)|0);
        $1294 = HEAP32[$1293>>2]|0;
        $1295 = (((($1183)) + 192|0) + ($1292<<2)|0);
        $1296 = HEAP32[$1295>>2]|0;
        $1297 = 1 << $1296;
        ;HEAP32[$bookas$i>>2]=0|0;HEAP32[$bookas$i+4>>2]=0|0;HEAP32[$bookas$i+8>>2]=0|0;HEAP32[$bookas$i+12>>2]=0|0;HEAP32[$bookas$i+16>>2]=0|0;HEAP32[$bookas$i+20>>2]=0|0;HEAP32[$bookas$i+24>>2]=0|0;HEAP32[$bookas$i+28>>2]=0|0;
        $1298 = ($1296|0)==(0);
        if (!($1298)) {
         ;HEAP32[$maxval$i>>2]=0|0;HEAP32[$maxval$i+4>>2]=0|0;HEAP32[$maxval$i+8>>2]=0|0;HEAP32[$maxval$i+12>>2]=0|0;HEAP32[$maxval$i+16>>2]=0|0;HEAP32[$maxval$i+20>>2]=0|0;HEAP32[$maxval$i+24>>2]=0|0;HEAP32[$maxval$i+28>>2]=0|0;
         $1299 = ($1296|0)==(31);
         if (!($1299)) {
          $k$017$i = 0;
          while(1) {
           $1315 = ((((($1183)) + 320|0) + ($1292<<5)|0) + ($k$017$i<<2)|0);
           $1316 = HEAP32[$1315>>2]|0;
           $1317 = ($1316|0)<(0);
           if ($1317) {
            $$sink$i = 1;
           } else {
            $1318 = (((($1190)) + 1824|0) + ($1316<<2)|0);
            $1319 = HEAP32[$1318>>2]|0;
            $1320 = ((($1319)) + 4|0);
            $1321 = HEAP32[$1320>>2]|0;
            $$sink$i = $1321;
           }
           $1322 = (($maxval$i) + ($k$017$i<<2)|0);
           HEAP32[$1322>>2] = $$sink$i;
           $1323 = (($k$017$i) + 1)|0;
           $1324 = ($1323|0)<($1297|0);
           if ($1324) {
            $k$017$i = $1323;
           } else {
            break;
           }
          }
         }
         $1300 = ($1294|0)>(0);
         if ($1300) {
          if ($1299) {
           $cshift$022$i = 0;$cval$021$i = 0;$k$123$i = 0;
           while(1) {
            $1325 = (($bookas$i) + ($k$123$i<<2)|0);
            $1326 = HEAP32[$1325>>2]|0;
            $1327 = $1326 << $cshift$022$i;
            $1328 = $1327 | $cval$021$i;
            $1329 = (($cshift$022$i) + 31)|0;
            $1330 = (($k$123$i) + 1)|0;
            $exitcond46$i = ($1330|0)==($1294|0);
            if ($exitcond46$i) {
             $cval$0$lcssa$i = $1328;
             break;
            } else {
             $cshift$022$i = $1329;$cval$021$i = $1328;$k$123$i = $1330;
            }
           }
          } else {
           $cshift$022$us$i = 0;$cval$021$us$i = 0;$k$123$us$i = 0;
           while(1) {
            $1313 = (($k$123$us$i) + ($j$030$i))|0;
            $1314 = (($out$i) + ($1313<<2)|0);
            $1303 = HEAP32[$1314>>2]|0;
            $l$019$us$i = 0;
            while(1) {
             $1301 = (($maxval$i) + ($l$019$us$i<<2)|0);
             $1302 = HEAP32[$1301>>2]|0;
             $1304 = ($1303|0)<($1302|0);
             if ($1304) {
              label = 239;
              break;
             }
             $1305 = (($l$019$us$i) + 1)|0;
             $1306 = ($1305|0)<($1297|0);
             if ($1306) {
              $l$019$us$i = $1305;
             } else {
              label = 240;
              break;
             }
            }
            if ((label|0) == 239) {
             label = 0;
             $1307 = (($bookas$i) + ($k$123$us$i<<2)|0);
             HEAP32[$1307>>2] = $l$019$us$i;
             $1309 = $l$019$us$i;
            }
            else if ((label|0) == 240) {
             label = 0;
             $$phi$trans$insert$i = (($bookas$i) + ($k$123$us$i<<2)|0);
             $$pre51$i = HEAP32[$$phi$trans$insert$i>>2]|0;
             $1309 = $$pre51$i;
            }
            $1308 = $1309 << $cshift$022$us$i;
            $1310 = $1308 | $cval$021$us$i;
            $1311 = (($cshift$022$us$i) + ($1296))|0;
            $1312 = (($k$123$us$i) + 1)|0;
            $exitcond$i115 = ($1312|0)==($1294|0);
            if ($exitcond$i115) {
             $cval$0$lcssa$i = $1310;
             break;
            } else {
             $cshift$022$us$i = $1311;$cval$021$us$i = $1310;$k$123$us$i = $1312;
            }
           }
          }
          $1331 = ($cval$0$lcssa$i|0)<(0);
          if ($1331) {
           $$0$i17$i = 0;
          } else {
           $cval$0$lcssa$i122 = $cval$0$lcssa$i;
           label = 248;
          }
         } else {
          $cval$0$lcssa$i122 = 0;
          label = 248;
         }
         do {
          if ((label|0) == 248) {
           label = 0;
           $$in = (((($1183)) + 256|0) + ($1292<<2)|0);
           $1332 = HEAP32[$$in>>2]|0;
           $1333 = (((($1192) + (($1332*56)|0)|0)) + 12|0);
           $1334 = HEAP32[$1333>>2]|0;
           $1335 = ((($1334)) + 4|0);
           $1336 = HEAP32[$1335>>2]|0;
           $1337 = ($1336|0)>($cval$0$lcssa$i122|0);
           if (!($1337)) {
            $$0$i17$i = 0;
            break;
           }
           $1338 = (((($1192) + (($1332*56)|0)|0)) + 20|0);
           $1339 = HEAP32[$1338>>2]|0;
           $1340 = (($1339) + ($cval$0$lcssa$i122<<2)|0);
           $1341 = HEAP32[$1340>>2]|0;
           $1342 = ((($1334)) + 8|0);
           $1343 = HEAP32[$1342>>2]|0;
           $1344 = (($1343) + ($cval$0$lcssa$i122)|0);
           $1345 = HEAP8[$1344>>0]|0;
           $1346 = $1345 << 24 >> 24;
           _oggpack_write($1161,$1341,$1346);
           $1347 = HEAP32[$1333>>2]|0;
           $1348 = ((($1347)) + 8|0);
           $1349 = HEAP32[$1348>>2]|0;
           $1350 = (($1349) + ($cval$0$lcssa$i122)|0);
           $1351 = HEAP8[$1350>>0]|0;
           $1352 = $1351 << 24 >> 24;
           $$0$i17$i = $1352;
          }
         } while(0);
         $1353 = HEAP32[$1290>>2]|0;
         $1354 = (($1353) + ($$0$i17$i))|0;
         HEAP32[$1290>>2] = $1354;
        }
        $1355 = ($1294|0)>(0);
        if ($1355) {
         $k$227$i = 0;
         while(1) {
          $1356 = (($bookas$i) + ($k$227$i<<2)|0);
          $1357 = HEAP32[$1356>>2]|0;
          $1358 = ((((($1183)) + 320|0) + ($1292<<5)|0) + ($1357<<2)|0);
          $1359 = HEAP32[$1358>>2]|0;
          $1360 = ($1359|0)>(-1);
          do {
           if ($1360) {
            $1361 = (($k$227$i) + ($j$030$i))|0;
            $1362 = (($out$i) + ($1361<<2)|0);
            $1363 = HEAP32[$1362>>2]|0;
            $1364 = (((($1192) + (($1359*56)|0)|0)) + 4|0);
            $1365 = HEAP32[$1364>>2]|0;
            $1366 = ($1363|0)<($1365|0);
            if (!($1366)) {
             break;
            }
            $1367 = ($1363|0)<(0);
            do {
             if ($1367) {
              $$0$i9$i = 0;
             } else {
              $1368 = (((($1192) + (($1359*56)|0)|0)) + 12|0);
              $1369 = HEAP32[$1368>>2]|0;
              $1370 = ((($1369)) + 4|0);
              $1371 = HEAP32[$1370>>2]|0;
              $1372 = ($1371|0)>($1363|0);
              if (!($1372)) {
               $$0$i9$i = 0;
               break;
              }
              $1373 = (((($1192) + (($1359*56)|0)|0)) + 20|0);
              $1374 = HEAP32[$1373>>2]|0;
              $1375 = (($1374) + ($1363<<2)|0);
              $1376 = HEAP32[$1375>>2]|0;
              $1377 = ((($1369)) + 8|0);
              $1378 = HEAP32[$1377>>2]|0;
              $1379 = (($1378) + ($1363)|0);
              $1380 = HEAP8[$1379>>0]|0;
              $1381 = $1380 << 24 >> 24;
              _oggpack_write($1161,$1376,$1381);
              $1382 = HEAP32[$1368>>2]|0;
              $1383 = ((($1382)) + 8|0);
              $1384 = HEAP32[$1383>>2]|0;
              $1385 = (($1384) + ($1363)|0);
              $1386 = HEAP8[$1385>>0]|0;
              $1387 = $1386 << 24 >> 24;
              $$0$i9$i = $1387;
             }
            } while(0);
            $1388 = HEAP32[$1389>>2]|0;
            $1390 = (($1388) + ($$0$i9$i))|0;
            HEAP32[$1389>>2] = $1390;
           }
          } while(0);
          $1391 = (($k$227$i) + 1)|0;
          $exitcond47$i = ($1391|0)==($1294|0);
          if ($exitcond47$i) {
           break;
          } else {
           $k$227$i = $1391;
          }
         }
        }
        $1392 = (($1294) + ($j$030$i))|0;
        $1393 = (($i$231$i) + 1)|0;
        $1394 = HEAP32[$1183>>2]|0;
        $1395 = ($1393|0)<($1394|0);
        if ($1395) {
         $i$231$i = $1393;$j$030$i = $1392;
        } else {
         break;
        }
       }
      }
      $1396 = HEAP32[$1181>>2]|0;
      $1397 = ((($1183)) + 832|0);
      $1398 = HEAP32[$1397>>2]|0;
      $1399 = Math_imul($1398, $1396)|0;
      $1400 = HEAP32[$89>>2]|0;
      $1401 = (($1190) + ($1400<<2)|0);
      $1402 = HEAP32[$1401>>2]|0;
      $1403 = (($1402|0) / 2)&-1;
      $1404 = HEAP32[$1184>>2]|0;
      $1405 = ($1404|0)>(1);
      if ($1405) {
       $hx$012$i = 0;$j$111$i = 1;$lx$013$i = 0;$ly$014$i = $1399;
       while(1) {
        $1409 = (((($1177)) + 260|0) + ($j$111$i<<2)|0);
        $1410 = HEAP32[$1409>>2]|0;
        $1411 = (($1181) + ($1410<<2)|0);
        $1412 = HEAP32[$1411>>2]|0;
        $1413 = $1412 & 32767;
        $1414 = ($1413|0)==($1412|0);
        do {
         if ($1414) {
          $1415 = HEAP32[$1397>>2]|0;
          $1416 = Math_imul($1415, $1412)|0;
          $1417 = (((($1183)) + 836|0) + ($1410<<2)|0);
          $1418 = HEAP32[$1417>>2]|0;
          $1419 = (($1416) - ($ly$014$i))|0;
          $1420 = (($1418) - ($lx$013$i))|0;
          $ispos$i2$i = ($1419|0)>(-1);
          $neg$i3$i = (0 - ($1419))|0;
          $1421 = $ispos$i2$i ? $1419 : $neg$i3$i;
          $1422 = (($1419|0) / ($1420|0))&-1;
          $1423 = $1419 >> 31;
          $1424 = $1423 | 1;
          $1425 = Math_imul($1422, $1420)|0;
          $ispos1$i$i = ($1425|0)>(-1);
          $neg2$i$i = (0 - ($1425))|0;
          $1426 = $ispos1$i$i ? $1425 : $neg2$i$i;
          $1427 = (($1421) - ($1426))|0;
          $1428 = ($1403|0)>($1418|0);
          $x1$n$i$i = $1428 ? $1418 : $1403;
          $1429 = ($x1$n$i$i|0)>($lx$013$i|0);
          if ($1429) {
           $1430 = (($1172) + ($lx$013$i<<2)|0);
           HEAP32[$1430>>2] = $ly$014$i;
          }
          $1431 = (($lx$013$i) + 1)|0;
          $1432 = ($1431|0)<($x1$n$i$i|0);
          if ($1432) {
           $1438 = $1431;$err$04$i$i = 0;$y$03$i$i = $ly$014$i;
          } else {
           $hx$1$i = $1418;$lx$1$i = $1418;$ly$1$i = $1416;
           break;
          }
          while(1) {
           $1433 = (($err$04$i$i) + ($1427))|0;
           $1434 = ($1433|0)<($1420|0);
           $1435 = $1434 ? 0 : $1424;
           $1436 = $1434 ? 0 : $1420;
           $err$1$i$i = (($1433) - ($1436))|0;
           $$pn$i$i = (($y$03$i$i) + ($1422))|0;
           $y$1$i$i = (($$pn$i$i) + ($1435))|0;
           $1437 = (($1172) + ($1438<<2)|0);
           HEAP32[$1437>>2] = $y$1$i$i;
           $1439 = (($1438) + 1)|0;
           $1440 = ($1439|0)<($x1$n$i$i|0);
           if ($1440) {
            $1438 = $1439;$err$04$i$i = $err$1$i$i;$y$03$i$i = $y$1$i$i;
           } else {
            $hx$1$i = $1418;$lx$1$i = $1418;$ly$1$i = $1416;
            break;
           }
          }
         } else {
          $hx$1$i = $hx$012$i;$lx$1$i = $lx$013$i;$ly$1$i = $ly$014$i;
         }
        } while(0);
        $1441 = (($j$111$i) + 1)|0;
        $1442 = HEAP32[$1184>>2]|0;
        $1443 = ($1441|0)<($1442|0);
        if ($1443) {
         $hx$012$i = $hx$1$i;$j$111$i = $1441;$lx$013$i = $lx$1$i;$ly$014$i = $ly$1$i;
        } else {
         $hx$0$lcssa$i = $hx$1$i;$ly$0$lcssa$i = $ly$1$i;
         break;
        }
       }
      } else {
       $hx$0$lcssa$i = 0;$ly$0$lcssa$i = $1399;
      }
      $1406 = HEAP32[$10>>2]|0;
      $1407 = (($1406|0) / 2)&-1;
      $1408 = ($hx$0$lcssa$i|0)<($1407|0);
      if ($1408) {
       $j$210$i = $hx$0$lcssa$i;
      } else {
       $$0$i119 = 1;
       break;
      }
      while(1) {
       $1444 = (($1172) + ($j$210$i<<2)|0);
       HEAP32[$1444>>2] = $ly$0$lcssa$i;
       $1445 = (($j$210$i) + 1)|0;
       $1446 = HEAP32[$10>>2]|0;
       $1447 = (($1446|0) / 2)&-1;
       $1448 = ($1445|0)<($1447|0);
       if ($1448) {
        $j$210$i = $1445;
       } else {
        $$0$i119 = 1;
        break;
       }
      }
     }
    } while(0);
    $1452 = (($15) + ($i$210<<2)|0);
    HEAP32[$1452>>2] = $$0$i119;
    $1453 = (($i$210) + 1)|0;
    $1454 = HEAP32[$12>>2]|0;
    $1455 = ($1453|0)<($1454|0);
    if ($1455) {
     $i$210 = $1453;
    } else {
     $$lcssa = $1454;
     break;
    }
   }
  } else {
   $$lcssa = $1167;
  }
  $1456 = HEAP32[$89>>2]|0;
  $1457 = ((((($5)) + 3240|0) + (($1456*60)|0)|0) + ($k$227<<2)|0);
  $1458 = HEAP32[$1457>>2]|0;
  __vp_couple_quantize_normalize($k$227,$1157,$98,$92,$36,$57,$15,$1458,$$lcssa);
  $1459 = HEAP32[$92>>2]|0;
  $1460 = ($1459|0)>(0);
  if ($1460) {
   $i$323 = 0;
   while(1) {
    $1461 = (((($92)) + 1092|0) + ($i$323<<2)|0);
    $1462 = HEAP32[$1461>>2]|0;
    $1463 = HEAP32[$12>>2]|0;
    $1464 = ($1463|0)>(0);
    if ($1464) {
     $1517 = $1463;$ch_in_bundle$012 = 0;$j$211 = 0;
     while(1) {
      $1465 = (((($92)) + 4|0) + ($j$211<<2)|0);
      $1466 = HEAP32[$1465>>2]|0;
      $1467 = ($1466|0)==($i$323|0);
      if ($1467) {
       $1468 = (($1147) + ($ch_in_bundle$012<<2)|0);
       $1469 = (($15) + ($j$211<<2)|0);
       $1470 = HEAP32[$1469>>2]|0;
       $not$ = ($1470|0)!=(0);
       $$ = $not$&1;
       HEAP32[$1468>>2] = $$;
       $1471 = (($57) + ($j$211<<2)|0);
       $1472 = HEAP32[$1471>>2]|0;
       $1473 = (($ch_in_bundle$012) + 1)|0;
       $1474 = (($1146) + ($ch_in_bundle$012<<2)|0);
       HEAP32[$1474>>2] = $1472;
       $$pre = HEAP32[$12>>2]|0;
       $1477 = $$pre;$ch_in_bundle$1 = $1473;
      } else {
       $1477 = $1517;$ch_in_bundle$1 = $ch_in_bundle$012;
      }
      $1475 = (($j$211) + 1)|0;
      $1476 = ($1475|0)<($1477|0);
      if ($1476) {
       $1517 = $1477;$ch_in_bundle$012 = $ch_in_bundle$1;$j$211 = $1475;
      } else {
       $ch_in_bundle$0$lcssa = $ch_in_bundle$1;
       break;
      }
     }
    } else {
     $ch_in_bundle$0$lcssa = 0;
    }
    $1478 = (((($5)) + 1312|0) + ($1462<<2)|0);
    $1479 = HEAP32[$1478>>2]|0;
    $1480 = (59548 + ($1479<<2)|0);
    $1481 = HEAP32[$1480>>2]|0;
    $1482 = ((($1481)) + 20|0);
    $1483 = HEAP32[$1482>>2]|0;
    $1484 = HEAP32[$1158>>2]|0;
    $1485 = (($1484) + ($1462<<2)|0);
    $1486 = HEAP32[$1485>>2]|0;
    $1487 = (FUNCTION_TABLE_iiiiii[$1483 & 31]($vb,$1486,$1146,$1147,$ch_in_bundle$0$lcssa)|0);
    $1488 = HEAP32[$12>>2]|0;
    $1489 = ($1488|0)>(0);
    if ($1489) {
     $ch_in_bundle$218 = 0;$j$317 = 0;
     while(1) {
      $1490 = (((($92)) + 4|0) + ($j$317<<2)|0);
      $1491 = HEAP32[$1490>>2]|0;
      $1492 = ($1491|0)==($i$323|0);
      if ($1492) {
       $1493 = (($57) + ($j$317<<2)|0);
       $1494 = HEAP32[$1493>>2]|0;
       $1495 = (($ch_in_bundle$218) + 1)|0;
       $1496 = (($1146) + ($ch_in_bundle$218<<2)|0);
       HEAP32[$1496>>2] = $1494;
       $ch_in_bundle$3 = $1495;
      } else {
       $ch_in_bundle$3 = $ch_in_bundle$218;
      }
      $1497 = (($j$317) + 1)|0;
      $exitcond = ($1497|0)==($1488|0);
      if ($exitcond) {
       $ch_in_bundle$2$lcssa = $ch_in_bundle$3;
       break;
      } else {
       $ch_in_bundle$218 = $ch_in_bundle$3;$j$317 = $1497;
      }
     }
    } else {
     $ch_in_bundle$2$lcssa = 0;
    }
    $1498 = HEAP32[$1478>>2]|0;
    $1499 = (59548 + ($1498<<2)|0);
    $1500 = HEAP32[$1499>>2]|0;
    $1501 = ((($1500)) + 24|0);
    $1502 = HEAP32[$1501>>2]|0;
    $1503 = HEAP32[$1158>>2]|0;
    $1504 = (($1503) + ($1462<<2)|0);
    $1505 = HEAP32[$1504>>2]|0;
    (FUNCTION_TABLE_iiiiiiiii[$1502 & 31]($1161,$vb,$1505,$1146,$1147,$ch_in_bundle$2$lcssa,$1487,$i$323)|0);
    $1506 = (($i$323) + 1)|0;
    $1507 = HEAP32[$92>>2]|0;
    $1508 = ($1506|0)<($1507|0);
    if ($1508) {
     $i$323 = $1506;
    } else {
     break;
    }
   }
  }
  $1509 = (($k$227) + 1)|0;
  $1510 = HEAP32[$0>>2]|0;
  $1511 = ((($1510)) + 104|0);
  $1512 = HEAP32[$1511>>2]|0;
  $1513 = ((($1512)) + 80|0);
  $1514 = HEAP32[$1513>>2]|0;
  $not$$i120 = ($1514|0)!=(0);
  $1515 = $not$$i120 ? 14 : 7;
  $1516 = ($k$227|0)<($1515|0);
  if ($1516) {
   $k$227 = $1509;
  } else {
   $$3 = 0;
   break;
  }
 }
 STACKTOP = sp;return ($$3|0);
}
function _vorbis_encode_tonemask_setup($vi,$s,$block,$att,$max,$in) {
 $vi = $vi|0;
 $s = +$s;
 $block = $block|0;
 $att = $att|0;
 $max = $max|0;
 $in = $in|0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $9 = 0.0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (~~(($s)));
 $1 = (+($0|0));
 $2 = $s - $1;
 $3 = ((($vi)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (((($4)) + 2852|0) + ($block<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($att) + (($0*20)|0)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (+($8|0));
 $10 = 1.0 - $2;
 $11 = $9 * $10;
 $12 = (($0) + 1)|0;
 $13 = (($att) + (($12*20)|0)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (+($14|0));
 $16 = $15 * $2;
 $17 = $16 + $11;
 $18 = $17;
 $19 = ((($6)) + 12|0);
 HEAPF32[$19>>2] = $18;
 $20 = (((($att) + (($0*20)|0)|0)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (+($21|0));
 $23 = $22 * $10;
 $24 = (((($att) + (($12*20)|0)|0)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (+($25|0));
 $27 = $26 * $2;
 $28 = $27 + $23;
 $29 = $28;
 $30 = ((($6)) + 16|0);
 HEAPF32[$30>>2] = $29;
 $31 = (((($att) + (($0*20)|0)|0)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (+($32|0));
 $34 = $33 * $10;
 $35 = (((($att) + (($12*20)|0)|0)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (+($36|0));
 $38 = $37 * $2;
 $39 = $38 + $34;
 $40 = $39;
 $41 = ((($6)) + 20|0);
 HEAPF32[$41>>2] = $40;
 $42 = (((($att) + (($0*20)|0)|0)) + 12|0);
 $43 = +HEAPF32[$42>>2];
 $44 = $43;
 $45 = $44 * $10;
 $46 = (((($att) + (($12*20)|0)|0)) + 12|0);
 $47 = +HEAPF32[$46>>2];
 $48 = $47;
 $49 = $48 * $2;
 $50 = $49 + $45;
 $51 = $50;
 $52 = ((($6)) + 24|0);
 HEAPF32[$52>>2] = $51;
 $53 = (((($att) + (($0*20)|0)|0)) + 16|0);
 $54 = +HEAPF32[$53>>2];
 $55 = $54;
 $56 = $55 * $10;
 $57 = (((($att) + (($12*20)|0)|0)) + 16|0);
 $58 = +HEAPF32[$57>>2];
 $59 = $58;
 $60 = $59 * $2;
 $61 = $60 + $56;
 $62 = $61;
 $63 = ((($6)) + 28|0);
 HEAPF32[$63>>2] = $62;
 $64 = (($max) + ($0<<2)|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (+($65|0));
 $67 = $66 * $10;
 $68 = (($max) + ($12<<2)|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (+($69|0));
 $71 = $70 * $2;
 $72 = $71 + $67;
 $73 = $72;
 $74 = ((($6)) + 496|0);
 HEAPF32[$74>>2] = $73;
 $i$01 = 0;
 while(1) {
  $75 = ((($in) + (($0*68)|0)|0) + ($i$01<<2)|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (+($76|0));
  $78 = $77 * $10;
  $79 = ((($in) + (($12*68)|0)|0) + ($i$01<<2)|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (+($80|0));
  $82 = $81 * $2;
  $83 = $82 + $78;
  $84 = $83;
  $85 = (((($6)) + 36|0) + ($i$01<<2)|0);
  HEAPF32[$85>>2] = $84;
  $86 = (($i$01) + 1)|0;
  $exitcond = ($86|0)==(17);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $86;
  }
 }
 return;
}
function _vorbis_encode_noisebias_setup($vi,$s,$block,$suppress,$in,$guard,$userbias) {
 $vi = $vi|0;
 $s = +$s;
 $block = $block|0;
 $suppress = $suppress|0;
 $in = $in|0;
 $guard = $guard|0;
 $userbias = +$userbias;
 var $$phi$trans$insert = 0, $$phi$trans$insert15 = 0, $$phi$trans$insert18 = 0, $$pre = 0.0, $$pre16 = 0.0, $$pre19 = 0.0, $0 = 0, $1 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0;
 var $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0;
 var $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0;
 var $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0.0;
 var $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $exitcond = 0, $exitcond$1 = 0, $exitcond$2 = 0, $exitcond7 = 0, $exitcond7$1 = 0, $exitcond7$2 = 0, $i$04 = 0, $i$04$1 = 0, $i$04$2 = 0, $storemerge = 0.0;
 var $storemerge$1 = 0.0, $storemerge$121 = 0.0, $storemerge$2 = 0.0, $storemerge$220 = 0.0, $storemerge22 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (~~(($s)));
 $1 = (+($0|0));
 $2 = $s - $1;
 $3 = ((($vi)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (((($4)) + 2852|0) + ($block<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($suppress) + ($0<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (+($8|0));
 $10 = 1.0 - $2;
 $11 = $9 * $10;
 $12 = (($0) + 1)|0;
 $13 = (($suppress) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (+($14|0));
 $16 = $15 * $2;
 $17 = $16 + $11;
 $18 = $17;
 $19 = ((($6)) + 108|0);
 HEAPF32[$19>>2] = $18;
 $20 = (($guard) + (($block*12)|0)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($6)) + 120|0);
 HEAP32[$22>>2] = $21;
 $23 = (((($guard) + (($block*12)|0)|0)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($6)) + 124|0);
 HEAP32[$25>>2] = $24;
 $26 = (((($guard) + (($block*12)|0)|0)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($6)) + 128|0);
 HEAP32[$28>>2] = $27;
 $i$04 = 0;
 while(1) {
  $29 = ((($in) + (($0*204)|0)|0) + ($i$04<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (+($30|0));
  $32 = $31 * $10;
  $33 = ((($in) + (($12*204)|0)|0) + ($i$04<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (+($34|0));
  $36 = $35 * $2;
  $37 = $36 + $32;
  $38 = $37;
  $39 = (((($6)) + 132|0) + ($i$04<<2)|0);
  HEAPF32[$39>>2] = $38;
  $40 = (($i$04) + 1)|0;
  $exitcond7 = ($40|0)==(17);
  if ($exitcond7) {
   $i$04$1 = 0;
   break;
  } else {
   $i$04 = $40;
  }
 }
 while(1) {
  $74 = ((((($in) + (($0*204)|0)|0)) + 68|0) + ($i$04$1<<2)|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (+($75|0));
  $77 = $76 * $10;
  $78 = ((((($in) + (($12*204)|0)|0)) + 68|0) + ($i$04$1<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (+($79|0));
  $81 = $80 * $2;
  $82 = $81 + $77;
  $83 = $82;
  $84 = (((($6)) + 200|0) + ($i$04$1<<2)|0);
  HEAPF32[$84>>2] = $83;
  $85 = (($i$04$1) + 1)|0;
  $exitcond7$1 = ($85|0)==(17);
  if ($exitcond7$1) {
   $i$04$2 = 0;
   break;
  } else {
   $i$04$1 = $85;
  }
 }
 while(1) {
  $86 = ((((($in) + (($0*204)|0)|0)) + 136|0) + ($i$04$2<<2)|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (+($87|0));
  $89 = $88 * $10;
  $90 = ((((($in) + (($12*204)|0)|0)) + 136|0) + ($i$04$2<<2)|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (+($91|0));
  $93 = $92 * $2;
  $94 = $93 + $89;
  $95 = $94;
  $96 = (((($6)) + 268|0) + ($i$04$2<<2)|0);
  HEAPF32[$96>>2] = $95;
  $97 = (($i$04$2) + 1)|0;
  $exitcond7$2 = ($97|0)==(17);
  if ($exitcond7$2) {
   break;
  } else {
   $i$04$2 = $97;
  }
 }
 $98 = ((($6)) + 132|0);
 $99 = +HEAPF32[$98>>2];
 $46 = $99 + 6.0;
 $100 = $99;
 $101 = $100 + $userbias;
 $102 = $101;
 $103 = $102 < $46;
 $storemerge22 = $103 ? $46 : $102;
 HEAPF32[$98>>2] = $storemerge22;
 $41 = 1;
 while(1) {
  $$phi$trans$insert = (((($6)) + 132|0) + ($41<<2)|0);
  $$pre = +HEAPF32[$$phi$trans$insert>>2];
  $42 = $$pre;
  $43 = $42 + $userbias;
  $44 = $43;
  $45 = $44 < $46;
  $storemerge = $45 ? $46 : $44;
  HEAPF32[$$phi$trans$insert>>2] = $storemerge;
  $47 = (($41) + 1)|0;
  $exitcond = ($47|0)==(17);
  if ($exitcond) {
   break;
  } else {
   $41 = $47;
  }
 }
 $48 = ((($6)) + 200|0);
 $49 = +HEAPF32[$48>>2];
 $50 = $49 + 6.0;
 $51 = $49;
 $52 = $51 + $userbias;
 $53 = $52;
 $54 = $53 < $50;
 $storemerge$121 = $54 ? $50 : $53;
 HEAPF32[$48>>2] = $storemerge$121;
 $55 = 1;
 while(1) {
  $$phi$trans$insert15 = (((($6)) + 200|0) + ($55<<2)|0);
  $$pre16 = +HEAPF32[$$phi$trans$insert15>>2];
  $56 = $$pre16;
  $57 = $56 + $userbias;
  $58 = $57;
  $59 = $58 < $50;
  $storemerge$1 = $59 ? $50 : $58;
  HEAPF32[$$phi$trans$insert15>>2] = $storemerge$1;
  $60 = (($55) + 1)|0;
  $exitcond$1 = ($60|0)==(17);
  if ($exitcond$1) {
   break;
  } else {
   $55 = $60;
  }
 }
 $61 = ((($6)) + 268|0);
 $62 = +HEAPF32[$61>>2];
 $63 = $62 + 6.0;
 $64 = $62;
 $65 = $64 + $userbias;
 $66 = $65;
 $67 = $66 < $63;
 $storemerge$220 = $67 ? $63 : $66;
 HEAPF32[$61>>2] = $storemerge$220;
 $68 = 1;
 while(1) {
  $$phi$trans$insert18 = (((($6)) + 268|0) + ($68<<2)|0);
  $$pre19 = +HEAPF32[$$phi$trans$insert18>>2];
  $69 = $$pre19;
  $70 = $69 + $userbias;
  $71 = $70;
  $72 = $71 < $63;
  $storemerge$2 = $72 ? $63 : $71;
  HEAPF32[$$phi$trans$insert18>>2] = $storemerge$2;
  $73 = (($68) + 1)|0;
  $exitcond$2 = ($73|0)==(17);
  if ($exitcond$2) {
   break;
  } else {
   $68 = $73;
  }
 }
 return;
}
function _vorbis_encode_init_vbr($vi,$channels,$rate,$base_quality) {
 $vi = $vi|0;
 $channels = $channels|0;
 $rate = $rate|0;
 $base_quality = +$base_quality;
 var $$$i$i = 0, $$$i16$i = 0.0, $$$i20$i = 0.0, $$$i26$i = 0.0, $$$i32$i = 0.0, $$$i6$i = 0.0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$ph = 0, $$0$i14$1$i$i$i = 0, $$0$i14$2$i$i$i = 0, $$0$i14$3$i$i$i = 0, $$0$i14$i$i$i = 0, $$0$i4$1$i$i$i = 0, $$0$i4$2$i$i$i = 0, $$0$i4$3$i$i$i = 0, $$0$i4$i$i$i = 0, $$0$i9$i$i$i = 0, $$01$i = 0.0;
 var $$2$i$i = 0, $$2$i17$i = 0, $$2$i21$i = 0, $$2$i27$i = 0, $$2$i33$i = 0, $$ch$2$i$i$i = 0, $$maxbook$0$i$i = 0, $$maxbook$2$i$i = 0, $$maxclass$0$i$i = 0, $$phi$trans$insert$i$i = 0, $$pre = 0.0, $$pre$i = 0.0, $$pre$i$i = 0.0, $$pre$i$i$i = 0, $$pre$i$i1 = 0, $$pre$i1$i = 0.0, $$pre$i8$i = 0, $$pre$phi$i$iZ2D = 0.0, $$pre$phi3$i$iZ2D = 0, $$pre$phi72$i$i$iZ2D = 0;
 var $$pre14$i$i = 0, $$pre19$i$i = 0, $$pre2$i$i = 0, $$pre21$i$i = 0, $$pre67$i$i$i = 0, $$pre68$i = 0, $$pre68$i$i$i = 0, $$pre69$i = 0, $$pre69$i$i$i = 0, $$pre70$i$i$i = 0, $$pre71$i$i$i = 0, $$sink$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0;
 var $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0.0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0.0, $1020 = 0, $1021 = 0;
 var $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0;
 var $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0.0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0;
 var $1059 = 0, $106 = 0.0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0.0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0;
 var $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0;
 var $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0.0, $11 = 0, $110 = 0, $1100 = 0.0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0.0, $1105 = 0.0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0.0, $1111 = 0.0;
 var $1112 = 0.0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0;
 var $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0;
 var $1149 = 0.0, $115 = 0, $1150 = 0.0, $1151 = 0.0, $1152 = 0.0, $1153 = 0, $1154 = 0.0, $1155 = 0.0, $1156 = 0.0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0.0, $1165 = 0.0, $1166 = 0;
 var $1167 = 0.0, $1168 = 0.0, $1169 = 0.0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0;
 var $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0;
 var $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0;
 var $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0;
 var $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0;
 var $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0;
 var $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0;
 var $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0;
 var $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0.0, $1315 = 0, $1316 = 0.0, $1317 = 0.0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0.0, $1324 = 0.0, $1325 = 0.0, $1326 = 0, $1327 = 0, $1328 = 0.0;
 var $1329 = 0.0, $133 = 0, $1330 = 0.0, $1331 = 0.0, $1332 = 0.0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0.0, $1344 = 0.0, $1345 = 0.0, $1346 = 0;
 var $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0.0, $1361 = 0, $1362 = 0, $1363 = 0.0, $1364 = 0;
 var $1365 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0;
 var $244 = 0.0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0;
 var $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0, $278 = 0.0, $279 = 0.0, $28 = 0.0;
 var $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0, $295 = 0, $296 = 0.0, $297 = 0.0, $298 = 0.0;
 var $299 = 0, $3 = 0.0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0;
 var $316 = 0, $317 = 0, $318 = 0.0, $319 = 0.0, $32 = 0.0, $320 = 0.0, $321 = 0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0, $328 = 0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0.0, $332 = 0, $333 = 0.0;
 var $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0.0, $341 = 0.0, $342 = 0, $343 = 0, $344 = 0, $345 = 0.0, $346 = 0.0, $347 = 0, $348 = 0.0, $349 = 0.0, $35 = 0, $350 = 0.0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0.0, $390 = 0, $391 = 0, $392 = 0.0, $393 = 0, $394 = 0, $395 = 0.0, $396 = 0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $4 = 0.0, $40 = 0, $400 = 0, $401 = 0.0, $402 = 0.0, $403 = 0.0, $404 = 0.0, $405 = 0.0;
 var $406 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0, $41 = 0.0, $410 = 0.0, $411 = 0.0, $412 = 0, $413 = 0, $414 = 0, $415 = 0.0, $416 = 0.0, $417 = 0, $418 = 0, $419 = 0, $42 = 0.0, $420 = 0, $421 = 0, $422 = 0.0, $423 = 0.0;
 var $424 = 0.0, $425 = 0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0, $435 = 0.0, $436 = 0.0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0.0, $441 = 0.0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0.0, $450 = 0, $451 = 0, $452 = 0.0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0.0, $458 = 0.0, $459 = 0, $46 = 0.0;
 var $460 = 0, $461 = 0.0, $462 = 0.0, $463 = 0, $464 = 0.0, $465 = 0.0, $466 = 0, $467 = 0, $468 = 0, $469 = 0.0, $47 = 0.0, $470 = 0.0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0.0, $477 = 0.0, $478 = 0.0;
 var $479 = 0, $48 = 0.0, $480 = 0.0, $481 = 0.0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0.0, $49 = 0.0, $490 = 0.0, $491 = 0, $492 = 0, $493 = 0, $494 = 0.0, $495 = 0.0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0.0, $5 = 0.0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0.0, $530 = 0, $531 = 0.0;
 var $532 = 0, $533 = 0.0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0.0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0.0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0.0, $563 = 0, $564 = 0.0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0.0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0.0, $596 = 0, $597 = 0.0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0.0, $627 = 0, $628 = 0.0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0.0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0.0, $641 = 0, $642 = 0, $643 = 0, $644 = 0.0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0.0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0.0, $656 = 0.0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0.0, $662 = 0.0, $663 = 0.0, $664 = 0, $665 = 0, $666 = 0.0, $667 = 0.0, $668 = 0.0, $669 = 0, $67 = 0.0, $670 = 0.0, $671 = 0.0, $672 = 0, $673 = 0, $674 = 0, $675 = 0.0, $676 = 0;
 var $677 = 0, $678 = 0, $679 = 0.0, $68 = 0.0, $680 = 0.0, $681 = 0, $682 = 0, $683 = 0.0, $684 = 0.0, $685 = 0.0, $686 = 0.0, $687 = 0, $688 = 0, $689 = 0.0, $69 = 0, $690 = 0, $691 = 0.0, $692 = 0.0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0.0, $697 = 0.0, $698 = 0.0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0.0, $702 = 0.0, $703 = 0.0, $704 = 0, $705 = 0.0, $706 = 0.0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0.0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0.0, $715 = 0.0, $716 = 0, $717 = 0, $718 = 0.0, $719 = 0.0, $72 = 0, $720 = 0.0, $721 = 0.0, $722 = 0, $723 = 0, $724 = 0.0, $725 = 0, $726 = 0, $727 = 0, $728 = 0.0, $729 = 0.0, $73 = 0;
 var $730 = 0, $731 = 0, $732 = 0, $733 = 0.0, $734 = 0.0, $735 = 0.0, $736 = 0, $737 = 0, $738 = 0.0, $739 = 0.0, $74 = 0, $740 = 0.0, $741 = 0, $742 = 0.0, $743 = 0.0, $744 = 0, $745 = 0, $746 = 0, $747 = 0.0, $748 = 0;
 var $749 = 0, $75 = 0, $750 = 0, $751 = 0.0, $752 = 0.0, $753 = 0, $754 = 0, $755 = 0.0, $756 = 0.0, $757 = 0.0, $758 = 0.0, $759 = 0, $76 = 0.0, $760 = 0, $761 = 0.0, $762 = 0, $763 = 0.0, $764 = 0.0, $765 = 0, $766 = 0;
 var $767 = 0, $768 = 0.0, $769 = 0.0, $77 = 0.0, $770 = 0.0, $771 = 0, $772 = 0, $773 = 0.0, $774 = 0.0, $775 = 0.0, $776 = 0, $777 = 0.0, $778 = 0.0, $779 = 0, $78 = 0.0, $780 = 0, $781 = 0, $782 = 0.0, $783 = 0, $784 = 0;
 var $785 = 0, $786 = 0.0, $787 = 0.0, $788 = 0, $789 = 0, $79 = 0, $790 = 0.0, $791 = 0.0, $792 = 0.0, $793 = 0.0, $794 = 0, $795 = 0, $796 = 0.0, $797 = 0, $798 = 0, $799 = 0, $8 = 0.0, $80 = 0, $800 = 0.0, $801 = 0.0;
 var $802 = 0, $803 = 0, $804 = 0.0, $805 = 0.0, $806 = 0.0, $807 = 0, $808 = 0, $809 = 0, $81 = 0.0, $810 = 0.0, $811 = 0.0, $812 = 0.0, $813 = 0.0, $814 = 0, $815 = 0.0, $816 = 0, $817 = 0.0, $818 = 0.0, $819 = 0, $82 = 0.0;
 var $820 = 0, $821 = 0.0, $822 = 0.0, $823 = 0.0, $824 = 0, $825 = 0, $826 = 0, $827 = 0.0, $828 = 0.0, $829 = 0.0, $83 = 0.0, $830 = 0.0, $831 = 0, $832 = 0.0, $833 = 0, $834 = 0.0, $835 = 0.0, $836 = 0, $837 = 0, $838 = 0;
 var $839 = 0, $84 = 0, $840 = 0.0, $841 = 0.0, $842 = 0.0, $843 = 0, $844 = 0, $845 = 0, $846 = 0.0, $847 = 0.0, $848 = 0.0, $849 = 0.0, $85 = 0, $850 = 0, $851 = 0.0, $852 = 0, $853 = 0.0, $854 = 0.0, $855 = 0, $856 = 0;
 var $857 = 0, $858 = 0, $859 = 0.0, $86 = 0, $860 = 0.0, $861 = 0.0, $862 = 0, $863 = 0, $864 = 0, $865 = 0.0, $866 = 0.0, $867 = 0.0, $868 = 0.0, $869 = 0, $87 = 0, $870 = 0.0, $871 = 0, $872 = 0, $873 = 0, $874 = 0;
 var $875 = 0, $876 = 0, $877 = 0, $878 = 0.0, $879 = 0.0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0.0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0.0, $89 = 0.0, $890 = 0, $891 = 0, $892 = 0;
 var $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0.0, $899 = 0.0, $9 = 0, $90 = 0.0, $900 = 0, $901 = 0, $902 = 0.0, $903 = 0.0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0;
 var $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0.0, $922 = 0.0, $923 = 0, $924 = 0, $925 = 0.0, $926 = 0.0, $927 = 0, $928 = 0;
 var $929 = 0, $93 = 0.0, $930 = 0, $931 = 0, $932 = 0.0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0.0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0;
 var $947 = 0, $948 = 0, $949 = 0, $95 = 0.0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0;
 var $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0;
 var $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $booklist$053$i$i$i = 0, $booklist$2$1$i$i$i = 0;
 var $booklist$2$2$i$i$i = 0, $booklist$2$3$i$i$i = 0, $booklist$2$i$i$i = 0, $booklist$344$i$i$i = 0, $booklist$5$1$i$i$i = 0, $booklist$5$2$i$i$i = 0, $booklist$5$3$i$i$i = 0, $booklist$5$i$i$i = 0, $ch$0$lcssa$i$i$i = 0, $ch$1$lcssa$i$i$i = 0, $ch$231$i$i$i = 0, $ch$4$i$i$i = 0, $exitcond$i$i = 0, $exitcond$i18$i = 0, $exitcond$i23$i = 0, $exitcond$i29$i = 0, $exitcond$i35$i = 0, $exitcond$i4$i = 0, $exitcond$i451$i = 0, $exitcond10$i$i = 0;
 var $exitcond11$i$i = 0, $exitcond12$i$i = 0, $exitcond18$i$i = 0, $exitcond19$i$i = 0, $freq$0$i$i$i = 0.0, $freq$1$i$i$i = 0.0, $freq$1$in$i$i$i = 0.0, $freq$1$in$in$i$i$i = 0, $freq$1$in$in$in$i$i$i = 0, $freq$2$i$i$i = 0.0, $i$0$be$i$i = 0, $i$013$i$i = 0, $i$014$i$i = 0, $i$03$i$i = 0, $i$03$i22$i = 0, $i$03$i28$i = 0, $i$03$i34$i = 0, $i$05$i$i$i$i = 0, $i$05$i1$1$i$i$i = 0, $i$05$i1$2$i$i$i = 0;
 var $i$05$i1$3$i$i$i = 0, $i$05$i1$i$i$i = 0, $i$05$i11$1$i$i$i = 0, $i$05$i11$2$i$i$i = 0, $i$05$i11$3$i$i$i = 0, $i$05$i11$i$i$i = 0, $i$05$i6$i$i$i = 0, $i$053$i = 0, $i$056$i$i$i = 0, $i$07$i$i = 0, $i$08$i$i = 0, $i$154$i$i$i = 0, $i$16$i$i = 0, $i$18$i$i = 0, $i$22$i52$i = 0, $i$247$i$i$i = 0, $i$25$i$i = 0, $i$345$i$i$i = 0, $i$437$i$i$i = 0, $j$0$lcssa$i$i = 0;
 var $j$013$i$i = 0, $j$032$i$i$i = 0, $j$05$i$i = 0, $k$03$i$i = 0, $k2$030$i$i$i = 0, $maxbook$010$i$i = 0, $maxbook$2$lcssa$i$i = 0, $maxbook$24$i$i = 0, $maxclass$014$i$i = 0, $or$cond$i$i = 0, $or$cond$i$i2 = 0, $or$cond$i15$i = 0, $or$cond$i19$i = 0, $or$cond$i25$i = 0, $or$cond$i31$i = 0, $p$0$i$i = 0, $p$0$i11$i = 0, $p$0$i13$i = 0, $p$0$i9$i = 0, $phitmp$i = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = ($rate|0)<(1);
 do {
  if ($0) {
   $$0$i$ph = -131;
  } else {
   $1 = ((($vi)) + 28|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = $base_quality;
   $4 = $3 + 9.9999999999999995E-8;
   $5 = $4;
   $6 = !($5 >= 1.0);
   $$01$i = $6 ? $5 : 0.99989998340606689;
   $7 = ((($2)) + 3416|0);
   HEAPF32[$7>>2] = $$01$i;
   $8 = $$01$i;
   $9 = ((($2)) + 3400|0);
   $11 = 60784;$i$08$i$i = 0;
   while(1) {
    $10 = HEAP32[$11>>2]|0;
    $12 = ((($10)) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($13|0)==(-1);
    $15 = ($13|0)==($channels|0);
    $or$cond$i$i = $14 | $15;
    if ($or$cond$i$i) {
     $16 = ((($10)) + 16|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ($17|0)>($rate|0);
     if (!($18)) {
      $19 = ((($10)) + 20|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = ($20|0)<($rate|0);
      if (!($21)) {
       $22 = HEAP32[$10>>2]|0;
       $23 = ((($10)) + 8|0);
       $24 = HEAP32[$23>>2]|0;
       $25 = +HEAPF64[$24>>3];
       $26 = $25 > $8;
       if (!($26)) {
        $27 = (($24) + ($22<<3)|0);
        $28 = +HEAPF64[$27>>3];
        $29 = $28 < $8;
        if (!($29)) {
         break;
        }
       }
      }
     }
    }
    $i$0$be$i$i = (($i$08$i$i) + 1)|0;
    $56 = (60784 + ($i$0$be$i$i<<2)|0);
    $57 = ($i$0$be$i$i|0)==(17);
    if ($57) {
     label = 17;
     break;
    } else {
     $11 = $56;$i$08$i$i = $i$0$be$i$i;
    }
   }
   if ((label|0) == 17) {
    $58 = ((($2)) + 3396|0);
    HEAP32[$58>>2] = 0;
    $$0$i$ph = -130;
    break;
   }
   $30 = ($22|0)>(0);
   L14: do {
    if ($30) {
     $32 = $25;$j$05$i$i = 0;
     while(1) {
      $31 = !($8 >= $32);
      $$pre19$i$i = (($j$05$i$i) + 1)|0;
      if (!($31)) {
       $33 = (($24) + ($$pre19$i$i<<3)|0);
       $34 = +HEAPF64[$33>>3];
       $35 = $8 < $34;
       if ($35) {
        $j$0$lcssa$i$i = $j$05$i$i;
        break L14;
       }
      }
      $36 = ($$pre19$i$i|0)<($22|0);
      if (!($36)) {
       $j$0$lcssa$i$i = $$pre19$i$i;
       break L14;
      }
      $$phi$trans$insert$i$i = (($24) + ($$pre19$i$i<<3)|0);
      $$pre$i$i = +HEAPF64[$$phi$trans$insert$i$i>>3];
      $32 = $$pre$i$i;$j$05$i$i = $$pre19$i$i;
     }
    } else {
     $j$0$lcssa$i$i = 0;
    }
   } while(0);
   $37 = ($j$0$lcssa$i$i|0)==($22|0);
   if ($37) {
    $38 = (+($22|0));
    $39 = $38 + -0.001;
    $59 = $39;
   } else {
    $40 = (($24) + ($j$0$lcssa$i$i<<3)|0);
    $41 = +HEAPF64[$40>>3];
    $42 = $41;
    $43 = (($j$0$lcssa$i$i) + 1)|0;
    $44 = (($24) + ($43<<3)|0);
    $45 = +HEAPF64[$44>>3];
    $46 = $45;
    $47 = $42;
    $48 = $8 - $47;
    $49 = $46 - $42;
    $50 = $49;
    $51 = $48 / $50;
    $52 = $51;
    $53 = (+($j$0$lcssa$i$i|0));
    $54 = $52 + $53;
    $55 = $54;
    $59 = $55;
   }
   HEAPF64[$9>>3] = $59;
   $60 = ((($2)) + 3396|0);
   HEAP32[$60>>2] = $10;
   $61 = ($10|0)==(0|0);
   if ($61) {
    $$0$i$ph = -130;
   } else {
    HEAP32[$vi>>2] = 0;
    $62 = ((($vi)) + 4|0);
    HEAP32[$62>>2] = $channels;
    $63 = ((($vi)) + 8|0);
    HEAP32[$63>>2] = $rate;
    $64 = ((($2)) + 3456|0);
    HEAP32[$64>>2] = 1;
    $65 = ((($2)) + 3460|0);
    HEAP32[$65>>2] = 1;
    $66 = (~~(($59)));
    $67 = (+($66|0));
    $68 = $59 - $67;
    $69 = ((($2)) + 3472|0);
    HEAPF64[$69>>3] = $59;
    $70 = ((($2)) + 3488|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71|0)==(0);
    if ($72) {
     $73 = ((($10)) + 120|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = (($74) + ($66<<3)|0);
     $76 = +HEAPF64[$75>>3];
     $77 = 1.0 - $68;
     $78 = $76 * $77;
     $79 = (($66) + 1)|0;
     $80 = (($74) + ($79<<3)|0);
     $81 = +HEAPF64[$80>>3];
     $82 = $81 * $68;
     $83 = $82 + $78;
     $84 = ((($2)) + 3480|0);
     HEAPF64[$84>>3] = $83;
     $$pre$phi$i$iZ2D = $77;$$pre$phi3$i$iZ2D = $79;
    } else {
     $$pre$i1$i = 1.0 - $68;
     $$pre2$i$i = (($66) + 1)|0;
     $$pre$phi$i$iZ2D = $$pre$i1$i;$$pre$phi3$i$iZ2D = $$pre2$i$i;
    }
    $85 = ((($10)) + 112|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (($86) + ($66<<2)|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = (+($88|0));
    $90 = $89 * $$pre$phi$i$iZ2D;
    $91 = (($86) + ($$pre$phi3$i$iZ2D<<2)|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (+($92|0));
    $94 = $93 * $68;
    $95 = $94 + $90;
    $96 = ((($2)) + 3496|0);
    HEAPF64[$96>>3] = $95;
    $97 = ((($10)) + 116|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = (($98) + ($66<<2)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = (+($100|0));
    $102 = $101 * $$pre$phi$i$iZ2D;
    $103 = (($98) + ($$pre$phi3$i$iZ2D<<2)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = (+($104|0));
    $106 = $105 * $68;
    $107 = $106 + $102;
    $108 = ((($2)) + 3504|0);
    HEAPF64[$108>>3] = $107;
    $109 = ((($2)) + 3512|0);
    HEAPF64[$109>>3] = -6.0;
    $110 = ((($2)) + 3520|0);
    HEAPF64[$110>>3] = $59;
    $111 = ((($2)) + 3528|0);
    HEAPF64[$111>>3] = $59;
    $112 = ((($2)) + 3536|0);
    HEAPF64[$112>>3] = $59;
    $113 = ((($2)) + 3544|0);
    HEAPF64[$113>>3] = $59;
    $114 = ((($2)) + 3552|0);
    HEAPF64[$114>>3] = $59;
    $115 = ((($2)) + 3560|0);
    HEAPF64[$115>>3] = $59;
    $116 = ((($2)) + 3568|0);
    HEAPF64[$116>>3] = $59;
    $117 = ((($2)) + 3576|0);
    HEAPF64[$117>>3] = $59;
    $118 = ((($2)) + 3584|0);
    HEAPF64[$118>>3] = $59;
    $119 = ((($2)) + 3592|0);
    HEAPF64[$119>>3] = $59;
    $120 = ((($2)) + 3600|0);
    HEAPF64[$120>>3] = $59;
    $121 = ((($2)) + 3608|0);
    HEAPF64[$121>>3] = $59;
    $122 = ((($2)) + 3616|0);
    HEAPF64[$122>>3] = $59;
    $123 = ((($2)) + 3624|0);
    HEAPF64[$123>>3] = $59;
    $124 = ((($2)) + 3632|0);
    HEAPF64[$124>>3] = $59;
    $125 = ((($2)) + 3640|0);
    HEAPF64[$125>>3] = $59;
    $126 = ((($2)) + 3648|0);
    HEAPF64[$126>>3] = $59;
    $127 = ((($2)) + 3420|0);
    HEAP32[$127>>2] = 0;
    $128 = ((($2)) + 3464|0);
    HEAP32[$128>>2] = 1;
    $129 = $95 > -80.0;
    if ($129) {
     HEAPF64[$96>>3] = -80.0;
    } else {
     $130 = $95 < -200.0;
     if ($130) {
      HEAPF64[$96>>3] = -200.0;
     }
    }
    $131 = ((($2)) + 3392|0);
    HEAP32[$131>>2] = 1;
    $132 = ((($10)) + 24|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ((($10)) + 28|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (($133) + ($66<<2)|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = (($135) + ($66<<2)|0);
    $139 = HEAP32[$138>>2]|0;
    HEAP32[$2>>2] = $137;
    $140 = ((($2)) + 4|0);
    HEAP32[$140>>2] = $139;
    $141 = ($137|0)==($139|0);
    $142 = ((($10)) + 144|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)>(0);
    if ($144) {
     $145 = ((($10)) + 136|0);
     $146 = ((($10)) + 140|0);
     $147 = ((($10)) + 148|0);
     $149 = $59;$170 = $2;$i$053$i = 0;
     while(1) {
      $148 = (~~(($149)));
      $150 = HEAP32[$145>>2]|0;
      $151 = HEAP32[$146>>2]|0;
      $152 = HEAP32[$147>>2]|0;
      $153 = (($152) + ($i$053$i<<2)|0);
      $154 = HEAP32[$153>>2]|0;
      $155 = (_malloc(1120)|0);
      $156 = ($155|0)==(0|0);
      if (!($156)) {
       $157 = ((($155)) + -4|0);
       $158 = HEAP32[$157>>2]|0;
       $159 = $158 & 3;
       $160 = ($159|0)==(0);
       if (!($160)) {
        _memset(($155|0),0,1120)|0;
       }
      }
      $161 = (($154) + ($148<<2)|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = (($151) + (($162*1120)|0)|0);
      _memcpy(($155|0),($163|0),1120)|0;
      $164 = HEAP32[$155>>2]|0;
      $165 = ($164|0)>(0);
      if ($165) {
       $166 = ((($155)) + 4|0);
       $i$013$i$i = 0;$maxclass$014$i$i = -1;
       while(1) {
        $173 = (($166) + ($i$013$i$i<<2)|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)>($maxclass$014$i$i|0);
        $$maxclass$0$i$i = $175 ? $174 : $maxclass$014$i$i;
        $176 = (($i$013$i$i) + 1)|0;
        $exitcond19$i$i = ($176|0)==($164|0);
        if ($exitcond19$i$i) {
         break;
        } else {
         $i$013$i$i = $176;$maxclass$014$i$i = $$maxclass$0$i$i;
        }
       }
       $167 = ($$maxclass$0$i$i|0)<(0);
       if (!($167)) {
        $168 = ((($155)) + 256|0);
        $169 = ((($170)) + 24|0);
        $171 = ((($155)) + 192|0);
        $172 = ((($155)) + 320|0);
        $i$18$i$i = 0;$maxbook$010$i$i = -1;
        while(1) {
         $184 = (($168) + ($i$18$i$i<<2)|0);
         $185 = HEAP32[$184>>2]|0;
         $186 = ($185|0)>($maxbook$010$i$i|0);
         $$maxbook$0$i$i = $186 ? $185 : $maxbook$010$i$i;
         $187 = HEAP32[$169>>2]|0;
         $188 = (($187) + ($185))|0;
         HEAP32[$184>>2] = $188;
         $189 = (($171) + ($i$18$i$i<<2)|0);
         $190 = HEAP32[$189>>2]|0;
         $191 = ($190|0)==(31);
         if ($191) {
          $maxbook$2$lcssa$i$i = $$maxbook$0$i$i;
         } else {
          $1365 = $190;$k$03$i$i = 0;$maxbook$24$i$i = $$maxbook$0$i$i;
          while(1) {
           $192 = ((($172) + ($i$18$i$i<<5)|0) + ($k$03$i$i<<2)|0);
           $193 = HEAP32[$192>>2]|0;
           $194 = ($193|0)>($maxbook$24$i$i|0);
           $$maxbook$2$i$i = $194 ? $193 : $maxbook$24$i$i;
           $195 = ($193|0)>(-1);
           if ($195) {
            $196 = HEAP32[$169>>2]|0;
            $197 = (($196) + ($193))|0;
            HEAP32[$192>>2] = $197;
            $$pre$i$i1 = HEAP32[$189>>2]|0;
            $200 = $$pre$i$i1;
           } else {
            $200 = $1365;
           }
           $198 = (($k$03$i$i) + 1)|0;
           $199 = 1 << $200;
           $201 = ($198|0)<($199|0);
           if ($201) {
            $1365 = $200;$k$03$i$i = $198;$maxbook$24$i$i = $$maxbook$2$i$i;
           } else {
            $maxbook$2$lcssa$i$i = $$maxbook$2$i$i;
            break;
           }
          }
         }
         $202 = (($i$18$i$i) + 1)|0;
         $exitcond18$i$i = ($i$18$i$i|0)==($$maxclass$0$i$i|0);
         if ($exitcond18$i$i) {
          break;
         } else {
          $i$18$i$i = $202;$maxbook$010$i$i = $maxbook$2$lcssa$i$i;
         }
        }
        $177 = ($maxbook$2$lcssa$i$i|0)<(0);
        if (!($177)) {
         $178 = (($150) + ($162<<2)|0);
         $179 = HEAP32[$178>>2]|0;
         $180 = HEAP32[$179>>2]|0;
         $181 = HEAP32[$169>>2]|0;
         $182 = (($181) + 1)|0;
         HEAP32[$169>>2] = $182;
         $183 = (((($170)) + 1824|0) + ($181<<2)|0);
         HEAP32[$183>>2] = $180;
         $exitcond$i451$i = ($maxbook$2$lcssa$i$i|0)==(0);
         if (!($exitcond$i451$i)) {
          $i$22$i52$i = 0;
          while(1) {
           $203 = (($i$22$i52$i) + 1)|0;
           $$pre21$i$i = HEAP32[$161>>2]|0;
           $204 = (($150) + ($$pre21$i$i<<2)|0);
           $205 = HEAP32[$204>>2]|0;
           $206 = (($205) + ($203<<2)|0);
           $207 = HEAP32[$206>>2]|0;
           $208 = HEAP32[$169>>2]|0;
           $209 = (($208) + 1)|0;
           HEAP32[$169>>2] = $209;
           $210 = (((($170)) + 1824|0) + ($208<<2)|0);
           HEAP32[$210>>2] = $207;
           $exitcond$i4$i = ($203|0)==($maxbook$2$lcssa$i$i|0);
           if ($exitcond$i4$i) {
            break;
           } else {
            $i$22$i52$i = $203;
           }
          }
         }
        }
       }
      }
      $211 = ((($170)) + 16|0);
      $212 = HEAP32[$211>>2]|0;
      $213 = (((($170)) + 800|0) + ($212<<2)|0);
      HEAP32[$213>>2] = 1;
      $214 = HEAP32[$211>>2]|0;
      $215 = (((($170)) + 1056|0) + ($214<<2)|0);
      HEAP32[$215>>2] = $155;
      $216 = HEAP32[$211>>2]|0;
      $217 = (($216) + 1)|0;
      HEAP32[$211>>2] = $217;
      $218 = (($i$053$i) + 1)|0;
      $219 = HEAP32[$142>>2]|0;
      $220 = ($218|0)<($219|0);
      if (!($220)) {
       break;
      }
      $$pre$i = +HEAPF64[$9>>3];
      $$pre68$i = HEAP32[$1>>2]|0;
      $149 = $$pre$i;$170 = $$pre68$i;$i$053$i = $218;
     }
     $$pre69$i = HEAP32[$1>>2]|0;
     $$pre = +HEAPF64[$110>>3];
     $226 = $$pre;$230 = $$pre69$i;
    } else {
     $226 = $59;$230 = $2;
    }
    $221 = ((($10)) + 124|0);
    $222 = HEAP32[$221>>2]|0;
    $223 = ((($10)) + 128|0);
    $224 = HEAP32[$223>>2]|0;
    $225 = (~~(($226)));
    $227 = (+($225|0));
    $228 = $226 - $227;
    $229 = ((($230)) + 2868|0);
    $231 = (($224) + ($225<<3)|0);
    $232 = +HEAPF64[$231>>3];
    $233 = (~~(($232)));
    $234 = (($222) + (($233*492)|0)|0);
    _memcpy(($229|0),($234|0),492)|0;
    $235 = +HEAPF64[$231>>3];
    $236 = 1.0 - $228;
    $237 = $235 * $236;
    $238 = (($225) + 1)|0;
    $239 = (($224) + ($238<<3)|0);
    $240 = +HEAPF64[$239>>3];
    $241 = $240 * $228;
    $242 = $241 + $237;
    $243 = (~~(($242)));
    $244 = (+($243|0));
    $245 = $242 - $244;
    $246 = $245 == 0.0;
    $247 = ($243|0)>(0);
    $or$cond$i$i2 = $247 & $246;
    $$$i6$i = $or$cond$i$i2 ? 1.0 : $245;
    $248 = $or$cond$i$i2 << 31 >> 31;
    $$2$i$i = (($248) + ($243))|0;
    $249 = 1.0 - $$$i6$i;
    $250 = (($$2$i$i) + 1)|0;
    $251 = (((($222) + (($$2$i$i*492)|0)|0)) + 4|0);
    $252 = +HEAPF32[$251>>2];
    $253 = $252;
    $254 = $249 * $253;
    $255 = (((($222) + (($250*492)|0)|0)) + 4|0);
    $256 = +HEAPF32[$255>>2];
    $257 = $256;
    $258 = $$$i6$i * $257;
    $259 = $254 + $258;
    $260 = $259;
    $261 = ((($230)) + 2872|0);
    HEAPF32[$261>>2] = $260;
    $262 = (((($222) + (($$2$i$i*492)|0)|0)) + 32|0);
    $263 = +HEAPF32[$262>>2];
    $264 = $263;
    $265 = $249 * $264;
    $266 = (((($222) + (($250*492)|0)|0)) + 32|0);
    $267 = +HEAPF32[$266>>2];
    $268 = $267;
    $269 = $$$i6$i * $268;
    $270 = $265 + $269;
    $271 = $270;
    $272 = ((($230)) + 2900|0);
    HEAPF32[$272>>2] = $271;
    $273 = (((($222) + (($$2$i$i*492)|0)|0)) + 8|0);
    $274 = +HEAPF32[$273>>2];
    $275 = $274;
    $276 = $249 * $275;
    $277 = (((($222) + (($250*492)|0)|0)) + 8|0);
    $278 = +HEAPF32[$277>>2];
    $279 = $278;
    $280 = $279 * $$$i6$i;
    $281 = $280 + $276;
    $282 = $281;
    $283 = ((($230)) + 2876|0);
    HEAPF32[$283>>2] = $282;
    $284 = (((($222) + (($$2$i$i*492)|0)|0)) + 36|0);
    $285 = +HEAPF32[$284>>2];
    $286 = $285;
    $287 = $286 * $249;
    $288 = (((($222) + (($250*492)|0)|0)) + 36|0);
    $289 = +HEAPF32[$288>>2];
    $290 = $289;
    $291 = $290 * $$$i6$i;
    $292 = $291 + $287;
    $293 = $292;
    $294 = ((($230)) + 2904|0);
    HEAPF32[$294>>2] = $293;
    $295 = (((($222) + (($$2$i$i*492)|0)|0)) + 12|0);
    $296 = +HEAPF32[$295>>2];
    $297 = $296;
    $298 = $297 * $249;
    $299 = (((($222) + (($250*492)|0)|0)) + 12|0);
    $300 = +HEAPF32[$299>>2];
    $301 = $300;
    $302 = $301 * $$$i6$i;
    $303 = $302 + $298;
    $304 = $303;
    $305 = ((($230)) + 2880|0);
    HEAPF32[$305>>2] = $304;
    $306 = (((($222) + (($$2$i$i*492)|0)|0)) + 40|0);
    $307 = +HEAPF32[$306>>2];
    $308 = $307;
    $309 = $308 * $249;
    $310 = (((($222) + (($250*492)|0)|0)) + 40|0);
    $311 = +HEAPF32[$310>>2];
    $312 = $311;
    $313 = $312 * $$$i6$i;
    $314 = $313 + $309;
    $315 = $314;
    $316 = ((($230)) + 2908|0);
    HEAPF32[$316>>2] = $315;
    $317 = (((($222) + (($$2$i$i*492)|0)|0)) + 16|0);
    $318 = +HEAPF32[$317>>2];
    $319 = $318;
    $320 = $319 * $249;
    $321 = (((($222) + (($250*492)|0)|0)) + 16|0);
    $322 = +HEAPF32[$321>>2];
    $323 = $322;
    $324 = $323 * $$$i6$i;
    $325 = $324 + $320;
    $326 = $325;
    $327 = ((($230)) + 2884|0);
    HEAPF32[$327>>2] = $326;
    $328 = (((($222) + (($$2$i$i*492)|0)|0)) + 44|0);
    $329 = +HEAPF32[$328>>2];
    $330 = $329;
    $331 = $330 * $249;
    $332 = (((($222) + (($250*492)|0)|0)) + 44|0);
    $333 = +HEAPF32[$332>>2];
    $334 = $333;
    $335 = $334 * $$$i6$i;
    $336 = $335 + $331;
    $337 = $336;
    $338 = ((($230)) + 2912|0);
    HEAPF32[$338>>2] = $337;
    $339 = ((($230)) + 3512|0);
    $340 = +HEAPF64[$339>>3];
    $341 = $340;
    $342 = ((($230)) + 2936|0);
    HEAPF32[$342>>2] = $341;
    $343 = ((($10)) + 132|0);
    $344 = HEAP32[$343>>2]|0;
    $345 = +HEAPF64[$69>>3];
    $346 = $345;
    $347 = (~~(($346)));
    $348 = (+($347|0));
    $349 = $346 - $348;
    $350 = $349;
    $351 = HEAP32[$1>>2]|0;
    $352 = ($344|0)==(0|0);
    L67: do {
     if ($352) {
      $353 = ((($351)) + 4|0);
      $354 = HEAP32[$351>>2]|0;
      $355 = ((($351)) + 3240|0);
      HEAP32[$355>>2] = $354;
      $356 = HEAP32[$353>>2]|0;
      $357 = ((($351)) + 3300|0);
      HEAP32[$357>>2] = $356;
      $358 = ((($351)) + 3244|0);
      HEAP32[$358>>2] = $354;
      $359 = ((($351)) + 3304|0);
      HEAP32[$359>>2] = $356;
      $360 = ((($351)) + 3248|0);
      HEAP32[$360>>2] = $354;
      $361 = ((($351)) + 3308|0);
      HEAP32[$361>>2] = $356;
      $362 = ((($351)) + 3252|0);
      HEAP32[$362>>2] = $354;
      $363 = ((($351)) + 3312|0);
      HEAP32[$363>>2] = $356;
      $364 = ((($351)) + 3256|0);
      HEAP32[$364>>2] = $354;
      $365 = ((($351)) + 3316|0);
      HEAP32[$365>>2] = $356;
      $366 = ((($351)) + 3260|0);
      HEAP32[$366>>2] = $354;
      $367 = ((($351)) + 3320|0);
      HEAP32[$367>>2] = $356;
      $368 = ((($351)) + 3264|0);
      HEAP32[$368>>2] = $354;
      $369 = ((($351)) + 3324|0);
      HEAP32[$369>>2] = $356;
      $370 = ((($351)) + 3268|0);
      HEAP32[$370>>2] = $354;
      $371 = ((($351)) + 3328|0);
      HEAP32[$371>>2] = $356;
      $372 = ((($351)) + 3272|0);
      HEAP32[$372>>2] = $354;
      $373 = ((($351)) + 3332|0);
      HEAP32[$373>>2] = $356;
      $374 = ((($351)) + 3276|0);
      HEAP32[$374>>2] = $354;
      $375 = ((($351)) + 3336|0);
      HEAP32[$375>>2] = $356;
      $376 = ((($351)) + 3280|0);
      HEAP32[$376>>2] = $354;
      $377 = ((($351)) + 3340|0);
      HEAP32[$377>>2] = $356;
      $378 = ((($351)) + 3284|0);
      HEAP32[$378>>2] = $354;
      $379 = ((($351)) + 3344|0);
      HEAP32[$379>>2] = $356;
      $380 = ((($351)) + 3288|0);
      HEAP32[$380>>2] = $354;
      $381 = ((($351)) + 3348|0);
      HEAP32[$381>>2] = $356;
      $382 = ((($351)) + 3292|0);
      HEAP32[$382>>2] = $354;
      $383 = ((($351)) + 3352|0);
      HEAP32[$383>>2] = $356;
      $384 = ((($351)) + 3296|0);
      HEAP32[$384>>2] = $354;
      $385 = ((($351)) + 3356|0);
      HEAP32[$385>>2] = $356;
     } else {
      $386 = ((($351)) + 3120|0);
      $387 = (($344) + (($347*240)|0)|0);
      dest=$386; src=$387; stop=dest+60|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
      $388 = ((($351)) + 3180|0);
      $389 = (((($344) + (($347*240)|0)|0)) + 60|0);
      dest=$388; src=$389; stop=dest+60|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
      $390 = HEAP32[$127>>2]|0;
      $391 = ($390|0)==(0);
      if (!($391)) {
       $392 = 1.0 - $350;
       $393 = (($347) + 1)|0;
       $394 = ((($351)) + 4|0);
       $$pre$i8$i = HEAP32[$63>>2]|0;
       $395 = (+($$pre$i8$i|0));
       $i$07$i$i = 0;
       while(1) {
        $396 = ((((($344) + (($347*240)|0)|0)) + 120|0) + ($i$07$i$i<<2)|0);
        $397 = +HEAPF32[$396>>2];
        $398 = $397;
        $399 = $398 * $392;
        $400 = ((((($344) + (($393*240)|0)|0)) + 120|0) + ($i$07$i$i<<2)|0);
        $401 = +HEAPF32[$400>>2];
        $402 = $401;
        $403 = $402 * $350;
        $404 = $403 + $399;
        $405 = $404;
        $406 = $405;
        $407 = $406 * 1000.0;
        $408 = $407 / $395;
        $409 = HEAP32[$351>>2]|0;
        $410 = (+($409|0));
        $411 = $408 * $410;
        $412 = (~~(($411)));
        $413 = (((($351)) + 3000|0) + ($i$07$i$i<<2)|0);
        HEAP32[$413>>2] = $412;
        $414 = HEAP32[$394>>2]|0;
        $415 = (+($414|0));
        $416 = $408 * $415;
        $417 = (~~(($416)));
        $418 = (((($351)) + 3060|0) + ($i$07$i$i<<2)|0);
        HEAP32[$418>>2] = $417;
        $419 = (~~(($405)));
        $420 = (((($351)) + 2940|0) + ($i$07$i$i<<2)|0);
        HEAP32[$420>>2] = $419;
        $421 = ((((($344) + (($347*240)|0)|0)) + 180|0) + ($i$07$i$i<<2)|0);
        $422 = +HEAPF32[$421>>2];
        $423 = $422;
        $424 = $423 * $392;
        $425 = ((((($344) + (($393*240)|0)|0)) + 180|0) + ($i$07$i$i<<2)|0);
        $426 = +HEAPF32[$425>>2];
        $427 = $426;
        $428 = $427 * $350;
        $429 = $428 + $424;
        $430 = $429;
        $431 = $430;
        $432 = $431 * 1000.0;
        $433 = $432 / $395;
        $434 = HEAP32[$351>>2]|0;
        $435 = (+($434|0));
        $436 = $433 * $435;
        $437 = (~~(($436)));
        $438 = (((($351)) + 3240|0) + ($i$07$i$i<<2)|0);
        HEAP32[$438>>2] = $437;
        $439 = HEAP32[$394>>2]|0;
        $440 = (+($439|0));
        $441 = $433 * $440;
        $442 = (~~(($441)));
        $443 = (((($351)) + 3300|0) + ($i$07$i$i<<2)|0);
        HEAP32[$443>>2] = $442;
        $444 = (($i$07$i$i) + 1)|0;
        $exitcond12$i$i = ($444|0)==(15);
        if ($exitcond12$i$i) {
         break L67;
        } else {
         $i$07$i$i = $444;
        }
       }
      }
      $445 = (((($344) + (($347*240)|0)|0)) + 148|0);
      $446 = +HEAPF32[$445>>2];
      $447 = $446;
      $448 = 1.0 - $350;
      $449 = $447 * $448;
      $450 = (($347) + 1)|0;
      $451 = (((($344) + (($450*240)|0)|0)) + 148|0);
      $452 = +HEAPF32[$451>>2];
      $453 = $452;
      $454 = $453 * $350;
      $455 = $454 + $449;
      $456 = $455;
      $457 = $456;
      $458 = $457 * 1000.0;
      $459 = ((($351)) + 4|0);
      $460 = (~~(($456)));
      $$pre14$i$i = HEAP32[$63>>2]|0;
      $461 = (+($$pre14$i$i|0));
      $462 = $458 / $461;
      $i$16$i$i = 0;
      while(1) {
       $463 = HEAP32[$351>>2]|0;
       $464 = (+($463|0));
       $465 = $464 * $462;
       $466 = (~~(($465)));
       $467 = (((($351)) + 3000|0) + ($i$16$i$i<<2)|0);
       HEAP32[$467>>2] = $466;
       $468 = HEAP32[$459>>2]|0;
       $469 = (+($468|0));
       $470 = $469 * $462;
       $471 = (~~(($470)));
       $472 = (((($351)) + 3060|0) + ($i$16$i$i<<2)|0);
       HEAP32[$472>>2] = $471;
       $473 = (((($351)) + 2940|0) + ($i$16$i$i<<2)|0);
       HEAP32[$473>>2] = $460;
       $474 = (($i$16$i$i) + 1)|0;
       $exitcond11$i$i = ($474|0)==(15);
       if ($exitcond11$i$i) {
        break;
       } else {
        $i$16$i$i = $474;
       }
      }
      $475 = (((($344) + (($347*240)|0)|0)) + 208|0);
      $476 = +HEAPF32[$475>>2];
      $477 = $476;
      $478 = $477 * $448;
      $479 = (((($344) + (($450*240)|0)|0)) + 208|0);
      $480 = +HEAPF32[$479>>2];
      $481 = $480;
      $482 = $481 * $350;
      $483 = $482 + $478;
      $484 = $483;
      $485 = $484;
      $486 = $485 * 1000.0;
      $487 = $486 / $461;
      $i$25$i$i = 0;
      while(1) {
       $488 = HEAP32[$351>>2]|0;
       $489 = (+($488|0));
       $490 = $489 * $487;
       $491 = (~~(($490)));
       $492 = (((($351)) + 3240|0) + ($i$25$i$i<<2)|0);
       HEAP32[$492>>2] = $491;
       $493 = HEAP32[$459>>2]|0;
       $494 = (+($493|0));
       $495 = $494 * $487;
       $496 = (~~(($495)));
       $497 = (((($351)) + 3300|0) + ($i$25$i$i<<2)|0);
       HEAP32[$497>>2] = $496;
       $498 = (($i$25$i$i) + 1)|0;
       $exitcond10$i$i = ($498|0)==(15);
       if ($exitcond10$i$i) {
        break;
       } else {
        $i$25$i$i = $498;
       }
      }
     }
    } while(0);
    $499 = +HEAPF64[$9>>3];
    $500 = ((($10)) + 92|0);
    $501 = HEAP32[$500>>2]|0;
    $502 = ((($10)) + 100|0);
    $503 = HEAP32[$502>>2]|0;
    $504 = ((($10)) + 108|0);
    $505 = HEAP32[$504>>2]|0;
    $506 = HEAP32[$1>>2]|0;
    $507 = ((($506)) + 2852|0);
    $508 = HEAP32[$507>>2]|0;
    $509 = (~~(($499)));
    $510 = ((($506)) + 28|0);
    $511 = HEAP32[$510>>2]|0;
    $512 = ($511|0)>(0);
    if (!($512)) {
     HEAP32[$510>>2] = 1;
    }
    $513 = ($508|0)==(0|0);
    if ($513) {
     $514 = (_malloc(520)|0);
     $515 = ($514|0)==(0|0);
     if (!($515)) {
      $516 = ((($514)) + -4|0);
      $517 = HEAP32[$516>>2]|0;
      $518 = $517 & 3;
      $519 = ($518|0)==(0);
      if (!($519)) {
       _memset(($514|0),0,520)|0;
      }
     }
     HEAP32[$507>>2] = $514;
     $p$0$i$i = $514;
    } else {
     $p$0$i$i = $508;
    }
    _memcpy(($p$0$i$i|0),(152|0),520)|0;
    HEAP32[$p$0$i$i>>2] = 0;
    $520 = ((($506)) + 3460|0);
    $521 = HEAP32[$520>>2]|0;
    $522 = ($521|0)==(0);
    if (!($522)) {
     $523 = ((($p$0$i$i)) + 500|0);
     HEAP32[$523>>2] = 1;
     $524 = (($501) + ($509<<2)|0);
     $525 = HEAP32[$524>>2]|0;
     $526 = ((($p$0$i$i)) + 504|0);
     HEAP32[$526>>2] = $525;
     $527 = (($503) + ($509<<2)|0);
     $528 = HEAP32[$527>>2]|0;
     $529 = ((($p$0$i$i)) + 508|0);
     HEAP32[$529>>2] = $528;
     $530 = (($505) + ($509<<3)|0);
     $531 = +HEAPF64[$530>>3];
     $532 = ((($p$0$i$i)) + 512|0);
     HEAPF64[$532>>3] = $531;
    }
    $533 = +HEAPF64[$9>>3];
    $534 = HEAP32[$500>>2]|0;
    $535 = HEAP32[$502>>2]|0;
    $536 = HEAP32[$504>>2]|0;
    $537 = HEAP32[$1>>2]|0;
    $538 = ((($537)) + 2856|0);
    $539 = HEAP32[$538>>2]|0;
    $540 = (~~(($533)));
    $541 = ((($537)) + 28|0);
    $542 = HEAP32[$541>>2]|0;
    $543 = ($542|0)>(1);
    if (!($543)) {
     HEAP32[$541>>2] = 2;
    }
    $544 = ($539|0)==(0|0);
    if ($544) {
     $545 = (_malloc(520)|0);
     $546 = ($545|0)==(0|0);
     if (!($546)) {
      $547 = ((($545)) + -4|0);
      $548 = HEAP32[$547>>2]|0;
      $549 = $548 & 3;
      $550 = ($549|0)==(0);
      if (!($550)) {
       _memset(($545|0),0,520)|0;
      }
     }
     HEAP32[$538>>2] = $545;
     $p$0$i9$i = $545;
    } else {
     $p$0$i9$i = $539;
    }
    _memcpy(($p$0$i9$i|0),(152|0),520)|0;
    HEAP32[$p$0$i9$i>>2] = 0;
    $551 = ((($537)) + 3460|0);
    $552 = HEAP32[$551>>2]|0;
    $553 = ($552|0)==(0);
    if (!($553)) {
     $554 = ((($p$0$i9$i)) + 500|0);
     HEAP32[$554>>2] = 1;
     $555 = (($534) + ($540<<2)|0);
     $556 = HEAP32[$555>>2]|0;
     $557 = ((($p$0$i9$i)) + 504|0);
     HEAP32[$557>>2] = $556;
     $558 = (($535) + ($540<<2)|0);
     $559 = HEAP32[$558>>2]|0;
     $560 = ((($p$0$i9$i)) + 508|0);
     HEAP32[$560>>2] = $559;
     $561 = (($536) + ($540<<3)|0);
     $562 = +HEAPF64[$561>>3];
     $563 = ((($p$0$i9$i)) + 512|0);
     HEAPF64[$563>>3] = $562;
    }
    do {
     if (!($141)) {
      $564 = +HEAPF64[$9>>3];
      $565 = ((($10)) + 96|0);
      $566 = HEAP32[$565>>2]|0;
      $567 = ((($10)) + 104|0);
      $568 = HEAP32[$567>>2]|0;
      $569 = HEAP32[$504>>2]|0;
      $570 = HEAP32[$1>>2]|0;
      $571 = ((($570)) + 2860|0);
      $572 = HEAP32[$571>>2]|0;
      $573 = (~~(($564)));
      $574 = ((($570)) + 28|0);
      $575 = HEAP32[$574>>2]|0;
      $576 = ($575|0)>(2);
      if (!($576)) {
       HEAP32[$574>>2] = 3;
      }
      $577 = ($572|0)==(0|0);
      if ($577) {
       $578 = (_malloc(520)|0);
       $579 = ($578|0)==(0|0);
       do {
        if (!($579)) {
         $580 = ((($578)) + -4|0);
         $581 = HEAP32[$580>>2]|0;
         $582 = $581 & 3;
         $583 = ($582|0)==(0);
         if ($583) {
          break;
         }
         _memset(($578|0),0,520)|0;
        }
       } while(0);
       HEAP32[$571>>2] = $578;
       $p$0$i11$i = $578;
      } else {
       $p$0$i11$i = $572;
      }
      _memcpy(($p$0$i11$i|0),(152|0),520)|0;
      HEAP32[$p$0$i11$i>>2] = 1;
      $584 = ((($570)) + 3460|0);
      $585 = HEAP32[$584>>2]|0;
      $586 = ($585|0)==(0);
      if (!($586)) {
       $587 = ((($p$0$i11$i)) + 500|0);
       HEAP32[$587>>2] = 1;
       $588 = (($566) + ($573<<2)|0);
       $589 = HEAP32[$588>>2]|0;
       $590 = ((($p$0$i11$i)) + 504|0);
       HEAP32[$590>>2] = $589;
       $591 = (($568) + ($573<<2)|0);
       $592 = HEAP32[$591>>2]|0;
       $593 = ((($p$0$i11$i)) + 508|0);
       HEAP32[$593>>2] = $592;
       $594 = (($569) + ($573<<3)|0);
       $595 = +HEAPF64[$594>>3];
       $596 = ((($p$0$i11$i)) + 512|0);
       HEAPF64[$596>>3] = $595;
      }
      $597 = +HEAPF64[$9>>3];
      $598 = HEAP32[$565>>2]|0;
      $599 = HEAP32[$567>>2]|0;
      $600 = HEAP32[$504>>2]|0;
      $601 = HEAP32[$1>>2]|0;
      $602 = ((($601)) + 2864|0);
      $603 = HEAP32[$602>>2]|0;
      $604 = (~~(($597)));
      $605 = ((($601)) + 28|0);
      $606 = HEAP32[$605>>2]|0;
      $607 = ($606|0)>(3);
      if (!($607)) {
       HEAP32[$605>>2] = 4;
      }
      $608 = ($603|0)==(0|0);
      if ($608) {
       $609 = (_malloc(520)|0);
       $610 = ($609|0)==(0|0);
       do {
        if (!($610)) {
         $611 = ((($609)) + -4|0);
         $612 = HEAP32[$611>>2]|0;
         $613 = $612 & 3;
         $614 = ($613|0)==(0);
         if ($614) {
          break;
         }
         _memset(($609|0),0,520)|0;
        }
       } while(0);
       HEAP32[$602>>2] = $609;
       $p$0$i13$i = $609;
      } else {
       $p$0$i13$i = $603;
      }
      _memcpy(($p$0$i13$i|0),(152|0),520)|0;
      HEAP32[$p$0$i13$i>>2] = 1;
      $615 = ((($601)) + 3460|0);
      $616 = HEAP32[$615>>2]|0;
      $617 = ($616|0)==(0);
      if ($617) {
       break;
      }
      $618 = ((($p$0$i13$i)) + 500|0);
      HEAP32[$618>>2] = 1;
      $619 = (($598) + ($604<<2)|0);
      $620 = HEAP32[$619>>2]|0;
      $621 = ((($p$0$i13$i)) + 504|0);
      HEAP32[$621>>2] = $620;
      $622 = (($599) + ($604<<2)|0);
      $623 = HEAP32[$622>>2]|0;
      $624 = ((($p$0$i13$i)) + 508|0);
      HEAP32[$624>>2] = $623;
      $625 = (($600) + ($604<<3)|0);
      $626 = +HEAPF64[$625>>3];
      $627 = ((($p$0$i13$i)) + 512|0);
      HEAPF64[$627>>3] = $626;
     }
    } while(0);
    $628 = +HEAPF64[$111>>3];
    $629 = ((($10)) + 32|0);
    $630 = HEAP32[$629>>2]|0;
    $631 = ((($10)) + 36|0);
    $632 = HEAP32[$631>>2]|0;
    $633 = ((($10)) + 44|0);
    $634 = HEAP32[$633>>2]|0;
    _vorbis_encode_tonemask_setup($vi,$628,0,$630,$632,$634);
    $635 = +HEAPF64[$115>>3];
    $636 = HEAP32[$629>>2]|0;
    $637 = HEAP32[$631>>2]|0;
    $638 = ((($10)) + 52|0);
    $639 = HEAP32[$638>>2]|0;
    _vorbis_encode_tonemask_setup($vi,$635,1,$636,$637,$639);
    if (!($141)) {
     $640 = +HEAPF64[$119>>3];
     $641 = HEAP32[$629>>2]|0;
     $642 = HEAP32[$631>>2]|0;
     $643 = HEAP32[$638>>2]|0;
     _vorbis_encode_tonemask_setup($vi,$640,2,$641,$642,$643);
     $644 = +HEAPF64[$123>>3];
     $645 = HEAP32[$629>>2]|0;
     $646 = HEAP32[$631>>2]|0;
     $647 = ((($10)) + 48|0);
     $648 = HEAP32[$647>>2]|0;
     _vorbis_encode_tonemask_setup($vi,$644,3,$645,$646,$648);
    }
    $649 = +HEAPF64[$114>>3];
    $650 = ((($10)) + 80|0);
    $651 = HEAP32[$650>>2]|0;
    $652 = ((($10)) + 84|0);
    $653 = HEAP32[$652>>2]|0;
    $654 = (~~(($649)));
    $655 = (+($654|0));
    $656 = $649 - $655;
    $657 = HEAP32[$1>>2]|0;
    $658 = ((($657)) + 2852|0);
    $659 = HEAP32[$658>>2]|0;
    $660 = (($653) + ($654<<3)|0);
    $661 = +HEAPF64[$660>>3];
    $662 = 1.0 - $656;
    $663 = $661 * $662;
    $664 = (($654) + 1)|0;
    $665 = (($653) + ($664<<3)|0);
    $666 = +HEAPF64[$665>>3];
    $667 = $666 * $656;
    $668 = $667 + $663;
    $669 = (~~(($668)));
    $670 = (+($669|0));
    $671 = $668 - $670;
    $672 = $671 == 0.0;
    $673 = ($669|0)>(0);
    $or$cond$i15$i = $673 & $672;
    $$$i16$i = $or$cond$i15$i ? 1.0 : $671;
    $674 = $or$cond$i15$i << 31 >> 31;
    $$2$i17$i = (($674) + ($669))|0;
    $675 = 1.0 - $$$i16$i;
    $676 = (($$2$i17$i) + 1)|0;
    $i$03$i$i = 0;
    while(1) {
     $677 = ((($651) + (($$2$i17$i*160)|0)|0) + ($i$03$i$i<<2)|0);
     $678 = HEAP32[$677>>2]|0;
     $679 = (+($678|0));
     $680 = $679 * $675;
     $681 = ((($651) + (($676*160)|0)|0) + ($i$03$i$i<<2)|0);
     $682 = HEAP32[$681>>2]|0;
     $683 = (+($682|0));
     $684 = $683 * $$$i16$i;
     $685 = $684 + $680;
     $686 = $685;
     $687 = (((($659)) + 336|0) + ($i$03$i$i<<2)|0);
     HEAPF32[$687>>2] = $686;
     $688 = (($i$03$i$i) + 1)|0;
     $exitcond$i18$i = ($688|0)==(40);
     if ($exitcond$i18$i) {
      break;
     } else {
      $i$03$i$i = $688;
     }
    }
    $689 = +HEAPF64[$118>>3];
    $690 = (~~(($689)));
    $691 = (+($690|0));
    $692 = $689 - $691;
    $693 = ((($657)) + 2856|0);
    $694 = HEAP32[$693>>2]|0;
    $695 = (($653) + ($690<<3)|0);
    $696 = +HEAPF64[$695>>3];
    $697 = 1.0 - $692;
    $698 = $696 * $697;
    $699 = (($690) + 1)|0;
    $700 = (($653) + ($699<<3)|0);
    $701 = +HEAPF64[$700>>3];
    $702 = $701 * $692;
    $703 = $702 + $698;
    $704 = (~~(($703)));
    $705 = (+($704|0));
    $706 = $703 - $705;
    $707 = $706 == 0.0;
    $708 = ($704|0)>(0);
    $or$cond$i19$i = $708 & $707;
    $$$i20$i = $or$cond$i19$i ? 1.0 : $706;
    $709 = $or$cond$i19$i << 31 >> 31;
    $$2$i21$i = (($709) + ($704))|0;
    $710 = 1.0 - $$$i20$i;
    $711 = (($$2$i21$i) + 1)|0;
    $i$03$i22$i = 0;
    while(1) {
     $712 = ((($651) + (($$2$i21$i*160)|0)|0) + ($i$03$i22$i<<2)|0);
     $713 = HEAP32[$712>>2]|0;
     $714 = (+($713|0));
     $715 = $714 * $710;
     $716 = ((($651) + (($711*160)|0)|0) + ($i$03$i22$i<<2)|0);
     $717 = HEAP32[$716>>2]|0;
     $718 = (+($717|0));
     $719 = $718 * $$$i20$i;
     $720 = $719 + $715;
     $721 = $720;
     $722 = (((($694)) + 336|0) + ($i$03$i22$i<<2)|0);
     HEAPF32[$722>>2] = $721;
     $723 = (($i$03$i22$i) + 1)|0;
     $exitcond$i23$i = ($723|0)==(40);
     if ($exitcond$i23$i) {
      break;
     } else {
      $i$03$i22$i = $723;
     }
    }
    if (!($141)) {
     $724 = +HEAPF64[$122>>3];
     $725 = ((($10)) + 88|0);
     $726 = HEAP32[$725>>2]|0;
     $727 = (~~(($724)));
     $728 = (+($727|0));
     $729 = $724 - $728;
     $730 = ((($657)) + 2860|0);
     $731 = HEAP32[$730>>2]|0;
     $732 = (($726) + ($727<<3)|0);
     $733 = +HEAPF64[$732>>3];
     $734 = 1.0 - $729;
     $735 = $733 * $734;
     $736 = (($727) + 1)|0;
     $737 = (($726) + ($736<<3)|0);
     $738 = +HEAPF64[$737>>3];
     $739 = $738 * $729;
     $740 = $739 + $735;
     $741 = (~~(($740)));
     $742 = (+($741|0));
     $743 = $740 - $742;
     $744 = $743 == 0.0;
     $745 = ($741|0)>(0);
     $or$cond$i25$i = $745 & $744;
     $$$i26$i = $or$cond$i25$i ? 1.0 : $743;
     $746 = $or$cond$i25$i << 31 >> 31;
     $$2$i27$i = (($746) + ($741))|0;
     $747 = 1.0 - $$$i26$i;
     $748 = (($$2$i27$i) + 1)|0;
     $i$03$i28$i = 0;
     while(1) {
      $749 = ((($651) + (($$2$i27$i*160)|0)|0) + ($i$03$i28$i<<2)|0);
      $750 = HEAP32[$749>>2]|0;
      $751 = (+($750|0));
      $752 = $751 * $747;
      $753 = ((($651) + (($748*160)|0)|0) + ($i$03$i28$i<<2)|0);
      $754 = HEAP32[$753>>2]|0;
      $755 = (+($754|0));
      $756 = $755 * $$$i26$i;
      $757 = $756 + $752;
      $758 = $757;
      $759 = (((($731)) + 336|0) + ($i$03$i28$i<<2)|0);
      HEAPF32[$759>>2] = $758;
      $760 = (($i$03$i28$i) + 1)|0;
      $exitcond$i29$i = ($760|0)==(40);
      if ($exitcond$i29$i) {
       break;
      } else {
       $i$03$i28$i = $760;
      }
     }
     $761 = +HEAPF64[$126>>3];
     $762 = (~~(($761)));
     $763 = (+($762|0));
     $764 = $761 - $763;
     $765 = ((($657)) + 2864|0);
     $766 = HEAP32[$765>>2]|0;
     $767 = (($726) + ($762<<3)|0);
     $768 = +HEAPF64[$767>>3];
     $769 = 1.0 - $764;
     $770 = $768 * $769;
     $771 = (($762) + 1)|0;
     $772 = (($726) + ($771<<3)|0);
     $773 = +HEAPF64[$772>>3];
     $774 = $773 * $764;
     $775 = $774 + $770;
     $776 = (~~(($775)));
     $777 = (+($776|0));
     $778 = $775 - $777;
     $779 = $778 == 0.0;
     $780 = ($776|0)>(0);
     $or$cond$i31$i = $780 & $779;
     $$$i32$i = $or$cond$i31$i ? 1.0 : $778;
     $781 = $or$cond$i31$i << 31 >> 31;
     $$2$i33$i = (($781) + ($776))|0;
     $782 = 1.0 - $$$i32$i;
     $783 = (($$2$i33$i) + 1)|0;
     $i$03$i34$i = 0;
     while(1) {
      $784 = ((($651) + (($$2$i33$i*160)|0)|0) + ($i$03$i34$i<<2)|0);
      $785 = HEAP32[$784>>2]|0;
      $786 = (+($785|0));
      $787 = $786 * $782;
      $788 = ((($651) + (($783*160)|0)|0) + ($i$03$i34$i<<2)|0);
      $789 = HEAP32[$788>>2]|0;
      $790 = (+($789|0));
      $791 = $790 * $$$i32$i;
      $792 = $791 + $787;
      $793 = $792;
      $794 = (((($766)) + 336|0) + ($i$03$i34$i<<2)|0);
      HEAPF32[$794>>2] = $793;
      $795 = (($i$03$i34$i) + 1)|0;
      $exitcond$i35$i = ($795|0)==(40);
      if ($exitcond$i35$i) {
       break;
      } else {
       $i$03$i34$i = $795;
      }
     }
    }
    $796 = +HEAPF64[$112>>3];
    $797 = ((($10)) + 40|0);
    $798 = HEAP32[$797>>2]|0;
    $799 = (~~(($796)));
    $800 = (+($799|0));
    $801 = $796 - $800;
    $802 = (($798) + ($799<<2)|0);
    $803 = HEAP32[$802>>2]|0;
    $804 = (+($803|0));
    $805 = 1.0 - $801;
    $806 = $804 * $805;
    $807 = (($799) + 1)|0;
    $808 = (($798) + ($807<<2)|0);
    $809 = HEAP32[$808>>2]|0;
    $810 = (+($809|0));
    $811 = $810 * $801;
    $812 = $811 + $806;
    $813 = $812;
    $814 = ((($659)) + 32|0);
    HEAPF32[$814>>2] = $813;
    $815 = +HEAPF64[$116>>3];
    $816 = (~~(($815)));
    $817 = (+($816|0));
    $818 = $815 - $817;
    $819 = (($798) + ($816<<2)|0);
    $820 = HEAP32[$819>>2]|0;
    $821 = (+($820|0));
    $822 = 1.0 - $818;
    $823 = $821 * $822;
    $824 = (($816) + 1)|0;
    $825 = (($798) + ($824<<2)|0);
    $826 = HEAP32[$825>>2]|0;
    $827 = (+($826|0));
    $828 = $827 * $818;
    $829 = $828 + $823;
    $830 = $829;
    $831 = ((($694)) + 32|0);
    HEAPF32[$831>>2] = $830;
    if (!($141)) {
     $832 = +HEAPF64[$120>>3];
     $833 = (~~(($832)));
     $834 = (+($833|0));
     $835 = $832 - $834;
     $836 = ((($657)) + 2860|0);
     $837 = HEAP32[$836>>2]|0;
     $838 = (($798) + ($833<<2)|0);
     $839 = HEAP32[$838>>2]|0;
     $840 = (+($839|0));
     $841 = 1.0 - $835;
     $842 = $840 * $841;
     $843 = (($833) + 1)|0;
     $844 = (($798) + ($843<<2)|0);
     $845 = HEAP32[$844>>2]|0;
     $846 = (+($845|0));
     $847 = $846 * $835;
     $848 = $847 + $842;
     $849 = $848;
     $850 = ((($837)) + 32|0);
     HEAPF32[$850>>2] = $849;
     $851 = +HEAPF64[$124>>3];
     $852 = (~~(($851)));
     $853 = (+($852|0));
     $854 = $851 - $853;
     $855 = ((($657)) + 2864|0);
     $856 = HEAP32[$855>>2]|0;
     $857 = (($798) + ($852<<2)|0);
     $858 = HEAP32[$857>>2]|0;
     $859 = (+($858|0));
     $860 = 1.0 - $854;
     $861 = $859 * $860;
     $862 = (($852) + 1)|0;
     $863 = (($798) + ($862<<2)|0);
     $864 = HEAP32[$863>>2]|0;
     $865 = (+($864|0));
     $866 = $865 * $854;
     $867 = $866 + $861;
     $868 = $867;
     $869 = ((($856)) + 32|0);
     HEAPF32[$869>>2] = $868;
    }
    $870 = +HEAPF64[$113>>3];
    $871 = ((($10)) + 76|0);
    $872 = HEAP32[$871>>2]|0;
    $873 = ((($10)) + 60|0);
    $874 = HEAP32[$873>>2]|0;
    $875 = ((($10)) + 56|0);
    $876 = HEAP32[$875>>2]|0;
    $877 = ((($2)) + 3408|0);
    $878 = +HEAPF64[$877>>3];
    _vorbis_encode_noisebias_setup($vi,$870,0,$872,$874,$876,$878);
    $879 = +HEAPF64[$117>>3];
    $880 = HEAP32[$871>>2]|0;
    $881 = ((($10)) + 64|0);
    $882 = HEAP32[$881>>2]|0;
    $883 = HEAP32[$875>>2]|0;
    _vorbis_encode_noisebias_setup($vi,$879,1,$880,$882,$883,0.0);
    if ($141) {
     $917 = HEAP32[$1>>2]|0;
     $918 = ((($917)) + 2852|0);
     $919 = HEAP32[$918>>2]|0;
     $920 = ((($917)) + 3496|0);
     $921 = +HEAPF64[$920>>3];
     $922 = $921;
     $923 = ((($919)) + 4|0);
     HEAPF32[$923>>2] = $922;
     $924 = ((($917)) + 3504|0);
     $925 = +HEAPF64[$924>>3];
     $926 = $925;
     $927 = ((($919)) + 8|0);
     HEAPF32[$927>>2] = $926;
     $928 = ((($917)) + 2856|0);
     $929 = HEAP32[$928>>2]|0;
     $930 = ((($929)) + 4|0);
     HEAPF32[$930>>2] = $922;
     $931 = ((($929)) + 8|0);
     HEAPF32[$931>>2] = $926;
     $941 = $917;
    } else {
     $884 = +HEAPF64[$121>>3];
     $885 = HEAP32[$871>>2]|0;
     $886 = ((($10)) + 68|0);
     $887 = HEAP32[$886>>2]|0;
     $888 = HEAP32[$875>>2]|0;
     _vorbis_encode_noisebias_setup($vi,$884,2,$885,$887,$888,0.0);
     $889 = +HEAPF64[$125>>3];
     $890 = HEAP32[$871>>2]|0;
     $891 = ((($10)) + 72|0);
     $892 = HEAP32[$891>>2]|0;
     $893 = HEAP32[$875>>2]|0;
     _vorbis_encode_noisebias_setup($vi,$889,3,$890,$892,$893,0.0);
     $894 = HEAP32[$1>>2]|0;
     $895 = ((($894)) + 2852|0);
     $896 = HEAP32[$895>>2]|0;
     $897 = ((($894)) + 3496|0);
     $898 = +HEAPF64[$897>>3];
     $899 = $898;
     $900 = ((($896)) + 4|0);
     HEAPF32[$900>>2] = $899;
     $901 = ((($894)) + 3504|0);
     $902 = +HEAPF64[$901>>3];
     $903 = $902;
     $904 = ((($896)) + 8|0);
     HEAPF32[$904>>2] = $903;
     $905 = ((($894)) + 2856|0);
     $906 = HEAP32[$905>>2]|0;
     $907 = ((($906)) + 4|0);
     HEAPF32[$907>>2] = $899;
     $908 = ((($906)) + 8|0);
     HEAPF32[$908>>2] = $903;
     $909 = ((($894)) + 2860|0);
     $910 = HEAP32[$909>>2]|0;
     $911 = ((($910)) + 4|0);
     HEAPF32[$911>>2] = $899;
     $912 = ((($910)) + 8|0);
     HEAPF32[$912>>2] = $903;
     $913 = ((($894)) + 2864|0);
     $914 = HEAP32[$913>>2]|0;
     $915 = ((($914)) + 4|0);
     HEAPF32[$915>>2] = $899;
     $916 = ((($914)) + 8|0);
     HEAPF32[$916>>2] = $903;
     $941 = $894;
    }
    $932 = +HEAPF64[$9>>3];
    $933 = ((($10)) + 152|0);
    $934 = HEAP32[$933>>2]|0;
    $935 = (~~(($932)));
    $936 = (($934) + ($935<<3)|0);
    $937 = HEAP32[$936>>2]|0;
    $938 = (((($934) + ($935<<3)|0)) + 4|0);
    $939 = HEAP32[$938>>2]|0;
    $940 = HEAP32[$941>>2]|0;
    $942 = ((($941)) + 4|0);
    $943 = HEAP32[$942>>2]|0;
    $944 = ($940|0)==($943|0);
    $$$i$i = $944 ? 1 : 2;
    $945 = ((($941)) + 8|0);
    $946 = ((($941)) + 12|0);
    $i$014$i$i = 0;
    while(1) {
     $947 = (_malloc(3208)|0);
     $948 = ($947|0)==(0|0);
     do {
      if (!($948)) {
       $949 = ((($947)) + -4|0);
       $950 = HEAP32[$949>>2]|0;
       $951 = $950 & 3;
       $952 = ($951|0)==(0);
       if ($952) {
        break;
       }
       _memset(($947|0),0,3208)|0;
      }
     } while(0);
     $953 = (((($941)) + 544|0) + ($i$014$i$i<<2)|0);
     HEAP32[$953>>2] = $947;
     $954 = (_malloc(16)|0);
     $955 = ($954|0)==(0|0);
     do {
      if (!($955)) {
       $956 = ((($954)) + -4|0);
       $957 = HEAP32[$956>>2]|0;
       $958 = $957 & 3;
       $959 = ($958|0)==(0);
       if ($959) {
        break;
       }
       dest=$954; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      }
     } while(0);
     $960 = (((($941)) + 32|0) + ($i$014$i$i<<2)|0);
     HEAP32[$960>>2] = $954;
     $961 = (60752 + ($i$014$i$i<<4)|0);
     ;HEAP32[$954>>2]=HEAP32[$961>>2]|0;HEAP32[$954+4>>2]=HEAP32[$961+4>>2]|0;HEAP32[$954+8>>2]=HEAP32[$961+8>>2]|0;HEAP32[$954+12>>2]=HEAP32[$961+12>>2]|0;
     $962 = HEAP32[$945>>2]|0;
     $963 = ($i$014$i$i|0)<($962|0);
     if (!($963)) {
      $964 = (($i$014$i$i) + 1)|0;
      HEAP32[$945>>2] = $964;
     }
     $965 = (((($941)) + 288|0) + ($i$014$i$i<<2)|0);
     HEAP32[$965>>2] = 0;
     $966 = HEAP32[$953>>2]|0;
     $967 = (($937) + (($i$014$i$i*3208)|0)|0);
     _memcpy(($966|0),($967|0),3208)|0;
     $968 = HEAP32[$946>>2]|0;
     $969 = ($i$014$i$i|0)<($968|0);
     if (!($969)) {
      $970 = (($i$014$i$i) + 1)|0;
      HEAP32[$946>>2] = $970;
     }
     $971 = HEAP32[$967>>2]|0;
     $972 = ($971|0)>(0);
     L174: do {
      if ($972) {
       $j$013$i$i = 0;
       while(1) {
        $973 = ((((($937) + (($i$014$i$i*3208)|0)|0)) + 1092|0) + ($j$013$i$i<<2)|0);
        $974 = HEAP32[$973>>2]|0;
        $975 = HEAP32[$1>>2]|0;
        $976 = (_malloc(2840)|0);
        $977 = (((($975)) + 1568|0) + ($974<<2)|0);
        HEAP32[$977>>2] = $976;
        $978 = (((($939) + ($974<<5)|0)) + 12|0);
        $979 = HEAP32[$978>>2]|0;
        _memcpy(($976|0),($979|0),2840)|0;
        $980 = ((($975)) + 20|0);
        $981 = HEAP32[$980>>2]|0;
        $982 = ($981|0)>($974|0);
        if (!($982)) {
         $983 = (($974) + 1)|0;
         HEAP32[$980>>2] = $983;
        }
        $984 = (((($939) + ($974<<5)|0)) + 8|0);
        $985 = HEAP32[$984>>2]|0;
        $986 = ((($976)) + 8|0);
        HEAP32[$986>>2] = $985;
        $987 = (($939) + ($974<<5)|0);
        $988 = HEAP32[$987>>2]|0;
        $989 = (((($975)) + 1312|0) + ($974<<2)|0);
        HEAP32[$989>>2] = $988;
        $990 = ((($975)) + 3420|0);
        $991 = HEAP32[$990>>2]|0;
        $992 = ($991|0)==(0);
        $993 = ((($976)) + 12|0);
        $994 = HEAP32[$993>>2]|0;
        $995 = ($994|0)>(0);
        do {
         if ($992) {
          if ($995) {
           $999 = (((($939) + ($974<<5)|0)) + 24|0);
           $1000 = HEAP32[$999>>2]|0;
           $1001 = ((($976)) + 24|0);
           $i$247$i$i$i = 0;
           while(1) {
            $1050 = (($1001) + ($i$247$i$i$i<<2)|0);
            $1051 = (($1000) + ($i$247$i$i$i<<4)|0);
            $1052 = HEAP32[$1051>>2]|0;
            $1053 = ($1052|0)==(0|0);
            if (!($1053)) {
             $1054 = HEAP32[$1050>>2]|0;
             $1055 = $1054 | 1;
             HEAP32[$1050>>2] = $1055;
            }
            $1056 = (((($1000) + ($i$247$i$i$i<<4)|0)) + 4|0);
            $1057 = HEAP32[$1056>>2]|0;
            $1058 = ($1057|0)==(0|0);
            if (!($1058)) {
             $1225 = HEAP32[$1050>>2]|0;
             $1226 = $1225 | 2;
             HEAP32[$1050>>2] = $1226;
            }
            $1227 = (((($1000) + ($i$247$i$i$i<<4)|0)) + 8|0);
            $1228 = HEAP32[$1227>>2]|0;
            $1229 = ($1228|0)==(0|0);
            if (!($1229)) {
             $1230 = HEAP32[$1050>>2]|0;
             $1231 = $1230 | 4;
             HEAP32[$1050>>2] = $1231;
            }
            $1232 = (((($1000) + ($i$247$i$i$i<<4)|0)) + 12|0);
            $1233 = HEAP32[$1232>>2]|0;
            $1234 = ($1233|0)==(0|0);
            if (!($1234)) {
             $1235 = HEAP32[$1050>>2]|0;
             $1236 = $1235 | 8;
             HEAP32[$1050>>2] = $1236;
            }
            $1237 = (($i$247$i$i$i) + 1)|0;
            $1238 = HEAP32[$993>>2]|0;
            $1239 = ($1237|0)<($1238|0);
            if ($1239) {
             $i$247$i$i$i = $1237;
            } else {
             $1073 = $1238;
             break;
            }
           }
          } else {
           $1073 = $994;
          }
          $1059 = (((($939) + ($974<<5)|0)) + 16|0);
          $1060 = HEAP32[$1059>>2]|0;
          $1061 = ((($975)) + 24|0);
          $1062 = HEAP32[$1061>>2]|0;
          $1063 = ($1062|0)>(0);
          $1064 = $1060;
          L199: do {
           if ($1063) {
            $i$05$i6$i$i$i = 0;
            while(1) {
             $1065 = (((($975)) + 1824|0) + ($i$05$i6$i$i$i<<2)|0);
             $1066 = HEAP32[$1065>>2]|0;
             $1067 = ($1066|0)==($1060|0);
             if ($1067) {
              $$0$i9$i$i$i = $i$05$i6$i$i$i;
              break L199;
             }
             $1068 = (($i$05$i6$i$i$i) + 1)|0;
             $1069 = ($1068|0)<($1062|0);
             if ($1069) {
              $i$05$i6$i$i$i = $1068;
             } else {
              label = 151;
              break;
             }
            }
           } else {
            label = 151;
           }
          } while(0);
          if ((label|0) == 151) {
           label = 0;
           $1070 = (($1062) + 1)|0;
           HEAP32[$1061>>2] = $1070;
           $$0$i9$i$i$i = $1062;
          }
          $1071 = ((($976)) + 20|0);
          HEAP32[$1071>>2] = $$0$i9$i$i$i;
          $1072 = (((($975)) + 1824|0) + ($$0$i9$i$i$i<<2)|0);
          HEAP32[$1072>>2] = $1064;
          $1074 = ($1073|0)>(0);
          if (!($1074)) {
           break;
          }
          $1075 = (((($939) + ($974<<5)|0)) + 24|0);
          $1076 = ((($976)) + 280|0);
          $booklist$344$i$i$i = 0;$i$345$i$i$i = 0;
          while(1) {
           $1077 = HEAP32[$1075>>2]|0;
           $1078 = (($1077) + ($i$345$i$i$i<<4)|0);
           $1079 = HEAP32[$1078>>2]|0;
           $1080 = ($1079|0)==(0|0);
           $1081 = $1079;
           if ($1080) {
            $1094 = $1077;$booklist$5$i$i$i = $booklist$344$i$i$i;
           } else {
            $1082 = HEAP32[$1061>>2]|0;
            $1083 = ($1082|0)>(0);
            L211: do {
             if ($1083) {
              $i$05$i1$i$i$i = 0;
              while(1) {
               $1084 = (((($975)) + 1824|0) + ($i$05$i1$i$i$i<<2)|0);
               $1085 = HEAP32[$1084>>2]|0;
               $1086 = ($1085|0)==($1079|0);
               if ($1086) {
                $$0$i4$i$i$i = $i$05$i1$i$i$i;
                break L211;
               }
               $1087 = (($i$05$i1$i$i$i) + 1)|0;
               $1088 = ($1087|0)<($1082|0);
               if ($1088) {
                $i$05$i1$i$i$i = $1087;
               } else {
                label = 158;
                break;
               }
              }
             } else {
              label = 158;
             }
            } while(0);
            if ((label|0) == 158) {
             label = 0;
             $1089 = (($1082) + 1)|0;
             HEAP32[$1061>>2] = $1089;
             $$0$i4$i$i$i = $1082;
            }
            $1090 = (($booklist$344$i$i$i) + 1)|0;
            $1091 = (($1076) + ($booklist$344$i$i$i<<2)|0);
            HEAP32[$1091>>2] = $$0$i4$i$i$i;
            $1092 = (((($975)) + 1824|0) + ($$0$i4$i$i$i<<2)|0);
            HEAP32[$1092>>2] = $1081;
            $$pre69$i$i$i = HEAP32[$1075>>2]|0;
            $1094 = $$pre69$i$i$i;$booklist$5$i$i$i = $1090;
           }
           $1093 = (((($1094) + ($i$345$i$i$i<<4)|0)) + 4|0);
           $1095 = HEAP32[$1093>>2]|0;
           $1096 = ($1095|0)==(0|0);
           $1097 = $1095;
           if ($1096) {
            $1191 = $1094;$booklist$5$1$i$i$i = $booklist$5$i$i$i;
           } else {
            $1179 = HEAP32[$1061>>2]|0;
            $1180 = ($1179|0)>(0);
            L221: do {
             if ($1180) {
              $i$05$i1$1$i$i$i = 0;
              while(1) {
               $1181 = (((($975)) + 1824|0) + ($i$05$i1$1$i$i$i<<2)|0);
               $1182 = HEAP32[$1181>>2]|0;
               $1183 = ($1182|0)==($1095|0);
               if ($1183) {
                $$0$i4$1$i$i$i = $i$05$i1$1$i$i$i;
                break L221;
               }
               $1184 = (($i$05$i1$1$i$i$i) + 1)|0;
               $1185 = ($1184|0)<($1179|0);
               if ($1185) {
                $i$05$i1$1$i$i$i = $1184;
               } else {
                label = 182;
                break;
               }
              }
             } else {
              label = 182;
             }
            } while(0);
            if ((label|0) == 182) {
             label = 0;
             $1186 = (($1179) + 1)|0;
             HEAP32[$1061>>2] = $1186;
             $$0$i4$1$i$i$i = $1179;
            }
            $1187 = (($booklist$5$i$i$i) + 1)|0;
            $1188 = (($1076) + ($booklist$5$i$i$i<<2)|0);
            HEAP32[$1188>>2] = $$0$i4$1$i$i$i;
            $1189 = (((($975)) + 1824|0) + ($$0$i4$1$i$i$i<<2)|0);
            HEAP32[$1189>>2] = $1097;
            $$pre70$i$i$i = HEAP32[$1075>>2]|0;
            $1191 = $$pre70$i$i$i;$booklist$5$1$i$i$i = $1187;
           }
           $1190 = (((($1191) + ($i$345$i$i$i<<4)|0)) + 8|0);
           $1192 = HEAP32[$1190>>2]|0;
           $1193 = ($1192|0)==(0|0);
           $1194 = $1192;
           if ($1193) {
            $1207 = $1191;$booklist$5$2$i$i$i = $booklist$5$1$i$i$i;
           } else {
            $1195 = HEAP32[$1061>>2]|0;
            $1196 = ($1195|0)>(0);
            L231: do {
             if ($1196) {
              $i$05$i1$2$i$i$i = 0;
              while(1) {
               $1197 = (((($975)) + 1824|0) + ($i$05$i1$2$i$i$i<<2)|0);
               $1198 = HEAP32[$1197>>2]|0;
               $1199 = ($1198|0)==($1192|0);
               if ($1199) {
                $$0$i4$2$i$i$i = $i$05$i1$2$i$i$i;
                break L231;
               }
               $1200 = (($i$05$i1$2$i$i$i) + 1)|0;
               $1201 = ($1200|0)<($1195|0);
               if ($1201) {
                $i$05$i1$2$i$i$i = $1200;
               } else {
                label = 188;
                break;
               }
              }
             } else {
              label = 188;
             }
            } while(0);
            if ((label|0) == 188) {
             label = 0;
             $1202 = (($1195) + 1)|0;
             HEAP32[$1061>>2] = $1202;
             $$0$i4$2$i$i$i = $1195;
            }
            $1203 = (($booklist$5$1$i$i$i) + 1)|0;
            $1204 = (($1076) + ($booklist$5$1$i$i$i<<2)|0);
            HEAP32[$1204>>2] = $$0$i4$2$i$i$i;
            $1205 = (((($975)) + 1824|0) + ($$0$i4$2$i$i$i<<2)|0);
            HEAP32[$1205>>2] = $1194;
            $$pre71$i$i$i = HEAP32[$1075>>2]|0;
            $1207 = $$pre71$i$i$i;$booklist$5$2$i$i$i = $1203;
           }
           $1206 = (((($1207) + ($i$345$i$i$i<<4)|0)) + 12|0);
           $1208 = HEAP32[$1206>>2]|0;
           $1209 = ($1208|0)==(0|0);
           $1210 = $1208;
           if ($1209) {
            $booklist$5$3$i$i$i = $booklist$5$2$i$i$i;
           } else {
            $1211 = HEAP32[$1061>>2]|0;
            $1212 = ($1211|0)>(0);
            L241: do {
             if ($1212) {
              $i$05$i1$3$i$i$i = 0;
              while(1) {
               $1213 = (((($975)) + 1824|0) + ($i$05$i1$3$i$i$i<<2)|0);
               $1214 = HEAP32[$1213>>2]|0;
               $1215 = ($1214|0)==($1208|0);
               if ($1215) {
                $$0$i4$3$i$i$i = $i$05$i1$3$i$i$i;
                break L241;
               }
               $1216 = (($i$05$i1$3$i$i$i) + 1)|0;
               $1217 = ($1216|0)<($1211|0);
               if ($1217) {
                $i$05$i1$3$i$i$i = $1216;
               } else {
                label = 194;
                break;
               }
              }
             } else {
              label = 194;
             }
            } while(0);
            if ((label|0) == 194) {
             label = 0;
             $1218 = (($1211) + 1)|0;
             HEAP32[$1061>>2] = $1218;
             $$0$i4$3$i$i$i = $1211;
            }
            $1219 = (($booklist$5$2$i$i$i) + 1)|0;
            $1220 = (($1076) + ($booklist$5$2$i$i$i<<2)|0);
            HEAP32[$1220>>2] = $$0$i4$3$i$i$i;
            $1221 = (((($975)) + 1824|0) + ($$0$i4$3$i$i$i<<2)|0);
            HEAP32[$1221>>2] = $1210;
            $booklist$5$3$i$i$i = $1219;
           }
           $1222 = (($i$345$i$i$i) + 1)|0;
           $1223 = HEAP32[$993>>2]|0;
           $1224 = ($1222|0)<($1223|0);
           if ($1224) {
            $booklist$344$i$i$i = $booklist$5$3$i$i$i;$i$345$i$i$i = $1222;
           } else {
            break;
           }
          }
         } else {
          if ($995) {
           $996 = (((($939) + ($974<<5)|0)) + 28|0);
           $997 = HEAP32[$996>>2]|0;
           $998 = ((($976)) + 24|0);
           $i$056$i$i$i = 0;
           while(1) {
            $1002 = (($998) + ($i$056$i$i$i<<2)|0);
            $1003 = (($997) + ($i$056$i$i$i<<4)|0);
            $1004 = HEAP32[$1003>>2]|0;
            $1005 = ($1004|0)==(0|0);
            if (!($1005)) {
             $1006 = HEAP32[$1002>>2]|0;
             $1007 = $1006 | 1;
             HEAP32[$1002>>2] = $1007;
            }
            $1008 = (((($997) + ($i$056$i$i$i<<4)|0)) + 4|0);
            $1009 = HEAP32[$1008>>2]|0;
            $1010 = ($1009|0)==(0|0);
            if (!($1010)) {
             $1286 = HEAP32[$1002>>2]|0;
             $1287 = $1286 | 2;
             HEAP32[$1002>>2] = $1287;
            }
            $1288 = (((($997) + ($i$056$i$i$i<<4)|0)) + 8|0);
            $1289 = HEAP32[$1288>>2]|0;
            $1290 = ($1289|0)==(0|0);
            if (!($1290)) {
             $1291 = HEAP32[$1002>>2]|0;
             $1292 = $1291 | 4;
             HEAP32[$1002>>2] = $1292;
            }
            $1293 = (((($997) + ($i$056$i$i$i<<4)|0)) + 12|0);
            $1294 = HEAP32[$1293>>2]|0;
            $1295 = ($1294|0)==(0|0);
            if (!($1295)) {
             $1296 = HEAP32[$1002>>2]|0;
             $1297 = $1296 | 8;
             HEAP32[$1002>>2] = $1297;
            }
            $1298 = (($i$056$i$i$i) + 1)|0;
            $1299 = HEAP32[$993>>2]|0;
            $1300 = ($1298|0)<($1299|0);
            if ($1300) {
             $i$056$i$i$i = $1298;
            } else {
             $1025 = $1299;
             break;
            }
           }
          } else {
           $1025 = $994;
          }
          $1011 = (((($939) + ($974<<5)|0)) + 20|0);
          $1012 = HEAP32[$1011>>2]|0;
          $1013 = ((($975)) + 24|0);
          $1014 = HEAP32[$1013>>2]|0;
          $1015 = ($1014|0)>(0);
          $1016 = $1012;
          L267: do {
           if ($1015) {
            $i$05$i$i$i$i = 0;
            while(1) {
             $1017 = (((($975)) + 1824|0) + ($i$05$i$i$i$i<<2)|0);
             $1018 = HEAP32[$1017>>2]|0;
             $1019 = ($1018|0)==($1012|0);
             if ($1019) {
              $$0$i$i$i$i = $i$05$i$i$i$i;
              break L267;
             }
             $1020 = (($i$05$i$i$i$i) + 1)|0;
             $1021 = ($1020|0)<($1014|0);
             if ($1021) {
              $i$05$i$i$i$i = $1020;
             } else {
              label = 135;
              break;
             }
            }
           } else {
            label = 135;
           }
          } while(0);
          if ((label|0) == 135) {
           label = 0;
           $1022 = (($1014) + 1)|0;
           HEAP32[$1013>>2] = $1022;
           $$0$i$i$i$i = $1014;
          }
          $1023 = ((($976)) + 20|0);
          HEAP32[$1023>>2] = $$0$i$i$i$i;
          $1024 = (((($975)) + 1824|0) + ($$0$i$i$i$i<<2)|0);
          HEAP32[$1024>>2] = $1016;
          $1026 = ($1025|0)>(0);
          if (!($1026)) {
           break;
          }
          $1027 = (((($939) + ($974<<5)|0)) + 28|0);
          $1028 = ((($976)) + 280|0);
          $booklist$053$i$i$i = 0;$i$154$i$i$i = 0;
          while(1) {
           $1029 = HEAP32[$1027>>2]|0;
           $1030 = (($1029) + ($i$154$i$i$i<<4)|0);
           $1031 = HEAP32[$1030>>2]|0;
           $1032 = ($1031|0)==(0|0);
           $1033 = $1031;
           if ($1032) {
            $1046 = $1029;$booklist$2$i$i$i = $booklist$053$i$i$i;
           } else {
            $1034 = HEAP32[$1013>>2]|0;
            $1035 = ($1034|0)>(0);
            L279: do {
             if ($1035) {
              $i$05$i11$i$i$i = 0;
              while(1) {
               $1036 = (((($975)) + 1824|0) + ($i$05$i11$i$i$i<<2)|0);
               $1037 = HEAP32[$1036>>2]|0;
               $1038 = ($1037|0)==($1031|0);
               if ($1038) {
                $$0$i14$i$i$i = $i$05$i11$i$i$i;
                break L279;
               }
               $1039 = (($i$05$i11$i$i$i) + 1)|0;
               $1040 = ($1039|0)<($1034|0);
               if ($1040) {
                $i$05$i11$i$i$i = $1039;
               } else {
                label = 142;
                break;
               }
              }
             } else {
              label = 142;
             }
            } while(0);
            if ((label|0) == 142) {
             label = 0;
             $1041 = (($1034) + 1)|0;
             HEAP32[$1013>>2] = $1041;
             $$0$i14$i$i$i = $1034;
            }
            $1042 = (($booklist$053$i$i$i) + 1)|0;
            $1043 = (($1028) + ($booklist$053$i$i$i<<2)|0);
            HEAP32[$1043>>2] = $$0$i14$i$i$i;
            $1044 = (((($975)) + 1824|0) + ($$0$i14$i$i$i<<2)|0);
            HEAP32[$1044>>2] = $1033;
            $$pre$i$i$i = HEAP32[$1027>>2]|0;
            $1046 = $$pre$i$i$i;$booklist$2$i$i$i = $1042;
           }
           $1045 = (((($1046) + ($i$154$i$i$i<<4)|0)) + 4|0);
           $1047 = HEAP32[$1045>>2]|0;
           $1048 = ($1047|0)==(0|0);
           $1049 = $1047;
           if ($1048) {
            $1252 = $1046;$booklist$2$1$i$i$i = $booklist$2$i$i$i;
           } else {
            $1240 = HEAP32[$1013>>2]|0;
            $1241 = ($1240|0)>(0);
            L289: do {
             if ($1241) {
              $i$05$i11$1$i$i$i = 0;
              while(1) {
               $1242 = (((($975)) + 1824|0) + ($i$05$i11$1$i$i$i<<2)|0);
               $1243 = HEAP32[$1242>>2]|0;
               $1244 = ($1243|0)==($1047|0);
               if ($1244) {
                $$0$i14$1$i$i$i = $i$05$i11$1$i$i$i;
                break L289;
               }
               $1245 = (($i$05$i11$1$i$i$i) + 1)|0;
               $1246 = ($1245|0)<($1240|0);
               if ($1246) {
                $i$05$i11$1$i$i$i = $1245;
               } else {
                label = 206;
                break;
               }
              }
             } else {
              label = 206;
             }
            } while(0);
            if ((label|0) == 206) {
             label = 0;
             $1247 = (($1240) + 1)|0;
             HEAP32[$1013>>2] = $1247;
             $$0$i14$1$i$i$i = $1240;
            }
            $1248 = (($booklist$2$i$i$i) + 1)|0;
            $1249 = (($1028) + ($booklist$2$i$i$i<<2)|0);
            HEAP32[$1249>>2] = $$0$i14$1$i$i$i;
            $1250 = (((($975)) + 1824|0) + ($$0$i14$1$i$i$i<<2)|0);
            HEAP32[$1250>>2] = $1049;
            $$pre67$i$i$i = HEAP32[$1027>>2]|0;
            $1252 = $$pre67$i$i$i;$booklist$2$1$i$i$i = $1248;
           }
           $1251 = (((($1252) + ($i$154$i$i$i<<4)|0)) + 8|0);
           $1253 = HEAP32[$1251>>2]|0;
           $1254 = ($1253|0)==(0|0);
           $1255 = $1253;
           if ($1254) {
            $1268 = $1252;$booklist$2$2$i$i$i = $booklist$2$1$i$i$i;
           } else {
            $1256 = HEAP32[$1013>>2]|0;
            $1257 = ($1256|0)>(0);
            L299: do {
             if ($1257) {
              $i$05$i11$2$i$i$i = 0;
              while(1) {
               $1258 = (((($975)) + 1824|0) + ($i$05$i11$2$i$i$i<<2)|0);
               $1259 = HEAP32[$1258>>2]|0;
               $1260 = ($1259|0)==($1253|0);
               if ($1260) {
                $$0$i14$2$i$i$i = $i$05$i11$2$i$i$i;
                break L299;
               }
               $1261 = (($i$05$i11$2$i$i$i) + 1)|0;
               $1262 = ($1261|0)<($1256|0);
               if ($1262) {
                $i$05$i11$2$i$i$i = $1261;
               } else {
                label = 212;
                break;
               }
              }
             } else {
              label = 212;
             }
            } while(0);
            if ((label|0) == 212) {
             label = 0;
             $1263 = (($1256) + 1)|0;
             HEAP32[$1013>>2] = $1263;
             $$0$i14$2$i$i$i = $1256;
            }
            $1264 = (($booklist$2$1$i$i$i) + 1)|0;
            $1265 = (($1028) + ($booklist$2$1$i$i$i<<2)|0);
            HEAP32[$1265>>2] = $$0$i14$2$i$i$i;
            $1266 = (((($975)) + 1824|0) + ($$0$i14$2$i$i$i<<2)|0);
            HEAP32[$1266>>2] = $1255;
            $$pre68$i$i$i = HEAP32[$1027>>2]|0;
            $1268 = $$pre68$i$i$i;$booklist$2$2$i$i$i = $1264;
           }
           $1267 = (((($1268) + ($i$154$i$i$i<<4)|0)) + 12|0);
           $1269 = HEAP32[$1267>>2]|0;
           $1270 = ($1269|0)==(0|0);
           $1271 = $1269;
           if ($1270) {
            $booklist$2$3$i$i$i = $booklist$2$2$i$i$i;
           } else {
            $1272 = HEAP32[$1013>>2]|0;
            $1273 = ($1272|0)>(0);
            L309: do {
             if ($1273) {
              $i$05$i11$3$i$i$i = 0;
              while(1) {
               $1274 = (((($975)) + 1824|0) + ($i$05$i11$3$i$i$i<<2)|0);
               $1275 = HEAP32[$1274>>2]|0;
               $1276 = ($1275|0)==($1269|0);
               if ($1276) {
                $$0$i14$3$i$i$i = $i$05$i11$3$i$i$i;
                break L309;
               }
               $1277 = (($i$05$i11$3$i$i$i) + 1)|0;
               $1278 = ($1277|0)<($1272|0);
               if ($1278) {
                $i$05$i11$3$i$i$i = $1277;
               } else {
                label = 218;
                break;
               }
              }
             } else {
              label = 218;
             }
            } while(0);
            if ((label|0) == 218) {
             label = 0;
             $1279 = (($1272) + 1)|0;
             HEAP32[$1013>>2] = $1279;
             $$0$i14$3$i$i$i = $1272;
            }
            $1280 = (($booklist$2$2$i$i$i) + 1)|0;
            $1281 = (($1028) + ($booklist$2$2$i$i$i<<2)|0);
            HEAP32[$1281>>2] = $$0$i14$3$i$i$i;
            $1282 = (((($975)) + 1824|0) + ($$0$i14$3$i$i$i<<2)|0);
            HEAP32[$1282>>2] = $1271;
            $booklist$2$3$i$i$i = $1280;
           }
           $1283 = (($i$154$i$i$i) + 1)|0;
           $1284 = HEAP32[$993>>2]|0;
           $1285 = ($1283|0)<($1284|0);
           if ($1285) {
            $booklist$053$i$i$i = $booklist$2$3$i$i$i;$i$154$i$i$i = $1283;
           } else {
            break;
           }
          }
         }
        } while(0);
        $1098 = ((($975)) + 3480|0);
        $1099 = +HEAPF64[$1098>>3];
        $1100 = $1099 * 1000.0;
        $1101 = (((($975)) + 1056|0) + ($i$014$i$i<<2)|0);
        $1102 = HEAP32[$1101>>2]|0;
        $1103 = HEAP32[$63>>2]|0;
        $1104 = (+($1103|0));
        $1105 = $1104 * 0.5;
        $1106 = (($975) + ($i$014$i$i<<2)|0);
        $1107 = HEAP32[$1106>>2]|0;
        $1108 = $1107 >> 1;
        $1109 = $1100 > $1105;
        $freq$0$i$i$i = $1109 ? $1105 : $1100;
        $1110 = $freq$0$i$i$i / $1105;
        $1111 = (+($1108|0));
        $1112 = $1110 * $1111;
        $1113 = (~~(($1112)));
        $1114 = ((($1102)) + 1116|0);
        HEAP32[$1114>>2] = $1113;
        $1115 = (((($939) + ($974<<5)|0)) + 4|0);
        $1116 = HEAP32[$1115>>2]|0;
        L318: do {
         switch ($1116|0) {
         case 1:  {
          $1117 = HEAP32[$990>>2]|0;
          $1118 = ($1117|0)==(0);
          $1119 = ((($975)) + 2996|0);
          $1120 = ((($975)) + 2968|0);
          $freq$1$in$in$in$i$i$i = $1118 ? $1120 : $1119;
          $freq$1$in$in$i$i$i = HEAP32[$freq$1$in$in$in$i$i$i>>2]|0;
          $freq$1$in$i$i$i = (+($freq$1$in$in$i$i$i|0));
          $freq$1$i$i$i = $freq$1$in$i$i$i * 1000.0;
          $1121 = $freq$1$i$i$i > $1105;
          if (!($1121)) {
           $freq$2$i$i$i = $freq$1$i$i$i;
           break L318;
          }
          $freq$2$i$i$i = $1105;
          break;
         }
         case 2:  {
          $freq$2$i$i$i = 250.0;
          break;
         }
         default: {
          $freq$2$i$i$i = $freq$0$i$i$i;
         }
         }
        } while(0);
        $1122 = HEAP32[$989>>2]|0;
        $1123 = ($1122|0)==(2);
        do {
         if ($1123) {
          $1124 = ((($975)) + 12|0);
          $1125 = HEAP32[$1124>>2]|0;
          $1126 = ($1125|0)>(0);
          if ($1126) {
           $i$437$i$i$i = 0;
           while(1) {
            $1127 = (((($975)) + 544|0) + ($i$437$i$i$i<<2)|0);
            $1128 = HEAP32[$1127>>2]|0;
            $1129 = HEAP32[$1128>>2]|0;
            $1130 = ($1129|0)>(0);
            if ($1130) {
             $j$032$i$i$i = 0;
             while(1) {
              $1131 = (((($1128)) + 1092|0) + ($j$032$i$i$i<<2)|0);
              $1132 = HEAP32[$1131>>2]|0;
              $1133 = ($1132|0)==($974|0);
              do {
               if ($1133) {
                $1134 = HEAP32[$62>>2]|0;
                $1135 = ($1134|0)>(0);
                if ($1135) {
                 $ch$231$i$i$i = 0;$k2$030$i$i$i = 0;
                } else {
                 $ch$4$i$i$i = 0;
                 break;
                }
                while(1) {
                 $1136 = (((($1128)) + 4|0) + ($k2$030$i$i$i<<2)|0);
                 $1137 = HEAP32[$1136>>2]|0;
                 $1138 = ($1137|0)==($j$032$i$i$i|0);
                 $1139 = $1138&1;
                 $$ch$2$i$i$i = (($1139) + ($ch$231$i$i$i))|0;
                 $1140 = (($k2$030$i$i$i) + 1)|0;
                 $exitcond$i$i = ($1140|0)==($1134|0);
                 if ($exitcond$i$i) {
                  $ch$4$i$i$i = $$ch$2$i$i$i;
                  break;
                 } else {
                  $ch$231$i$i$i = $$ch$2$i$i$i;$k2$030$i$i$i = $1140;
                 }
                }
               } else {
                $ch$4$i$i$i = 0;
               }
              } while(0);
              $1141 = (($j$032$i$i$i) + 1)|0;
              $1142 = ($1141|0)<($1129|0);
              $1143 = ($ch$4$i$i$i|0)==(0);
              $1144 = $1142 & $1143;
              if ($1144) {
               $j$032$i$i$i = $1141;
              } else {
               $ch$1$lcssa$i$i$i = $ch$4$i$i$i;
               break;
              }
             }
            } else {
             $ch$1$lcssa$i$i$i = 0;
            }
            $1145 = (($i$437$i$i$i) + 1)|0;
            $1146 = ($1145|0)<($1125|0);
            $1147 = ($ch$1$lcssa$i$i$i|0)==(0);
            $1148 = $1146 & $1147;
            if ($1148) {
             $i$437$i$i$i = $1145;
            } else {
             $ch$0$lcssa$i$i$i = $ch$1$lcssa$i$i$i;
             break;
            }
           }
          } else {
           $ch$0$lcssa$i$i$i = 0;
          }
          $1149 = $freq$2$i$i$i / $1105;
          $1150 = $1149 * $1111;
          $1151 = (+($ch$0$lcssa$i$i$i|0));
          $1152 = $1150 * $1151;
          $1153 = HEAP32[$986>>2]|0;
          $1154 = (+($1153|0));
          $1155 = $1152 / $1154;
          $1156 = $1155 + 0.90000000000000002;
          $1157 = (~~(($1156)));
          $1158 = Math_imul($1157, $1153)|0;
          $1159 = ((($976)) + 4|0);
          HEAP32[$1159>>2] = $1158;
          $1160 = Math_imul($ch$0$lcssa$i$i$i, $1108)|0;
          $1161 = ($1158|0)>($1160|0);
          if (!($1161)) {
           $$pre$phi72$i$i$iZ2D = $1159;$1176 = $1158;$1178 = $1153;
           break;
          }
          $1162 = (($1160|0) % ($1153|0))&-1;
          $1163 = (($1160) - ($1162))|0;
          HEAP32[$1159>>2] = $1163;
          $$pre$phi72$i$i$iZ2D = $1159;$1176 = $1163;$1178 = $1153;
         } else {
          $1164 = $freq$2$i$i$i / $1105;
          $1165 = $1164 * $1111;
          $1166 = HEAP32[$986>>2]|0;
          $1167 = (+($1166|0));
          $1168 = $1165 / $1167;
          $1169 = $1168 + 0.90000000000000002;
          $1170 = (~~(($1169)));
          $1171 = Math_imul($1170, $1166)|0;
          $1172 = ((($976)) + 4|0);
          HEAP32[$1172>>2] = $1171;
          $1173 = ($1171|0)>($1108|0);
          if (!($1173)) {
           $$pre$phi72$i$i$iZ2D = $1172;$1176 = $1171;$1178 = $1166;
           break;
          }
          $1174 = (($1108|0) % ($1166|0))&-1;
          $1175 = (($1108) - ($1174))|0;
          HEAP32[$1172>>2] = $1175;
          $$pre$phi72$i$i$iZ2D = $1172;$1176 = $1175;$1178 = $1166;
         }
        } while(0);
        $1177 = ($1176|0)==(0);
        if ($1177) {
         HEAP32[$$pre$phi72$i$i$iZ2D>>2] = $1178;
        }
        $1301 = (($j$013$i$i) + 1)|0;
        $1302 = HEAP32[$967>>2]|0;
        $1303 = ($1301|0)<($1302|0);
        if ($1303) {
         $j$013$i$i = $1301;
        } else {
         break L174;
        }
       }
      }
     } while(0);
     $1304 = (($i$014$i$i) + 1)|0;
     $1305 = ($1304|0)<($$$i$i|0);
     if ($1305) {
      $i$014$i$i = $1304;
     } else {
      break;
     }
    }
    $1306 = ((($2)) + 3428|0);
    $1307 = HEAP32[$1306>>2]|0;
    $1308 = ($1307|0)>(0);
    if ($1308) {
     $1309 = ((($vi)) + 16|0);
     HEAP32[$1309>>2] = $1307;
    } else {
     $1310 = HEAP32[$1>>2]|0;
     $1311 = ((($1310)) + 3396|0);
     $1312 = HEAP32[$1311>>2]|0;
     $1313 = ((($1310)) + 3400|0);
     $1314 = +HEAPF64[$1313>>3];
     $1315 = (~~(($1314)));
     $1316 = (+($1315|0));
     $1317 = $1314 - $1316;
     $1318 = ((($1312)) + 4|0);
     $1319 = HEAP32[$1318>>2]|0;
     $1320 = ($1319|0)==(0|0);
     if ($1320) {
      $$0$i$i = -1;
     } else {
      $1321 = HEAP32[$62>>2]|0;
      $1322 = (($1319) + ($1315<<3)|0);
      $1323 = +HEAPF64[$1322>>3];
      $1324 = 1.0 - $1317;
      $1325 = $1323 * $1324;
      $1326 = (($1315) + 1)|0;
      $1327 = (($1319) + ($1326<<3)|0);
      $1328 = +HEAPF64[$1327>>3];
      $1329 = $1328 * $1317;
      $1330 = $1329 + $1325;
      $1331 = (+($1321|0));
      $1332 = $1330 * $1331;
      $phitmp$i = (~~(($1332)));
      $$0$i$i = $phitmp$i;
     }
     $1333 = ((($vi)) + 16|0);
     HEAP32[$1333>>2] = $$0$i$i;
    }
    $1334 = ((($2)) + 3424|0);
    $1335 = HEAP32[$1334>>2]|0;
    $1336 = ((($vi)) + 20|0);
    HEAP32[$1336>>2] = $1335;
    $1337 = ((($2)) + 3440|0);
    $1338 = HEAP32[$1337>>2]|0;
    $1339 = ((($vi)) + 12|0);
    HEAP32[$1339>>2] = $1338;
    $1340 = ($1307|0)==(0);
    if ($1340) {
     $$sink$i = 0;
    } else {
     $1341 = ((($2)) + 3444|0);
     $1342 = HEAP32[$1341>>2]|0;
     $1343 = (+($1342|0));
     $1344 = (+($1307|0));
     $1345 = $1343 / $1344;
     $1346 = (~~(($1345)));
     $$sink$i = $1346;
    }
    $1347 = ((($vi)) + 24|0);
    HEAP32[$1347>>2] = $$sink$i;
    $1348 = HEAP32[$127>>2]|0;
    $1349 = ($1348|0)==(0);
    if ($1349) {
     $$0 = 0;
     return ($$0|0);
    }
    $1350 = HEAP32[$1306>>2]|0;
    $1351 = ((($2)) + 3360|0);
    HEAP32[$1351>>2] = $1350;
    $1352 = HEAP32[$1334>>2]|0;
    $1353 = ((($2)) + 3364|0);
    HEAP32[$1353>>2] = $1352;
    $1354 = HEAP32[$1337>>2]|0;
    $1355 = ((($2)) + 3368|0);
    HEAP32[$1355>>2] = $1354;
    $1356 = ((($2)) + 3444|0);
    $1357 = HEAP32[$1356>>2]|0;
    $1358 = ((($2)) + 3372|0);
    HEAP32[$1358>>2] = $1357;
    $1359 = ((($2)) + 3448|0);
    $1360 = +HEAPF64[$1359>>3];
    $1361 = ((($2)) + 3376|0);
    HEAPF64[$1361>>3] = $1360;
    $1362 = ((($2)) + 3432|0);
    $1363 = +HEAPF64[$1362>>3];
    $1364 = ((($2)) + 3384|0);
    HEAPF64[$1364>>3] = $1363;
    $$0 = 0;
    return ($$0|0);
   }
  }
 } while(0);
 _vorbis_info_clear($vi);
 $$0 = $$0$i$ph;
 return ($$0|0);
}
function _encoder_create_vbr($ch,$bitrate,$quality) {
 $ch = $ch|0;
 $bitrate = $bitrate|0;
 $quality = +$quality;
 var $$$i$i$i = 0, $$$i$i4$i = 0, $$$i2$i$i = 0, $$$i20$i$i = 0, $$$i23$i$i = 0, $$$i28$i$i = 0, $$$i31$i$i = 0, $$$i34$i$i = 0, $$0 = 0, $$0$i$i$i = 0.0, $$0$i$i$i$i = 0.0, $$0$i2$i$i = 0.0, $$0$i2$i$i$i = 0.0, $$0$i5$i$i = 0.0, $$01$i$i$i = 0, $$01$i14$i$i = 0, $$01$i7$i$i = 0, $$inv$i$i$i = 0, $$not = 0, $$not$i$i$i = 0;
 var $$not67$i$i$i = 0, $$phi$trans$insert$i$i = 0, $$phi$trans$insert7$i$i = 0, $$pre$i$i = 0, $$pre$i$i$i = 0, $$pre$i3$i = 0, $$pre$phi$i$i$iZ2D = 0.0, $$pre$phi$i$iZ2D = 0, $$pre25$i$i = 0, $$pre26$i$i = 0, $$pre50$i$i$i = 0, $$pre53$i$i$i = 0.0, $$pre8$i$i = 0.0, $$promoted$i$i = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0;
 var $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0;
 var $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0;
 var $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0.0, $253 = 0, $254 = 0.0, $255 = 0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0.0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0, $283 = 0.0;
 var $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0, $294 = 0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0.0;
 var $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0;
 var $338 = 0.0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0.0;
 var $356 = 0.0, $357 = 0.0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0.0, $369 = 0.0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0.0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0.0, $385 = 0.0, $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0.0;
 var $392 = 0, $393 = 0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0, $404 = 0.0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0, $426 = 0.0, $427 = 0.0;
 var $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0.0, $577 = 0.0, $578 = 0.0, $579 = 0.0, $58 = 0, $580 = 0, $581 = 0.0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0.0, $603 = 0, $604 = 0.0, $605 = 0.0, $606 = 0.0, $607 = 0.0;
 var $608 = 0.0, $609 = 0.0, $61 = 0, $610 = 0, $611 = 0.0, $612 = 0.0, $613 = 0, $614 = 0.0, $615 = 0.0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0.0, $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0.0;
 var $662 = 0.0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0.0, $673 = 0.0, $674 = 0.0, $675 = 0.0, $676 = 0, $677 = 0.0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0.0, $683 = 0.0, $684 = 0.0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0.0, $695 = 0.0, $696 = 0.0, $697 = 0.0, $698 = 0;
 var $699 = 0.0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0.0, $705 = 0.0, $706 = 0.0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0.0, $717 = 0.0, $718 = 0.0, $719 = 0.0, $72 = 0, $720 = 0, $721 = 0.0, $722 = 0, $723 = 0, $724 = 0, $725 = 0.0, $726 = 0, $727 = 0.0, $728 = 0.0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $base$032$i$i$i = 0.0, $brmerge$i$i$i = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i$i = 0, $exitcond43$i$i$i = 0, $exitcond45$i$i$i = 0;
 var $exitcond46$i$i$i = 0, $exitcond47$i$i$i = 0, $exitcond5$i$i = 0, $exitcond6$i$i = 0, $halfoc$0$i$i$i = 0.0, $halfoc$1$i$i$i = 0.0, $hi$024$i$i$i = 0, $hi$1$lcssa$i$i$i = 0, $hi$120$i$i$i = 0, $i$0$i$i$i = 0, $i$0$ph$ph$i$i$i = 0, $i$01$i = 0, $i$04$i$i = 0, $i$11$i$i = 0, $i$117$i$i = 0, $i$126$i$i$i = 0, $i$212$i$i$i = 0, $i$37$i$i = 0, $i$410$i$i$i = 0, $i$45$i$i = 0;
 var $j$0$ph$ph$i$i$i = 0, $j$02$i$i = 0, $j$133$i$i$i = 0, $j$329$i$i$i = 0, $lo$025$i$i$i = 0, $lo$1$lcssa$i$i$i = 0, $lo$115$i$i$i = 0, $or$cond$i$i$i = 0, $req$0$i$i$i = 0, $req$0$i$i5$i = 0, $req$0$i21$i$i = 0, $req$0$i24$i$i = 0, $req$0$i29$i$i = 0, $req$0$i3$i$i = 0, $req$0$i32$i$i = 0, $req$0$i35$i$i = 0, $ret$0$lcssa$i$i$i = 0, $ret$0$lcssa$i10$i$i = 0, $ret$0$lcssa$i17$i$i = 0, $ret$02$i$i$i = 0;
 var $ret$02$i13$i$i = 0, $ret$02$i6$i$i = 0, $y$0$i$i$i = 0.0, $y$0$i$i$i$i = 0.0, $y$0$i1$i$i = 0.0, $y$0$i1$i$i$i = 0.0, $y$0$i4$i$i = 0.0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (_malloc(680)|0);
 $1 = ((($0)) + 672|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 676|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 392|0);
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;HEAP32[$3+16>>2]=0|0;HEAP32[$3+20>>2]=0|0;HEAP32[$3+24>>2]=0|0;
 $4 = (_malloc(3664)|0);
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + -4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & 3;
  $9 = ($8|0)==(0);
  if (!($9)) {
   _memset(($4|0),0,3664)|0;
  }
 }
 $10 = ((($0)) + 420|0);
 HEAP32[$10>>2] = $4;
 $11 = (_vorbis_encode_init_vbr($3,$ch,$bitrate,$quality)|0);
 $12 = ($11|0)==(0);
 if (!($12)) {
  _free($0);
  $$0 = 0;
  return ($$0|0);
 }
 $13 = ((($0)) + 424|0);
 ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;HEAP32[$13+12>>2]=0|0;
 _vorbis_comment_add_tag($13,545911,545919);
 $14 = ((($0)) + 440|0);
 $15 = HEAP32[$10>>2]|0;
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  $17 = ((($15)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)<(1);
  if (!($19)) {
   $20 = HEAP32[$15>>2]|0;
   $21 = ($20|0)<(64);
   if (!($21)) {
    $22 = ((($15)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)<($20|0);
    if (!($24)) {
     $25 = ((($15)) + 3656|0);
     $26 = HEAP32[$25>>2]|0;
     dest=$14; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
     $27 = (_malloc(136)|0);
     $28 = ($27|0)==(0|0);
     if (!($28)) {
      $29 = ((($27)) + -4|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = $30 & 3;
      $32 = ($31|0)==(0);
      if (!($32)) {
       _memset(($27|0),0,136)|0;
      }
     }
     $33 = ((($0)) + 544|0);
     HEAP32[$33>>2] = $27;
     $34 = ((($0)) + 444|0);
     HEAP32[$34>>2] = $3;
     $35 = HEAP32[$17>>2]|0;
     $36 = (($35) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $ret$0$lcssa$i$i$i = 0;
     } else {
      $$01$i$i$i = $36;$ret$02$i$i$i = 0;
      while(1) {
       $38 = $$01$i$i$i >>> 1;
       $39 = (($ret$02$i$i$i) + 1)|0;
       $40 = ($38|0)==(0);
       if ($40) {
        $ret$0$lcssa$i$i$i = $39;
        break;
       } else {
        $$01$i$i$i = $38;$ret$02$i$i$i = $39;
       }
      }
     }
     $41 = ((($27)) + 44|0);
     HEAP32[$41>>2] = $ret$0$lcssa$i$i$i;
     $42 = (_malloc(4)|0);
     $43 = ($42|0)==(0|0);
     if (!($43)) {
      $44 = ((($42)) + -4|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = $45 & 3;
      $47 = ($46|0)==(0);
      if (!($47)) {
       HEAP8[$42>>0]=0&255;HEAP8[$42+1>>0]=(0>>8)&255;HEAP8[$42+2>>0]=(0>>16)&255;HEAP8[$42+3>>0]=0>>24;
      }
     }
     $48 = ((($27)) + 12|0);
     HEAP32[$48>>2] = $42;
     $49 = (_malloc(4)|0);
     $50 = ($49|0)==(0|0);
     if (!($50)) {
      $51 = ((($49)) + -4|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = $52 & 3;
      $54 = ($53|0)==(0);
      if (!($54)) {
       HEAP8[$49>>0]=0&255;HEAP8[$49+1>>0]=(0>>8)&255;HEAP8[$49+2>>0]=(0>>16)&255;HEAP8[$49+3>>0]=0>>24;
      }
     }
     $55 = ((($27)) + 16|0);
     HEAP32[$55>>2] = $49;
     $56 = (_malloc(20)|0);
     $57 = ($56|0)==(0|0);
     if (!($57)) {
      $58 = ((($56)) + -4|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = $59 & 3;
      $61 = ($60|0)==(0);
      if (!($61)) {
       dest=$56; stop=dest+20|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      }
     }
     HEAP32[$42>>2] = $56;
     $62 = (_malloc(20)|0);
     $63 = ($62|0)==(0|0);
     if (!($63)) {
      $64 = ((($62)) + -4|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = $65 & 3;
      $67 = ($66|0)==(0);
      if (!($67)) {
       dest=$62; stop=dest+20|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      }
     }
     HEAP32[$49>>2] = $62;
     $68 = HEAP32[$15>>2]|0;
     $69 = $68 >> $26;
     _mdct_init($56,$69);
     $70 = HEAP32[$55>>2]|0;
     $71 = HEAP32[$70>>2]|0;
     $72 = HEAP32[$22>>2]|0;
     $73 = $72 >> $26;
     _mdct_init($71,$73);
     $74 = HEAP32[$15>>2]|0;
     $75 = ($74|0)==(0);
     if ($75) {
      $ret$0$lcssa$i10$i$i = 0;
     } else {
      $$01$i7$i$i = $74;$ret$02$i6$i$i = 0;
      while(1) {
       $76 = $$01$i7$i$i >>> 1;
       $77 = (($ret$02$i6$i$i) + 1)|0;
       $78 = ($76|0)==(0);
       if ($78) {
        $ret$0$lcssa$i10$i$i = $77;
        break;
       } else {
        $$01$i7$i$i = $76;$ret$02$i6$i$i = $77;
       }
      }
     }
     $79 = (($ret$0$lcssa$i10$i$i) + -7)|0;
     $80 = ((($27)) + 4|0);
     HEAP32[$80>>2] = $79;
     $81 = HEAP32[$22>>2]|0;
     $82 = ($81|0)==(0);
     if ($82) {
      $ret$0$lcssa$i17$i$i = 0;
     } else {
      $$01$i14$i$i = $81;$ret$02$i13$i$i = 0;
      while(1) {
       $83 = $$01$i14$i$i >>> 1;
       $84 = (($ret$02$i13$i$i) + 1)|0;
       $85 = ($83|0)==(0);
       if ($85) {
        $ret$0$lcssa$i17$i$i = $84;
        break;
       } else {
        $$01$i14$i$i = $83;$ret$02$i13$i$i = $84;
       }
      }
     }
     $86 = (($ret$0$lcssa$i17$i$i) + -7)|0;
     $87 = ((($27)) + 8|0);
     HEAP32[$87>>2] = $86;
     $88 = ((($27)) + 20|0);
     _drft_init($88,$74);
     $89 = ((($27)) + 32|0);
     $90 = HEAP32[$22>>2]|0;
     _drft_init($89,$90);
     $91 = ((($15)) + 2848|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = ($92|0)==(0|0);
     do {
      if ($93) {
       $94 = ((($15)) + 24|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = ($95|0)==(0);
       if ($96) {
        $req$0$i21$i$i = 0;
       } else {
        $97 = ($95*56)|0;
        $98 = ($95>>>0)>(65535);
        if ($98) {
         $99 = (($97>>>0) / ($95>>>0))&-1;
         $100 = ($99|0)==(56);
         $$$i20$i$i = $100 ? $97 : -1;
         $req$0$i21$i$i = $$$i20$i$i;
        } else {
         $req$0$i21$i$i = $97;
        }
       }
       $101 = (_malloc($req$0$i21$i$i)|0);
       $102 = ($101|0)==(0|0);
       do {
        if (!($102)) {
         $103 = ((($101)) + -4|0);
         $104 = HEAP32[$103>>2]|0;
         $105 = $104 & 3;
         $106 = ($105|0)==(0);
         if ($106) {
          break;
         }
         _memset(($101|0),0,($req$0$i21$i$i|0))|0;
        }
       } while(0);
       HEAP32[$91>>2] = $101;
       $107 = HEAP32[$94>>2]|0;
       $108 = ($107|0)>(0);
       if ($108) {
        $109 = ((($15)) + 1824|0);
        $110 = HEAP32[$109>>2]|0;
        _vorbis_book_init_encode($101,$110);
        $111 = HEAP32[$94>>2]|0;
        $112 = ($111|0)>(1);
        if ($112) {
         $114 = 1;
        } else {
         break;
        }
        while(1) {
         $$pre$i$i = HEAP32[$91>>2]|0;
         $113 = (($$pre$i$i) + (($114*56)|0)|0);
         $115 = (((($15)) + 1824|0) + ($114<<2)|0);
         $116 = HEAP32[$115>>2]|0;
         _vorbis_book_init_encode($113,$116);
         $117 = (($114) + 1)|0;
         $118 = HEAP32[$94>>2]|0;
         $119 = ($117|0)<($118|0);
         if ($119) {
          $114 = $117;
         } else {
          break;
         }
        }
       }
      }
     } while(0);
     $120 = ((($15)) + 28|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = ($121|0)==(0);
     if ($122) {
      $req$0$i24$i$i = 0;
     } else {
      $123 = ($121*52)|0;
      $124 = ($121>>>0)>(65535);
      if ($124) {
       $125 = (($123>>>0) / ($121>>>0))&-1;
       $126 = ($125|0)==(52);
       $$$i23$i$i = $126 ? $123 : -1;
       $req$0$i24$i$i = $$$i23$i$i;
      } else {
       $req$0$i24$i$i = $123;
      }
     }
     $127 = (_malloc($req$0$i24$i$i)|0);
     $128 = ($127|0)==(0|0);
     if (!($128)) {
      $129 = ((($127)) + -4|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = $130 & 3;
      $132 = ($131|0)==(0);
      if (!($132)) {
       _memset(($127|0),0,($req$0$i24$i$i|0))|0;
      }
     }
     $133 = ((($27)) + 56|0);
     HEAP32[$133>>2] = $127;
     $134 = HEAP32[$120>>2]|0;
     $135 = ($134|0)>(0);
     L68: do {
      if ($135) {
       $136 = ((($0)) + 400|0);
       $137 = ((($15)) + 2868|0);
       $139 = $127;$i$117$i$i = 0;
       while(1) {
        $138 = (($139) + (($i$117$i$i*52)|0)|0);
        $140 = (((($15)) + 2852|0) + ($i$117$i$i<<2)|0);
        $141 = HEAP32[$140>>2]|0;
        $142 = HEAP32[$141>>2]|0;
        $143 = (($15) + ($142<<2)|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = (($144|0) / 2)&-1;
        $146 = HEAP32[$136>>2]|0;
        dest=$138; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
        $147 = HEAP32[$137>>2]|0;
        $148 = (((($139) + (($i$117$i$i*52)|0)|0)) + 36|0);
        HEAP32[$148>>2] = $147;
        $149 = (+($147|0));
        $150 = $149 * 8.0;
        $151 = $150;
        $152 = (+Math_log((+$151)));
        $153 = $152 * 1.4426950408889634;
        HEAPF64[tempDoublePtr>>3] = $153;$154 = HEAP32[tempDoublePtr>>2]|0;
        $155 = HEAP32[tempDoublePtr+4>>2]|0;
        $156 = $155 & 2146435072;
        $157 = ($156>>>0)>(1126170624);
        $158 = (0)>(0);
        $159 = ($156|0)==(1126170624);
        $160 = $159 & $158;
        $161 = $157 | $160;
        do {
         if ($161) {
          $$0$i$i$i$i = $153;
         } else {
          $162 = ($155|0)<(0);
          $163 = $153 + -4503599627370496.0;
          $164 = $163 + 4503599627370496.0;
          $165 = $153 + 4503599627370496.0;
          $166 = $165 + -4503599627370496.0;
          $y$0$i$i$i$i = $162 ? $164 : $166;
          $167 = $y$0$i$i$i$i == 0.0;
          if (!($167)) {
           $$0$i$i$i$i = $y$0$i$i$i$i;
           break;
          }
          $168 = $162 ? -0.0 : 0.0;
          $$0$i$i$i$i = $168;
         }
        } while(0);
        $169 = $$0$i$i$i$i + -1.0;
        $170 = (~~(($169)));
        $171 = (((($139) + (($i$117$i$i*52)|0)|0)) + 32|0);
        HEAP32[$171>>2] = $170;
        $172 = (+($146|0));
        $173 = $172 * 0.25;
        $174 = $173;
        $175 = $174 * 0.5;
        $176 = (+($145|0));
        $177 = $175 / $176;
        $178 = (+Math_log((+$177)));
        $179 = $178 * 1.4426950216293335;
        $180 = $179 + -5.9657840728759766;
        $181 = (($170) + 1)|0;
        $182 = 1 << $181;
        $183 = (+($182|0));
        $184 = $183 * $180;
        $185 = (+($147|0));
        $186 = $184 - $185;
        $187 = (~~(($186)));
        $188 = (((($139) + (($i$117$i$i*52)|0)|0)) + 28|0);
        HEAP32[$188>>2] = $187;
        $189 = (+($145|0));
        $190 = $189 + 0.25;
        $191 = $190 * $172;
        $192 = $191;
        $193 = $192 * 0.5;
        $194 = $193 / $176;
        $195 = (+Math_log((+$194)));
        $196 = $195 * 1.4426950216293335;
        $197 = $196 + -5.9657840728759766;
        $198 = $183 * $197;
        $199 = $198 + 0.5;
        $200 = (~~(($199)));
        $201 = (1 - ($187))|0;
        $202 = (($201) + ($200))|0;
        $203 = (((($139) + (($i$117$i$i*52)|0)|0)) + 40|0);
        HEAP32[$203>>2] = $202;
        $204 = $145 << 2;
        $205 = (_malloc($204)|0);
        $206 = (((($139) + (($i$117$i$i*52)|0)|0)) + 16|0);
        HEAP32[$206>>2] = $205;
        $207 = (_malloc($204)|0);
        $208 = (((($139) + (($i$117$i$i*52)|0)|0)) + 20|0);
        HEAP32[$208>>2] = $207;
        $209 = (_malloc($204)|0);
        $210 = (((($139) + (($i$117$i$i*52)|0)|0)) + 24|0);
        HEAP32[$210>>2] = $209;
        $211 = (((($139) + (($i$117$i$i*52)|0)|0)) + 4|0);
        HEAP32[$211>>2] = $141;
        HEAP32[$138>>2] = $145;
        $212 = (((($139) + (($i$117$i$i*52)|0)|0)) + 44|0);
        HEAP32[$212>>2] = $146;
        $213 = (((($139) + (($i$117$i$i*52)|0)|0)) + 48|0);
        HEAPF32[$213>>2] = 1.0;
        $214 = ($146|0)<(26000);
        do {
         if ($214) {
          HEAPF32[$213>>2] = 0.0;
         } else {
          $215 = ($146|0)<(38000);
          if ($215) {
           HEAPF32[$213>>2] = 0.93999999761581421;
           break;
          }
          $216 = ($146|0)>(46000);
          if (!($216)) {
           break;
          }
          HEAPF32[$213>>2] = 1.2749999761581421;
         }
        } while(0);
        $217 = $176 * 2.0;
        $218 = (+($146|0));
        $i$0$ph$ph$i$i$i = 0;$j$0$ph$ph$i$i$i = 0;
        L84: while(1) {
         $$not67$i$i$i = ($j$0$ph$ph$i$i$i|0)>=($145|0);
         $i$0$i$i$i = $i$0$ph$ph$i$i$i;
         while(1) {
          $219 = ($i$0$i$i$i|0)<(87);
          if (!($219)) {
           break L84;
          }
          $222 = (($i$0$i$i$i) + 1)|0;
          $223 = (+($222|0));
          $224 = $223 * 0.08664337545633316;
          $225 = $224 + 2.7488713472395148;
          $226 = (+Math_exp((+$225)));
          $227 = $217 * $226;
          $228 = $227 / $218;
          HEAPF64[tempDoublePtr>>3] = $228;$229 = HEAP32[tempDoublePtr>>2]|0;
          $230 = HEAP32[tempDoublePtr+4>>2]|0;
          $231 = $230 & 2146435072;
          $232 = ($231>>>0)>(1126170624);
          $233 = (0)>(0);
          $234 = ($231|0)==(1126170624);
          $235 = $234 & $233;
          $236 = $232 | $235;
          do {
           if ($236) {
            $$0$i2$i$i$i = $228;
           } else {
            $237 = ($230|0)<(0);
            $238 = $228 + -4503599627370496.0;
            $239 = $238 + 4503599627370496.0;
            $240 = $228 + 4503599627370496.0;
            $241 = $240 + -4503599627370496.0;
            $y$0$i1$i$i$i = $237 ? $239 : $241;
            $242 = $y$0$i1$i$i$i == 0.0;
            if (!($242)) {
             $$0$i2$i$i$i = $y$0$i1$i$i$i;
             break;
            }
            $243 = $237 ? -0.0 : 0.0;
            $$0$i2$i$i$i = $243;
           }
          } while(0);
          $244 = (~~(($$0$i2$i$i$i)));
          $$not$i$i$i = ($244|0)<=($j$0$ph$ph$i$i$i|0);
          $brmerge$i$i$i = $$not$i$i$i | $$not67$i$i$i;
          if ($brmerge$i$i$i) {
           $i$0$i$i$i = $222;
          } else {
           break;
          }
         }
         $245 = (36340 + ($i$0$i$i$i<<2)|0);
         $246 = +HEAPF32[$245>>2];
         $247 = (36340 + ($222<<2)|0);
         $248 = +HEAPF32[$247>>2];
         $249 = $248 - $246;
         $250 = (($244) - ($j$0$ph$ph$i$i$i))|0;
         $251 = (+($250|0));
         $252 = $249 / $251;
         $253 = HEAP32[$206>>2]|0;
         $base$032$i$i$i = $246;$j$133$i$i$i = $j$0$ph$ph$i$i$i;
         while(1) {
          $254 = $base$032$i$i$i + 100.0;
          $255 = (($253) + ($j$133$i$i$i<<2)|0);
          HEAPF32[$255>>2] = $254;
          $256 = $base$032$i$i$i + $252;
          $257 = (($j$133$i$i$i) + 1)|0;
          $258 = ($257|0)<($244|0);
          $259 = ($257|0)<($145|0);
          $or$cond$i$i$i = $258 & $259;
          if ($or$cond$i$i$i) {
           $base$032$i$i$i = $256;$j$133$i$i$i = $257;
          } else {
           $i$0$ph$ph$i$i$i = $222;$j$0$ph$ph$i$i$i = $257;
           continue L84;
          }
         }
        }
        $220 = ($j$0$ph$ph$i$i$i|0)<($145|0);
        if ($220) {
         $221 = HEAP32[$206>>2]|0;
         $j$329$i$i$i = $j$0$ph$ph$i$i$i;
         while(1) {
          $269 = (($j$329$i$i$i) + -1)|0;
          $270 = (($221) + ($269<<2)|0);
          $271 = HEAP32[$270>>2]|0;
          $272 = (($221) + ($j$329$i$i$i<<2)|0);
          HEAP32[$272>>2] = $271;
          $273 = (($j$329$i$i$i) + 1)|0;
          $exitcond47$i$i$i = ($273|0)==($145|0);
          if ($exitcond47$i$i$i) {
           break;
          } else {
           $j$329$i$i$i = $273;
          }
         }
        }
        $260 = ($144|0)>(1);
        if ($260) {
         $261 = $145 << 1;
         $262 = (($146|0) / ($261|0))&-1;
         $263 = ((($141)) + 120|0);
         $264 = HEAP32[$263>>2]|0;
         $265 = HEAP32[$210>>2]|0;
         $266 = ((($141)) + 124|0);
         $267 = ((($141)) + 116|0);
         $268 = ((($141)) + 112|0);
         $hi$024$i$i$i = 1;$i$126$i$i$i = 0;$lo$025$i$i$i = -99;
         while(1) {
          $276 = Math_imul($262, $i$126$i$i$i)|0;
          $277 = (+($276|0));
          $278 = $277 * 7.3999998858198524E-4;
          $279 = $278;
          $280 = (+Math_atan((+$279)));
          $281 = $280 * 13.100000381469727;
          $282 = Math_imul($276, $276)|0;
          $283 = (+($282|0));
          $284 = $283 * 1.8499999754340024E-8;
          $285 = $284;
          $286 = (+Math_atan((+$285)));
          $287 = $286 * 2.2400000095367432;
          $288 = $287 + $281;
          $289 = $277 * 9.9999997473787516E-5;
          $290 = $289;
          $291 = $288 + $290;
          $292 = $291;
          $293 = (($264) + ($lo$025$i$i$i))|0;
          $294 = ($293|0)<($i$126$i$i$i|0);
          L106: do {
           if ($294) {
            $295 = +HEAPF32[$268>>2];
            $296 = $292 - $295;
            $297 = $296;
            $lo$115$i$i$i = $lo$025$i$i$i;
            while(1) {
             $298 = Math_imul($lo$115$i$i$i, $262)|0;
             $299 = (+($298|0));
             $300 = $299 * 7.3999998858198524E-4;
             $301 = $300;
             $302 = (+Math_atan((+$301)));
             $303 = $302 * 13.100000381469727;
             $304 = Math_imul($298, $298)|0;
             $305 = (+($304|0));
             $306 = $305 * 1.8499999754340024E-8;
             $307 = $306;
             $308 = (+Math_atan((+$307)));
             $309 = $308 * 2.2400000095367432;
             $310 = $299 * 9.9999997473787516E-5;
             $311 = $310;
             $312 = $303 + $311;
             $313 = $312 + $309;
             $314 = $313 < $297;
             if (!($314)) {
              $lo$1$lcssa$i$i$i = $lo$115$i$i$i;
              break L106;
             }
             $318 = (($lo$115$i$i$i) + 1)|0;
             $319 = HEAP32[$263>>2]|0;
             $320 = (($319) + ($318))|0;
             $321 = ($320|0)<($i$126$i$i$i|0);
             if ($321) {
              $lo$115$i$i$i = $318;
             } else {
              $lo$1$lcssa$i$i$i = $318;
              break;
             }
            }
           } else {
            $lo$1$lcssa$i$i$i = $lo$025$i$i$i;
           }
          } while(0);
          $315 = ($hi$024$i$i$i|0)>($145|0);
          L112: do {
           if ($315) {
            $hi$1$lcssa$i$i$i = $hi$024$i$i$i;
           } else {
            $316 = HEAP32[$266>>2]|0;
            $317 = (($316) + ($i$126$i$i$i))|0;
            $hi$120$i$i$i = $hi$024$i$i$i;
            while(1) {
             $322 = ($hi$120$i$i$i|0)<($317|0);
             if (!($322)) {
              $323 = Math_imul($hi$120$i$i$i, $262)|0;
              $324 = (+($323|0));
              $325 = $324 * 7.3999998858198524E-4;
              $326 = $325;
              $327 = (+Math_atan((+$326)));
              $328 = $327 * 13.100000381469727;
              $329 = Math_imul($323, $323)|0;
              $330 = (+($329|0));
              $331 = $330 * 1.8499999754340024E-8;
              $332 = $331;
              $333 = (+Math_atan((+$332)));
              $334 = $333 * 2.2400000095367432;
              $335 = $324 * 9.9999997473787516E-5;
              $336 = $335;
              $337 = $328 + $336;
              $338 = $337 + $334;
              $339 = +HEAPF32[$267>>2];
              $340 = $339 + $292;
              $341 = $340;
              $342 = $338 < $341;
              if (!($342)) {
               $hi$1$lcssa$i$i$i = $hi$120$i$i$i;
               break L112;
              }
             }
             $343 = (($hi$120$i$i$i) + 1)|0;
             $344 = ($hi$120$i$i$i|0)<($145|0);
             if ($344) {
              $hi$120$i$i$i = $343;
             } else {
              $hi$1$lcssa$i$i$i = $343;
              break;
             }
            }
           }
          } while(0);
          $345 = $lo$1$lcssa$i$i$i << 16;
          $346 = (($345) + -65537)|0;
          $347 = (($346) + ($hi$1$lcssa$i$i$i))|0;
          $348 = (($265) + ($i$126$i$i$i<<2)|0);
          HEAP32[$348>>2] = $347;
          $349 = (($i$126$i$i$i) + 1)|0;
          $exitcond46$i$i$i = ($349|0)==($145|0);
          if ($exitcond46$i$i$i) {
           break;
          } else {
           $hi$024$i$i$i = $hi$1$lcssa$i$i$i;$i$126$i$i$i = $349;$lo$025$i$i$i = $lo$1$lcssa$i$i$i;
          }
         }
         $274 = $218 * 0.5;
         $275 = HEAP32[$208>>2]|0;
         $i$212$i$i$i = 0;
         while(1) {
          $350 = (+($i$212$i$i$i|0));
          $351 = $350 + 0.25;
          $352 = $351;
          $353 = $274 * $352;
          $354 = $353 / $176;
          $355 = (+Math_log((+$354)));
          $356 = $355 * 1.4426950216293335;
          $357 = $356 + -5.9657840728759766;
          $358 = HEAP32[$171>>2]|0;
          $359 = (($358) + 1)|0;
          $360 = 1 << $359;
          $361 = (+($360|0));
          $362 = $361 * $357;
          $363 = $362 + 0.5;
          $364 = (~~(($363)));
          $365 = (($275) + ($i$212$i$i$i<<2)|0);
          HEAP32[$365>>2] = $364;
          $366 = (($i$212$i$i$i) + 1)|0;
          $exitcond45$i$i$i = ($366|0)==($145|0);
          if ($exitcond45$i$i$i) {
           $$pre$phi$i$i$iZ2D = $274;
           break;
          } else {
           $i$212$i$i$i = $366;
          }
         }
        } else {
         $$pre53$i$i$i = $218 * 0.5;
         $$pre$phi$i$i$iZ2D = $$pre53$i$i$i;
        }
        $367 = ((($141)) + 36|0);
        $368 = $$pre$phi$i$i$iZ2D / $176;
        $369 = $368;
        $370 = ((($141)) + 24|0);
        $371 = +HEAPF32[$370>>2];
        $372 = ((($141)) + 28|0);
        $373 = +HEAPF32[$372>>2];
        $374 = (_setup_tone_curves($367,$369,$145,$371,$373)|0);
        $375 = (((($139) + (($i$117$i$i*52)|0)|0)) + 8|0);
        HEAP32[$375>>2] = $374;
        $376 = (_malloc(12)|0);
        $377 = (((($139) + (($i$117$i$i*52)|0)|0)) + 12|0);
        HEAP32[$377>>2] = $376;
        $378 = (_malloc($204)|0);
        HEAP32[$376>>2] = $378;
        $379 = (_malloc($204)|0);
        $380 = ((($376)) + 4|0);
        HEAP32[$380>>2] = $379;
        $381 = (_malloc($204)|0);
        $382 = ((($376)) + 8|0);
        HEAP32[$382>>2] = $381;
        if ($260) {
         $383 = HEAP32[$211>>2]|0;
         $$pre$i$i$i = HEAP32[$376>>2]|0;
         $$pre50$i$i$i = HEAP32[$380>>2]|0;
         $i$410$i$i$i = 0;
         while(1) {
          $384 = (+($i$410$i$i$i|0));
          $385 = $384 + 0.5;
          $386 = $385 * $218;
          $387 = $386 / $217;
          $388 = (+Math_log((+$387)));
          $389 = $388 * 2.885390043258667;
          $390 = $389 + -11.931568145751953;
          $391 = $390;
          $392 = $391 < 0.0;
          $halfoc$0$i$i$i = $392 ? 0.0 : $391;
          $$inv$i$i$i = $halfoc$0$i$i$i >= 16.0;
          $halfoc$1$i$i$i = $$inv$i$i$i ? 16.0 : $halfoc$0$i$i$i;
          $393 = (~~(($halfoc$1$i$i$i)));
          $394 = (+($393|0));
          $395 = $halfoc$1$i$i$i - $394;
          $396 = $395;
          $397 = 1.0 - $396;
          $398 = (($393) + 1)|0;
          $399 = (((($383)) + 132|0) + ($393<<2)|0);
          $400 = +HEAPF32[$399>>2];
          $401 = $400;
          $402 = $401 * $397;
          $403 = (((($383)) + 132|0) + ($398<<2)|0);
          $404 = +HEAPF32[$403>>2];
          $405 = $404 * $395;
          $406 = $405;
          $407 = $406 + $402;
          $408 = $407;
          $409 = (($$pre$i$i$i) + ($i$410$i$i$i<<2)|0);
          HEAPF32[$409>>2] = $408;
          $410 = (((($383)) + 200|0) + ($393<<2)|0);
          $411 = +HEAPF32[$410>>2];
          $412 = $411;
          $413 = $412 * $397;
          $414 = (((($383)) + 200|0) + ($398<<2)|0);
          $415 = +HEAPF32[$414>>2];
          $416 = $415 * $395;
          $417 = $416;
          $418 = $417 + $413;
          $419 = $418;
          $420 = (($$pre50$i$i$i) + ($i$410$i$i$i<<2)|0);
          HEAPF32[$420>>2] = $419;
          $421 = (((($383)) + 268|0) + ($393<<2)|0);
          $422 = +HEAPF32[$421>>2];
          $423 = $422;
          $424 = $423 * $397;
          $425 = (((($383)) + 268|0) + ($398<<2)|0);
          $426 = +HEAPF32[$425>>2];
          $427 = $426 * $395;
          $428 = $427;
          $429 = $428 + $424;
          $430 = $429;
          $431 = (($381) + ($i$410$i$i$i<<2)|0);
          HEAPF32[$431>>2] = $430;
          $432 = (($i$410$i$i$i) + 1)|0;
          $exitcond43$i$i$i = ($432|0)==($145|0);
          if ($exitcond43$i$i$i) {
           break;
          } else {
           $i$410$i$i$i = $432;
          }
         }
        }
        $433 = (($i$117$i$i) + 1)|0;
        $434 = HEAP32[$120>>2]|0;
        $435 = ($433|0)<($434|0);
        if (!($435)) {
         break L68;
        }
        $$pre25$i$i = HEAP32[$133>>2]|0;
        $139 = $$pre25$i$i;$i$117$i$i = $433;
       }
      }
     } while(0);
     HEAP32[$14>>2] = 1;
     $436 = HEAP32[$22>>2]|0;
     $437 = ((($0)) + 456|0);
     HEAP32[$437>>2] = $436;
     $438 = ((($0)) + 396|0);
     $439 = HEAP32[$438>>2]|0;
     $440 = $439 << 2;
     $441 = (_malloc($440)|0);
     $442 = ((($0)) + 448|0);
     HEAP32[$442>>2] = $441;
     $443 = (_malloc($440)|0);
     $444 = ((($0)) + 452|0);
     HEAP32[$444>>2] = $443;
     $445 = ($439|0)>(0);
     do {
      if ($445) {
       $446 = ($436|0)==(0);
       do {
        if ($446) {
         $req$0$i29$i$i = 0;
        } else {
         $447 = $436 << 2;
         $448 = ($436>>>0)>(65535);
         if (!($448)) {
          $req$0$i29$i$i = $447;
          break;
         }
         $449 = (($447>>>0) / ($436>>>0))&-1;
         $450 = ($449|0)==(4);
         $$$i28$i$i = $450 ? $447 : -1;
         $req$0$i29$i$i = $$$i28$i$i;
        }
       } while(0);
       $451 = (_malloc($req$0$i29$i$i)|0);
       $452 = ($451|0)==(0|0);
       do {
        if (!($452)) {
         $453 = ((($451)) + -4|0);
         $454 = HEAP32[$453>>2]|0;
         $455 = $454 & 3;
         $456 = ($455|0)==(0);
         if ($456) {
          break;
         }
         _memset(($451|0),0,($req$0$i29$i$i|0))|0;
        }
       } while(0);
       HEAP32[$441>>2] = $451;
       $457 = ($439|0)>(1);
       if (!($457)) {
        break;
       }
       $458 = $436 << 2;
       $468 = 1;
       while(1) {
        $$pre26$i$i = HEAP32[$442>>2]|0;
        $$not = ($436>>>0)<(65536);
        if ($$not) {
         $req$0$i32$i$i = $458;
        } else {
         $459 = (($458>>>0) / ($436>>>0))&-1;
         $460 = ($459|0)==(4);
         $$$i31$i$i = $460 ? $458 : -1;
         $req$0$i32$i$i = $$$i31$i$i;
        }
        $461 = (_malloc($req$0$i32$i$i)|0);
        $462 = ($461|0)==(0|0);
        do {
         if (!($462)) {
          $463 = ((($461)) + -4|0);
          $464 = HEAP32[$463>>2]|0;
          $465 = $464 & 3;
          $466 = ($465|0)==(0);
          if ($466) {
           break;
          }
          _memset(($461|0),0,($req$0$i32$i$i|0))|0;
         }
        } while(0);
        $467 = (($$pre26$i$i) + ($468<<2)|0);
        HEAP32[$467>>2] = $461;
        $469 = (($468) + 1)|0;
        $exitcond = ($469|0)==($439|0);
        if ($exitcond) {
         break;
        } else {
         $468 = $469;
        }
       }
      }
     } while(0);
     $470 = ((($0)) + 476|0);
     HEAP32[$470>>2] = 0;
     $471 = ((($0)) + 480|0);
     HEAP32[$471>>2] = 0;
     $472 = HEAP32[$22>>2]|0;
     $473 = (($472|0) / 2)&-1;
     $474 = ((($0)) + 488|0);
     HEAP32[$474>>2] = $473;
     $475 = ((($0)) + 460|0);
     HEAP32[$475>>2] = $473;
     $476 = ((($15)) + 16|0);
     $477 = HEAP32[$476>>2]|0;
     $478 = ($477|0)==(0);
     do {
      if ($478) {
       $req$0$i35$i$i = 0;
      } else {
       $479 = $477 << 2;
       $480 = ($477>>>0)>(65535);
       if (!($480)) {
        $req$0$i35$i$i = $479;
        break;
       }
       $481 = (($479>>>0) / ($477>>>0))&-1;
       $482 = ($481|0)==(4);
       $$$i34$i$i = $482 ? $479 : -1;
       $req$0$i35$i$i = $$$i34$i$i;
      }
     } while(0);
     $483 = (_malloc($req$0$i35$i$i)|0);
     $484 = ($483|0)==(0|0);
     do {
      if (!($484)) {
       $485 = ((($483)) + -4|0);
       $486 = HEAP32[$485>>2]|0;
       $487 = $486 & 3;
       $488 = ($487|0)==(0);
       if ($488) {
        break;
       }
       _memset(($483|0),0,($req$0$i35$i$i|0))|0;
      }
     } while(0);
     $489 = ((($27)) + 48|0);
     HEAP32[$489>>2] = $483;
     $490 = ((($15)) + 20|0);
     $491 = HEAP32[$490>>2]|0;
     $492 = ($491|0)==(0);
     do {
      if ($492) {
       $req$0$i$i$i = 0;
      } else {
       $493 = $491 << 2;
       $494 = ($491>>>0)>(65535);
       if (!($494)) {
        $req$0$i$i$i = $493;
        break;
       }
       $495 = (($493>>>0) / ($491>>>0))&-1;
       $496 = ($495|0)==(4);
       $$$i$i$i = $496 ? $493 : -1;
       $req$0$i$i$i = $$$i$i$i;
      }
     } while(0);
     $497 = (_malloc($req$0$i$i$i)|0);
     $498 = ($497|0)==(0|0);
     do {
      if (!($498)) {
       $499 = ((($497)) + -4|0);
       $500 = HEAP32[$499>>2]|0;
       $501 = $500 & 3;
       $502 = ($501|0)==(0);
       if ($502) {
        break;
       }
       _memset(($497|0),0,($req$0$i$i$i|0))|0;
      }
     } while(0);
     $503 = ((($27)) + 52|0);
     HEAP32[$503>>2] = $497;
     $504 = HEAP32[$476>>2]|0;
     $505 = ($504|0)>(0);
     if ($505) {
      $i$37$i$i = 0;
      while(1) {
       $508 = (((($15)) + 800|0) + ($i$37$i$i<<2)|0);
       $509 = HEAP32[$508>>2]|0;
       $510 = (59540 + ($509<<2)|0);
       $511 = HEAP32[$510>>2]|0;
       $512 = ((($511)) + 8|0);
       $513 = HEAP32[$512>>2]|0;
       $514 = (((($15)) + 1056|0) + ($i$37$i$i<<2)|0);
       $515 = HEAP32[$514>>2]|0;
       $516 = (FUNCTION_TABLE_iii[$513 & 31]($14,$515)|0);
       $517 = HEAP32[$489>>2]|0;
       $518 = (($517) + ($i$37$i$i<<2)|0);
       HEAP32[$518>>2] = $516;
       $519 = (($i$37$i$i) + 1)|0;
       $520 = HEAP32[$476>>2]|0;
       $521 = ($519|0)<($520|0);
       if ($521) {
        $i$37$i$i = $519;
       } else {
        break;
       }
      }
     }
     $506 = HEAP32[$490>>2]|0;
     $507 = ($506|0)>(0);
     if ($507) {
      $i$45$i$i = 0;
      while(1) {
       $522 = (((($15)) + 1312|0) + ($i$45$i$i<<2)|0);
       $523 = HEAP32[$522>>2]|0;
       $524 = (59548 + ($523<<2)|0);
       $525 = HEAP32[$524>>2]|0;
       $526 = ((($525)) + 8|0);
       $527 = HEAP32[$526>>2]|0;
       $528 = (((($15)) + 1568|0) + ($i$45$i$i<<2)|0);
       $529 = HEAP32[$528>>2]|0;
       $530 = (FUNCTION_TABLE_iii[$527 & 31]($14,$529)|0);
       $531 = HEAP32[$503>>2]|0;
       $532 = (($531) + ($i$45$i$i<<2)|0);
       HEAP32[$532>>2] = $530;
       $533 = (($i$45$i$i) + 1)|0;
       $534 = HEAP32[$490>>2]|0;
       $535 = ($533|0)<($534|0);
       if ($535) {
        $i$45$i$i = $533;
       } else {
        break;
       }
      }
     }
     $536 = HEAP32[$33>>2]|0;
     $537 = HEAP32[$10>>2]|0;
     $538 = ((($537)) + 2868|0);
     $539 = (_malloc(36)|0);
     $540 = ($539|0)==(0|0);
     do {
      if (!($540)) {
       $541 = ((($539)) + -4|0);
       $542 = HEAP32[$541>>2]|0;
       $543 = $542 & 3;
       $544 = ($543|0)==(0);
       if ($544) {
        break;
       }
       dest=$539; stop=dest+36|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      }
     } while(0);
     $545 = HEAP32[$438>>2]|0;
     $546 = ((($539)) + 4|0);
     HEAP32[$546>>2] = $545;
     HEAPF32[$539>>2] = -9999.0;
     $547 = ((($539)) + 8|0);
     HEAP32[$547>>2] = $538;
     $548 = ((($536)) + 60|0);
     HEAP32[$548>>2] = $539;
     $549 = (_malloc(180)|0);
     $550 = ($549|0)==(0|0);
     do {
      if (!($550)) {
       $551 = ((($549)) + -4|0);
       $552 = HEAP32[$551>>2]|0;
       $553 = $552 & 3;
       $554 = ($553|0)==(0);
       if ($554) {
        break;
       }
       _memset(($549|0),0,180)|0;
      }
     } while(0);
     HEAP32[$536>>2] = $549;
     $555 = HEAP32[$10>>2]|0;
     $556 = HEAP32[$438>>2]|0;
     $557 = ((($549)) + 4|0);
     HEAP32[$557>>2] = 128;
     $558 = ((($549)) + 8|0);
     HEAP32[$558>>2] = 64;
     $559 = ((($555)) + 2932|0);
     $560 = HEAP32[$559>>2]|0;
     $561 = ((($549)) + 12|0);
     HEAP32[$561>>2] = $560;
     HEAP32[$549>>2] = $556;
     $562 = ((($549)) + 164|0);
     HEAP32[$562>>2] = 128;
     $563 = ((($555)) + 4|0);
     $564 = HEAP32[$563>>2]|0;
     $565 = (($564|0) / 2)&-1;
     $566 = ((($549)) + 176|0);
     HEAP32[$566>>2] = $565;
     $567 = (_malloc(512)|0);
     $568 = ($567|0)==(0|0);
     do {
      if (!($568)) {
       $569 = ((($567)) + -4|0);
       $570 = HEAP32[$569>>2]|0;
       $571 = $570 & 3;
       $572 = ($571|0)==(0);
       if ($572) {
        break;
       }
       _memset(($567|0),0,512)|0;
      }
     } while(0);
     $573 = ((($549)) + 36|0);
     HEAP32[$573>>2] = $567;
     $574 = ((($549)) + 16|0);
     _mdct_init($574,128);
     $575 = HEAP32[$573>>2]|0;
     $i$04$i$i = 0;
     while(1) {
      $576 = (+($i$04$i$i|0));
      $577 = $576 * 0.024736950028266088;
      $578 = (+Math_sin((+$577)));
      $579 = $578;
      $580 = (($575) + ($i$04$i$i<<2)|0);
      $581 = $579 * $579;
      HEAPF32[$580>>2] = $581;
      $582 = (($i$04$i$i) + 1)|0;
      $exitcond6$i$i = ($582|0)==(128);
      if ($exitcond6$i$i) {
       break;
      } else {
       $i$04$i$i = $582;
      }
     }
     $583 = ((($549)) + 40|0);
     HEAP32[$583>>2] = 2;
     $584 = ((($549)) + 44|0);
     HEAP32[$584>>2] = 4;
     $585 = ((($549)) + 56|0);
     HEAP32[$585>>2] = 4;
     $586 = ((($549)) + 60|0);
     HEAP32[$586>>2] = 5;
     $587 = ((($549)) + 72|0);
     HEAP32[$587>>2] = 6;
     $588 = ((($549)) + 76|0);
     HEAP32[$588>>2] = 6;
     $589 = ((($549)) + 88|0);
     HEAP32[$589>>2] = 9;
     $590 = ((($549)) + 92|0);
     HEAP32[$590>>2] = 8;
     $591 = ((($549)) + 104|0);
     HEAP32[$591>>2] = 13;
     $592 = ((($549)) + 108|0);
     HEAP32[$592>>2] = 8;
     $593 = ((($549)) + 120|0);
     HEAP32[$593>>2] = 17;
     $594 = ((($549)) + 124|0);
     HEAP32[$594>>2] = 8;
     $595 = ((($549)) + 136|0);
     HEAP32[$595>>2] = 22;
     $596 = ((($549)) + 140|0);
     HEAP32[$596>>2] = 8;
     $598 = 4;$j$02$i$i = 0;
     while(1) {
      $597 = $598 << 2;
      $599 = (_malloc($597)|0);
      $600 = (((((($549)) + 40|0) + ($j$02$i$i<<4)|0)) + 8|0);
      HEAP32[$600>>2] = $599;
      $601 = ($598|0)>(0);
      if ($601) {
       $602 = (+($598|0));
       $603 = (((((($549)) + 40|0) + ($j$02$i$i<<4)|0)) + 12|0);
       $$promoted$i$i = +HEAPF32[$603>>2];
       $612 = $$promoted$i$i;$i$11$i$i = 0;
       while(1) {
        $604 = (+($i$11$i$i|0));
        $605 = $604 + 0.5;
        $606 = $605 / $602;
        $607 = $606 * 3.1415926535897931;
        $608 = (+Math_sin((+$607)));
        $609 = $608;
        $610 = (($599) + ($i$11$i$i<<2)|0);
        HEAPF32[$610>>2] = $609;
        $611 = $612 + $609;
        $613 = (($i$11$i$i) + 1)|0;
        $exitcond$i$i = ($613|0)==($598|0);
        if ($exitcond$i$i) {
         break;
        } else {
         $612 = $611;$i$11$i$i = $613;
        }
       }
       HEAPF32[$603>>2] = $611;
       $$pre$phi$i$iZ2D = $603;$615 = $611;
      } else {
       $$phi$trans$insert7$i$i = (((((($549)) + 40|0) + ($j$02$i$i<<4)|0)) + 12|0);
       $$pre8$i$i = +HEAPF32[$$phi$trans$insert7$i$i>>2];
       $$pre$phi$i$iZ2D = $$phi$trans$insert7$i$i;$615 = $$pre8$i$i;
      }
      $614 = 1.0 / $615;
      HEAPF32[$$pre$phi$i$iZ2D>>2] = $614;
      $616 = (($j$02$i$i) + 1)|0;
      $exitcond5$i$i = ($616|0)==(7);
      if ($exitcond5$i$i) {
       break;
      }
      $$phi$trans$insert$i$i = (((((($549)) + 40|0) + ($616<<4)|0)) + 4|0);
      $$pre$i3$i = HEAP32[$$phi$trans$insert$i$i>>2]|0;
      $598 = $$pre$i3$i;$j$02$i$i = $616;
     }
     $617 = ($556*7)|0;
     $618 = ($556|0)==(0);
     do {
      if ($618) {
       $req$0$i$i5$i = 0;
      } else {
       $619 = ($556*1008)|0;
       $620 = ($617>>>0)>(65535);
       if (!($620)) {
        $req$0$i$i5$i = $619;
        break;
       }
       $621 = (($619>>>0) / ($617>>>0))&-1;
       $622 = ($621|0)==(144);
       $$$i$i4$i = $622 ? $619 : -1;
       $req$0$i$i5$i = $$$i$i4$i;
      }
     } while(0);
     $623 = (_malloc($req$0$i$i5$i)|0);
     $624 = ($623|0)==(0|0);
     do {
      if (!($624)) {
       $625 = ((($623)) + -4|0);
       $626 = HEAP32[$625>>2]|0;
       $627 = $626 & 3;
       $628 = ($627|0)==(0);
       if ($628) {
        break;
       }
       _memset(($623|0),0,($req$0$i$i5$i|0))|0;
      }
     } while(0);
     $629 = ((($549)) + 152|0);
     HEAP32[$629>>2] = $623;
     $630 = HEAP32[$562>>2]|0;
     $631 = ($630|0)==(0);
     do {
      if ($631) {
       $req$0$i3$i$i = 0;
      } else {
       $632 = $630 << 2;
       $633 = ($630>>>0)>(65535);
       if (!($633)) {
        $req$0$i3$i$i = $632;
        break;
       }
       $634 = (($632>>>0) / ($630>>>0))&-1;
       $635 = ($634|0)==(4);
       $$$i2$i$i = $635 ? $632 : -1;
       $req$0$i3$i$i = $$$i2$i$i;
      }
     } while(0);
     $636 = (_malloc($req$0$i3$i$i)|0);
     $637 = ($636|0)==(0|0);
     do {
      if (!($637)) {
       $638 = ((($636)) + -4|0);
       $639 = HEAP32[$638>>2]|0;
       $640 = $639 & 3;
       $641 = ($640|0)==(0);
       if ($641) {
        break;
       }
       _memset(($636|0),0,($req$0$i3$i$i|0))|0;
      }
     } while(0);
     $642 = ((($549)) + 160|0);
     HEAP32[$642>>2] = $636;
     $643 = ((($536)) + 80|0);
     $644 = HEAP32[$10>>2]|0;
     dest=$643; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
     $645 = ((($644)) + 3372|0);
     $646 = HEAP32[$645>>2]|0;
     $647 = ($646|0)>(0);
     if ($647) {
      $648 = ((($0)) + 400|0);
      $649 = HEAP32[$648>>2]|0;
      $650 = HEAP32[$644>>2]|0;
      $651 = $650 >> 1;
      $652 = ((($644)) + 4|0);
      $653 = HEAP32[$652>>2]|0;
      $654 = (($653|0) / ($650|0))&-1;
      $655 = ((($536)) + 104|0);
      HEAP32[$655>>2] = $654;
      HEAP32[$643>>2] = 1;
      $656 = ((($644)) + 3360|0);
      $657 = HEAP32[$656>>2]|0;
      $658 = (+($657|0));
      $659 = (+($651|0));
      $660 = $658 * $659;
      $661 = (+($649|0));
      $662 = $660 / $661;
      HEAPF64[tempDoublePtr>>3] = $662;$663 = HEAP32[tempDoublePtr>>2]|0;
      $664 = HEAP32[tempDoublePtr+4>>2]|0;
      $665 = $664 & 2146435072;
      $666 = ($665>>>0)>(1126170624);
      $667 = (0)>(0);
      $668 = ($665|0)==(1126170624);
      $669 = $668 & $667;
      $670 = $666 | $669;
      do {
       if ($670) {
        $$0$i$i$i = $662;
       } else {
        $671 = ($664|0)<(0);
        $672 = $662 + -4503599627370496.0;
        $673 = $672 + 4503599627370496.0;
        $674 = $662 + 4503599627370496.0;
        $675 = $674 + -4503599627370496.0;
        $y$0$i$i$i = $671 ? $673 : $675;
        $676 = $y$0$i$i$i == 0.0;
        if (!($676)) {
         $$0$i$i$i = $y$0$i$i$i;
         break;
        }
        $677 = $671 ? -0.0 : 0.0;
        $$0$i$i$i = $677;
       }
      } while(0);
      $678 = (~~(($$0$i$i$i)));
      $679 = ((($536)) + 92|0);
      HEAP32[$679>>2] = $678;
      $680 = ((($644)) + 3364|0);
      $681 = HEAP32[$680>>2]|0;
      $682 = (+($681|0));
      $683 = $682 * $659;
      $684 = $683 / $661;
      HEAPF64[tempDoublePtr>>3] = $684;$685 = HEAP32[tempDoublePtr>>2]|0;
      $686 = HEAP32[tempDoublePtr+4>>2]|0;
      $687 = $686 & 2146435072;
      $688 = ($687>>>0)>(1126170624);
      $689 = (0)>(0);
      $690 = ($687|0)==(1126170624);
      $691 = $690 & $689;
      $692 = $688 | $691;
      do {
       if ($692) {
        $$0$i5$i$i = $684;
       } else {
        $693 = ($686|0)<(0);
        $694 = $684 + -4503599627370496.0;
        $695 = $694 + 4503599627370496.0;
        $696 = $684 + 4503599627370496.0;
        $697 = $696 + -4503599627370496.0;
        $y$0$i4$i$i = $693 ? $695 : $697;
        $698 = $y$0$i4$i$i == 0.0;
        if (!($698)) {
         $$0$i5$i$i = $y$0$i4$i$i;
         break;
        }
        $699 = $693 ? -0.0 : 0.0;
        $$0$i5$i$i = $699;
       }
      } while(0);
      $700 = (~~(($$0$i5$i$i)));
      $701 = ((($536)) + 96|0);
      HEAP32[$701>>2] = $700;
      $702 = ((($644)) + 3368|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (+($703|0));
      $705 = $704 * $659;
      $706 = $705 / $661;
      HEAPF64[tempDoublePtr>>3] = $706;$707 = HEAP32[tempDoublePtr>>2]|0;
      $708 = HEAP32[tempDoublePtr+4>>2]|0;
      $709 = $708 & 2146435072;
      $710 = ($709>>>0)>(1126170624);
      $711 = (0)>(0);
      $712 = ($709|0)==(1126170624);
      $713 = $712 & $711;
      $714 = $710 | $713;
      do {
       if ($714) {
        $$0$i2$i$i = $706;
       } else {
        $715 = ($708|0)<(0);
        $716 = $706 + -4503599627370496.0;
        $717 = $716 + 4503599627370496.0;
        $718 = $706 + 4503599627370496.0;
        $719 = $718 + -4503599627370496.0;
        $y$0$i1$i$i = $715 ? $717 : $719;
        $720 = $y$0$i1$i$i == 0.0;
        if (!($720)) {
         $$0$i2$i$i = $y$0$i1$i$i;
         break;
        }
        $721 = $715 ? -0.0 : 0.0;
        $$0$i2$i$i = $721;
       }
      } while(0);
      $722 = (~~(($$0$i2$i$i)));
      $723 = ((($536)) + 100|0);
      HEAP32[$723>>2] = $722;
      $724 = ((($536)) + 112|0);
      HEAPF64[$724>>3] = 7.0;
      $725 = (+($646|0));
      $726 = ((($644)) + 3376|0);
      $727 = +HEAPF64[$726>>3];
      $728 = $725 * $727;
      $729 = (~~(($728)));
      $730 = ((($536)) + 88|0);
      HEAP32[$730>>2] = $729;
      $731 = ((($536)) + 84|0);
      HEAP32[$731>>2] = $729;
     }
     $732 = ((($0)) + 504|0);
     $733 = $732;
     $734 = $733;
     HEAP32[$734>>2] = 3;
     $735 = (($733) + 4)|0;
     $736 = $735;
     HEAP32[$736>>2] = 0;
    }
   }
  }
 }
 $737 = ((($0)) + 552|0);
 dest=$737; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $738 = ((($0)) + 616|0);
 HEAP32[$738>>2] = $14;
 $739 = ((($0)) + 628|0);
 HEAP32[$739>>2] = 0;
 $740 = ((($0)) + 620|0);
 HEAP32[$740>>2] = 0;
 $741 = HEAP32[$14>>2]|0;
 $742 = ($741|0)==(0);
 if (!($742)) {
  $743 = (_malloc(72)|0);
  $744 = ($743|0)==(0|0);
  if (!($744)) {
   $745 = ((($743)) + -4|0);
   $746 = HEAP32[$745>>2]|0;
   $747 = $746 & 3;
   $748 = ($747|0)==(0);
   if (!($748)) {
    dest=$743; stop=dest+72|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
   }
  }
  $749 = ((($0)) + 656|0);
  HEAP32[$749>>2] = $743;
  $750 = ((($743)) + 4|0);
  HEAPF32[$750>>2] = -9999.0;
  $751 = ((($0)) + 556|0);
  $752 = ((($743)) + 12|0);
  $753 = ((($743)) + 40|0);
  $754 = ((($0)) + 564|0);
  $755 = ((($0)) + 568|0);
  $756 = ((($0)) + 572|0);
  $i$01$i = 0;
  while(1) {
   $757 = ($i$01$i|0)==(7);
   if ($757) {
    HEAP32[$753>>2] = $751;
    ;HEAP32[$751>>2]=0|0;HEAP32[$751+4>>2]=0|0;HEAP32[$751+8>>2]=0|0;HEAP32[$751+12>>2]=0|0;
    $758 = (_malloc(256)|0);
    HEAP32[$754>>2] = $758;
    HEAP32[$755>>2] = $758;
    HEAP8[$758>>0] = 0;
    HEAP32[$756>>2] = 256;
    $i$01$i = 8;
    continue;
   }
   $759 = (_malloc(20)|0);
   $760 = ($759|0)==(0|0);
   if (!($760)) {
    $761 = ((($759)) + -4|0);
    $762 = HEAP32[$761>>2]|0;
    $763 = $762 & 3;
    $764 = ($763|0)==(0);
    if (!($764)) {
     dest=$759; stop=dest+20|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
    }
   }
   $765 = (($752) + ($i$01$i<<2)|0);
   HEAP32[$765>>2] = $759;
   ;HEAP32[$759>>2]=0|0;HEAP32[$759+4>>2]=0|0;HEAP32[$759+8>>2]=0|0;HEAP32[$759+12>>2]=0|0;
   $766 = (_malloc(256)|0);
   $767 = ((($759)) + 8|0);
   HEAP32[$767>>2] = $766;
   $768 = ((($759)) + 12|0);
   HEAP32[$768>>2] = $766;
   HEAP8[$766>>0] = 0;
   $769 = ((($759)) + 16|0);
   HEAP32[$769>>2] = 256;
   $770 = (($i$01$i) + 1)|0;
   $exitcond$i = ($770|0)==(15);
   if ($exitcond$i) {
    break;
   } else {
    $i$01$i = $770;
   }
  }
 }
 $771 = (_time((0|0))|0);
 $772 = (($771) + -1)|0;
 $773 = (___muldi3(($772|0),0,1284865837,1481765933)|0);
 $774 = tempRet0;
 $775 = (_i64Add(($773|0),($774|0),1,0)|0);
 $776 = tempRet0;
 $777 = (_bitshift64Lshr(($775|0),($776|0),33)|0);
 $778 = tempRet0;
 (_ogg_stream_init($0,$777)|0);
 $$0 = $0;
 return ($$0|0);
}
function _encoder_destroy($state) {
 $state = $state|0;
 var $$phi$trans$insert$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i1 = 0, $$pre14$i = 0, $$pre16$i = 0, $$pre18$i = 0, $$pre19$i = 0, $$pre21$i = 0, $$pre22$i = 0, $$pre23$i = 0, $$pre25$i = 0, $$pre4 = 0, $$pre5 = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0, $i$01$i = 0, $i$37$i = 0, $reap$01$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ($state|0)==(0|0);
 if (!($0)) {
  $1 = HEAP32[$state>>2]|0;
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   _free($1);
  }
  $3 = ((($state)) + 16|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   _free($4);
  }
  $6 = ((($state)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   _free($7);
  }
  _memset(($state|0),0,360)|0;
 }
 $9 = ((($state)) + 552|0);
 $10 = ((($state)) + 656|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($state)) + 636|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  $reap$01$i$i = $13;
  while(1) {
   $15 = ((($reap$01$i$i)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = HEAP32[$reap$01$i$i>>2]|0;
   _free($17);
   _free($reap$01$i$i);
   $18 = ($16|0)==(0|0);
   if ($18) {
    break;
   } else {
    $reap$01$i$i = $16;
   }
  }
 }
 $19 = ((($state)) + 632|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0);
 $$phi$trans$insert$i = ((($state)) + 620|0);
 $$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
 if ($21) {
  $30 = $$pre$i;
 } else {
  $22 = ((($state)) + 628|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + ($20))|0;
  $25 = (_realloc($$pre$i,$24)|0);
  HEAP32[$$phi$trans$insert$i>>2] = $25;
  $26 = HEAP32[$19>>2]|0;
  $27 = HEAP32[$22>>2]|0;
  $28 = (($27) + ($26))|0;
  HEAP32[$22>>2] = $28;
  HEAP32[$19>>2] = 0;
  $30 = $25;
 }
 $29 = ((($state)) + 624|0);
 HEAP32[$29>>2] = 0;
 HEAP32[$12>>2] = 0;
 $31 = ($30|0)==(0|0);
 if (!($31)) {
  _free($30);
 }
 $32 = ($11|0)==(0|0);
 if (!($32)) {
  $i$01$i = 0;
  while(1) {
   $33 = (((($11)) + 12|0) + ($i$01$i<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($34)) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)==(0|0);
   if (!($37)) {
    _free($36);
   }
   ;HEAP32[$34>>2]=0|0;HEAP32[$34+4>>2]=0|0;HEAP32[$34+8>>2]=0|0;HEAP32[$34+12>>2]=0|0;HEAP32[$34+16>>2]=0|0;
   $38 = ($i$01$i|0)==(7);
   if ($38) {
    $i$01$i = 8;
    continue;
   }
   $39 = HEAP32[$33>>2]|0;
   _free($39);
   $40 = (($i$01$i) + 1)|0;
   $exitcond$i = ($40|0)==(15);
   if ($exitcond$i) {
    break;
   } else {
    $i$01$i = $40;
   }
  }
  _free($11);
 }
 dest=$9; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $41 = ((($state)) + 440|0);
 $42 = ((($state)) + 444|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)!=(0|0);
 if ($44) {
  $45 = ((($43)) + 28|0);
  $46 = HEAP32[$45>>2]|0;
  $109 = $46;
 } else {
  $109 = 0;
 }
 $47 = ((($state)) + 544|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)!=(0|0);
 if ($49) {
  $50 = HEAP32[$48>>2]|0;
  $51 = ($50|0)==(0|0);
  if (!($51)) {
   $52 = ((($50)) + 16|0);
   $53 = ((($50)) + 24|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($54|0)==(0|0);
   if (!($55)) {
    _free($54);
   }
   $56 = ((($50)) + 28|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($57|0)==(0|0);
   if (!($58)) {
    _free($57);
   }
   ;HEAP32[$52>>2]=0|0;HEAP32[$52+4>>2]=0|0;HEAP32[$52+8>>2]=0|0;HEAP32[$52+12>>2]=0|0;HEAP32[$52+16>>2]=0|0;
   $59 = ((($50)) + 48|0);
   $60 = HEAP32[$59>>2]|0;
   _free($60);
   $61 = ((($50)) + 64|0);
   $62 = HEAP32[$61>>2]|0;
   _free($62);
   $63 = ((($50)) + 80|0);
   $64 = HEAP32[$63>>2]|0;
   _free($64);
   $65 = ((($50)) + 96|0);
   $66 = HEAP32[$65>>2]|0;
   _free($66);
   $67 = ((($50)) + 112|0);
   $68 = HEAP32[$67>>2]|0;
   _free($68);
   $69 = ((($50)) + 128|0);
   $70 = HEAP32[$69>>2]|0;
   _free($70);
   $71 = ((($50)) + 144|0);
   $72 = HEAP32[$71>>2]|0;
   _free($72);
   $73 = ((($50)) + 36|0);
   $74 = HEAP32[$73>>2]|0;
   _free($74);
   $75 = ((($50)) + 152|0);
   $76 = HEAP32[$75>>2]|0;
   _free($76);
   $77 = ((($50)) + 160|0);
   $78 = HEAP32[$77>>2]|0;
   _free($78);
   _memset(($50|0),0,180)|0;
   $79 = HEAP32[$48>>2]|0;
   _free($79);
  }
  $80 = ((($48)) + 12|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ($81|0)==(0|0);
  if (!($82)) {
   $83 = HEAP32[$81>>2]|0;
   $84 = ($83|0)==(0|0);
   if ($84) {
    $91 = $83;
   } else {
    $85 = ((($83)) + 8|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($86|0)==(0|0);
    if (!($87)) {
     _free($86);
    }
    $88 = ((($83)) + 12|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($89|0)==(0|0);
    if (!($90)) {
     _free($89);
    }
    ;HEAP32[$83>>2]=0|0;HEAP32[$83+4>>2]=0|0;HEAP32[$83+8>>2]=0|0;HEAP32[$83+12>>2]=0|0;HEAP32[$83+16>>2]=0|0;
    $$pre = HEAP32[$80>>2]|0;
    $$pre4 = HEAP32[$$pre>>2]|0;
    $91 = $$pre4;
   }
   _free($91);
   $92 = HEAP32[$80>>2]|0;
   _free($92);
  }
  $93 = ((($48)) + 16|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ($94|0)==(0|0);
  if (!($95)) {
   $96 = HEAP32[$94>>2]|0;
   $97 = ($96|0)==(0|0);
   if ($97) {
    $104 = $96;
   } else {
    $98 = ((($96)) + 8|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)==(0|0);
    if (!($100)) {
     _free($99);
    }
    $101 = ((($96)) + 12|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = ($102|0)==(0|0);
    if (!($103)) {
     _free($102);
    }
    ;HEAP32[$96>>2]=0|0;HEAP32[$96+4>>2]=0|0;HEAP32[$96+8>>2]=0|0;HEAP32[$96+12>>2]=0|0;HEAP32[$96+16>>2]=0|0;
    $$pre5 = HEAP32[$93>>2]|0;
    $$pre6 = HEAP32[$$pre5>>2]|0;
    $104 = $$pre6;
   }
   _free($104);
   $105 = HEAP32[$93>>2]|0;
   _free($105);
  }
  $106 = ((($48)) + 48|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = ($107|0)==(0|0);
  if (!($108)) {
   $110 = ($109|0)==(0|0);
   if ($110) {
    $135 = $107;
   } else {
    $111 = ((($109)) + 16|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = ($112|0)>(0);
    if ($113) {
     $114 = ((($109)) + 800|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = (59540 + ($115<<2)|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = ((($117)) + 16|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = HEAP32[$107>>2]|0;
     FUNCTION_TABLE_vi[$119 & 31]($120);
     $121 = HEAP32[$111>>2]|0;
     $122 = ($121|0)>(1);
     if ($122) {
      $124 = 1;
      while(1) {
       $$pre$i1 = HEAP32[$106>>2]|0;
       $123 = (($114) + ($124<<2)|0);
       $125 = HEAP32[$123>>2]|0;
       $126 = (59540 + ($125<<2)|0);
       $127 = HEAP32[$126>>2]|0;
       $128 = ((($127)) + 16|0);
       $129 = HEAP32[$128>>2]|0;
       $130 = (($$pre$i1) + ($124<<2)|0);
       $131 = HEAP32[$130>>2]|0;
       FUNCTION_TABLE_vi[$129 & 31]($131);
       $132 = (($124) + 1)|0;
       $133 = HEAP32[$111>>2]|0;
       $134 = ($132|0)<($133|0);
       if ($134) {
        $124 = $132;
       } else {
        break;
       }
      }
     }
     $$pre14$i = HEAP32[$106>>2]|0;
     $135 = $$pre14$i;
    } else {
     $135 = $107;
    }
   }
   _free($135);
  }
  $136 = ((($48)) + 52|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = ($137|0)==(0|0);
  if (!($138)) {
   $139 = ($109|0)==(0|0);
   if ($139) {
    $164 = $137;
   } else {
    $140 = ((($109)) + 20|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = ($141|0)>(0);
    if ($142) {
     $143 = ((($109)) + 1312|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = (59548 + ($144<<2)|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ((($146)) + 16|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = HEAP32[$137>>2]|0;
     FUNCTION_TABLE_vi[$148 & 31]($149);
     $150 = HEAP32[$140>>2]|0;
     $151 = ($150|0)>(1);
     if ($151) {
      $153 = 1;
      while(1) {
       $$pre16$i = HEAP32[$136>>2]|0;
       $152 = (($143) + ($153<<2)|0);
       $154 = HEAP32[$152>>2]|0;
       $155 = (59548 + ($154<<2)|0);
       $156 = HEAP32[$155>>2]|0;
       $157 = ((($156)) + 16|0);
       $158 = HEAP32[$157>>2]|0;
       $159 = (($$pre16$i) + ($153<<2)|0);
       $160 = HEAP32[$159>>2]|0;
       FUNCTION_TABLE_vi[$158 & 31]($160);
       $161 = (($153) + 1)|0;
       $162 = HEAP32[$140>>2]|0;
       $163 = ($161|0)<($162|0);
       if ($163) {
        $153 = $161;
       } else {
        break;
       }
      }
     }
     $$pre18$i = HEAP32[$136>>2]|0;
     $164 = $$pre18$i;
    } else {
     $164 = $137;
    }
   }
   _free($164);
  }
  $165 = ((($48)) + 56|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = ($166|0)==(0|0);
  if (!($167)) {
   $168 = ($109|0)==(0|0);
   if ($168) {
    $179 = $166;
   } else {
    $169 = ((($109)) + 28|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = ($170|0)>(0);
    if ($171) {
     __vp_psy_clear($166);
     $172 = HEAP32[$169>>2]|0;
     $173 = ($172|0)>(1);
     if ($173) {
      $175 = 1;
      while(1) {
       $$pre19$i = HEAP32[$165>>2]|0;
       $174 = (($$pre19$i) + (($175*52)|0)|0);
       __vp_psy_clear($174);
       $176 = (($175) + 1)|0;
       $177 = HEAP32[$169>>2]|0;
       $178 = ($176|0)<($177|0);
       if ($178) {
        $175 = $176;
       } else {
        break;
       }
      }
     }
     $$pre21$i = HEAP32[$165>>2]|0;
     $179 = $$pre21$i;
    } else {
     $179 = $166;
    }
   }
   _free($179);
  }
  $180 = ((($48)) + 60|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = ($181|0)==(0|0);
  if (!($182)) {
   _free($181);
  }
  $183 = ((($48)) + 80|0);
  dest=$183; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $184 = ((($48)) + 20|0);
  $185 = ((($48)) + 24|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = ($186|0)==(0|0);
  if (!($187)) {
   _free($186);
  }
  $188 = ((($48)) + 28|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = ($189|0)==(0|0);
  if (!($190)) {
   _free($189);
  }
  ;HEAP32[$184>>2]=0|0;HEAP32[$184+4>>2]=0|0;HEAP32[$184+8>>2]=0|0;
  $191 = ((($48)) + 32|0);
  $192 = ((($48)) + 36|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = ($193|0)==(0|0);
  if (!($194)) {
   _free($193);
  }
  $195 = ((($48)) + 40|0);
  $196 = HEAP32[$195>>2]|0;
  $197 = ($196|0)==(0|0);
  if (!($197)) {
   _free($196);
  }
  ;HEAP32[$191>>2]=0|0;HEAP32[$191+4>>2]=0|0;HEAP32[$191+8>>2]=0|0;
 }
 $198 = ((($state)) + 448|0);
 $199 = HEAP32[$198>>2]|0;
 $200 = ($199|0)==(0|0);
 if (!($200)) {
  if ($44) {
   $201 = ((($43)) + 4|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = ($202|0)>(0);
   if ($203) {
    $205 = $199;$228 = $202;$i$37$i = 0;
    while(1) {
     $204 = (($205) + ($i$37$i<<2)|0);
     $206 = HEAP32[$204>>2]|0;
     $207 = ($206|0)==(0|0);
     if ($207) {
      $210 = $228;
     } else {
      _free($206);
      $$pre23$i = HEAP32[$201>>2]|0;
      $210 = $$pre23$i;
     }
     $208 = (($i$37$i) + 1)|0;
     $209 = ($208|0)<($210|0);
     if (!($209)) {
      break;
     }
     $$pre22$i = HEAP32[$198>>2]|0;
     $205 = $$pre22$i;$228 = $210;$i$37$i = $208;
    }
    $$pre25$i = HEAP32[$198>>2]|0;
    $211 = $$pre25$i;
   } else {
    $211 = $199;
   }
  } else {
   $211 = $199;
  }
  _free($211);
  $212 = ((($state)) + 452|0);
  $213 = HEAP32[$212>>2]|0;
  $214 = ($213|0)==(0|0);
  if (!($214)) {
   _free($213);
  }
 }
 if (!($49)) {
  dest=$41; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $224 = ((($state)) + 424|0);
  _vorbis_comment_clear($224);
  $225 = ((($state)) + 392|0);
  _vorbis_info_clear($225);
  $226 = ((($state)) + 672|0);
  $227 = HEAP32[$226>>2]|0;
  _free($227);
  _free($state);
  return;
 }
 $215 = ((($48)) + 64|0);
 $216 = HEAP32[$215>>2]|0;
 $217 = ($216|0)==(0|0);
 if (!($217)) {
  _free($216);
 }
 $218 = ((($48)) + 68|0);
 $219 = HEAP32[$218>>2]|0;
 $220 = ($219|0)==(0|0);
 if (!($220)) {
  _free($219);
 }
 $221 = ((($48)) + 72|0);
 $222 = HEAP32[$221>>2]|0;
 $223 = ($222|0)==(0|0);
 if (!($223)) {
  _free($222);
 }
 _free($48);
 dest=$41; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $224 = ((($state)) + 424|0);
 _vorbis_comment_clear($224);
 $225 = ((($state)) + 392|0);
 _vorbis_info_clear($225);
 $226 = ((($state)) + 672|0);
 $227 = HEAP32[$226>>2]|0;
 _free($227);
 _free($state);
 return;
}
function _encoder_write_headers($state) {
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $header = 0, $header_code = 0, $header_comm = 0, $og = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $header = sp + 64|0;
 $header_comm = sp + 32|0;
 $header_code = sp;
 $og = sp + 96|0;
 $0 = ((($state)) + 440|0);
 $1 = ((($state)) + 424|0);
 (_vorbis_analysis_headerout($0,$1,$header,$header_comm,$header_code)|0);
 (_ogg_stream_packetin($state,$header)|0);
 (_ogg_stream_packetin($state,$header_comm)|0);
 (_ogg_stream_packetin($state,$header_code)|0);
 $2 = (_ogg_stream_flush_i($state,$og,1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = ((($state)) + 676|0);
 $5 = ((($og)) + 4|0);
 $6 = ((($og)) + 12|0);
 $7 = ((($state)) + 672|0);
 $8 = ((($og)) + 8|0);
 while(1) {
  $9 = HEAP32[$4>>2]|0;
  $10 = HEAP32[$5>>2]|0;
  $11 = (($10) + ($9))|0;
  $12 = HEAP32[$6>>2]|0;
  $13 = (($11) + ($12))|0;
  $14 = ($13|0)==(0);
  if (!($14)) {
   $17 = HEAP32[$7>>2]|0;
   $18 = (_realloc($17,$13)|0);
   HEAP32[$7>>2] = $18;
   $19 = HEAP32[$4>>2]|0;
   $20 = (($18) + ($19)|0);
   $21 = HEAP32[$og>>2]|0;
   $22 = HEAP32[$5>>2]|0;
   _memcpy(($20|0),($21|0),($22|0))|0;
   $23 = (($22) + ($19))|0;
   HEAP32[$4>>2] = $23;
   $24 = (($18) + ($23)|0);
   $25 = HEAP32[$8>>2]|0;
   $26 = HEAP32[$6>>2]|0;
   _memcpy(($24|0),($25|0),($26|0))|0;
   $27 = (($26) + ($23))|0;
   HEAP32[$4>>2] = $27;
  }
  $15 = (_ogg_stream_flush_i($state,$og,1)|0);
  $16 = ($15|0)==(0);
  if ($16) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _encoder_prepare_analysis_buffers($state,$vals) {
 $state = $state|0;
 $vals = $vals|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($state)) + 440|0);
 $1 = (_vorbis_analysis_buffer($0,$vals)|0);
 $2 = ((($state)) + 664|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($state)) + 668|0);
 HEAP32[$3>>2] = $vals;
 return;
}
function _encoder_encode($state) {
 $state = $state|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($state)) + 440|0);
 $1 = ((($state)) + 668|0);
 $2 = HEAP32[$1>>2]|0;
 _vorbis_analysis_wrote($0,$2);
 _encoder_encode_work($state);
 return;
}
function _encoder_encode_work($state) {
 $state = $state|0;
 var $$$i = 0, $$0$i$i = 0.0, $$0$i2$i = 0.0, $$0$i5$i = 0.0, $$9$i = 0, $$choice$7$i = 0, $$phi$trans$insert$i9 = 0, $$phi$trans$insert23 = 0, $$phi$trans$insert28 = 0, $$pre = 0, $$pre$i10 = 0, $$pre$i5 = 0, $$pre24 = 0, $$pre25 = 0, $$pre27 = 0, $$pre29 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0, $154 = 0.0, $155 = 0.0;
 var $156 = 0.0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0.0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0.0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0.0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0.0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0.0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $choice$0$i = 0, $choice$0$i2 = 0, $choice$03969$i = 0, $choice$2$i = 0, $choice$3$i = 0;
 var $choice$430$i = 0, $choice$5$i = 0, $choice$622$i = 0, $choice$7$i = 0, $force$0$i = 0, $force$0$i12 = 0, $minsize$020$i = 0, $not$$i$i = 0, $not$$i$i1 = 0, $og = 0, $or$cond$i = 0, $or$cond37$i = 0, $or$cond4$i = 0, $or$cond444$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $phitmp$i = 0, $phitmp$i11 = 0;
 var $slew$0$i = 0.0, $slew$1$i = 0.0, $this_bits$2$i = 0, $this_bits$329$i = 0, $this_bits$4$i = 0, $this_bits$521$i = 0, $this_bits$6$i = 0, $this_bits$8$i = 0, $y$0$i$i = 0.0, $y$0$i1$i = 0.0, $y$0$i4$i = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $og = sp;
 $0 = ((($state)) + 440|0);
 $1 = ((($state)) + 552|0);
 $2 = (_vorbis_analysis_blockout($0,$1)|0);
 $3 = ($2|0)==(1);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = ((($state)) + 360|0);
 $5 = ((($state)) + 676|0);
 $6 = ((($og)) + 4|0);
 $7 = ((($og)) + 12|0);
 $8 = ((($state)) + 672|0);
 $9 = ((($og)) + 8|0);
 $10 = ((($state)) + 656|0);
 $11 = ((($state)) + 616|0);
 $12 = ((($state)) + 580|0);
 $13 = ((($state)) + 544|0);
 $14 = ((($state)) + 364|0);
 $15 = ((($state)) + 368|0);
 $16 = ((($state)) + 372|0);
 $17 = ((($state)) + 376|0);
 $18 = ((($state)) + 384|0);
 $19 = ((($state)) + 328|0);
 $$phi$trans$insert$i9 = ((($state)) + 28|0);
 $20 = ((($state)) + 332|0);
 while(1) {
  (_vorbis_analysis($1,0)|0);
  $23 = HEAP32[$10>>2]|0;
  $24 = HEAP32[$11>>2]|0;
  $25 = ((($24)) + 104|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($24)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($28)) + 28|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($26)) + 112|0);
  $32 = +HEAPF64[$31>>3];
  HEAPF64[tempDoublePtr>>3] = $32;$33 = HEAP32[tempDoublePtr>>2]|0;
  $34 = HEAP32[tempDoublePtr+4>>2]|0;
  $35 = $34 & 2146435072;
  $36 = ($35>>>0)>(1126170624);
  $37 = (0)>(0);
  $38 = ($35|0)==(1126170624);
  $39 = $38 & $37;
  $40 = $36 | $39;
  if ($40) {
   $$0$i$i = $32;
  } else {
   $41 = ($34|0)<(0);
   $42 = $32 + -4503599627370496.0;
   $43 = $42 + 4503599627370496.0;
   $44 = $32 + 4503599627370496.0;
   $45 = $44 + -4503599627370496.0;
   $y$0$i$i = $41 ? $43 : $45;
   $46 = $y$0$i$i == 0.0;
   if ($46) {
    $47 = $41 ? -0.0 : 0.0;
    $$0$i$i = $47;
   } else {
    $$0$i$i = $y$0$i$i;
   }
  }
  $48 = (~~(($$0$i$i)));
  $49 = (((($23)) + 12|0) + ($48<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($50)) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + 7)|0;
  $55 = (($54|0) / 8)&-1;
  $56 = (($55) + ($51))|0;
  $57 = $56 << 3;
  $58 = HEAP32[$12>>2]|0;
  $59 = ($58|0)==(0);
  $60 = ((($26)) + 96|0);
  $61 = HEAP32[$60>>2]|0;
  if ($59) {
   $62 = ((($26)) + 100|0);
   $63 = HEAP32[$62>>2]|0;
   $194 = $61;$214 = $63;$217 = $63;$293 = $62;
  } else {
   $64 = ((($26)) + 104|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ((($26)) + 100|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = Math_imul($65, $61)|0;
   $69 = Math_imul($65, $67)|0;
   $194 = $68;$214 = $67;$217 = $69;$293 = $66;
  }
  $70 = (($30) + ($58<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $71 >> 1;
  $73 = ((($30)) + 3372|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (+($74|0));
  $76 = ((($30)) + 3376|0);
  $77 = +HEAPF64[$76>>3];
  $78 = $75 * $77;
  $79 = (~~(($78)));
  $80 = ((($26)) + 80|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ($81|0)==(0);
  $83 = ((($26)) + 120|0);
  if ($82) {
   $84 = HEAP32[$83>>2]|0;
   $85 = ($84|0)==(0|0);
   if ($85) {
    HEAP32[$83>>2] = $1;
   }
  } else {
   HEAP32[$83>>2] = $1;
   $86 = ((($26)) + 92|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)>(0);
   if ($88) {
    if ($59) {
     $98 = $87;
    } else {
     $89 = ((($26)) + 104|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = Math_imul($90, $87)|0;
     $98 = $91;
    }
    $92 = ((($30)) + 3384|0);
    $93 = +HEAPF64[$92>>3];
    $94 = 15.0 / $93;
    $95 = ((($26)) + 84|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = (($57) - ($98))|0;
    $99 = (($96) + ($97))|0;
    $100 = ($99|0)>($79|0);
    L23: do {
     if ($100) {
      $101 = ($48|0)>(0);
      $102 = ($57|0)>($98|0);
      $or$cond37$i = $102 & $101;
      if ($or$cond37$i) {
       $choice$03969$i = $48;
       while(1) {
        $103 = (($choice$03969$i) + -1)|0;
        $104 = (((($23)) + 12|0) + ($103<<2)|0);
        $105 = HEAP32[$104>>2]|0;
        $106 = HEAP32[$105>>2]|0;
        $107 = ((($105)) + 4|0);
        $108 = HEAP32[$107>>2]|0;
        $109 = (($108) + 7)|0;
        $110 = (($109|0) / 8)&-1;
        $111 = (($110) + ($106))|0;
        $112 = $111 << 3;
        $113 = ($choice$03969$i|0)>(1);
        $114 = ($112|0)>($98|0);
        $or$cond$i = $114 & $113;
        if (!($or$cond$i)) {
         $choice$2$i = $103;
         break L23;
        }
        $115 = (($112) - ($98))|0;
        $116 = (($115) + ($96))|0;
        $117 = ($116|0)>($79|0);
        if ($117) {
         $choice$03969$i = $103;
        } else {
         $choice$2$i = $103;
         break;
        }
       }
      } else {
       $choice$2$i = $48;
      }
     } else {
      $118 = ($99|0)<($79|0);
      if ($118) {
       $119 = (($48) + 1)|0;
       $120 = ($119|0)<(15);
       $121 = ($57|0)<($98|0);
       $or$cond444$i = $121 & $120;
       if ($or$cond444$i) {
        $123 = $119;
        while(1) {
         $122 = (((($23)) + 12|0) + ($123<<2)|0);
         $124 = HEAP32[$122>>2]|0;
         $125 = HEAP32[$124>>2]|0;
         $126 = ((($124)) + 4|0);
         $127 = HEAP32[$126>>2]|0;
         $128 = (($127) + 7)|0;
         $129 = (($128|0) / 8)&-1;
         $130 = (($129) + ($125))|0;
         $131 = $130 << 3;
         $132 = (($123) + 1)|0;
         $133 = ($132|0)<(15);
         $134 = ($131|0)<($98|0);
         $or$cond4$i = $134 & $133;
         if (!($or$cond4$i)) {
          $choice$2$i = $123;
          break L23;
         }
         $135 = (($131) - ($98))|0;
         $136 = (($135) + ($96))|0;
         $137 = ($136|0)<($79|0);
         if ($137) {
          $123 = $132;
         } else {
          $choice$2$i = $123;
          break;
         }
        }
       } else {
        $choice$2$i = $48;
       }
      } else {
       $choice$2$i = $48;
      }
     }
    } while(0);
    $138 = (+($choice$2$i|0));
    $139 = $138 - $32;
    HEAPF64[tempDoublePtr>>3] = $139;$140 = HEAP32[tempDoublePtr>>2]|0;
    $141 = HEAP32[tempDoublePtr+4>>2]|0;
    $142 = $141 & 2146435072;
    $143 = ($142>>>0)>(1126170624);
    $144 = (0)>(0);
    $145 = ($142|0)==(1126170624);
    $146 = $145 & $144;
    $147 = $143 | $146;
    if ($147) {
     $$0$i5$i = $139;
    } else {
     $148 = ($141|0)<(0);
     $149 = $139 + -4503599627370496.0;
     $150 = $149 + 4503599627370496.0;
     $151 = $139 + 4503599627370496.0;
     $152 = $151 + -4503599627370496.0;
     $y$0$i4$i = $148 ? $150 : $152;
     $153 = $y$0$i4$i == 0.0;
     if ($153) {
      $154 = $148 ? -0.0 : 0.0;
      $$0$i5$i = $154;
     } else {
      $$0$i5$i = $y$0$i4$i;
     }
    }
    $155 = (+($72|0));
    $156 = $$0$i5$i / $155;
    $157 = ((($28)) + 8|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = (+($158|0));
    $160 = $159 * $156;
    $161 = -$94;
    $162 = $160 < $161;
    $slew$0$i = $162 ? $161 : $160;
    $163 = $slew$0$i > $94;
    $slew$1$i = $163 ? $94 : $slew$0$i;
    $164 = $slew$1$i / $159;
    $165 = $164 * $155;
    $166 = $165 + $32;
    HEAPF64[$31>>3] = $166;
    HEAPF64[tempDoublePtr>>3] = $166;$167 = HEAP32[tempDoublePtr>>2]|0;
    $168 = HEAP32[tempDoublePtr+4>>2]|0;
    $169 = $168 & 2146435072;
    $170 = ($169>>>0)>(1126170624);
    $171 = (0)>(0);
    $172 = ($169|0)==(1126170624);
    $173 = $172 & $171;
    $174 = $170 | $173;
    if ($174) {
     $$0$i2$i = $166;
    } else {
     $175 = ($168|0)<(0);
     $176 = $166 + -4503599627370496.0;
     $177 = $176 + 4503599627370496.0;
     $178 = $166 + 4503599627370496.0;
     $179 = $178 + -4503599627370496.0;
     $y$0$i1$i = $175 ? $177 : $179;
     $180 = $y$0$i1$i == 0.0;
     if ($180) {
      $181 = $175 ? -0.0 : 0.0;
      $$0$i2$i = $181;
     } else {
      $$0$i2$i = $y$0$i1$i;
     }
    }
    $182 = (~~(($$0$i2$i)));
    $183 = (((($23)) + 12|0) + ($182<<2)|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = HEAP32[$184>>2]|0;
    $186 = ((($184)) + 4|0);
    $187 = HEAP32[$186>>2]|0;
    $188 = (($187) + 7)|0;
    $189 = (($188|0) / 8)&-1;
    $190 = (($189) + ($185))|0;
    $191 = $190 << 3;
    $choice$3$i = $182;$this_bits$2$i = $191;
   } else {
    $choice$3$i = $48;$this_bits$2$i = $57;
   }
   $192 = ($61|0)>(0);
   $193 = ($this_bits$2$i|0)<($194|0);
   $or$cond5$i = $193 & $192;
   L43: do {
    if ($or$cond5$i) {
     $195 = ((($26)) + 88|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = (($this_bits$2$i) - ($194))|0;
     $198 = (($197) + ($196))|0;
     $199 = ($198|0)<(0);
     if ($199) {
      $choice$430$i = $choice$3$i;$this_bits$329$i = $this_bits$2$i;
      while(1) {
       $200 = (($choice$430$i) + 1)|0;
       $201 = ($choice$430$i|0)>(13);
       if ($201) {
        $choice$5$i = $200;$this_bits$4$i = $this_bits$329$i;
        break L43;
       }
       $202 = (((($23)) + 12|0) + ($200<<2)|0);
       $203 = HEAP32[$202>>2]|0;
       $204 = HEAP32[$203>>2]|0;
       $205 = ((($203)) + 4|0);
       $206 = HEAP32[$205>>2]|0;
       $207 = (($206) + 7)|0;
       $208 = (($207|0) / 8)&-1;
       $209 = (($208) + ($204))|0;
       $210 = $209 << 3;
       $211 = (($210) - ($194))|0;
       $212 = (($211) + ($196))|0;
       $213 = ($212|0)<(0);
       if ($213) {
        $choice$430$i = $200;$this_bits$329$i = $210;
       } else {
        $choice$5$i = $200;$this_bits$4$i = $210;
        break;
       }
      }
     } else {
      $choice$5$i = $choice$3$i;$this_bits$4$i = $this_bits$2$i;
     }
    } else {
     $choice$5$i = $choice$3$i;$this_bits$4$i = $this_bits$2$i;
    }
   } while(0);
   $215 = ($214|0)>(0);
   $216 = ($this_bits$4$i|0)>($217|0);
   $or$cond6$i = $216 & $215;
   L49: do {
    if ($or$cond6$i) {
     $218 = ((($26)) + 88|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = (($this_bits$4$i) - ($217))|0;
     $221 = (($220) + ($219))|0;
     $222 = ($221|0)>($74|0);
     if ($222) {
      $choice$622$i = $choice$5$i;$this_bits$521$i = $this_bits$4$i;
      while(1) {
       $223 = (($choice$622$i) + -1)|0;
       $224 = ($choice$622$i|0)<(1);
       if ($224) {
        $choice$7$i = $223;$this_bits$6$i = $this_bits$521$i;
        break L49;
       }
       $225 = (((($23)) + 12|0) + ($223<<2)|0);
       $226 = HEAP32[$225>>2]|0;
       $227 = HEAP32[$226>>2]|0;
       $228 = ((($226)) + 4|0);
       $229 = HEAP32[$228>>2]|0;
       $230 = (($229) + 7)|0;
       $231 = (($230|0) / 8)&-1;
       $232 = (($231) + ($227))|0;
       $233 = $232 << 3;
       $234 = (($233) - ($217))|0;
       $235 = (($234) + ($219))|0;
       $236 = ($235|0)>($74|0);
       if ($236) {
        $choice$622$i = $223;$this_bits$521$i = $233;
       } else {
        $choice$7$i = $223;$this_bits$6$i = $233;
        break;
       }
      }
     } else {
      $choice$7$i = $choice$5$i;$this_bits$6$i = $this_bits$4$i;
     }
    } else {
     $choice$7$i = $choice$5$i;$this_bits$6$i = $this_bits$4$i;
    }
   } while(0);
   $237 = ($choice$7$i|0)<(0);
   $238 = ((($26)) + 88|0);
   $239 = HEAP32[$238>>2]|0;
   if ($237) {
    $240 = (($74) + ($217))|0;
    $241 = (($240) - ($239))|0;
    $242 = (($241|0) / 8)&-1;
    $243 = ((($26)) + 124|0);
    HEAP32[$243>>2] = 0;
    $244 = ((($23)) + 12|0);
    $245 = HEAP32[$244>>2]|0;
    $246 = HEAP32[$245>>2]|0;
    $247 = ((($245)) + 4|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = (($248) + 7)|0;
    $250 = (($249|0) / 8)&-1;
    $251 = (($250) + ($246))|0;
    $252 = ($251|0)>($242|0);
    if ($252) {
     $253 = ((($245)) + 12|0);
     $254 = HEAP32[$253>>2]|0;
     $255 = ($254|0)==(0|0);
     if ($255) {
      $260 = $248;$263 = $246;
     } else {
      $256 = ((($245)) + 8|0);
      $257 = HEAP32[$256>>2]|0;
      $258 = (($257) + ($242)|0);
      HEAP32[$253>>2] = $258;
      HEAP32[$247>>2] = 0;
      HEAP32[$245>>2] = $242;
      HEAP8[$258>>0] = 0;
      $$pre25 = HEAP32[$244>>2]|0;
      $$pre27 = HEAP32[$$pre25>>2]|0;
      $$phi$trans$insert28 = ((($$pre25)) + 4|0);
      $$pre29 = HEAP32[$$phi$trans$insert28>>2]|0;
      $260 = $$pre29;$263 = $$pre27;
     }
     $259 = (($260) + 7)|0;
     $261 = (($259|0) / 8)&-1;
     $262 = (($261) + ($263))|0;
     $264 = $262 << 3;
     $this_bits$8$i = $264;
    } else {
     $this_bits$8$i = $this_bits$6$i;
    }
   } else {
    $265 = (($194) + 7)|0;
    $266 = (($265) - ($239))|0;
    $267 = (($266|0) / 8)&-1;
    $268 = ($choice$7$i|0)>(14);
    $$choice$7$i = $268 ? 14 : $choice$7$i;
    $269 = ((($26)) + 124|0);
    HEAP32[$269>>2] = $$choice$7$i;
    $270 = (((($23)) + 12|0) + ($$choice$7$i<<2)|0);
    $271 = HEAP32[$270>>2]|0;
    $272 = HEAP32[$271>>2]|0;
    $273 = ((($271)) + 4|0);
    $274 = HEAP32[$273>>2]|0;
    $275 = (($274) + 7)|0;
    $276 = (($275|0) / 8)&-1;
    $277 = (($276) + ($272))|0;
    $278 = (($267) - ($277))|0;
    $279 = ($278|0)>(0);
    if ($279) {
     $281 = $271;$minsize$020$i = $278;
     while(1) {
      $280 = (($minsize$020$i) + -1)|0;
      _oggpack_write($281,0,8);
      $282 = ($minsize$020$i|0)>(1);
      $283 = HEAP32[$270>>2]|0;
      if ($282) {
       $281 = $283;$minsize$020$i = $280;
      } else {
       break;
      }
     }
     $$pre = HEAP32[$283>>2]|0;
     $$phi$trans$insert23 = ((($283)) + 4|0);
     $$pre24 = HEAP32[$$phi$trans$insert23>>2]|0;
     $285 = $$pre24;$288 = $$pre;
    } else {
     $285 = $274;$288 = $272;
    }
    $284 = (($285) + 7)|0;
    $286 = (($284|0) / 8)&-1;
    $287 = (($286) + ($288))|0;
    $289 = $287 << 3;
    $this_bits$8$i = $289;
   }
   $290 = HEAP32[$60>>2]|0;
   $291 = ($290|0)>(0);
   if ($291) {
    label = 50;
   } else {
    $292 = HEAP32[$293>>2]|0;
    $294 = ($292|0)>(0);
    if ($294) {
     label = 50;
    }
   }
   do {
    if ((label|0) == 50) {
     label = 0;
     $295 = ($217|0)>(0);
     $296 = ($this_bits$8$i|0)>($217|0);
     $or$cond7$i = $295 & $296;
     if ($or$cond7$i) {
      $297 = (($this_bits$8$i) - ($217))|0;
      $298 = ((($26)) + 88|0);
      $299 = HEAP32[$298>>2]|0;
      $300 = (($297) + ($299))|0;
      HEAP32[$298>>2] = $300;
      break;
     }
     $301 = ($194|0)>(0);
     $302 = ($this_bits$8$i|0)<($194|0);
     $or$cond8$i = $301 & $302;
     if ($or$cond8$i) {
      $303 = (($this_bits$8$i) - ($194))|0;
      $304 = ((($26)) + 88|0);
      $305 = HEAP32[$304>>2]|0;
      $306 = (($303) + ($305))|0;
      HEAP32[$304>>2] = $306;
      break;
     }
     $307 = ((($26)) + 88|0);
     $308 = HEAP32[$307>>2]|0;
     $309 = ($308|0)>($79|0);
     if ($309) {
      if ($295) {
       $310 = (($this_bits$8$i) - ($217))|0;
       $311 = (($308) + ($310))|0;
       $312 = ($311|0)<($79|0);
       $$$i = $312 ? $79 : $311;
       HEAP32[$307>>2] = $$$i;
       break;
      } else {
       HEAP32[$307>>2] = $79;
       break;
      }
     } else {
      if ($301) {
       $313 = (($this_bits$8$i) - ($194))|0;
       $314 = (($308) + ($313))|0;
       $315 = ($314|0)>($79|0);
       $$9$i = $315 ? $79 : $314;
       HEAP32[$307>>2] = $$9$i;
       break;
      } else {
       HEAP32[$307>>2] = $79;
       break;
      }
     }
    }
   } while(0);
   $316 = HEAP32[$86>>2]|0;
   $317 = ($316|0)>(0);
   if ($317) {
    $318 = HEAP32[$12>>2]|0;
    $319 = ($318|0)==(0);
    if ($319) {
     $324 = $316;
    } else {
     $320 = ((($26)) + 104|0);
     $321 = HEAP32[$320>>2]|0;
     $322 = Math_imul($321, $316)|0;
     $324 = $322;
    }
    $323 = (($this_bits$8$i) - ($324))|0;
    $325 = ((($26)) + 84|0);
    $326 = HEAP32[$325>>2]|0;
    $327 = (($323) + ($326))|0;
    HEAP32[$325>>2] = $327;
   }
  }
  $328 = HEAP32[$13>>2]|0;
  $329 = ((($328)) + 120|0);
  $330 = HEAP32[$329>>2]|0;
  $331 = ($330|0)==(0|0);
  L93: do {
   if (!($331)) {
    $332 = ((($330)) + 104|0);
    $333 = HEAP32[$332>>2]|0;
    $334 = ((($330)) + 64|0);
    $335 = HEAP32[$334>>2]|0;
    $336 = ((($335)) + 104|0);
    $337 = HEAP32[$336>>2]|0;
    $338 = ((($337)) + 80|0);
    $339 = HEAP32[$338>>2]|0;
    $not$$i$i = ($339|0)==(0);
    if ($not$$i$i) {
     $choice$0$i = 7;
    } else {
     $340 = ((($328)) + 124|0);
     $341 = HEAP32[$340>>2]|0;
     $choice$0$i = $341;
    }
    $342 = (((($333)) + 12|0) + ($choice$0$i<<2)|0);
    $343 = HEAP32[$342>>2]|0;
    $344 = ((($343)) + 8|0);
    $345 = HEAP32[$344>>2]|0;
    HEAP32[$4>>2] = $345;
    $346 = HEAP32[$342>>2]|0;
    $347 = HEAP32[$346>>2]|0;
    $348 = ((($346)) + 4|0);
    $349 = HEAP32[$348>>2]|0;
    $350 = (($349) + 7)|0;
    $351 = (($350|0) / 8)&-1;
    $352 = (($351) + ($347))|0;
    HEAP32[$14>>2] = $352;
    HEAP32[$15>>2] = 0;
    $353 = ((($330)) + 44|0);
    $354 = HEAP32[$353>>2]|0;
    HEAP32[$16>>2] = $354;
    $355 = ((($330)) + 48|0);
    $356 = $355;
    $357 = $356;
    $358 = HEAP32[$357>>2]|0;
    $359 = (($356) + 4)|0;
    $360 = $359;
    $361 = HEAP32[$360>>2]|0;
    $362 = $17;
    $363 = $362;
    HEAP32[$363>>2] = $358;
    $364 = (($362) + 4)|0;
    $365 = $364;
    HEAP32[$365>>2] = $361;
    $366 = ((($330)) + 56|0);
    $367 = $366;
    $368 = $367;
    $369 = HEAP32[$368>>2]|0;
    $370 = (($367) + 4)|0;
    $371 = $370;
    $372 = HEAP32[$371>>2]|0;
    $373 = $18;
    $374 = $373;
    HEAP32[$374>>2] = $369;
    $375 = (($373) + 4)|0;
    $376 = $375;
    HEAP32[$376>>2] = $372;
    HEAP32[$329>>2] = 0;
    while(1) {
     (_ogg_stream_packetin($state,$4)|0);
     $426 = HEAP32[$state>>2]|0;
     $427 = ($426|0)==(0|0);
     L100: do {
      if (!($427)) {
       $428 = HEAP32[$19>>2]|0;
       $429 = ($428|0)==(0);
       $$pre$i10 = HEAP32[$$phi$trans$insert$i9>>2]|0;
       $phitmp$i11 = ($$pre$i10|0)==(0);
       if ($429) {
        if ($phitmp$i11) {
         $force$0$i12 = 0;
        } else {
         $430 = HEAP32[$20>>2]|0;
         $431 = ($430|0)==(0);
         if ($431) {
          label = 78;
         } else {
          $force$0$i12 = 0;
         }
        }
       } else {
        if ($phitmp$i11) {
         $force$0$i12 = 0;
        } else {
         label = 78;
        }
       }
       if ((label|0) == 78) {
        label = 0;
        $force$0$i12 = 1;
       }
       $432 = (_ogg_stream_flush_i($state,$og,$force$0$i12)|0);
       $433 = ($432|0)==(0);
       if (!($433)) {
        while(1) {
         $434 = HEAP32[$5>>2]|0;
         $435 = HEAP32[$6>>2]|0;
         $436 = (($435) + ($434))|0;
         $437 = HEAP32[$7>>2]|0;
         $438 = (($436) + ($437))|0;
         $439 = ($438|0)==(0);
         if (!($439)) {
          $448 = HEAP32[$8>>2]|0;
          $449 = (_realloc($448,$438)|0);
          HEAP32[$8>>2] = $449;
          $450 = HEAP32[$5>>2]|0;
          $451 = (($449) + ($450)|0);
          $452 = HEAP32[$og>>2]|0;
          $453 = HEAP32[$6>>2]|0;
          _memcpy(($451|0),($452|0),($453|0))|0;
          $454 = (($453) + ($450))|0;
          HEAP32[$5>>2] = $454;
          $455 = (($449) + ($454)|0);
          $456 = HEAP32[$9>>2]|0;
          $457 = HEAP32[$7>>2]|0;
          _memcpy(($455|0),($456|0),($457|0))|0;
          $458 = (($457) + ($454))|0;
          HEAP32[$5>>2] = $458;
         }
         $440 = HEAP32[$state>>2]|0;
         $441 = ($440|0)==(0|0);
         if ($441) {
          break L100;
         }
         $442 = HEAP32[$19>>2]|0;
         $443 = ($442|0)==(0);
         $$pre$i5 = HEAP32[$$phi$trans$insert$i9>>2]|0;
         $phitmp$i = ($$pre$i5|0)==(0);
         if ($443) {
          if ($phitmp$i) {
           $force$0$i = 0;
          } else {
           $444 = HEAP32[$20>>2]|0;
           $445 = ($444|0)==(0);
           if ($445) {
            label = 86;
           } else {
            $force$0$i = 0;
           }
          }
         } else {
          if ($phitmp$i) {
           $force$0$i = 0;
          } else {
           label = 86;
          }
         }
         if ((label|0) == 86) {
          label = 0;
          $force$0$i = 1;
         }
         $446 = (_ogg_stream_flush_i($state,$og,$force$0$i)|0);
         $447 = ($446|0)==(0);
         if ($447) {
          break;
         }
        }
       }
      }
     } while(0);
     $377 = HEAP32[$13>>2]|0;
     $378 = ((($377)) + 120|0);
     $379 = HEAP32[$378>>2]|0;
     $380 = ($379|0)==(0|0);
     if ($380) {
      break L93;
     }
     $381 = ((($379)) + 104|0);
     $382 = HEAP32[$381>>2]|0;
     $383 = ((($379)) + 64|0);
     $384 = HEAP32[$383>>2]|0;
     $385 = ((($384)) + 104|0);
     $386 = HEAP32[$385>>2]|0;
     $387 = ((($386)) + 80|0);
     $388 = HEAP32[$387>>2]|0;
     $not$$i$i1 = ($388|0)==(0);
     if ($not$$i$i1) {
      $choice$0$i2 = 7;
     } else {
      $389 = ((($377)) + 124|0);
      $390 = HEAP32[$389>>2]|0;
      $choice$0$i2 = $390;
     }
     $391 = (((($382)) + 12|0) + ($choice$0$i2<<2)|0);
     $392 = HEAP32[$391>>2]|0;
     $393 = ((($392)) + 8|0);
     $394 = HEAP32[$393>>2]|0;
     HEAP32[$4>>2] = $394;
     $395 = HEAP32[$391>>2]|0;
     $396 = HEAP32[$395>>2]|0;
     $397 = ((($395)) + 4|0);
     $398 = HEAP32[$397>>2]|0;
     $399 = (($398) + 7)|0;
     $400 = (($399|0) / 8)&-1;
     $401 = (($400) + ($396))|0;
     HEAP32[$14>>2] = $401;
     HEAP32[$15>>2] = 0;
     $402 = ((($379)) + 44|0);
     $403 = HEAP32[$402>>2]|0;
     HEAP32[$16>>2] = $403;
     $404 = ((($379)) + 48|0);
     $405 = $404;
     $406 = $405;
     $407 = HEAP32[$406>>2]|0;
     $408 = (($405) + 4)|0;
     $409 = $408;
     $410 = HEAP32[$409>>2]|0;
     $411 = $17;
     $412 = $411;
     HEAP32[$412>>2] = $407;
     $413 = (($411) + 4)|0;
     $414 = $413;
     HEAP32[$414>>2] = $410;
     $415 = ((($379)) + 56|0);
     $416 = $415;
     $417 = $416;
     $418 = HEAP32[$417>>2]|0;
     $419 = (($416) + 4)|0;
     $420 = $419;
     $421 = HEAP32[$420>>2]|0;
     $422 = $18;
     $423 = $422;
     HEAP32[$423>>2] = $418;
     $424 = (($422) + 4)|0;
     $425 = $424;
     HEAP32[$425>>2] = $421;
     HEAP32[$378>>2] = 0;
    }
   }
  } while(0);
  $21 = (_vorbis_analysis_blockout($0,$1)|0);
  $22 = ($21|0)==(1);
  if (!($22)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _encoder_finish($state) {
 $state = $state|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($state)) + 440|0);
 _vorbis_analysis_wrote($0,0);
 _encoder_encode_work($state);
 return;
}
function _encoder_get_data($state) {
 $state = $state|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($state)) + 672|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _encoder_get_data_len($state) {
 $state = $state|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($state)) + 676|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _encoder_clear_data($state) {
 $state = $state|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($state)) + 676|0);
 HEAP32[$0>>2] = 0;
 return;
}
function _encoder_get_analysis_buffer($state,$ch) {
 $state = $state|0;
 $ch = $ch|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($state)) + 664|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($ch<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 return ($3|0);
}
function _qsort($base,$nel,$cmp) {
 $base = $base|0;
 $nel = $nel|0;
 $cmp = $cmp|0;
 var $$0$i = 0, $$0$i29 = 0, $$01$i5$i$ph = 0, $$02$i$i = 0, $$02$i3$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $4$phi = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $head$0$lcssa = 0, $head$033 = 0, $head$149 = 0, $i$0 = 0;
 var $lp = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $or$cond = 0, $or$cond38 = 0, $or$cond3848 = 0, $or$cond47 = 0, $p$sroa$0$0 = 0, $p$sroa$0$1 = 0, $p$sroa$22$0 = 0, $p$sroa$22$1 = 0, $p$sroa$22$2 = 0, $pshift$0$lcssa = 0, $pshift$034 = 0, $pshift$1 = 0, $pshift$250 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $lp = sp;
 $0 = $nel << 2;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = ((($lp)) + 4|0);
  HEAP32[$2>>2] = 4;
  HEAP32[$lp>>2] = 4;
  $4 = 4;$6 = 4;$i$0 = 2;
  while(1) {
   $3 = (($4) + 4)|0;
   $5 = (($3) + ($6))|0;
   $7 = (($lp) + ($i$0<<2)|0);
   HEAP32[$7>>2] = $5;
   $8 = ($5>>>0)<($0>>>0);
   $9 = (($i$0) + 1)|0;
   if ($8) {
    $4$phi = $6;$6 = $5;$i$0 = $9;$4 = $4$phi;
   } else {
    break;
   }
  }
  $10 = (($base) + ($0)|0);
  $11 = ((($10)) + -4|0);
  $12 = ($11>>>0)>($base>>>0);
  if ($12) {
   $13 = $11;
   $14 = $nel << 2;
   $15 = (($14) + -1)|0;
   $16 = $15 & -4;
   $head$033 = $base;$p$sroa$0$0 = 1;$p$sroa$22$0 = 0;$pshift$034 = 1;
   while(1) {
    $17 = $p$sroa$0$0 & 3;
    $18 = ($17|0)==(3);
    do {
     if ($18) {
      _sift($head$033,$cmp,$pshift$034,$lp);
      $19 = $p$sroa$0$0 >>> 2;
      $20 = $p$sroa$22$0 << 30;
      $21 = $20 | $19;
      $22 = $p$sroa$22$0 >>> 2;
      $23 = (($pshift$034) + 2)|0;
      $45 = $21;$p$sroa$22$1 = $22;$pshift$1 = $23;
     } else {
      $24 = (($pshift$034) + -1)|0;
      $25 = (($lp) + ($24<<2)|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = $head$033;
      $28 = (($13) - ($27))|0;
      $29 = ($26>>>0)<($28>>>0);
      if ($29) {
       _sift($head$033,$cmp,$pshift$034,$lp);
      } else {
       _trinkle($head$033,$cmp,$p$sroa$0$0,$p$sroa$22$0,$pshift$034,0,$lp);
      }
      $30 = ($pshift$034|0)==(1);
      if ($30) {
       $31 = $p$sroa$22$0 << 1;
       $32 = $p$sroa$0$0 >>> 31;
       $33 = $32 | $31;
       $34 = $p$sroa$0$0 << 1;
       $45 = $34;$p$sroa$22$1 = $33;$pshift$1 = 0;
       break;
      } else {
       $35 = ($24>>>0)>(31);
       $36 = (($pshift$034) + -33)|0;
       $37 = $35 ? 0 : $p$sroa$0$0;
       $38 = $35 ? $p$sroa$0$0 : $p$sroa$22$0;
       $$0$i = $35 ? $36 : $24;
       $39 = $38 << $$0$i;
       $40 = (32 - ($$0$i))|0;
       $41 = $37 >>> $40;
       $42 = $41 | $39;
       $43 = $37 << $$0$i;
       $45 = $43;$p$sroa$22$1 = $42;$pshift$1 = 1;
       break;
      }
     }
    } while(0);
    $44 = $45 | 1;
    $46 = ((($head$033)) + 4|0);
    $47 = ($46>>>0)<($11>>>0);
    if ($47) {
     $head$033 = $46;$p$sroa$0$0 = $44;$p$sroa$22$0 = $p$sroa$22$1;$pshift$034 = $pshift$1;
    } else {
     break;
    }
   }
   $scevgep = (($base) + ($16)|0);
   $head$0$lcssa = $scevgep;$p$sroa$0$1 = $44;$p$sroa$22$2 = $p$sroa$22$1;$pshift$0$lcssa = $pshift$1;
  } else {
   $head$0$lcssa = $base;$p$sroa$0$1 = 1;$p$sroa$22$2 = 0;$pshift$0$lcssa = 1;
  }
  _trinkle($head$0$lcssa,$cmp,$p$sroa$0$1,$p$sroa$22$2,$pshift$0$lcssa,0,$lp);
  $48 = ($pshift$0$lcssa|0)==(1);
  $49 = ($p$sroa$0$1|0)==(1);
  $or$cond47 = $48 & $49;
  $50 = ($p$sroa$22$2|0)==(0);
  $or$cond3848 = $or$cond47 & $50;
  if (!($or$cond3848)) {
   $108 = $50;$53 = $p$sroa$0$1;$62 = $p$sroa$22$2;$head$149 = $head$0$lcssa;$pshift$250 = $pshift$0$lcssa;
   while(1) {
    $51 = ($pshift$250|0)<(2);
    if (!($51)) {
     $73 = $62 << 2;
     $74 = $53 >>> 30;
     $75 = $74 | $73;
     $76 = (($pshift$250) + -2)|0;
     $77 = $53 << 1;
     $78 = $77 & 2147483646;
     $79 = $74 << 31;
     $80 = $78 | $79;
     $81 = $80 ^ 3;
     $82 = $75 >>> 1;
     $83 = (($lp) + ($76<<2)|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = (0 - ($84))|0;
     $86 = (($head$149) + ($85)|0);
     $87 = ((($86)) + -4|0);
     $88 = (($pshift$250) + -1)|0;
     _trinkle($87,$cmp,$81,$82,$88,1,$lp);
     $89 = $82 << 1;
     $90 = $74 & 1;
     $91 = $90 | $89;
     $92 = $81 << 1;
     $93 = $92 | 1;
     $94 = ((($head$149)) + -4|0);
     _trinkle($94,$cmp,$93,$91,$76,1,$lp);
     $95 = ($91|0)==(0);
     $108 = $95;$53 = $93;$62 = $91;$head$149 = $94;$pshift$250 = $76;
     continue;
    }
    $52 = (($53) + -1)|0;
    $54 = ($52|0)==(0);
    do {
     if ($54) {
      $72 = 32;
      label = 26;
     } else {
      $55 = $52 & 1;
      $56 = ($55|0)==(0);
      if ($56) {
       $$02$i$i = $52;$nTrailingZeros$03$i$i = 0;
       while(1) {
        $57 = (($nTrailingZeros$03$i$i) + 1)|0;
        $58 = $$02$i$i >>> 1;
        $59 = $58 & 1;
        $60 = ($59|0)==(0);
        if ($60) {
         $$02$i$i = $58;$nTrailingZeros$03$i$i = $57;
        } else {
         $69 = $57;
         break;
        }
       }
      } else {
       if ($108) {
        $$01$i5$i$ph = 32;
       } else {
        $61 = $62 & 1;
        $63 = ($61|0)==(0);
        if ($63) {
         $$02$i3$i = $62;$nTrailingZeros$03$i2$i = 0;
        } else {
         $$0$i29 = 0;$100 = $62;$104 = 0;$97 = $53;
         break;
        }
        while(1) {
         $64 = (($nTrailingZeros$03$i2$i) + 1)|0;
         $65 = $$02$i3$i >>> 1;
         $66 = $65 & 1;
         $67 = ($66|0)==(0);
         if ($67) {
          $$02$i3$i = $65;$nTrailingZeros$03$i2$i = $64;
         } else {
          $$01$i5$i$ph = $64;
          break;
         }
        }
       }
       $68 = (($$01$i5$i$ph) + 32)|0;
       $69 = $68;
      }
      $70 = ($69>>>0)>(31);
      if ($70) {
       $72 = $69;
       label = 26;
      } else {
       $$0$i29 = $69;$100 = $62;$104 = $69;$97 = $53;
      }
     }
    } while(0);
    if ((label|0) == 26) {
     label = 0;
     $71 = (($72) + -32)|0;
     $$0$i29 = $71;$100 = 0;$104 = $72;$97 = $62;
    }
    $96 = $97 >>> $$0$i29;
    $98 = (32 - ($$0$i29))|0;
    $99 = $100 << $98;
    $101 = $99 | $96;
    $102 = $100 >>> $$0$i29;
    $103 = (($104) + ($pshift$250))|0;
    $$pre = ((($head$149)) + -4|0);
    $105 = ($103|0)==(1);
    $106 = ($101|0)==(1);
    $or$cond = $105 & $106;
    $107 = ($102|0)==(0);
    $or$cond38 = $or$cond & $107;
    if ($or$cond38) {
     break;
    } else {
     $108 = $107;$53 = $101;$62 = $102;$head$149 = $$pre;$pshift$250 = $103;
    }
   }
  }
 }
 STACKTOP = sp;return;
}
function _sift($head,$cmp,$pshift,$lp) {
 $head = $head|0;
 $cmp = $cmp|0;
 $pshift = $pshift|0;
 $lp = $lp|0;
 var $$0$be = 0, $$01$be = 0, $$012 = 0, $$03 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $ar = 0, $i$0$lcssa = 0, $i$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ar = sp;
 HEAP32[$ar>>2] = $head;
 $0 = ($pshift|0)>(1);
 L1: do {
  if ($0) {
   $$012 = $pshift;$$03 = $head;$7 = $head;$i$04 = 1;
   while(1) {
    $1 = ((($$03)) + -4|0);
    $2 = (($$012) + -2)|0;
    $3 = (($lp) + ($2<<2)|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = (0 - ($4))|0;
    $6 = (($1) + ($5)|0);
    $8 = (FUNCTION_TABLE_iii[$cmp & 31]($7,$6)|0);
    $9 = ($8|0)>(-1);
    if ($9) {
     $10 = (FUNCTION_TABLE_iii[$cmp & 31]($7,$1)|0);
     $11 = ($10|0)>(-1);
     if ($11) {
      $i$0$lcssa = $i$04;
      break L1;
     }
    }
    $12 = (FUNCTION_TABLE_iii[$cmp & 31]($6,$1)|0);
    $13 = ($12|0)>(-1);
    $14 = (($i$04) + 1)|0;
    $15 = (($ar) + ($i$04<<2)|0);
    if ($13) {
     HEAP32[$15>>2] = $6;
     $16 = (($$012) + -1)|0;
     $$0$be = $6;$$01$be = $16;
    } else {
     HEAP32[$15>>2] = $1;
     $$0$be = $1;$$01$be = $2;
    }
    $17 = ($$01$be|0)>(1);
    if (!($17)) {
     $i$0$lcssa = $14;
     break L1;
    }
    $$pre = HEAP32[$ar>>2]|0;
    $$012 = $$01$be;$$03 = $$0$be;$7 = $$pre;$i$04 = $14;
   }
  } else {
   $i$0$lcssa = 1;
  }
 } while(0);
 _cycle($ar,$i$0$lcssa);
 STACKTOP = sp;return;
}
function _cycle($ar,$n) {
 $ar = $ar|0;
 $n = $n|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp;
 $0 = ($n|0)<(2);
 L1: do {
  if (!($0)) {
   $1 = (($ar) + ($n<<2)|0);
   HEAP32[$1>>2] = $tmp;
   $2 = HEAP32[$ar>>2]|0;
   $3 = HEAPU8[$2>>0]|(HEAPU8[$2+1>>0]<<8)|(HEAPU8[$2+2>>0]<<16)|(HEAPU8[$2+3>>0]<<24);
   HEAP32[$tmp>>2] = $3;
   $9 = $2;$i$01 = 0;
   while(1) {
    $4 = (($ar) + ($i$01<<2)|0);
    $5 = (($i$01) + 1)|0;
    $6 = (($ar) + ($5<<2)|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = HEAPU8[$7>>0]|(HEAPU8[$7+1>>0]<<8)|(HEAPU8[$7+2>>0]<<16)|(HEAPU8[$7+3>>0]<<24);
    HEAP8[$9>>0]=$8&255;HEAP8[$9+1>>0]=($8>>8)&255;HEAP8[$9+2>>0]=($8>>16)&255;HEAP8[$9+3>>0]=$8>>24;
    $10 = HEAP32[$4>>2]|0;
    $11 = ((($10)) + 4|0);
    HEAP32[$4>>2] = $11;
    $exitcond = ($5|0)==($n|0);
    if ($exitcond) {
     break L1;
    }
    $$pre = HEAP32[$6>>2]|0;
    $9 = $$pre;$i$01 = $5;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _trinkle($head,$cmp,$pp$val,$pp$1$val,$pshift,$trusty,$lp) {
 $head = $head|0;
 $cmp = $cmp|0;
 $pp$val = $pp$val|0;
 $pp$1$val = $pp$1$val|0;
 $pshift = $pshift|0;
 $trusty = $trusty|0;
 $lp = $lp|0;
 var $$0$i = 0, $$0$lcssa32 = 0, $$01$i5$i$ph = 0, $$01245 = 0, $$01245$phi = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$lcssa34 = 0, $$021047 = 0, $$03948 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $i$0$lcssa33 = 0, $i$01146 = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $or$cond = 0, $p$sroa$0$0849 = 0;
 var $p$sroa$8$0650 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ar = sp;
 HEAP32[$ar>>2] = $head;
 $0 = ($pp$val|0)!=(1);
 $1 = ($pp$1$val|0)!=(0);
 $2 = $1 | $0;
 L1: do {
  if ($2) {
   $3 = (($lp) + ($pshift<<2)|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = (0 - ($4))|0;
   $6 = (($head) + ($5)|0);
   $7 = (FUNCTION_TABLE_iii[$cmp & 31]($6,$head)|0);
   $8 = ($7|0)<(1);
   if ($8) {
    label = 18;
   } else {
    $phitmp = ($trusty|0)==(0);
    $$01245 = $head;$$021047 = $pshift;$$03948 = $phitmp;$14 = $6;$i$01146 = 1;$p$sroa$0$0849 = $pp$val;$p$sroa$8$0650 = $pp$1$val;
    while(1) {
     $9 = ($$021047|0)>(1);
     $or$cond = $$03948 & $9;
     if ($or$cond) {
      $10 = ((($$01245)) + -4|0);
      $11 = (($$021047) + -2)|0;
      $12 = (($lp) + ($11<<2)|0);
      $13 = HEAP32[$12>>2]|0;
      $15 = (FUNCTION_TABLE_iii[$cmp & 31]($10,$14)|0);
      $16 = ($15|0)>(-1);
      if ($16) {
       $$0$lcssa32 = $$01245;$$02$lcssa34 = $$021047;$i$0$lcssa33 = $i$01146;
       label = 19;
       break L1;
      }
      $17 = (0 - ($13))|0;
      $18 = (($10) + ($17)|0);
      $19 = (FUNCTION_TABLE_iii[$cmp & 31]($18,$14)|0);
      $20 = ($19|0)>(-1);
      if ($20) {
       $$0$lcssa32 = $$01245;$$02$lcssa34 = $$021047;$i$0$lcssa33 = $i$01146;
       label = 19;
       break L1;
      }
     }
     $21 = (($i$01146) + 1)|0;
     $22 = (($ar) + ($i$01146<<2)|0);
     HEAP32[$22>>2] = $14;
     $23 = (($p$sroa$0$0849) + -1)|0;
     $24 = ($23|0)==(0);
     do {
      if ($24) {
       $42 = 32;
       label = 15;
      } else {
       $25 = $23 & 1;
       $26 = ($25|0)==(0);
       if ($26) {
        $$02$i$i = $23;$nTrailingZeros$03$i$i = 0;
        while(1) {
         $27 = (($nTrailingZeros$03$i$i) + 1)|0;
         $28 = $$02$i$i >>> 1;
         $29 = $28 & 1;
         $30 = ($29|0)==(0);
         if ($30) {
          $$02$i$i = $28;$nTrailingZeros$03$i$i = $27;
         } else {
          $39 = $27;
          break;
         }
        }
       } else {
        $31 = ($p$sroa$8$0650|0)==(0);
        if ($31) {
         $$01$i5$i$ph = 32;
        } else {
         $32 = $p$sroa$8$0650 & 1;
         $33 = ($32|0)==(0);
         if ($33) {
          $$02$i3$i = $p$sroa$8$0650;$nTrailingZeros$03$i2$i = 0;
         } else {
          $$0$i = 0;$44 = $p$sroa$0$0849;$47 = $p$sroa$8$0650;$51 = 0;
          break;
         }
         while(1) {
          $34 = (($nTrailingZeros$03$i2$i) + 1)|0;
          $35 = $$02$i3$i >>> 1;
          $36 = $35 & 1;
          $37 = ($36|0)==(0);
          if ($37) {
           $$02$i3$i = $35;$nTrailingZeros$03$i2$i = $34;
          } else {
           $$01$i5$i$ph = $34;
           break;
          }
         }
        }
        $38 = (($$01$i5$i$ph) + 32)|0;
        $39 = $38;
       }
       $40 = ($39>>>0)>(31);
       if ($40) {
        $42 = $39;
        label = 15;
       } else {
        $$0$i = $39;$44 = $p$sroa$0$0849;$47 = $p$sroa$8$0650;$51 = $39;
       }
      }
     } while(0);
     if ((label|0) == 15) {
      label = 0;
      $41 = (($42) + -32)|0;
      $$0$i = $41;$44 = $p$sroa$8$0650;$47 = 0;$51 = $42;
     }
     $43 = $44 >>> $$0$i;
     $45 = (32 - ($$0$i))|0;
     $46 = $47 << $45;
     $48 = $46 | $43;
     $49 = $47 >>> $$0$i;
     $50 = (($51) + ($$021047))|0;
     $52 = ($48|0)!=(1);
     $53 = ($49|0)!=(0);
     $54 = $53 | $52;
     if (!($54)) {
      $$0$lcssa32 = $14;$$02$lcssa34 = $50;$i$0$lcssa33 = $21;
      label = 19;
      break L1;
     }
     $$pre = HEAP32[$ar>>2]|0;
     $55 = (($lp) + ($50<<2)|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = (0 - ($56))|0;
     $58 = (($14) + ($57)|0);
     $59 = (FUNCTION_TABLE_iii[$cmp & 31]($58,$$pre)|0);
     $60 = ($59|0)<(1);
     if ($60) {
      $$0$lcssa32 = $14;$$02$lcssa34 = $50;$i$0$lcssa33 = $21;
      label = 19;
      break;
     } else {
      $$01245$phi = $14;$$021047 = $50;$$03948 = 1;$14 = $58;$i$01146 = $21;$p$sroa$0$0849 = $48;$p$sroa$8$0650 = $49;$$01245 = $$01245$phi;
     }
    }
   }
  } else {
   label = 18;
  }
 } while(0);
 if ((label|0) == 18) {
  $61 = ($trusty|0)==(0);
  if ($61) {
   $$0$lcssa32 = $head;$$02$lcssa34 = $pshift;$i$0$lcssa33 = 1;
   label = 19;
  }
 }
 if ((label|0) == 19) {
  _cycle($ar,$i$0$lcssa33);
  _sift($$0$lcssa32,$cmp,$$02$lcssa34,$lp);
 }
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$0 = 0, $$0$i = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i13 = 0, $$pre$i16$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i14Z2D = 0, $$pre$phi$i17$iZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre71 = 0, $$pre9$i$i = 0, $$rsize$0$i = 0, $$rsize$4$i = 0, $$v$0$i = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0;
 var $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0;
 var $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0;
 var $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0;
 var $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0;
 var $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0;
 var $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0;
 var $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0;
 var $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0;
 var $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0;
 var $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0;
 var $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0;
 var $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0;
 var $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0;
 var $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0;
 var $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0;
 var $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0;
 var $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0;
 var $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0;
 var $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0;
 var $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0;
 var $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0;
 var $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0;
 var $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0;
 var $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0;
 var $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0;
 var $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0;
 var $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0;
 var $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0;
 var $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0;
 var $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0;
 var $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0;
 var $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0;
 var $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0;
 var $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0;
 var $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0;
 var $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$0$i = 0, $K2$0$i$i = 0, $K8$0$i$i = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i9 = 0;
 var $R$3$i = 0, $R$3$i$i = 0, $R$3$i11 = 0, $RP$1$i = 0, $RP$1$i$i = 0, $RP$1$i8 = 0, $T$0$i = 0, $T$0$i$i = 0, $T$0$i18$i = 0, $br$2$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i12 = 0, $exitcond$i$i = 0, $i$01$i$i = 0, $idx$0$i = 0, $nb$0 = 0, $not$$i$i = 0, $not$$i20$i = 0, $not$7$i = 0;
 var $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i17 = 0, $or$cond1$i = 0, $or$cond1$i16 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond2$i = 0, $or$cond48$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $p$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i5 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$412$i = 0;
 var $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$068$i = 0, $sp$167$i = 0, $ssize$0$i = 0, $ssize$2$ph$i = 0, $ssize$5$i = 0, $t$0$i = 0, $t$0$i4 = 0, $t$2$i = 0, $t$4$ph$i = 0, $t$4$v$4$i = 0, $t$411$i = 0, $tbase$746$i = 0, $tsize$745$i = 0, $v$0$i = 0;
 var $v$0$i6 = 0, $v$1$i = 0, $v$3$i = 0, $v$4$lcssa$i = 0, $v$413$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[136486]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (545984 + ($13<<2)|0);
    $15 = ((($14)) + 8|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[136486] = $22;
     } else {
      $23 = HEAP32[(545960)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $31 = (($16) + ($28)|0);
    $32 = ((($31)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $33 | 1;
    HEAP32[$32>>2] = $34;
    $$0 = $17;
    return ($$0|0);
   }
   $35 = HEAP32[(545952)>>2]|0;
   $36 = ($4>>>0)>($35>>>0);
   if ($36) {
    $37 = ($7|0)==(0);
    if (!($37)) {
     $38 = $7 << $5;
     $39 = 2 << $5;
     $40 = (0 - ($39))|0;
     $41 = $39 | $40;
     $42 = $38 & $41;
     $43 = (0 - ($42))|0;
     $44 = $42 & $43;
     $45 = (($44) + -1)|0;
     $46 = $45 >>> 12;
     $47 = $46 & 16;
     $48 = $45 >>> $47;
     $49 = $48 >>> 5;
     $50 = $49 & 8;
     $51 = $50 | $47;
     $52 = $48 >>> $50;
     $53 = $52 >>> 2;
     $54 = $53 & 4;
     $55 = $51 | $54;
     $56 = $52 >>> $54;
     $57 = $56 >>> 1;
     $58 = $57 & 2;
     $59 = $55 | $58;
     $60 = $56 >>> $58;
     $61 = $60 >>> 1;
     $62 = $61 & 1;
     $63 = $59 | $62;
     $64 = $60 >>> $62;
     $65 = (($63) + ($64))|0;
     $66 = $65 << 1;
     $67 = (545984 + ($66<<2)|0);
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ($67|0)==($71|0);
     do {
      if ($72) {
       $73 = 1 << $65;
       $74 = $73 ^ -1;
       $75 = $6 & $74;
       HEAP32[136486] = $75;
       $89 = $35;
      } else {
       $76 = HEAP32[(545960)>>2]|0;
       $77 = ($71>>>0)<($76>>>0);
       if ($77) {
        _abort();
        // unreachable;
       }
       $78 = ((($71)) + 12|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = ($79|0)==($69|0);
       if ($80) {
        HEAP32[$78>>2] = $67;
        HEAP32[$68>>2] = $71;
        $$pre = HEAP32[(545952)>>2]|0;
        $89 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $81 = $65 << 3;
     $82 = (($81) - ($4))|0;
     $83 = $4 | 3;
     $84 = ((($69)) + 4|0);
     HEAP32[$84>>2] = $83;
     $85 = (($69) + ($4)|0);
     $86 = $82 | 1;
     $87 = ((($85)) + 4|0);
     HEAP32[$87>>2] = $86;
     $88 = (($85) + ($82)|0);
     HEAP32[$88>>2] = $82;
     $90 = ($89|0)==(0);
     if (!($90)) {
      $91 = HEAP32[(545964)>>2]|0;
      $92 = $89 >>> 3;
      $93 = $92 << 1;
      $94 = (545984 + ($93<<2)|0);
      $95 = HEAP32[136486]|0;
      $96 = 1 << $92;
      $97 = $95 & $96;
      $98 = ($97|0)==(0);
      if ($98) {
       $99 = $95 | $96;
       HEAP32[136486] = $99;
       $$pre71 = ((($94)) + 8|0);
       $$pre$phiZ2D = $$pre71;$F4$0 = $94;
      } else {
       $100 = ((($94)) + 8|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = HEAP32[(545960)>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $100;$F4$0 = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $91;
      $104 = ((($F4$0)) + 12|0);
      HEAP32[$104>>2] = $91;
      $105 = ((($91)) + 8|0);
      HEAP32[$105>>2] = $F4$0;
      $106 = ((($91)) + 12|0);
      HEAP32[$106>>2] = $94;
     }
     HEAP32[(545952)>>2] = $82;
     HEAP32[(545964)>>2] = $85;
     $$0 = $70;
     return ($$0|0);
    }
    $107 = HEAP32[(545948)>>2]|0;
    $108 = ($107|0)==(0);
    if ($108) {
     $nb$0 = $4;
    } else {
     $109 = (0 - ($107))|0;
     $110 = $107 & $109;
     $111 = (($110) + -1)|0;
     $112 = $111 >>> 12;
     $113 = $112 & 16;
     $114 = $111 >>> $113;
     $115 = $114 >>> 5;
     $116 = $115 & 8;
     $117 = $116 | $113;
     $118 = $114 >>> $116;
     $119 = $118 >>> 2;
     $120 = $119 & 4;
     $121 = $117 | $120;
     $122 = $118 >>> $120;
     $123 = $122 >>> 1;
     $124 = $123 & 2;
     $125 = $121 | $124;
     $126 = $122 >>> $124;
     $127 = $126 >>> 1;
     $128 = $127 & 1;
     $129 = $125 | $128;
     $130 = $126 >>> $128;
     $131 = (($129) + ($130))|0;
     $132 = (546248 + ($131<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ((($133)) + 4|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = $135 & -8;
     $137 = (($136) - ($4))|0;
     $rsize$0$i = $137;$t$0$i = $133;$v$0$i = $133;
     while(1) {
      $138 = ((($t$0$i)) + 16|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)==(0|0);
      if ($140) {
       $141 = ((($t$0$i)) + 20|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       if ($143) {
        break;
       } else {
        $145 = $142;
       }
      } else {
       $145 = $139;
      }
      $144 = ((($145)) + 4|0);
      $146 = HEAP32[$144>>2]|0;
      $147 = $146 & -8;
      $148 = (($147) - ($4))|0;
      $149 = ($148>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $149 ? $148 : $rsize$0$i;
      $$v$0$i = $149 ? $145 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $145;$v$0$i = $$v$0$i;
     }
     $150 = HEAP32[(545960)>>2]|0;
     $151 = ($v$0$i>>>0)<($150>>>0);
     if ($151) {
      _abort();
      // unreachable;
     }
     $152 = (($v$0$i) + ($4)|0);
     $153 = ($v$0$i>>>0)<($152>>>0);
     if (!($153)) {
      _abort();
      // unreachable;
     }
     $154 = ((($v$0$i)) + 24|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = ((($v$0$i)) + 12|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($v$0$i|0);
     do {
      if ($158) {
       $168 = ((($v$0$i)) + 20|0);
       $169 = HEAP32[$168>>2]|0;
       $170 = ($169|0)==(0|0);
       if ($170) {
        $171 = ((($v$0$i)) + 16|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ($172|0)==(0|0);
        if ($173) {
         $R$3$i = 0;
         break;
        } else {
         $R$1$i = $172;$RP$1$i = $171;
        }
       } else {
        $R$1$i = $169;$RP$1$i = $168;
       }
       while(1) {
        $174 = ((($R$1$i)) + 20|0);
        $175 = HEAP32[$174>>2]|0;
        $176 = ($175|0)==(0|0);
        if (!($176)) {
         $R$1$i = $175;$RP$1$i = $174;
         continue;
        }
        $177 = ((($R$1$i)) + 16|0);
        $178 = HEAP32[$177>>2]|0;
        $179 = ($178|0)==(0|0);
        if ($179) {
         break;
        } else {
         $R$1$i = $178;$RP$1$i = $177;
        }
       }
       $180 = ($RP$1$i>>>0)<($150>>>0);
       if ($180) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$1$i>>2] = 0;
        $R$3$i = $R$1$i;
        break;
       }
      } else {
       $159 = ((($v$0$i)) + 8|0);
       $160 = HEAP32[$159>>2]|0;
       $161 = ($160>>>0)<($150>>>0);
       if ($161) {
        _abort();
        // unreachable;
       }
       $162 = ((($160)) + 12|0);
       $163 = HEAP32[$162>>2]|0;
       $164 = ($163|0)==($v$0$i|0);
       if (!($164)) {
        _abort();
        // unreachable;
       }
       $165 = ((($157)) + 8|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = ($166|0)==($v$0$i|0);
       if ($167) {
        HEAP32[$162>>2] = $157;
        HEAP32[$165>>2] = $160;
        $R$3$i = $157;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $181 = ($155|0)==(0|0);
     do {
      if (!($181)) {
       $182 = ((($v$0$i)) + 28|0);
       $183 = HEAP32[$182>>2]|0;
       $184 = (546248 + ($183<<2)|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($v$0$i|0)==($185|0);
       if ($186) {
        HEAP32[$184>>2] = $R$3$i;
        $cond$i = ($R$3$i|0)==(0|0);
        if ($cond$i) {
         $187 = 1 << $183;
         $188 = $187 ^ -1;
         $189 = HEAP32[(545948)>>2]|0;
         $190 = $189 & $188;
         HEAP32[(545948)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(545960)>>2]|0;
        $192 = ($155>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($155)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($v$0$i|0);
        if ($195) {
         HEAP32[$193>>2] = $R$3$i;
        } else {
         $196 = ((($155)) + 20|0);
         HEAP32[$196>>2] = $R$3$i;
        }
        $197 = ($R$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(545960)>>2]|0;
       $199 = ($R$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($R$3$i)) + 24|0);
       HEAP32[$200>>2] = $155;
       $201 = ((($v$0$i)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($R$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $R$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($v$0$i)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(545960)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($R$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $R$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i) + ($4))|0;
      $216 = $215 | 3;
      $217 = ((($v$0$i)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($v$0$i) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $4 | 3;
      $223 = ((($v$0$i)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $rsize$0$i | 1;
      $225 = ((($152)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($152) + ($rsize$0$i)|0);
      HEAP32[$226>>2] = $rsize$0$i;
      $227 = HEAP32[(545952)>>2]|0;
      $228 = ($227|0)==(0);
      if (!($228)) {
       $229 = HEAP32[(545964)>>2]|0;
       $230 = $227 >>> 3;
       $231 = $230 << 1;
       $232 = (545984 + ($231<<2)|0);
       $233 = HEAP32[136486]|0;
       $234 = 1 << $230;
       $235 = $233 & $234;
       $236 = ($235|0)==(0);
       if ($236) {
        $237 = $233 | $234;
        HEAP32[136486] = $237;
        $$pre$i = ((($232)) + 8|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $232;
       } else {
        $238 = ((($232)) + 8|0);
        $239 = HEAP32[$238>>2]|0;
        $240 = HEAP32[(545960)>>2]|0;
        $241 = ($239>>>0)<($240>>>0);
        if ($241) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $238;$F1$0$i = $239;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $229;
       $242 = ((($F1$0$i)) + 12|0);
       HEAP32[$242>>2] = $229;
       $243 = ((($229)) + 8|0);
       HEAP32[$243>>2] = $F1$0$i;
       $244 = ((($229)) + 12|0);
       HEAP32[$244>>2] = $232;
      }
      HEAP32[(545952)>>2] = $rsize$0$i;
      HEAP32[(545964)>>2] = $152;
     }
     $245 = ((($v$0$i)) + 8|0);
     $$0 = $245;
     return ($$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $246 = ($bytes>>>0)>(4294967231);
   if ($246) {
    $nb$0 = -1;
   } else {
    $247 = (($bytes) + 11)|0;
    $248 = $247 & -8;
    $249 = HEAP32[(545948)>>2]|0;
    $250 = ($249|0)==(0);
    if ($250) {
     $nb$0 = $248;
    } else {
     $251 = (0 - ($248))|0;
     $252 = $247 >>> 8;
     $253 = ($252|0)==(0);
     if ($253) {
      $idx$0$i = 0;
     } else {
      $254 = ($248>>>0)>(16777215);
      if ($254) {
       $idx$0$i = 31;
      } else {
       $255 = (($252) + 1048320)|0;
       $256 = $255 >>> 16;
       $257 = $256 & 8;
       $258 = $252 << $257;
       $259 = (($258) + 520192)|0;
       $260 = $259 >>> 16;
       $261 = $260 & 4;
       $262 = $261 | $257;
       $263 = $258 << $261;
       $264 = (($263) + 245760)|0;
       $265 = $264 >>> 16;
       $266 = $265 & 2;
       $267 = $262 | $266;
       $268 = (14 - ($267))|0;
       $269 = $263 << $266;
       $270 = $269 >>> 15;
       $271 = (($268) + ($270))|0;
       $272 = $271 << 1;
       $273 = (($271) + 7)|0;
       $274 = $248 >>> $273;
       $275 = $274 & 1;
       $276 = $275 | $272;
       $idx$0$i = $276;
      }
     }
     $277 = (546248 + ($idx$0$i<<2)|0);
     $278 = HEAP32[$277>>2]|0;
     $279 = ($278|0)==(0|0);
     L123: do {
      if ($279) {
       $rsize$3$i = $251;$t$2$i = 0;$v$3$i = 0;
       label = 86;
      } else {
       $280 = ($idx$0$i|0)==(31);
       $281 = $idx$0$i >>> 1;
       $282 = (25 - ($281))|0;
       $283 = $280 ? 0 : $282;
       $284 = $248 << $283;
       $rsize$0$i5 = $251;$rst$0$i = 0;$sizebits$0$i = $284;$t$0$i4 = $278;$v$0$i6 = 0;
       while(1) {
        $285 = ((($t$0$i4)) + 4|0);
        $286 = HEAP32[$285>>2]|0;
        $287 = $286 & -8;
        $288 = (($287) - ($248))|0;
        $289 = ($288>>>0)<($rsize$0$i5>>>0);
        if ($289) {
         $290 = ($287|0)==($248|0);
         if ($290) {
          $rsize$412$i = $288;$t$411$i = $t$0$i4;$v$413$i = $t$0$i4;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $288;$v$1$i = $t$0$i4;
         }
        } else {
         $rsize$1$i = $rsize$0$i5;$v$1$i = $v$0$i6;
        }
        $291 = ((($t$0$i4)) + 20|0);
        $292 = HEAP32[$291>>2]|0;
        $293 = $sizebits$0$i >>> 31;
        $294 = (((($t$0$i4)) + 16|0) + ($293<<2)|0);
        $295 = HEAP32[$294>>2]|0;
        $296 = ($292|0)==(0|0);
        $297 = ($292|0)==($295|0);
        $or$cond1$i = $296 | $297;
        $rst$1$i = $or$cond1$i ? $rst$0$i : $292;
        $298 = ($295|0)==(0|0);
        $299 = $298&1;
        $300 = $299 ^ 1;
        $sizebits$0$$i = $sizebits$0$i << $300;
        if ($298) {
         $rsize$3$i = $rsize$1$i;$t$2$i = $rst$1$i;$v$3$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i5 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $sizebits$0$$i;$t$0$i4 = $295;$v$0$i6 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $301 = ($t$2$i|0)==(0|0);
      $302 = ($v$3$i|0)==(0|0);
      $or$cond$i = $301 & $302;
      if ($or$cond$i) {
       $303 = 2 << $idx$0$i;
       $304 = (0 - ($303))|0;
       $305 = $303 | $304;
       $306 = $249 & $305;
       $307 = ($306|0)==(0);
       if ($307) {
        $nb$0 = $248;
        break;
       }
       $308 = (0 - ($306))|0;
       $309 = $306 & $308;
       $310 = (($309) + -1)|0;
       $311 = $310 >>> 12;
       $312 = $311 & 16;
       $313 = $310 >>> $312;
       $314 = $313 >>> 5;
       $315 = $314 & 8;
       $316 = $315 | $312;
       $317 = $313 >>> $315;
       $318 = $317 >>> 2;
       $319 = $318 & 4;
       $320 = $316 | $319;
       $321 = $317 >>> $319;
       $322 = $321 >>> 1;
       $323 = $322 & 2;
       $324 = $320 | $323;
       $325 = $321 >>> $323;
       $326 = $325 >>> 1;
       $327 = $326 & 1;
       $328 = $324 | $327;
       $329 = $325 >>> $327;
       $330 = (($328) + ($329))|0;
       $331 = (546248 + ($330<<2)|0);
       $332 = HEAP32[$331>>2]|0;
       $t$4$ph$i = $332;
      } else {
       $t$4$ph$i = $t$2$i;
      }
      $333 = ($t$4$ph$i|0)==(0|0);
      if ($333) {
       $rsize$4$lcssa$i = $rsize$3$i;$v$4$lcssa$i = $v$3$i;
      } else {
       $rsize$412$i = $rsize$3$i;$t$411$i = $t$4$ph$i;$v$413$i = $v$3$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $334 = ((($t$411$i)) + 4|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = $335 & -8;
       $337 = (($336) - ($248))|0;
       $338 = ($337>>>0)<($rsize$412$i>>>0);
       $$rsize$4$i = $338 ? $337 : $rsize$412$i;
       $t$4$v$4$i = $338 ? $t$411$i : $v$413$i;
       $339 = ((($t$411$i)) + 16|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if (!($341)) {
        $rsize$412$i = $$rsize$4$i;$t$411$i = $340;$v$413$i = $t$4$v$4$i;
        label = 90;
        continue;
       }
       $342 = ((($t$411$i)) + 20|0);
       $343 = HEAP32[$342>>2]|0;
       $344 = ($343|0)==(0|0);
       if ($344) {
        $rsize$4$lcssa$i = $$rsize$4$i;$v$4$lcssa$i = $t$4$v$4$i;
        break;
       } else {
        $rsize$412$i = $$rsize$4$i;$t$411$i = $343;$v$413$i = $t$4$v$4$i;
        label = 90;
       }
      }
     }
     $345 = ($v$4$lcssa$i|0)==(0|0);
     if ($345) {
      $nb$0 = $248;
     } else {
      $346 = HEAP32[(545952)>>2]|0;
      $347 = (($346) - ($248))|0;
      $348 = ($rsize$4$lcssa$i>>>0)<($347>>>0);
      if ($348) {
       $349 = HEAP32[(545960)>>2]|0;
       $350 = ($v$4$lcssa$i>>>0)<($349>>>0);
       if ($350) {
        _abort();
        // unreachable;
       }
       $351 = (($v$4$lcssa$i) + ($248)|0);
       $352 = ($v$4$lcssa$i>>>0)<($351>>>0);
       if (!($352)) {
        _abort();
        // unreachable;
       }
       $353 = ((($v$4$lcssa$i)) + 24|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ((($v$4$lcssa$i)) + 12|0);
       $356 = HEAP32[$355>>2]|0;
       $357 = ($356|0)==($v$4$lcssa$i|0);
       do {
        if ($357) {
         $367 = ((($v$4$lcssa$i)) + 20|0);
         $368 = HEAP32[$367>>2]|0;
         $369 = ($368|0)==(0|0);
         if ($369) {
          $370 = ((($v$4$lcssa$i)) + 16|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if ($372) {
           $R$3$i11 = 0;
           break;
          } else {
           $R$1$i9 = $371;$RP$1$i8 = $370;
          }
         } else {
          $R$1$i9 = $368;$RP$1$i8 = $367;
         }
         while(1) {
          $373 = ((($R$1$i9)) + 20|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if (!($375)) {
           $R$1$i9 = $374;$RP$1$i8 = $373;
           continue;
          }
          $376 = ((($R$1$i9)) + 16|0);
          $377 = HEAP32[$376>>2]|0;
          $378 = ($377|0)==(0|0);
          if ($378) {
           break;
          } else {
           $R$1$i9 = $377;$RP$1$i8 = $376;
          }
         }
         $379 = ($RP$1$i8>>>0)<($349>>>0);
         if ($379) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$1$i8>>2] = 0;
          $R$3$i11 = $R$1$i9;
          break;
         }
        } else {
         $358 = ((($v$4$lcssa$i)) + 8|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359>>>0)<($349>>>0);
         if ($360) {
          _abort();
          // unreachable;
         }
         $361 = ((($359)) + 12|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$4$lcssa$i|0);
         if (!($363)) {
          _abort();
          // unreachable;
         }
         $364 = ((($356)) + 8|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==($v$4$lcssa$i|0);
         if ($366) {
          HEAP32[$361>>2] = $356;
          HEAP32[$364>>2] = $359;
          $R$3$i11 = $356;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $380 = ($354|0)==(0|0);
       do {
        if (!($380)) {
         $381 = ((($v$4$lcssa$i)) + 28|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = (546248 + ($382<<2)|0);
         $384 = HEAP32[$383>>2]|0;
         $385 = ($v$4$lcssa$i|0)==($384|0);
         if ($385) {
          HEAP32[$383>>2] = $R$3$i11;
          $cond$i12 = ($R$3$i11|0)==(0|0);
          if ($cond$i12) {
           $386 = 1 << $382;
           $387 = $386 ^ -1;
           $388 = HEAP32[(545948)>>2]|0;
           $389 = $388 & $387;
           HEAP32[(545948)>>2] = $389;
           break;
          }
         } else {
          $390 = HEAP32[(545960)>>2]|0;
          $391 = ($354>>>0)<($390>>>0);
          if ($391) {
           _abort();
           // unreachable;
          }
          $392 = ((($354)) + 16|0);
          $393 = HEAP32[$392>>2]|0;
          $394 = ($393|0)==($v$4$lcssa$i|0);
          if ($394) {
           HEAP32[$392>>2] = $R$3$i11;
          } else {
           $395 = ((($354)) + 20|0);
           HEAP32[$395>>2] = $R$3$i11;
          }
          $396 = ($R$3$i11|0)==(0|0);
          if ($396) {
           break;
          }
         }
         $397 = HEAP32[(545960)>>2]|0;
         $398 = ($R$3$i11>>>0)<($397>>>0);
         if ($398) {
          _abort();
          // unreachable;
         }
         $399 = ((($R$3$i11)) + 24|0);
         HEAP32[$399>>2] = $354;
         $400 = ((($v$4$lcssa$i)) + 16|0);
         $401 = HEAP32[$400>>2]|0;
         $402 = ($401|0)==(0|0);
         do {
          if (!($402)) {
           $403 = ($401>>>0)<($397>>>0);
           if ($403) {
            _abort();
            // unreachable;
           } else {
            $404 = ((($R$3$i11)) + 16|0);
            HEAP32[$404>>2] = $401;
            $405 = ((($401)) + 24|0);
            HEAP32[$405>>2] = $R$3$i11;
            break;
           }
          }
         } while(0);
         $406 = ((($v$4$lcssa$i)) + 20|0);
         $407 = HEAP32[$406>>2]|0;
         $408 = ($407|0)==(0|0);
         if (!($408)) {
          $409 = HEAP32[(545960)>>2]|0;
          $410 = ($407>>>0)<($409>>>0);
          if ($410) {
           _abort();
           // unreachable;
          } else {
           $411 = ((($R$3$i11)) + 20|0);
           HEAP32[$411>>2] = $407;
           $412 = ((($407)) + 24|0);
           HEAP32[$412>>2] = $R$3$i11;
           break;
          }
         }
        }
       } while(0);
       $413 = ($rsize$4$lcssa$i>>>0)<(16);
       do {
        if ($413) {
         $414 = (($rsize$4$lcssa$i) + ($248))|0;
         $415 = $414 | 3;
         $416 = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$416>>2] = $415;
         $417 = (($v$4$lcssa$i) + ($414)|0);
         $418 = ((($417)) + 4|0);
         $419 = HEAP32[$418>>2]|0;
         $420 = $419 | 1;
         HEAP32[$418>>2] = $420;
        } else {
         $421 = $248 | 3;
         $422 = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$422>>2] = $421;
         $423 = $rsize$4$lcssa$i | 1;
         $424 = ((($351)) + 4|0);
         HEAP32[$424>>2] = $423;
         $425 = (($351) + ($rsize$4$lcssa$i)|0);
         HEAP32[$425>>2] = $rsize$4$lcssa$i;
         $426 = $rsize$4$lcssa$i >>> 3;
         $427 = ($rsize$4$lcssa$i>>>0)<(256);
         if ($427) {
          $428 = $426 << 1;
          $429 = (545984 + ($428<<2)|0);
          $430 = HEAP32[136486]|0;
          $431 = 1 << $426;
          $432 = $430 & $431;
          $433 = ($432|0)==(0);
          if ($433) {
           $434 = $430 | $431;
           HEAP32[136486] = $434;
           $$pre$i13 = ((($429)) + 8|0);
           $$pre$phi$i14Z2D = $$pre$i13;$F5$0$i = $429;
          } else {
           $435 = ((($429)) + 8|0);
           $436 = HEAP32[$435>>2]|0;
           $437 = HEAP32[(545960)>>2]|0;
           $438 = ($436>>>0)<($437>>>0);
           if ($438) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i14Z2D = $435;$F5$0$i = $436;
           }
          }
          HEAP32[$$pre$phi$i14Z2D>>2] = $351;
          $439 = ((($F5$0$i)) + 12|0);
          HEAP32[$439>>2] = $351;
          $440 = ((($351)) + 8|0);
          HEAP32[$440>>2] = $F5$0$i;
          $441 = ((($351)) + 12|0);
          HEAP32[$441>>2] = $429;
          break;
         }
         $442 = $rsize$4$lcssa$i >>> 8;
         $443 = ($442|0)==(0);
         if ($443) {
          $I7$0$i = 0;
         } else {
          $444 = ($rsize$4$lcssa$i>>>0)>(16777215);
          if ($444) {
           $I7$0$i = 31;
          } else {
           $445 = (($442) + 1048320)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 8;
           $448 = $442 << $447;
           $449 = (($448) + 520192)|0;
           $450 = $449 >>> 16;
           $451 = $450 & 4;
           $452 = $451 | $447;
           $453 = $448 << $451;
           $454 = (($453) + 245760)|0;
           $455 = $454 >>> 16;
           $456 = $455 & 2;
           $457 = $452 | $456;
           $458 = (14 - ($457))|0;
           $459 = $453 << $456;
           $460 = $459 >>> 15;
           $461 = (($458) + ($460))|0;
           $462 = $461 << 1;
           $463 = (($461) + 7)|0;
           $464 = $rsize$4$lcssa$i >>> $463;
           $465 = $464 & 1;
           $466 = $465 | $462;
           $I7$0$i = $466;
          }
         }
         $467 = (546248 + ($I7$0$i<<2)|0);
         $468 = ((($351)) + 28|0);
         HEAP32[$468>>2] = $I7$0$i;
         $469 = ((($351)) + 16|0);
         $470 = ((($469)) + 4|0);
         HEAP32[$470>>2] = 0;
         HEAP32[$469>>2] = 0;
         $471 = HEAP32[(545948)>>2]|0;
         $472 = 1 << $I7$0$i;
         $473 = $471 & $472;
         $474 = ($473|0)==(0);
         if ($474) {
          $475 = $471 | $472;
          HEAP32[(545948)>>2] = $475;
          HEAP32[$467>>2] = $351;
          $476 = ((($351)) + 24|0);
          HEAP32[$476>>2] = $467;
          $477 = ((($351)) + 12|0);
          HEAP32[$477>>2] = $351;
          $478 = ((($351)) + 8|0);
          HEAP32[$478>>2] = $351;
          break;
         }
         $479 = HEAP32[$467>>2]|0;
         $480 = ($I7$0$i|0)==(31);
         $481 = $I7$0$i >>> 1;
         $482 = (25 - ($481))|0;
         $483 = $480 ? 0 : $482;
         $484 = $rsize$4$lcssa$i << $483;
         $K12$0$i = $484;$T$0$i = $479;
         while(1) {
          $485 = ((($T$0$i)) + 4|0);
          $486 = HEAP32[$485>>2]|0;
          $487 = $486 & -8;
          $488 = ($487|0)==($rsize$4$lcssa$i|0);
          if ($488) {
           label = 148;
           break;
          }
          $489 = $K12$0$i >>> 31;
          $490 = (((($T$0$i)) + 16|0) + ($489<<2)|0);
          $491 = $K12$0$i << 1;
          $492 = HEAP32[$490>>2]|0;
          $493 = ($492|0)==(0|0);
          if ($493) {
           label = 145;
           break;
          } else {
           $K12$0$i = $491;$T$0$i = $492;
          }
         }
         if ((label|0) == 145) {
          $494 = HEAP32[(545960)>>2]|0;
          $495 = ($490>>>0)<($494>>>0);
          if ($495) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$490>>2] = $351;
           $496 = ((($351)) + 24|0);
           HEAP32[$496>>2] = $T$0$i;
           $497 = ((($351)) + 12|0);
           HEAP32[$497>>2] = $351;
           $498 = ((($351)) + 8|0);
           HEAP32[$498>>2] = $351;
           break;
          }
         }
         else if ((label|0) == 148) {
          $499 = ((($T$0$i)) + 8|0);
          $500 = HEAP32[$499>>2]|0;
          $501 = HEAP32[(545960)>>2]|0;
          $502 = ($500>>>0)>=($501>>>0);
          $not$7$i = ($T$0$i>>>0)>=($501>>>0);
          $503 = $502 & $not$7$i;
          if ($503) {
           $504 = ((($500)) + 12|0);
           HEAP32[$504>>2] = $351;
           HEAP32[$499>>2] = $351;
           $505 = ((($351)) + 8|0);
           HEAP32[$505>>2] = $500;
           $506 = ((($351)) + 12|0);
           HEAP32[$506>>2] = $T$0$i;
           $507 = ((($351)) + 24|0);
           HEAP32[$507>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $508 = ((($v$4$lcssa$i)) + 8|0);
       $$0 = $508;
       return ($$0|0);
      } else {
       $nb$0 = $248;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(545952)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(545964)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(545964)>>2] = $514;
   HEAP32[(545952)>>2] = $511;
   $515 = $511 | 1;
   $516 = ((($514)) + 4|0);
   HEAP32[$516>>2] = $515;
   $517 = (($514) + ($511)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(545952)>>2] = 0;
   HEAP32[(545964)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $522 = (($512) + ($509)|0);
   $523 = ((($522)) + 4|0);
   $524 = HEAP32[$523>>2]|0;
   $525 = $524 | 1;
   HEAP32[$523>>2] = $525;
  }
  $526 = ((($512)) + 8|0);
  $$0 = $526;
  return ($$0|0);
 }
 $527 = HEAP32[(545956)>>2]|0;
 $528 = ($527>>>0)>($nb$0>>>0);
 if ($528) {
  $529 = (($527) - ($nb$0))|0;
  HEAP32[(545956)>>2] = $529;
  $530 = HEAP32[(545968)>>2]|0;
  $531 = (($530) + ($nb$0)|0);
  HEAP32[(545968)>>2] = $531;
  $532 = $529 | 1;
  $533 = ((($531)) + 4|0);
  HEAP32[$533>>2] = $532;
  $534 = $nb$0 | 3;
  $535 = ((($530)) + 4|0);
  HEAP32[$535>>2] = $534;
  $536 = ((($530)) + 8|0);
  $$0 = $536;
  return ($$0|0);
 }
 $537 = HEAP32[136604]|0;
 $538 = ($537|0)==(0);
 do {
  if ($538) {
   $539 = (_sysconf(30)|0);
   $540 = (($539) + -1)|0;
   $541 = $540 & $539;
   $542 = ($541|0)==(0);
   if ($542) {
    HEAP32[(546424)>>2] = $539;
    HEAP32[(546420)>>2] = $539;
    HEAP32[(546428)>>2] = -1;
    HEAP32[(546432)>>2] = -1;
    HEAP32[(546436)>>2] = 0;
    HEAP32[(546388)>>2] = 0;
    $543 = (_time((0|0))|0);
    $544 = $543 & -16;
    $545 = $544 ^ 1431655768;
    HEAP32[136604] = $545;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $546 = (($nb$0) + 48)|0;
 $547 = HEAP32[(546424)>>2]|0;
 $548 = (($nb$0) + 47)|0;
 $549 = (($547) + ($548))|0;
 $550 = (0 - ($547))|0;
 $551 = $549 & $550;
 $552 = ($551>>>0)>($nb$0>>>0);
 if (!($552)) {
  $$0 = 0;
  return ($$0|0);
 }
 $553 = HEAP32[(546384)>>2]|0;
 $554 = ($553|0)==(0);
 if (!($554)) {
  $555 = HEAP32[(546376)>>2]|0;
  $556 = (($555) + ($551))|0;
  $557 = ($556>>>0)<=($555>>>0);
  $558 = ($556>>>0)>($553>>>0);
  $or$cond1$i16 = $557 | $558;
  if ($or$cond1$i16) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $559 = HEAP32[(546388)>>2]|0;
 $560 = $559 & 4;
 $561 = ($560|0)==(0);
 L257: do {
  if ($561) {
   $562 = HEAP32[(545968)>>2]|0;
   $563 = ($562|0)==(0|0);
   L259: do {
    if ($563) {
     label = 173;
    } else {
     $sp$0$i$i = (546392);
     while(1) {
      $564 = HEAP32[$sp$0$i$i>>2]|0;
      $565 = ($564>>>0)>($562>>>0);
      if (!($565)) {
       $566 = ((($sp$0$i$i)) + 4|0);
       $567 = HEAP32[$566>>2]|0;
       $568 = (($564) + ($567)|0);
       $569 = ($568>>>0)>($562>>>0);
       if ($569) {
        break;
       }
      }
      $570 = ((($sp$0$i$i)) + 8|0);
      $571 = HEAP32[$570>>2]|0;
      $572 = ($571|0)==(0|0);
      if ($572) {
       label = 173;
       break L259;
      } else {
       $sp$0$i$i = $571;
      }
     }
     $595 = HEAP32[(545956)>>2]|0;
     $596 = (($549) - ($595))|0;
     $597 = $596 & $550;
     $598 = ($597>>>0)<(2147483647);
     if ($598) {
      $599 = (_sbrk(($597|0))|0);
      $600 = HEAP32[$sp$0$i$i>>2]|0;
      $601 = HEAP32[$566>>2]|0;
      $602 = (($600) + ($601)|0);
      $603 = ($599|0)==($602|0);
      if ($603) {
       $604 = ($599|0)==((-1)|0);
       if (!($604)) {
        $tbase$746$i = $599;$tsize$745$i = $597;
        label = 193;
        break L257;
       }
      } else {
       $br$2$ph$i = $599;$ssize$2$ph$i = $597;
       label = 183;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 173) {
     $573 = (_sbrk(0)|0);
     $574 = ($573|0)==((-1)|0);
     if (!($574)) {
      $575 = $573;
      $576 = HEAP32[(546420)>>2]|0;
      $577 = (($576) + -1)|0;
      $578 = $577 & $575;
      $579 = ($578|0)==(0);
      if ($579) {
       $ssize$0$i = $551;
      } else {
       $580 = (($577) + ($575))|0;
       $581 = (0 - ($576))|0;
       $582 = $580 & $581;
       $583 = (($551) - ($575))|0;
       $584 = (($583) + ($582))|0;
       $ssize$0$i = $584;
      }
      $585 = HEAP32[(546376)>>2]|0;
      $586 = (($585) + ($ssize$0$i))|0;
      $587 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $588 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i17 = $587 & $588;
      if ($or$cond$i17) {
       $589 = HEAP32[(546384)>>2]|0;
       $590 = ($589|0)==(0);
       if (!($590)) {
        $591 = ($586>>>0)<=($585>>>0);
        $592 = ($586>>>0)>($589>>>0);
        $or$cond2$i = $591 | $592;
        if ($or$cond2$i) {
         break;
        }
       }
       $593 = (_sbrk(($ssize$0$i|0))|0);
       $594 = ($593|0)==($573|0);
       if ($594) {
        $tbase$746$i = $573;$tsize$745$i = $ssize$0$i;
        label = 193;
        break L257;
       } else {
        $br$2$ph$i = $593;$ssize$2$ph$i = $ssize$0$i;
        label = 183;
       }
      }
     }
    }
   } while(0);
   L279: do {
    if ((label|0) == 183) {
     $605 = (0 - ($ssize$2$ph$i))|0;
     $606 = ($br$2$ph$i|0)!=((-1)|0);
     $607 = ($ssize$2$ph$i>>>0)<(2147483647);
     $or$cond7$i = $607 & $606;
     $608 = ($546>>>0)>($ssize$2$ph$i>>>0);
     $or$cond8$i = $608 & $or$cond7$i;
     do {
      if ($or$cond8$i) {
       $609 = HEAP32[(546424)>>2]|0;
       $610 = (($548) - ($ssize$2$ph$i))|0;
       $611 = (($610) + ($609))|0;
       $612 = (0 - ($609))|0;
       $613 = $611 & $612;
       $614 = ($613>>>0)<(2147483647);
       if ($614) {
        $615 = (_sbrk(($613|0))|0);
        $616 = ($615|0)==((-1)|0);
        if ($616) {
         (_sbrk(($605|0))|0);
         break L279;
        } else {
         $617 = (($613) + ($ssize$2$ph$i))|0;
         $ssize$5$i = $617;
         break;
        }
       } else {
        $ssize$5$i = $ssize$2$ph$i;
       }
      } else {
       $ssize$5$i = $ssize$2$ph$i;
      }
     } while(0);
     $618 = ($br$2$ph$i|0)==((-1)|0);
     if (!($618)) {
      $tbase$746$i = $br$2$ph$i;$tsize$745$i = $ssize$5$i;
      label = 193;
      break L257;
     }
    }
   } while(0);
   $619 = HEAP32[(546388)>>2]|0;
   $620 = $619 | 4;
   HEAP32[(546388)>>2] = $620;
   label = 190;
  } else {
   label = 190;
  }
 } while(0);
 if ((label|0) == 190) {
  $621 = ($551>>>0)<(2147483647);
  if ($621) {
   $622 = (_sbrk(($551|0))|0);
   $623 = (_sbrk(0)|0);
   $624 = ($622|0)!=((-1)|0);
   $625 = ($623|0)!=((-1)|0);
   $or$cond5$i = $624 & $625;
   $626 = ($622>>>0)<($623>>>0);
   $or$cond10$i = $626 & $or$cond5$i;
   if ($or$cond10$i) {
    $627 = $623;
    $628 = $622;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $$not$i = ($629>>>0)>($630>>>0);
    if ($$not$i) {
     $tbase$746$i = $622;$tsize$745$i = $629;
     label = 193;
    }
   }
  }
 }
 if ((label|0) == 193) {
  $631 = HEAP32[(546376)>>2]|0;
  $632 = (($631) + ($tsize$745$i))|0;
  HEAP32[(546376)>>2] = $632;
  $633 = HEAP32[(546380)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(546380)>>2] = $632;
  }
  $635 = HEAP32[(545968)>>2]|0;
  $636 = ($635|0)==(0|0);
  do {
   if ($636) {
    $637 = HEAP32[(545960)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$746$i>>>0)<($637>>>0);
    $or$cond11$i = $638 | $639;
    if ($or$cond11$i) {
     HEAP32[(545960)>>2] = $tbase$746$i;
    }
    HEAP32[(546392)>>2] = $tbase$746$i;
    HEAP32[(546396)>>2] = $tsize$745$i;
    HEAP32[(546404)>>2] = 0;
    $640 = HEAP32[136604]|0;
    HEAP32[(545980)>>2] = $640;
    HEAP32[(545976)>>2] = -1;
    $i$01$i$i = 0;
    while(1) {
     $641 = $i$01$i$i << 1;
     $642 = (545984 + ($641<<2)|0);
     $643 = ((($642)) + 12|0);
     HEAP32[$643>>2] = $642;
     $644 = ((($642)) + 8|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$01$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$01$i$i = $645;
     }
    }
    $646 = (($tsize$745$i) + -40)|0;
    $647 = ((($tbase$746$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$746$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(545968)>>2] = $654;
    HEAP32[(545956)>>2] = $655;
    $656 = $655 | 1;
    $657 = ((($654)) + 4|0);
    HEAP32[$657>>2] = $656;
    $658 = (($654) + ($655)|0);
    $659 = ((($658)) + 4|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[(546432)>>2]|0;
    HEAP32[(545972)>>2] = $660;
   } else {
    $sp$068$i = (546392);
    while(1) {
     $661 = HEAP32[$sp$068$i>>2]|0;
     $662 = ((($sp$068$i)) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$746$i|0)==($664|0);
     if ($665) {
      label = 203;
      break;
     }
     $666 = ((($sp$068$i)) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$068$i = $667;
     }
    }
    if ((label|0) == 203) {
     $669 = ((($sp$068$i)) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($635>>>0)>=($661>>>0);
      $674 = ($635>>>0)<($tbase$746$i>>>0);
      $or$cond48$i = $674 & $673;
      if ($or$cond48$i) {
       $675 = (($663) + ($tsize$745$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[(545956)>>2]|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($tsize$745$i) - ($683))|0;
       $686 = (($685) + ($676))|0;
       HEAP32[(545968)>>2] = $684;
       HEAP32[(545956)>>2] = $686;
       $687 = $686 | 1;
       $688 = ((($684)) + 4|0);
       HEAP32[$688>>2] = $687;
       $689 = (($684) + ($686)|0);
       $690 = ((($689)) + 4|0);
       HEAP32[$690>>2] = 40;
       $691 = HEAP32[(546432)>>2]|0;
       HEAP32[(545972)>>2] = $691;
       break;
      }
     }
    }
    $692 = HEAP32[(545960)>>2]|0;
    $693 = ($tbase$746$i>>>0)<($692>>>0);
    if ($693) {
     HEAP32[(545960)>>2] = $tbase$746$i;
     $757 = $tbase$746$i;
    } else {
     $757 = $692;
    }
    $694 = (($tbase$746$i) + ($tsize$745$i)|0);
    $sp$167$i = (546392);
    while(1) {
     $695 = HEAP32[$sp$167$i>>2]|0;
     $696 = ($695|0)==($694|0);
     if ($696) {
      label = 211;
      break;
     }
     $697 = ((($sp$167$i)) + 8|0);
     $698 = HEAP32[$697>>2]|0;
     $699 = ($698|0)==(0|0);
     if ($699) {
      $sp$0$i$i$i = (546392);
      break;
     } else {
      $sp$167$i = $698;
     }
    }
    if ((label|0) == 211) {
     $700 = ((($sp$167$i)) + 12|0);
     $701 = HEAP32[$700>>2]|0;
     $702 = $701 & 8;
     $703 = ($702|0)==(0);
     if ($703) {
      HEAP32[$sp$167$i>>2] = $tbase$746$i;
      $704 = ((($sp$167$i)) + 4|0);
      $705 = HEAP32[$704>>2]|0;
      $706 = (($705) + ($tsize$745$i))|0;
      HEAP32[$704>>2] = $706;
      $707 = ((($tbase$746$i)) + 8|0);
      $708 = $707;
      $709 = $708 & 7;
      $710 = ($709|0)==(0);
      $711 = (0 - ($708))|0;
      $712 = $711 & 7;
      $713 = $710 ? 0 : $712;
      $714 = (($tbase$746$i) + ($713)|0);
      $715 = ((($694)) + 8|0);
      $716 = $715;
      $717 = $716 & 7;
      $718 = ($717|0)==(0);
      $719 = (0 - ($716))|0;
      $720 = $719 & 7;
      $721 = $718 ? 0 : $720;
      $722 = (($694) + ($721)|0);
      $723 = $722;
      $724 = $714;
      $725 = (($723) - ($724))|0;
      $726 = (($714) + ($nb$0)|0);
      $727 = (($725) - ($nb$0))|0;
      $728 = $nb$0 | 3;
      $729 = ((($714)) + 4|0);
      HEAP32[$729>>2] = $728;
      $730 = ($722|0)==($635|0);
      do {
       if ($730) {
        $731 = HEAP32[(545956)>>2]|0;
        $732 = (($731) + ($727))|0;
        HEAP32[(545956)>>2] = $732;
        HEAP32[(545968)>>2] = $726;
        $733 = $732 | 1;
        $734 = ((($726)) + 4|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[(545964)>>2]|0;
        $736 = ($722|0)==($735|0);
        if ($736) {
         $737 = HEAP32[(545952)>>2]|0;
         $738 = (($737) + ($727))|0;
         HEAP32[(545952)>>2] = $738;
         HEAP32[(545964)>>2] = $726;
         $739 = $738 | 1;
         $740 = ((($726)) + 4|0);
         HEAP32[$740>>2] = $739;
         $741 = (($726) + ($738)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $742 = ((($722)) + 4|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         L331: do {
          if ($748) {
           $749 = ((($722)) + 8|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = ((($722)) + 12|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = (545984 + ($753<<2)|0);
           $755 = ($750|0)==($754|0);
           do {
            if (!($755)) {
             $756 = ($750>>>0)<($757>>>0);
             if ($756) {
              _abort();
              // unreachable;
             }
             $758 = ((($750)) + 12|0);
             $759 = HEAP32[$758>>2]|0;
             $760 = ($759|0)==($722|0);
             if ($760) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[136486]|0;
            $765 = $764 & $763;
            HEAP32[136486] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           do {
            if ($766) {
             $$pre9$i$i = ((($752)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $767 = ($752>>>0)<($757>>>0);
             if ($767) {
              _abort();
              // unreachable;
             }
             $768 = ((($752)) + 8|0);
             $769 = HEAP32[$768>>2]|0;
             $770 = ($769|0)==($722|0);
             if ($770) {
              $$pre$phi10$i$iZ2D = $768;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $771 = ((($750)) + 12|0);
           HEAP32[$771>>2] = $752;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $750;
          } else {
           $772 = ((($722)) + 24|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ((($722)) + 12|0);
           $775 = HEAP32[$774>>2]|0;
           $776 = ($775|0)==($722|0);
           do {
            if ($776) {
             $786 = ((($722)) + 16|0);
             $787 = ((($786)) + 4|0);
             $788 = HEAP32[$787>>2]|0;
             $789 = ($788|0)==(0|0);
             if ($789) {
              $790 = HEAP32[$786>>2]|0;
              $791 = ($790|0)==(0|0);
              if ($791) {
               $R$3$i$i = 0;
               break;
              } else {
               $R$1$i$i = $790;$RP$1$i$i = $786;
              }
             } else {
              $R$1$i$i = $788;$RP$1$i$i = $787;
             }
             while(1) {
              $792 = ((($R$1$i$i)) + 20|0);
              $793 = HEAP32[$792>>2]|0;
              $794 = ($793|0)==(0|0);
              if (!($794)) {
               $R$1$i$i = $793;$RP$1$i$i = $792;
               continue;
              }
              $795 = ((($R$1$i$i)) + 16|0);
              $796 = HEAP32[$795>>2]|0;
              $797 = ($796|0)==(0|0);
              if ($797) {
               break;
              } else {
               $R$1$i$i = $796;$RP$1$i$i = $795;
              }
             }
             $798 = ($RP$1$i$i>>>0)<($757>>>0);
             if ($798) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$1$i$i>>2] = 0;
              $R$3$i$i = $R$1$i$i;
              break;
             }
            } else {
             $777 = ((($722)) + 8|0);
             $778 = HEAP32[$777>>2]|0;
             $779 = ($778>>>0)<($757>>>0);
             if ($779) {
              _abort();
              // unreachable;
             }
             $780 = ((($778)) + 12|0);
             $781 = HEAP32[$780>>2]|0;
             $782 = ($781|0)==($722|0);
             if (!($782)) {
              _abort();
              // unreachable;
             }
             $783 = ((($775)) + 8|0);
             $784 = HEAP32[$783>>2]|0;
             $785 = ($784|0)==($722|0);
             if ($785) {
              HEAP32[$780>>2] = $775;
              HEAP32[$783>>2] = $778;
              $R$3$i$i = $775;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $799 = ($773|0)==(0|0);
           if ($799) {
            break;
           }
           $800 = ((($722)) + 28|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = (546248 + ($801<<2)|0);
           $803 = HEAP32[$802>>2]|0;
           $804 = ($722|0)==($803|0);
           do {
            if ($804) {
             HEAP32[$802>>2] = $R$3$i$i;
             $cond$i$i = ($R$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $805 = 1 << $801;
             $806 = $805 ^ -1;
             $807 = HEAP32[(545948)>>2]|0;
             $808 = $807 & $806;
             HEAP32[(545948)>>2] = $808;
             break L331;
            } else {
             $809 = HEAP32[(545960)>>2]|0;
             $810 = ($773>>>0)<($809>>>0);
             if ($810) {
              _abort();
              // unreachable;
             }
             $811 = ((($773)) + 16|0);
             $812 = HEAP32[$811>>2]|0;
             $813 = ($812|0)==($722|0);
             if ($813) {
              HEAP32[$811>>2] = $R$3$i$i;
             } else {
              $814 = ((($773)) + 20|0);
              HEAP32[$814>>2] = $R$3$i$i;
             }
             $815 = ($R$3$i$i|0)==(0|0);
             if ($815) {
              break L331;
             }
            }
           } while(0);
           $816 = HEAP32[(545960)>>2]|0;
           $817 = ($R$3$i$i>>>0)<($816>>>0);
           if ($817) {
            _abort();
            // unreachable;
           }
           $818 = ((($R$3$i$i)) + 24|0);
           HEAP32[$818>>2] = $773;
           $819 = ((($722)) + 16|0);
           $820 = HEAP32[$819>>2]|0;
           $821 = ($820|0)==(0|0);
           do {
            if (!($821)) {
             $822 = ($820>>>0)<($816>>>0);
             if ($822) {
              _abort();
              // unreachable;
             } else {
              $823 = ((($R$3$i$i)) + 16|0);
              HEAP32[$823>>2] = $820;
              $824 = ((($820)) + 24|0);
              HEAP32[$824>>2] = $R$3$i$i;
              break;
             }
            }
           } while(0);
           $825 = ((($819)) + 4|0);
           $826 = HEAP32[$825>>2]|0;
           $827 = ($826|0)==(0|0);
           if ($827) {
            break;
           }
           $828 = HEAP32[(545960)>>2]|0;
           $829 = ($826>>>0)<($828>>>0);
           if ($829) {
            _abort();
            // unreachable;
           } else {
            $830 = ((($R$3$i$i)) + 20|0);
            HEAP32[$830>>2] = $826;
            $831 = ((($826)) + 24|0);
            HEAP32[$831>>2] = $R$3$i$i;
            break;
           }
          }
         } while(0);
         $832 = (($722) + ($746)|0);
         $833 = (($746) + ($727))|0;
         $oldfirst$0$i$i = $832;$qsize$0$i$i = $833;
        } else {
         $oldfirst$0$i$i = $722;$qsize$0$i$i = $727;
        }
        $834 = ((($oldfirst$0$i$i)) + 4|0);
        $835 = HEAP32[$834>>2]|0;
        $836 = $835 & -2;
        HEAP32[$834>>2] = $836;
        $837 = $qsize$0$i$i | 1;
        $838 = ((($726)) + 4|0);
        HEAP32[$838>>2] = $837;
        $839 = (($726) + ($qsize$0$i$i)|0);
        HEAP32[$839>>2] = $qsize$0$i$i;
        $840 = $qsize$0$i$i >>> 3;
        $841 = ($qsize$0$i$i>>>0)<(256);
        if ($841) {
         $842 = $840 << 1;
         $843 = (545984 + ($842<<2)|0);
         $844 = HEAP32[136486]|0;
         $845 = 1 << $840;
         $846 = $844 & $845;
         $847 = ($846|0)==(0);
         do {
          if ($847) {
           $848 = $844 | $845;
           HEAP32[136486] = $848;
           $$pre$i16$i = ((($843)) + 8|0);
           $$pre$phi$i17$iZ2D = $$pre$i16$i;$F4$0$i$i = $843;
          } else {
           $849 = ((($843)) + 8|0);
           $850 = HEAP32[$849>>2]|0;
           $851 = HEAP32[(545960)>>2]|0;
           $852 = ($850>>>0)<($851>>>0);
           if (!($852)) {
            $$pre$phi$i17$iZ2D = $849;$F4$0$i$i = $850;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i17$iZ2D>>2] = $726;
         $853 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$853>>2] = $726;
         $854 = ((($726)) + 8|0);
         HEAP32[$854>>2] = $F4$0$i$i;
         $855 = ((($726)) + 12|0);
         HEAP32[$855>>2] = $843;
         break;
        }
        $856 = $qsize$0$i$i >>> 8;
        $857 = ($856|0)==(0);
        do {
         if ($857) {
          $I7$0$i$i = 0;
         } else {
          $858 = ($qsize$0$i$i>>>0)>(16777215);
          if ($858) {
           $I7$0$i$i = 31;
           break;
          }
          $859 = (($856) + 1048320)|0;
          $860 = $859 >>> 16;
          $861 = $860 & 8;
          $862 = $856 << $861;
          $863 = (($862) + 520192)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 4;
          $866 = $865 | $861;
          $867 = $862 << $865;
          $868 = (($867) + 245760)|0;
          $869 = $868 >>> 16;
          $870 = $869 & 2;
          $871 = $866 | $870;
          $872 = (14 - ($871))|0;
          $873 = $867 << $870;
          $874 = $873 >>> 15;
          $875 = (($872) + ($874))|0;
          $876 = $875 << 1;
          $877 = (($875) + 7)|0;
          $878 = $qsize$0$i$i >>> $877;
          $879 = $878 & 1;
          $880 = $879 | $876;
          $I7$0$i$i = $880;
         }
        } while(0);
        $881 = (546248 + ($I7$0$i$i<<2)|0);
        $882 = ((($726)) + 28|0);
        HEAP32[$882>>2] = $I7$0$i$i;
        $883 = ((($726)) + 16|0);
        $884 = ((($883)) + 4|0);
        HEAP32[$884>>2] = 0;
        HEAP32[$883>>2] = 0;
        $885 = HEAP32[(545948)>>2]|0;
        $886 = 1 << $I7$0$i$i;
        $887 = $885 & $886;
        $888 = ($887|0)==(0);
        if ($888) {
         $889 = $885 | $886;
         HEAP32[(545948)>>2] = $889;
         HEAP32[$881>>2] = $726;
         $890 = ((($726)) + 24|0);
         HEAP32[$890>>2] = $881;
         $891 = ((($726)) + 12|0);
         HEAP32[$891>>2] = $726;
         $892 = ((($726)) + 8|0);
         HEAP32[$892>>2] = $726;
         break;
        }
        $893 = HEAP32[$881>>2]|0;
        $894 = ($I7$0$i$i|0)==(31);
        $895 = $I7$0$i$i >>> 1;
        $896 = (25 - ($895))|0;
        $897 = $894 ? 0 : $896;
        $898 = $qsize$0$i$i << $897;
        $K8$0$i$i = $898;$T$0$i18$i = $893;
        while(1) {
         $899 = ((($T$0$i18$i)) + 4|0);
         $900 = HEAP32[$899>>2]|0;
         $901 = $900 & -8;
         $902 = ($901|0)==($qsize$0$i$i|0);
         if ($902) {
          label = 281;
          break;
         }
         $903 = $K8$0$i$i >>> 31;
         $904 = (((($T$0$i18$i)) + 16|0) + ($903<<2)|0);
         $905 = $K8$0$i$i << 1;
         $906 = HEAP32[$904>>2]|0;
         $907 = ($906|0)==(0|0);
         if ($907) {
          label = 278;
          break;
         } else {
          $K8$0$i$i = $905;$T$0$i18$i = $906;
         }
        }
        if ((label|0) == 278) {
         $908 = HEAP32[(545960)>>2]|0;
         $909 = ($904>>>0)<($908>>>0);
         if ($909) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$904>>2] = $726;
          $910 = ((($726)) + 24|0);
          HEAP32[$910>>2] = $T$0$i18$i;
          $911 = ((($726)) + 12|0);
          HEAP32[$911>>2] = $726;
          $912 = ((($726)) + 8|0);
          HEAP32[$912>>2] = $726;
          break;
         }
        }
        else if ((label|0) == 281) {
         $913 = ((($T$0$i18$i)) + 8|0);
         $914 = HEAP32[$913>>2]|0;
         $915 = HEAP32[(545960)>>2]|0;
         $916 = ($914>>>0)>=($915>>>0);
         $not$$i20$i = ($T$0$i18$i>>>0)>=($915>>>0);
         $917 = $916 & $not$$i20$i;
         if ($917) {
          $918 = ((($914)) + 12|0);
          HEAP32[$918>>2] = $726;
          HEAP32[$913>>2] = $726;
          $919 = ((($726)) + 8|0);
          HEAP32[$919>>2] = $914;
          $920 = ((($726)) + 12|0);
          HEAP32[$920>>2] = $T$0$i18$i;
          $921 = ((($726)) + 24|0);
          HEAP32[$921>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1052 = ((($714)) + 8|0);
      $$0 = $1052;
      return ($$0|0);
     } else {
      $sp$0$i$i$i = (546392);
     }
    }
    while(1) {
     $922 = HEAP32[$sp$0$i$i$i>>2]|0;
     $923 = ($922>>>0)>($635>>>0);
     if (!($923)) {
      $924 = ((($sp$0$i$i$i)) + 4|0);
      $925 = HEAP32[$924>>2]|0;
      $926 = (($922) + ($925)|0);
      $927 = ($926>>>0)>($635>>>0);
      if ($927) {
       break;
      }
     }
     $928 = ((($sp$0$i$i$i)) + 8|0);
     $929 = HEAP32[$928>>2]|0;
     $sp$0$i$i$i = $929;
    }
    $930 = ((($926)) + -47|0);
    $931 = ((($930)) + 8|0);
    $932 = $931;
    $933 = $932 & 7;
    $934 = ($933|0)==(0);
    $935 = (0 - ($932))|0;
    $936 = $935 & 7;
    $937 = $934 ? 0 : $936;
    $938 = (($930) + ($937)|0);
    $939 = ((($635)) + 16|0);
    $940 = ($938>>>0)<($939>>>0);
    $941 = $940 ? $635 : $938;
    $942 = ((($941)) + 8|0);
    $943 = ((($941)) + 24|0);
    $944 = (($tsize$745$i) + -40)|0;
    $945 = ((($tbase$746$i)) + 8|0);
    $946 = $945;
    $947 = $946 & 7;
    $948 = ($947|0)==(0);
    $949 = (0 - ($946))|0;
    $950 = $949 & 7;
    $951 = $948 ? 0 : $950;
    $952 = (($tbase$746$i) + ($951)|0);
    $953 = (($944) - ($951))|0;
    HEAP32[(545968)>>2] = $952;
    HEAP32[(545956)>>2] = $953;
    $954 = $953 | 1;
    $955 = ((($952)) + 4|0);
    HEAP32[$955>>2] = $954;
    $956 = (($952) + ($953)|0);
    $957 = ((($956)) + 4|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(546432)>>2]|0;
    HEAP32[(545972)>>2] = $958;
    $959 = ((($941)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$942>>2]=HEAP32[(546392)>>2]|0;HEAP32[$942+4>>2]=HEAP32[(546392)+4>>2]|0;HEAP32[$942+8>>2]=HEAP32[(546392)+8>>2]|0;HEAP32[$942+12>>2]=HEAP32[(546392)+12>>2]|0;
    HEAP32[(546392)>>2] = $tbase$746$i;
    HEAP32[(546396)>>2] = $tsize$745$i;
    HEAP32[(546404)>>2] = 0;
    HEAP32[(546400)>>2] = $942;
    $p$0$i$i = $943;
    while(1) {
     $960 = ((($p$0$i$i)) + 4|0);
     HEAP32[$960>>2] = 7;
     $961 = ((($960)) + 4|0);
     $962 = ($961>>>0)<($926>>>0);
     if ($962) {
      $p$0$i$i = $960;
     } else {
      break;
     }
    }
    $963 = ($941|0)==($635|0);
    if (!($963)) {
     $964 = $941;
     $965 = $635;
     $966 = (($964) - ($965))|0;
     $967 = HEAP32[$959>>2]|0;
     $968 = $967 & -2;
     HEAP32[$959>>2] = $968;
     $969 = $966 | 1;
     $970 = ((($635)) + 4|0);
     HEAP32[$970>>2] = $969;
     HEAP32[$941>>2] = $966;
     $971 = $966 >>> 3;
     $972 = ($966>>>0)<(256);
     if ($972) {
      $973 = $971 << 1;
      $974 = (545984 + ($973<<2)|0);
      $975 = HEAP32[136486]|0;
      $976 = 1 << $971;
      $977 = $975 & $976;
      $978 = ($977|0)==(0);
      if ($978) {
       $979 = $975 | $976;
       HEAP32[136486] = $979;
       $$pre$i$i = ((($974)) + 8|0);
       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $974;
      } else {
       $980 = ((($974)) + 8|0);
       $981 = HEAP32[$980>>2]|0;
       $982 = HEAP32[(545960)>>2]|0;
       $983 = ($981>>>0)<($982>>>0);
       if ($983) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $980;$F$0$i$i = $981;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $984 = ((($F$0$i$i)) + 12|0);
      HEAP32[$984>>2] = $635;
      $985 = ((($635)) + 8|0);
      HEAP32[$985>>2] = $F$0$i$i;
      $986 = ((($635)) + 12|0);
      HEAP32[$986>>2] = $974;
      break;
     }
     $987 = $966 >>> 8;
     $988 = ($987|0)==(0);
     if ($988) {
      $I1$0$i$i = 0;
     } else {
      $989 = ($966>>>0)>(16777215);
      if ($989) {
       $I1$0$i$i = 31;
      } else {
       $990 = (($987) + 1048320)|0;
       $991 = $990 >>> 16;
       $992 = $991 & 8;
       $993 = $987 << $992;
       $994 = (($993) + 520192)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 4;
       $997 = $996 | $992;
       $998 = $993 << $996;
       $999 = (($998) + 245760)|0;
       $1000 = $999 >>> 16;
       $1001 = $1000 & 2;
       $1002 = $997 | $1001;
       $1003 = (14 - ($1002))|0;
       $1004 = $998 << $1001;
       $1005 = $1004 >>> 15;
       $1006 = (($1003) + ($1005))|0;
       $1007 = $1006 << 1;
       $1008 = (($1006) + 7)|0;
       $1009 = $966 >>> $1008;
       $1010 = $1009 & 1;
       $1011 = $1010 | $1007;
       $I1$0$i$i = $1011;
      }
     }
     $1012 = (546248 + ($I1$0$i$i<<2)|0);
     $1013 = ((($635)) + 28|0);
     HEAP32[$1013>>2] = $I1$0$i$i;
     $1014 = ((($635)) + 20|0);
     HEAP32[$1014>>2] = 0;
     HEAP32[$939>>2] = 0;
     $1015 = HEAP32[(545948)>>2]|0;
     $1016 = 1 << $I1$0$i$i;
     $1017 = $1015 & $1016;
     $1018 = ($1017|0)==(0);
     if ($1018) {
      $1019 = $1015 | $1016;
      HEAP32[(545948)>>2] = $1019;
      HEAP32[$1012>>2] = $635;
      $1020 = ((($635)) + 24|0);
      HEAP32[$1020>>2] = $1012;
      $1021 = ((($635)) + 12|0);
      HEAP32[$1021>>2] = $635;
      $1022 = ((($635)) + 8|0);
      HEAP32[$1022>>2] = $635;
      break;
     }
     $1023 = HEAP32[$1012>>2]|0;
     $1024 = ($I1$0$i$i|0)==(31);
     $1025 = $I1$0$i$i >>> 1;
     $1026 = (25 - ($1025))|0;
     $1027 = $1024 ? 0 : $1026;
     $1028 = $966 << $1027;
     $K2$0$i$i = $1028;$T$0$i$i = $1023;
     while(1) {
      $1029 = ((($T$0$i$i)) + 4|0);
      $1030 = HEAP32[$1029>>2]|0;
      $1031 = $1030 & -8;
      $1032 = ($1031|0)==($966|0);
      if ($1032) {
       label = 307;
       break;
      }
      $1033 = $K2$0$i$i >>> 31;
      $1034 = (((($T$0$i$i)) + 16|0) + ($1033<<2)|0);
      $1035 = $K2$0$i$i << 1;
      $1036 = HEAP32[$1034>>2]|0;
      $1037 = ($1036|0)==(0|0);
      if ($1037) {
       label = 304;
       break;
      } else {
       $K2$0$i$i = $1035;$T$0$i$i = $1036;
      }
     }
     if ((label|0) == 304) {
      $1038 = HEAP32[(545960)>>2]|0;
      $1039 = ($1034>>>0)<($1038>>>0);
      if ($1039) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$1034>>2] = $635;
       $1040 = ((($635)) + 24|0);
       HEAP32[$1040>>2] = $T$0$i$i;
       $1041 = ((($635)) + 12|0);
       HEAP32[$1041>>2] = $635;
       $1042 = ((($635)) + 8|0);
       HEAP32[$1042>>2] = $635;
       break;
      }
     }
     else if ((label|0) == 307) {
      $1043 = ((($T$0$i$i)) + 8|0);
      $1044 = HEAP32[$1043>>2]|0;
      $1045 = HEAP32[(545960)>>2]|0;
      $1046 = ($1044>>>0)>=($1045>>>0);
      $not$$i$i = ($T$0$i$i>>>0)>=($1045>>>0);
      $1047 = $1046 & $not$$i$i;
      if ($1047) {
       $1048 = ((($1044)) + 12|0);
       HEAP32[$1048>>2] = $635;
       HEAP32[$1043>>2] = $635;
       $1049 = ((($635)) + 8|0);
       HEAP32[$1049>>2] = $1044;
       $1050 = ((($635)) + 12|0);
       HEAP32[$1050>>2] = $T$0$i$i;
       $1051 = ((($635)) + 24|0);
       HEAP32[$1051>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1053 = HEAP32[(545956)>>2]|0;
  $1054 = ($1053>>>0)>($nb$0>>>0);
  if ($1054) {
   $1055 = (($1053) - ($nb$0))|0;
   HEAP32[(545956)>>2] = $1055;
   $1056 = HEAP32[(545968)>>2]|0;
   $1057 = (($1056) + ($nb$0)|0);
   HEAP32[(545968)>>2] = $1057;
   $1058 = $1055 | 1;
   $1059 = ((($1057)) + 4|0);
   HEAP32[$1059>>2] = $1058;
   $1060 = $nb$0 | 3;
   $1061 = ((($1056)) + 4|0);
   HEAP32[$1061>>2] = $1060;
   $1062 = ((($1056)) + 8|0);
   $$0 = $1062;
   return ($$0|0);
  }
 }
 $1063 = (0|0)==(0|0);
 if ($1063) {
  $$0$i = 545940;
 } else {
  $1064 = (_pthread_self()|0);
  $1065 = ((($1064)) + 64|0);
  $1066 = HEAP32[$1065>>2]|0;
  $$0$i = $1066;
 }
 HEAP32[$$0$i>>2] = 12;
 $$0 = 0;
 return ($$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi41Z2D = 0, $$pre$phi43Z2D = 0, $$pre$phiZ2D = 0, $$pre40 = 0, $$pre42 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F18$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$3 = 0, $R8$1 = 0, $R8$3 = 0, $RP$1 = 0, $RP10$1 = 0, $T$0 = 0, $cond20 = 0, $cond21 = 0, $not$ = 0, $p$1 = 0;
 var $psize$1 = 0, $psize$2 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(545960)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $9 = (($1) + ($8)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $14 = (0 - ($12))|0;
   $15 = (($1) + ($14)|0);
   $16 = (($12) + ($8))|0;
   $17 = ($15>>>0)<($2>>>0);
   if ($17) {
    _abort();
    // unreachable;
   }
   $18 = HEAP32[(545964)>>2]|0;
   $19 = ($15|0)==($18|0);
   if ($19) {
    $104 = ((($9)) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$1 = $15;$psize$1 = $16;
     break;
    }
    HEAP32[(545952)>>2] = $16;
    $108 = $105 & -2;
    HEAP32[$104>>2] = $108;
    $109 = $16 | 1;
    $110 = ((($15)) + 4|0);
    HEAP32[$110>>2] = $109;
    $111 = (($15) + ($16)|0);
    HEAP32[$111>>2] = $16;
    return;
   }
   $20 = $12 >>> 3;
   $21 = ($12>>>0)<(256);
   if ($21) {
    $22 = ((($15)) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($15)) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $20 << 1;
    $27 = (545984 + ($26<<2)|0);
    $28 = ($23|0)==($27|0);
    if (!($28)) {
     $29 = ($23>>>0)<($2>>>0);
     if ($29) {
      _abort();
      // unreachable;
     }
     $30 = ((($23)) + 12|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ($31|0)==($15|0);
     if (!($32)) {
      _abort();
      // unreachable;
     }
    }
    $33 = ($25|0)==($23|0);
    if ($33) {
     $34 = 1 << $20;
     $35 = $34 ^ -1;
     $36 = HEAP32[136486]|0;
     $37 = $36 & $35;
     HEAP32[136486] = $37;
     $p$1 = $15;$psize$1 = $16;
     break;
    }
    $38 = ($25|0)==($27|0);
    if ($38) {
     $$pre42 = ((($25)) + 8|0);
     $$pre$phi43Z2D = $$pre42;
    } else {
     $39 = ($25>>>0)<($2>>>0);
     if ($39) {
      _abort();
      // unreachable;
     }
     $40 = ((($25)) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)==($15|0);
     if ($42) {
      $$pre$phi43Z2D = $40;
     } else {
      _abort();
      // unreachable;
     }
    }
    $43 = ((($23)) + 12|0);
    HEAP32[$43>>2] = $25;
    HEAP32[$$pre$phi43Z2D>>2] = $23;
    $p$1 = $15;$psize$1 = $16;
    break;
   }
   $44 = ((($15)) + 24|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($15)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==($15|0);
   do {
    if ($48) {
     $58 = ((($15)) + 16|0);
     $59 = ((($58)) + 4|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==(0|0);
     if ($61) {
      $62 = HEAP32[$58>>2]|0;
      $63 = ($62|0)==(0|0);
      if ($63) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $62;$RP$1 = $58;
      }
     } else {
      $R$1 = $60;$RP$1 = $59;
     }
     while(1) {
      $64 = ((($R$1)) + 20|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if (!($66)) {
       $R$1 = $65;$RP$1 = $64;
       continue;
      }
      $67 = ((($R$1)) + 16|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ($68|0)==(0|0);
      if ($69) {
       break;
      } else {
       $R$1 = $68;$RP$1 = $67;
      }
     }
     $70 = ($RP$1>>>0)<($2>>>0);
     if ($70) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1>>2] = 0;
      $R$3 = $R$1;
      break;
     }
    } else {
     $49 = ((($15)) + 8|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50>>>0)<($2>>>0);
     if ($51) {
      _abort();
      // unreachable;
     }
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($15|0);
     if (!($54)) {
      _abort();
      // unreachable;
     }
     $55 = ((($47)) + 8|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($56|0)==($15|0);
     if ($57) {
      HEAP32[$52>>2] = $47;
      HEAP32[$55>>2] = $50;
      $R$3 = $47;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $71 = ($45|0)==(0|0);
   if ($71) {
    $p$1 = $15;$psize$1 = $16;
   } else {
    $72 = ((($15)) + 28|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (546248 + ($73<<2)|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($15|0)==($75|0);
    if ($76) {
     HEAP32[$74>>2] = $R$3;
     $cond20 = ($R$3|0)==(0|0);
     if ($cond20) {
      $77 = 1 << $73;
      $78 = $77 ^ -1;
      $79 = HEAP32[(545948)>>2]|0;
      $80 = $79 & $78;
      HEAP32[(545948)>>2] = $80;
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    } else {
     $81 = HEAP32[(545960)>>2]|0;
     $82 = ($45>>>0)<($81>>>0);
     if ($82) {
      _abort();
      // unreachable;
     }
     $83 = ((($45)) + 16|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($84|0)==($15|0);
     if ($85) {
      HEAP32[$83>>2] = $R$3;
     } else {
      $86 = ((($45)) + 20|0);
      HEAP32[$86>>2] = $R$3;
     }
     $87 = ($R$3|0)==(0|0);
     if ($87) {
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    }
    $88 = HEAP32[(545960)>>2]|0;
    $89 = ($R$3>>>0)<($88>>>0);
    if ($89) {
     _abort();
     // unreachable;
    }
    $90 = ((($R$3)) + 24|0);
    HEAP32[$90>>2] = $45;
    $91 = ((($15)) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==(0|0);
    do {
     if (!($93)) {
      $94 = ($92>>>0)<($88>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = ((($R$3)) + 16|0);
       HEAP32[$95>>2] = $92;
       $96 = ((($92)) + 24|0);
       HEAP32[$96>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $97 = ((($91)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$1 = $15;$psize$1 = $16;
    } else {
     $100 = HEAP32[(545960)>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = ((($R$3)) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = ((($98)) + 24|0);
      HEAP32[$103>>2] = $R$3;
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    }
   }
  } else {
   $p$1 = $1;$psize$1 = $8;
  }
 } while(0);
 $112 = ($p$1>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $113 = ((($9)) + 4|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[(545968)>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[(545956)>>2]|0;
   $122 = (($121) + ($psize$1))|0;
   HEAP32[(545956)>>2] = $122;
   HEAP32[(545968)>>2] = $p$1;
   $123 = $122 | 1;
   $124 = ((($p$1)) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[(545964)>>2]|0;
   $126 = ($p$1|0)==($125|0);
   if (!($126)) {
    return;
   }
   HEAP32[(545964)>>2] = 0;
   HEAP32[(545952)>>2] = 0;
   return;
  }
  $127 = HEAP32[(545964)>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[(545952)>>2]|0;
   $130 = (($129) + ($psize$1))|0;
   HEAP32[(545952)>>2] = $130;
   HEAP32[(545964)>>2] = $p$1;
   $131 = $130 | 1;
   $132 = ((($p$1)) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$1) + ($130)|0);
   HEAP32[$133>>2] = $130;
   return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$1))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = ((($9)) + 8|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ((($9)) + 12|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = (545984 + ($142<<2)|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[(545960)>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = ((($139)) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[136486]|0;
     $154 = $153 & $152;
     HEAP32[136486] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre40 = ((($141)) + 8|0);
     $$pre$phi41Z2D = $$pre40;
    } else {
     $156 = HEAP32[(545960)>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = ((($141)) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi41Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = ((($139)) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi41Z2D>>2] = $139;
   } else {
    $162 = ((($9)) + 24|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ((($9)) + 12|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $177 = ((($9)) + 16|0);
      $178 = ((($177)) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ($179|0)==(0|0);
      if ($180) {
       $181 = HEAP32[$177>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R8$3 = 0;
        break;
       } else {
        $R8$1 = $181;$RP10$1 = $177;
       }
      } else {
       $R8$1 = $179;$RP10$1 = $178;
      }
      while(1) {
       $183 = ((($R8$1)) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R8$1 = $184;$RP10$1 = $183;
        continue;
       }
       $186 = ((($R8$1)) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $R8$1 = $187;$RP10$1 = $186;
       }
      }
      $189 = HEAP32[(545960)>>2]|0;
      $190 = ($RP10$1>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP10$1>>2] = 0;
       $R8$3 = $R8$1;
       break;
      }
     } else {
      $167 = ((($9)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[(545960)>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = ((($168)) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = ((($165)) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R8$3 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $192 = ((($9)) + 28|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (546248 + ($193<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R8$3;
      $cond21 = ($R8$3|0)==(0|0);
      if ($cond21) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[(545948)>>2]|0;
       $200 = $199 & $198;
       HEAP32[(545948)>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[(545960)>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = ((($163)) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R8$3;
      } else {
       $206 = ((($163)) + 20|0);
       HEAP32[$206>>2] = $R8$3;
      }
      $207 = ($R8$3|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[(545960)>>2]|0;
     $209 = ($R8$3>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = ((($R8$3)) + 24|0);
     HEAP32[$210>>2] = $163;
     $211 = ((($9)) + 16|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = ($212>>>0)<($208>>>0);
       if ($214) {
        _abort();
        // unreachable;
       } else {
        $215 = ((($R8$3)) + 16|0);
        HEAP32[$215>>2] = $212;
        $216 = ((($212)) + 24|0);
        HEAP32[$216>>2] = $R8$3;
        break;
       }
      }
     } while(0);
     $217 = ((($211)) + 4|0);
     $218 = HEAP32[$217>>2]|0;
     $219 = ($218|0)==(0|0);
     if (!($219)) {
      $220 = HEAP32[(545960)>>2]|0;
      $221 = ($218>>>0)<($220>>>0);
      if ($221) {
       _abort();
       // unreachable;
      } else {
       $222 = ((($R8$3)) + 20|0);
       HEAP32[$222>>2] = $218;
       $223 = ((($218)) + 24|0);
       HEAP32[$223>>2] = $R8$3;
       break;
      }
     }
    }
   }
  } while(0);
  $224 = $135 | 1;
  $225 = ((($p$1)) + 4|0);
  HEAP32[$225>>2] = $224;
  $226 = (($p$1) + ($135)|0);
  HEAP32[$226>>2] = $135;
  $227 = HEAP32[(545964)>>2]|0;
  $228 = ($p$1|0)==($227|0);
  if ($228) {
   HEAP32[(545952)>>2] = $135;
   return;
  } else {
   $psize$2 = $135;
  }
 } else {
  $229 = $114 & -2;
  HEAP32[$113>>2] = $229;
  $230 = $psize$1 | 1;
  $231 = ((($p$1)) + 4|0);
  HEAP32[$231>>2] = $230;
  $232 = (($p$1) + ($psize$1)|0);
  HEAP32[$232>>2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $233 = $psize$2 >>> 3;
 $234 = ($psize$2>>>0)<(256);
 if ($234) {
  $235 = $233 << 1;
  $236 = (545984 + ($235<<2)|0);
  $237 = HEAP32[136486]|0;
  $238 = 1 << $233;
  $239 = $237 & $238;
  $240 = ($239|0)==(0);
  if ($240) {
   $241 = $237 | $238;
   HEAP32[136486] = $241;
   $$pre = ((($236)) + 8|0);
   $$pre$phiZ2D = $$pre;$F18$0 = $236;
  } else {
   $242 = ((($236)) + 8|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = HEAP32[(545960)>>2]|0;
   $245 = ($243>>>0)<($244>>>0);
   if ($245) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $242;$F18$0 = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$1;
  $246 = ((($F18$0)) + 12|0);
  HEAP32[$246>>2] = $p$1;
  $247 = ((($p$1)) + 8|0);
  HEAP32[$247>>2] = $F18$0;
  $248 = ((($p$1)) + 12|0);
  HEAP32[$248>>2] = $236;
  return;
 }
 $249 = $psize$2 >>> 8;
 $250 = ($249|0)==(0);
 if ($250) {
  $I20$0 = 0;
 } else {
  $251 = ($psize$2>>>0)>(16777215);
  if ($251) {
   $I20$0 = 31;
  } else {
   $252 = (($249) + 1048320)|0;
   $253 = $252 >>> 16;
   $254 = $253 & 8;
   $255 = $249 << $254;
   $256 = (($255) + 520192)|0;
   $257 = $256 >>> 16;
   $258 = $257 & 4;
   $259 = $258 | $254;
   $260 = $255 << $258;
   $261 = (($260) + 245760)|0;
   $262 = $261 >>> 16;
   $263 = $262 & 2;
   $264 = $259 | $263;
   $265 = (14 - ($264))|0;
   $266 = $260 << $263;
   $267 = $266 >>> 15;
   $268 = (($265) + ($267))|0;
   $269 = $268 << 1;
   $270 = (($268) + 7)|0;
   $271 = $psize$2 >>> $270;
   $272 = $271 & 1;
   $273 = $272 | $269;
   $I20$0 = $273;
  }
 }
 $274 = (546248 + ($I20$0<<2)|0);
 $275 = ((($p$1)) + 28|0);
 HEAP32[$275>>2] = $I20$0;
 $276 = ((($p$1)) + 16|0);
 $277 = ((($p$1)) + 20|0);
 HEAP32[$277>>2] = 0;
 HEAP32[$276>>2] = 0;
 $278 = HEAP32[(545948)>>2]|0;
 $279 = 1 << $I20$0;
 $280 = $278 & $279;
 $281 = ($280|0)==(0);
 do {
  if ($281) {
   $282 = $278 | $279;
   HEAP32[(545948)>>2] = $282;
   HEAP32[$274>>2] = $p$1;
   $283 = ((($p$1)) + 24|0);
   HEAP32[$283>>2] = $274;
   $284 = ((($p$1)) + 12|0);
   HEAP32[$284>>2] = $p$1;
   $285 = ((($p$1)) + 8|0);
   HEAP32[$285>>2] = $p$1;
  } else {
   $286 = HEAP32[$274>>2]|0;
   $287 = ($I20$0|0)==(31);
   $288 = $I20$0 >>> 1;
   $289 = (25 - ($288))|0;
   $290 = $287 ? 0 : $289;
   $291 = $psize$2 << $290;
   $K21$0 = $291;$T$0 = $286;
   while(1) {
    $292 = ((($T$0)) + 4|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = $293 & -8;
    $295 = ($294|0)==($psize$2|0);
    if ($295) {
     label = 130;
     break;
    }
    $296 = $K21$0 >>> 31;
    $297 = (((($T$0)) + 16|0) + ($296<<2)|0);
    $298 = $K21$0 << 1;
    $299 = HEAP32[$297>>2]|0;
    $300 = ($299|0)==(0|0);
    if ($300) {
     label = 127;
     break;
    } else {
     $K21$0 = $298;$T$0 = $299;
    }
   }
   if ((label|0) == 127) {
    $301 = HEAP32[(545960)>>2]|0;
    $302 = ($297>>>0)<($301>>>0);
    if ($302) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$297>>2] = $p$1;
     $303 = ((($p$1)) + 24|0);
     HEAP32[$303>>2] = $T$0;
     $304 = ((($p$1)) + 12|0);
     HEAP32[$304>>2] = $p$1;
     $305 = ((($p$1)) + 8|0);
     HEAP32[$305>>2] = $p$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $306 = ((($T$0)) + 8|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = HEAP32[(545960)>>2]|0;
    $309 = ($307>>>0)>=($308>>>0);
    $not$ = ($T$0>>>0)>=($308>>>0);
    $310 = $309 & $not$;
    if ($310) {
     $311 = ((($307)) + 12|0);
     HEAP32[$311>>2] = $p$1;
     HEAP32[$306>>2] = $p$1;
     $312 = ((($p$1)) + 8|0);
     HEAP32[$312>>2] = $307;
     $313 = ((($p$1)) + 12|0);
     HEAP32[$313>>2] = $T$0;
     $314 = ((($p$1)) + 24|0);
     HEAP32[$314>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $315 = HEAP32[(545976)>>2]|0;
 $316 = (($315) + -1)|0;
 HEAP32[(545976)>>2] = $316;
 $317 = ($316|0)==(0);
 if ($317) {
  $sp$0$in$i = (546400);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $318 = ($sp$0$i|0)==(0|0);
  $319 = ((($sp$0$i)) + 8|0);
  if ($318) {
   break;
  } else {
   $sp$0$in$i = $319;
  }
 }
 HEAP32[(545976)>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $$0$i = 0, $$pre$i = 0, $$pre$phi$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $R$1$i = 0, $R$3$i = 0, $RP$1$i = 0, $cond$i = 0, $mem$1 = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$not$i = 0, $or$cond3$i = 0, $storemerge$i = 0, $storemerge1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$1 = $1;
  return ($mem$1|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (0|0)==(0|0);
  if ($3) {
   $$0$i = 545940;
  } else {
   $4 = (_pthread_self()|0);
   $5 = ((($4)) + 64|0);
   $6 = HEAP32[$5>>2]|0;
   $$0$i = $6;
  }
  HEAP32[$$0$i>>2] = 12;
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $7 = ($bytes>>>0)<(11);
 $8 = (($bytes) + 11)|0;
 $9 = $8 & -8;
 $10 = $7 ? 16 : $9;
 $11 = ((($oldmem)) + -8|0);
 $12 = ((($oldmem)) + -4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & -8;
 $15 = (($11) + ($14)|0);
 $16 = HEAP32[(545960)>>2]|0;
 $17 = $13 & 3;
 $notlhs$i = ($11>>>0)>=($16>>>0);
 $notrhs$i = ($17|0)!=(1);
 $or$cond$not$i = $notrhs$i & $notlhs$i;
 $18 = ($14|0)>(0);
 $or$cond3$i = $or$cond$not$i & $18;
 if (!($or$cond3$i)) {
  _abort();
  // unreachable;
 }
 $19 = ((($15)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20 & 1;
 $22 = ($21|0)==(0);
 if ($22) {
  _abort();
  // unreachable;
 }
 $23 = ($17|0)==(0);
 do {
  if ($23) {
   $24 = ($10>>>0)<(256);
   $25 = $10 | 4;
   $26 = ($14>>>0)<($25>>>0);
   $or$cond = $24 | $26;
   if (!($or$cond)) {
    $27 = (($14) - ($10))|0;
    $28 = HEAP32[(546424)>>2]|0;
    $29 = $28 << 1;
    $30 = ($27>>>0)>($29>>>0);
    if (!($30)) {
     $mem$1 = $oldmem;
     return ($mem$1|0);
    }
   }
  } else {
   $31 = ($14>>>0)<($10>>>0);
   if (!($31)) {
    $32 = (($14) - ($10))|0;
    $33 = ($32>>>0)>(15);
    if (!($33)) {
     $mem$1 = $oldmem;
     return ($mem$1|0);
    }
    $34 = (($11) + ($10)|0);
    $35 = $13 & 1;
    $36 = $35 | $10;
    $37 = $36 | 2;
    HEAP32[$12>>2] = $37;
    $38 = ((($34)) + 4|0);
    $39 = $32 | 3;
    HEAP32[$38>>2] = $39;
    $40 = (($34) + ($32)|0);
    $41 = ((($40)) + 4|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = $42 | 1;
    HEAP32[$41>>2] = $43;
    _dispose_chunk($34,$32);
    $mem$1 = $oldmem;
    return ($mem$1|0);
   }
   $44 = HEAP32[(545968)>>2]|0;
   $45 = ($15|0)==($44|0);
   if ($45) {
    $46 = HEAP32[(545956)>>2]|0;
    $47 = (($46) + ($14))|0;
    $48 = ($47>>>0)>($10>>>0);
    if (!($48)) {
     break;
    }
    $49 = (($47) - ($10))|0;
    $50 = (($11) + ($10)|0);
    $51 = $13 & 1;
    $52 = $51 | $10;
    $53 = $52 | 2;
    HEAP32[$12>>2] = $53;
    $54 = ((($50)) + 4|0);
    $55 = $49 | 1;
    HEAP32[$54>>2] = $55;
    HEAP32[(545968)>>2] = $50;
    HEAP32[(545956)>>2] = $49;
    $mem$1 = $oldmem;
    return ($mem$1|0);
   }
   $56 = HEAP32[(545964)>>2]|0;
   $57 = ($15|0)==($56|0);
   if ($57) {
    $58 = HEAP32[(545952)>>2]|0;
    $59 = (($58) + ($14))|0;
    $60 = ($59>>>0)<($10>>>0);
    if ($60) {
     break;
    }
    $61 = (($59) - ($10))|0;
    $62 = ($61>>>0)>(15);
    if ($62) {
     $63 = (($11) + ($10)|0);
     $64 = (($63) + ($61)|0);
     $65 = $13 & 1;
     $66 = $65 | $10;
     $67 = $66 | 2;
     HEAP32[$12>>2] = $67;
     $68 = ((($63)) + 4|0);
     $69 = $61 | 1;
     HEAP32[$68>>2] = $69;
     HEAP32[$64>>2] = $61;
     $70 = ((($64)) + 4|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = $71 & -2;
     HEAP32[$70>>2] = $72;
     $storemerge$i = $63;$storemerge1$i = $61;
    } else {
     $73 = $13 & 1;
     $74 = $73 | $59;
     $75 = $74 | 2;
     HEAP32[$12>>2] = $75;
     $76 = (($11) + ($59)|0);
     $77 = ((($76)) + 4|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = $78 | 1;
     HEAP32[$77>>2] = $79;
     $storemerge$i = 0;$storemerge1$i = 0;
    }
    HEAP32[(545952)>>2] = $storemerge1$i;
    HEAP32[(545964)>>2] = $storemerge$i;
    $mem$1 = $oldmem;
    return ($mem$1|0);
   }
   $80 = $20 & 2;
   $81 = ($80|0)==(0);
   if ($81) {
    $82 = $20 & -8;
    $83 = (($82) + ($14))|0;
    $84 = ($83>>>0)<($10>>>0);
    if (!($84)) {
     $85 = (($83) - ($10))|0;
     $86 = $20 >>> 3;
     $87 = ($20>>>0)<(256);
     do {
      if ($87) {
       $88 = ((($15)) + 8|0);
       $89 = HEAP32[$88>>2]|0;
       $90 = ((($15)) + 12|0);
       $91 = HEAP32[$90>>2]|0;
       $92 = $86 << 1;
       $93 = (545984 + ($92<<2)|0);
       $94 = ($89|0)==($93|0);
       if (!($94)) {
        $95 = ($89>>>0)<($16>>>0);
        if ($95) {
         _abort();
         // unreachable;
        }
        $96 = ((($89)) + 12|0);
        $97 = HEAP32[$96>>2]|0;
        $98 = ($97|0)==($15|0);
        if (!($98)) {
         _abort();
         // unreachable;
        }
       }
       $99 = ($91|0)==($89|0);
       if ($99) {
        $100 = 1 << $86;
        $101 = $100 ^ -1;
        $102 = HEAP32[136486]|0;
        $103 = $102 & $101;
        HEAP32[136486] = $103;
        break;
       }
       $104 = ($91|0)==($93|0);
       if ($104) {
        $$pre$i = ((($91)) + 8|0);
        $$pre$phi$iZ2D = $$pre$i;
       } else {
        $105 = ($91>>>0)<($16>>>0);
        if ($105) {
         _abort();
         // unreachable;
        }
        $106 = ((($91)) + 8|0);
        $107 = HEAP32[$106>>2]|0;
        $108 = ($107|0)==($15|0);
        if ($108) {
         $$pre$phi$iZ2D = $106;
        } else {
         _abort();
         // unreachable;
        }
       }
       $109 = ((($89)) + 12|0);
       HEAP32[$109>>2] = $91;
       HEAP32[$$pre$phi$iZ2D>>2] = $89;
      } else {
       $110 = ((($15)) + 24|0);
       $111 = HEAP32[$110>>2]|0;
       $112 = ((($15)) + 12|0);
       $113 = HEAP32[$112>>2]|0;
       $114 = ($113|0)==($15|0);
       do {
        if ($114) {
         $124 = ((($15)) + 16|0);
         $125 = ((($124)) + 4|0);
         $126 = HEAP32[$125>>2]|0;
         $127 = ($126|0)==(0|0);
         if ($127) {
          $128 = HEAP32[$124>>2]|0;
          $129 = ($128|0)==(0|0);
          if ($129) {
           $R$3$i = 0;
           break;
          } else {
           $R$1$i = $128;$RP$1$i = $124;
          }
         } else {
          $R$1$i = $126;$RP$1$i = $125;
         }
         while(1) {
          $130 = ((($R$1$i)) + 20|0);
          $131 = HEAP32[$130>>2]|0;
          $132 = ($131|0)==(0|0);
          if (!($132)) {
           $R$1$i = $131;$RP$1$i = $130;
           continue;
          }
          $133 = ((($R$1$i)) + 16|0);
          $134 = HEAP32[$133>>2]|0;
          $135 = ($134|0)==(0|0);
          if ($135) {
           break;
          } else {
           $R$1$i = $134;$RP$1$i = $133;
          }
         }
         $136 = ($RP$1$i>>>0)<($16>>>0);
         if ($136) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$1$i>>2] = 0;
          $R$3$i = $R$1$i;
          break;
         }
        } else {
         $115 = ((($15)) + 8|0);
         $116 = HEAP32[$115>>2]|0;
         $117 = ($116>>>0)<($16>>>0);
         if ($117) {
          _abort();
          // unreachable;
         }
         $118 = ((($116)) + 12|0);
         $119 = HEAP32[$118>>2]|0;
         $120 = ($119|0)==($15|0);
         if (!($120)) {
          _abort();
          // unreachable;
         }
         $121 = ((($113)) + 8|0);
         $122 = HEAP32[$121>>2]|0;
         $123 = ($122|0)==($15|0);
         if ($123) {
          HEAP32[$118>>2] = $113;
          HEAP32[$121>>2] = $116;
          $R$3$i = $113;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $137 = ($111|0)==(0|0);
       if (!($137)) {
        $138 = ((($15)) + 28|0);
        $139 = HEAP32[$138>>2]|0;
        $140 = (546248 + ($139<<2)|0);
        $141 = HEAP32[$140>>2]|0;
        $142 = ($15|0)==($141|0);
        if ($142) {
         HEAP32[$140>>2] = $R$3$i;
         $cond$i = ($R$3$i|0)==(0|0);
         if ($cond$i) {
          $143 = 1 << $139;
          $144 = $143 ^ -1;
          $145 = HEAP32[(545948)>>2]|0;
          $146 = $145 & $144;
          HEAP32[(545948)>>2] = $146;
          break;
         }
        } else {
         $147 = HEAP32[(545960)>>2]|0;
         $148 = ($111>>>0)<($147>>>0);
         if ($148) {
          _abort();
          // unreachable;
         }
         $149 = ((($111)) + 16|0);
         $150 = HEAP32[$149>>2]|0;
         $151 = ($150|0)==($15|0);
         if ($151) {
          HEAP32[$149>>2] = $R$3$i;
         } else {
          $152 = ((($111)) + 20|0);
          HEAP32[$152>>2] = $R$3$i;
         }
         $153 = ($R$3$i|0)==(0|0);
         if ($153) {
          break;
         }
        }
        $154 = HEAP32[(545960)>>2]|0;
        $155 = ($R$3$i>>>0)<($154>>>0);
        if ($155) {
         _abort();
         // unreachable;
        }
        $156 = ((($R$3$i)) + 24|0);
        HEAP32[$156>>2] = $111;
        $157 = ((($15)) + 16|0);
        $158 = HEAP32[$157>>2]|0;
        $159 = ($158|0)==(0|0);
        do {
         if (!($159)) {
          $160 = ($158>>>0)<($154>>>0);
          if ($160) {
           _abort();
           // unreachable;
          } else {
           $161 = ((($R$3$i)) + 16|0);
           HEAP32[$161>>2] = $158;
           $162 = ((($158)) + 24|0);
           HEAP32[$162>>2] = $R$3$i;
           break;
          }
         }
        } while(0);
        $163 = ((($157)) + 4|0);
        $164 = HEAP32[$163>>2]|0;
        $165 = ($164|0)==(0|0);
        if (!($165)) {
         $166 = HEAP32[(545960)>>2]|0;
         $167 = ($164>>>0)<($166>>>0);
         if ($167) {
          _abort();
          // unreachable;
         } else {
          $168 = ((($R$3$i)) + 20|0);
          HEAP32[$168>>2] = $164;
          $169 = ((($164)) + 24|0);
          HEAP32[$169>>2] = $R$3$i;
          break;
         }
        }
       }
      }
     } while(0);
     $170 = ($85>>>0)<(16);
     if ($170) {
      $171 = $13 & 1;
      $172 = $83 | $171;
      $173 = $172 | 2;
      HEAP32[$12>>2] = $173;
      $174 = (($11) + ($83)|0);
      $175 = ((($174)) + 4|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = $176 | 1;
      HEAP32[$175>>2] = $177;
      $mem$1 = $oldmem;
      return ($mem$1|0);
     } else {
      $178 = (($11) + ($10)|0);
      $179 = $13 & 1;
      $180 = $179 | $10;
      $181 = $180 | 2;
      HEAP32[$12>>2] = $181;
      $182 = ((($178)) + 4|0);
      $183 = $85 | 3;
      HEAP32[$182>>2] = $183;
      $184 = (($178) + ($85)|0);
      $185 = ((($184)) + 4|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = $186 | 1;
      HEAP32[$185>>2] = $187;
      _dispose_chunk($178,$85);
      $mem$1 = $oldmem;
      return ($mem$1|0);
     }
    }
   }
  }
 } while(0);
 $188 = (_malloc($bytes)|0);
 $189 = ($188|0)==(0|0);
 if ($189) {
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $190 = HEAP32[$12>>2]|0;
 $191 = $190 & -8;
 $192 = $190 & 3;
 $193 = ($192|0)==(0);
 $194 = $193 ? 8 : 4;
 $195 = (($191) - ($194))|0;
 $196 = ($195>>>0)<($bytes>>>0);
 $197 = $196 ? $195 : $bytes;
 _memcpy(($188|0),($oldmem|0),($197|0))|0;
 _free($oldmem);
 $mem$1 = $188;
 return ($mem$1|0);
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$1 = 0, $$14 = 0, $$2 = 0, $$pre = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $$pre21 = 0, $$pre23 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F17$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$3 = 0, $R7$1 = 0;
 var $R7$3 = 0, $RP$1 = 0, $RP9$1 = 0, $T$0 = 0, $cond = 0, $cond16 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(545960)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(545964)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $99 = ((($0)) + 4|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$1 = $9;$$14 = $10;
     break;
    }
    HEAP32[(545952)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $105 = ((($9)) + 4|0);
    HEAP32[$105>>2] = $104;
    $106 = (($9) + ($10)|0);
    HEAP32[$106>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $17 = ((($9)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($9)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (545984 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[136486]|0;
     $32 = $31 & $30;
     HEAP32[136486] = $32;
     $$1 = $9;$$14 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre23 = ((($20)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi24Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi24Z2D>>2] = $18;
    $$1 = $9;$$14 = $10;
    break;
   }
   $39 = ((($9)) + 24|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($9)) + 12|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $53 = ((($9)) + 16|0);
     $54 = ((($53)) + 4|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==(0|0);
     if ($56) {
      $57 = HEAP32[$53>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $57;$RP$1 = $53;
      }
     } else {
      $R$1 = $55;$RP$1 = $54;
     }
     while(1) {
      $59 = ((($R$1)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$1 = $60;$RP$1 = $59;
       continue;
      }
      $62 = ((($R$1)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       break;
      } else {
       $R$1 = $63;$RP$1 = $62;
      }
     }
     $65 = ($RP$1>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1>>2] = 0;
      $R$3 = $R$1;
      break;
     }
    } else {
     $44 = ((($9)) + 8|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$3 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$1 = $9;$$14 = $10;
   } else {
    $67 = ((($9)) + 28|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (546248 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$3;
     $cond = ($R$3|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(545948)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(545948)>>2] = $75;
      $$1 = $9;$$14 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(545960)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$3;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$3;
     }
     $82 = ($R$3|0)==(0|0);
     if ($82) {
      $$1 = $9;$$14 = $10;
      break;
     }
    }
    $83 = HEAP32[(545960)>>2]|0;
    $84 = ($R$3>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$3)) + 24|0);
    HEAP32[$85>>2] = $40;
    $86 = ((($9)) + 16|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$3)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $92 = ((($86)) + 4|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$1 = $9;$$14 = $10;
    } else {
     $95 = HEAP32[(545960)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$3)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$3;
      $$1 = $9;$$14 = $10;
      break;
     }
    }
   }
  } else {
   $$1 = $p;$$14 = $psize;
  }
 } while(0);
 $107 = HEAP32[(545960)>>2]|0;
 $108 = ($0>>>0)<($107>>>0);
 if ($108) {
  _abort();
  // unreachable;
 }
 $109 = ((($0)) + 4|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $110 & 2;
 $112 = ($111|0)==(0);
 if ($112) {
  $113 = HEAP32[(545968)>>2]|0;
  $114 = ($0|0)==($113|0);
  if ($114) {
   $115 = HEAP32[(545956)>>2]|0;
   $116 = (($115) + ($$14))|0;
   HEAP32[(545956)>>2] = $116;
   HEAP32[(545968)>>2] = $$1;
   $117 = $116 | 1;
   $118 = ((($$1)) + 4|0);
   HEAP32[$118>>2] = $117;
   $119 = HEAP32[(545964)>>2]|0;
   $120 = ($$1|0)==($119|0);
   if (!($120)) {
    return;
   }
   HEAP32[(545964)>>2] = 0;
   HEAP32[(545952)>>2] = 0;
   return;
  }
  $121 = HEAP32[(545964)>>2]|0;
  $122 = ($0|0)==($121|0);
  if ($122) {
   $123 = HEAP32[(545952)>>2]|0;
   $124 = (($123) + ($$14))|0;
   HEAP32[(545952)>>2] = $124;
   HEAP32[(545964)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = (($$1) + ($124)|0);
   HEAP32[$127>>2] = $124;
   return;
  }
  $128 = $110 & -8;
  $129 = (($128) + ($$14))|0;
  $130 = $110 >>> 3;
  $131 = ($110>>>0)<(256);
  do {
   if ($131) {
    $132 = ((($0)) + 8|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ((($0)) + 12|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $130 << 1;
    $137 = (545984 + ($136<<2)|0);
    $138 = ($133|0)==($137|0);
    if (!($138)) {
     $139 = ($133>>>0)<($107>>>0);
     if ($139) {
      _abort();
      // unreachable;
     }
     $140 = ((($133)) + 12|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($0|0);
     if (!($142)) {
      _abort();
      // unreachable;
     }
    }
    $143 = ($135|0)==($133|0);
    if ($143) {
     $144 = 1 << $130;
     $145 = $144 ^ -1;
     $146 = HEAP32[136486]|0;
     $147 = $146 & $145;
     HEAP32[136486] = $147;
     break;
    }
    $148 = ($135|0)==($137|0);
    if ($148) {
     $$pre21 = ((($135)) + 8|0);
     $$pre$phi22Z2D = $$pre21;
    } else {
     $149 = ($135>>>0)<($107>>>0);
     if ($149) {
      _abort();
      // unreachable;
     }
     $150 = ((($135)) + 8|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ($151|0)==($0|0);
     if ($152) {
      $$pre$phi22Z2D = $150;
     } else {
      _abort();
      // unreachable;
     }
    }
    $153 = ((($133)) + 12|0);
    HEAP32[$153>>2] = $135;
    HEAP32[$$pre$phi22Z2D>>2] = $133;
   } else {
    $154 = ((($0)) + 24|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ((($0)) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ($157|0)==($0|0);
    do {
     if ($158) {
      $168 = ((($0)) + 16|0);
      $169 = ((($168)) + 4|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $172 = HEAP32[$168>>2]|0;
       $173 = ($172|0)==(0|0);
       if ($173) {
        $R7$3 = 0;
        break;
       } else {
        $R7$1 = $172;$RP9$1 = $168;
       }
      } else {
       $R7$1 = $170;$RP9$1 = $169;
      }
      while(1) {
       $174 = ((($R7$1)) + 20|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = ($175|0)==(0|0);
       if (!($176)) {
        $R7$1 = $175;$RP9$1 = $174;
        continue;
       }
       $177 = ((($R7$1)) + 16|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = ($178|0)==(0|0);
       if ($179) {
        break;
       } else {
        $R7$1 = $178;$RP9$1 = $177;
       }
      }
      $180 = ($RP9$1>>>0)<($107>>>0);
      if ($180) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$1>>2] = 0;
       $R7$3 = $R7$1;
       break;
      }
     } else {
      $159 = ((($0)) + 8|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = ($160>>>0)<($107>>>0);
      if ($161) {
       _abort();
       // unreachable;
      }
      $162 = ((($160)) + 12|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = ($163|0)==($0|0);
      if (!($164)) {
       _abort();
       // unreachable;
      }
      $165 = ((($157)) + 8|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = ($166|0)==($0|0);
      if ($167) {
       HEAP32[$162>>2] = $157;
       HEAP32[$165>>2] = $160;
       $R7$3 = $157;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $181 = ($155|0)==(0|0);
    if (!($181)) {
     $182 = ((($0)) + 28|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = (546248 + ($183<<2)|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = ($0|0)==($185|0);
     if ($186) {
      HEAP32[$184>>2] = $R7$3;
      $cond16 = ($R7$3|0)==(0|0);
      if ($cond16) {
       $187 = 1 << $183;
       $188 = $187 ^ -1;
       $189 = HEAP32[(545948)>>2]|0;
       $190 = $189 & $188;
       HEAP32[(545948)>>2] = $190;
       break;
      }
     } else {
      $191 = HEAP32[(545960)>>2]|0;
      $192 = ($155>>>0)<($191>>>0);
      if ($192) {
       _abort();
       // unreachable;
      }
      $193 = ((($155)) + 16|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = ($194|0)==($0|0);
      if ($195) {
       HEAP32[$193>>2] = $R7$3;
      } else {
       $196 = ((($155)) + 20|0);
       HEAP32[$196>>2] = $R7$3;
      }
      $197 = ($R7$3|0)==(0|0);
      if ($197) {
       break;
      }
     }
     $198 = HEAP32[(545960)>>2]|0;
     $199 = ($R7$3>>>0)<($198>>>0);
     if ($199) {
      _abort();
      // unreachable;
     }
     $200 = ((($R7$3)) + 24|0);
     HEAP32[$200>>2] = $155;
     $201 = ((($0)) + 16|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = ($202|0)==(0|0);
     do {
      if (!($203)) {
       $204 = ($202>>>0)<($198>>>0);
       if ($204) {
        _abort();
        // unreachable;
       } else {
        $205 = ((($R7$3)) + 16|0);
        HEAP32[$205>>2] = $202;
        $206 = ((($202)) + 24|0);
        HEAP32[$206>>2] = $R7$3;
        break;
       }
      }
     } while(0);
     $207 = ((($201)) + 4|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = ($208|0)==(0|0);
     if (!($209)) {
      $210 = HEAP32[(545960)>>2]|0;
      $211 = ($208>>>0)<($210>>>0);
      if ($211) {
       _abort();
       // unreachable;
      } else {
       $212 = ((($R7$3)) + 20|0);
       HEAP32[$212>>2] = $208;
       $213 = ((($208)) + 24|0);
       HEAP32[$213>>2] = $R7$3;
       break;
      }
     }
    }
   }
  } while(0);
  $214 = $129 | 1;
  $215 = ((($$1)) + 4|0);
  HEAP32[$215>>2] = $214;
  $216 = (($$1) + ($129)|0);
  HEAP32[$216>>2] = $129;
  $217 = HEAP32[(545964)>>2]|0;
  $218 = ($$1|0)==($217|0);
  if ($218) {
   HEAP32[(545952)>>2] = $129;
   return;
  } else {
   $$2 = $129;
  }
 } else {
  $219 = $110 & -2;
  HEAP32[$109>>2] = $219;
  $220 = $$14 | 1;
  $221 = ((($$1)) + 4|0);
  HEAP32[$221>>2] = $220;
  $222 = (($$1) + ($$14)|0);
  HEAP32[$222>>2] = $$14;
  $$2 = $$14;
 }
 $223 = $$2 >>> 3;
 $224 = ($$2>>>0)<(256);
 if ($224) {
  $225 = $223 << 1;
  $226 = (545984 + ($225<<2)|0);
  $227 = HEAP32[136486]|0;
  $228 = 1 << $223;
  $229 = $227 & $228;
  $230 = ($229|0)==(0);
  if ($230) {
   $231 = $227 | $228;
   HEAP32[136486] = $231;
   $$pre = ((($226)) + 8|0);
   $$pre$phiZ2D = $$pre;$F17$0 = $226;
  } else {
   $232 = ((($226)) + 8|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = HEAP32[(545960)>>2]|0;
   $235 = ($233>>>0)<($234>>>0);
   if ($235) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $232;$F17$0 = $233;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $236 = ((($F17$0)) + 12|0);
  HEAP32[$236>>2] = $$1;
  $237 = ((($$1)) + 8|0);
  HEAP32[$237>>2] = $F17$0;
  $238 = ((($$1)) + 12|0);
  HEAP32[$238>>2] = $226;
  return;
 }
 $239 = $$2 >>> 8;
 $240 = ($239|0)==(0);
 if ($240) {
  $I20$0 = 0;
 } else {
  $241 = ($$2>>>0)>(16777215);
  if ($241) {
   $I20$0 = 31;
  } else {
   $242 = (($239) + 1048320)|0;
   $243 = $242 >>> 16;
   $244 = $243 & 8;
   $245 = $239 << $244;
   $246 = (($245) + 520192)|0;
   $247 = $246 >>> 16;
   $248 = $247 & 4;
   $249 = $248 | $244;
   $250 = $245 << $248;
   $251 = (($250) + 245760)|0;
   $252 = $251 >>> 16;
   $253 = $252 & 2;
   $254 = $249 | $253;
   $255 = (14 - ($254))|0;
   $256 = $250 << $253;
   $257 = $256 >>> 15;
   $258 = (($255) + ($257))|0;
   $259 = $258 << 1;
   $260 = (($258) + 7)|0;
   $261 = $$2 >>> $260;
   $262 = $261 & 1;
   $263 = $262 | $259;
   $I20$0 = $263;
  }
 }
 $264 = (546248 + ($I20$0<<2)|0);
 $265 = ((($$1)) + 28|0);
 HEAP32[$265>>2] = $I20$0;
 $266 = ((($$1)) + 16|0);
 $267 = ((($$1)) + 20|0);
 HEAP32[$267>>2] = 0;
 HEAP32[$266>>2] = 0;
 $268 = HEAP32[(545948)>>2]|0;
 $269 = 1 << $I20$0;
 $270 = $268 & $269;
 $271 = ($270|0)==(0);
 if ($271) {
  $272 = $268 | $269;
  HEAP32[(545948)>>2] = $272;
  HEAP32[$264>>2] = $$1;
  $273 = ((($$1)) + 24|0);
  HEAP32[$273>>2] = $264;
  $274 = ((($$1)) + 12|0);
  HEAP32[$274>>2] = $$1;
  $275 = ((($$1)) + 8|0);
  HEAP32[$275>>2] = $$1;
  return;
 }
 $276 = HEAP32[$264>>2]|0;
 $277 = ($I20$0|0)==(31);
 $278 = $I20$0 >>> 1;
 $279 = (25 - ($278))|0;
 $280 = $277 ? 0 : $279;
 $281 = $$2 << $280;
 $K21$0 = $281;$T$0 = $276;
 while(1) {
  $282 = ((($T$0)) + 4|0);
  $283 = HEAP32[$282>>2]|0;
  $284 = $283 & -8;
  $285 = ($284|0)==($$2|0);
  if ($285) {
   label = 127;
   break;
  }
  $286 = $K21$0 >>> 31;
  $287 = (((($T$0)) + 16|0) + ($286<<2)|0);
  $288 = $K21$0 << 1;
  $289 = HEAP32[$287>>2]|0;
  $290 = ($289|0)==(0|0);
  if ($290) {
   label = 124;
   break;
  } else {
   $K21$0 = $288;$T$0 = $289;
  }
 }
 if ((label|0) == 124) {
  $291 = HEAP32[(545960)>>2]|0;
  $292 = ($287>>>0)<($291>>>0);
  if ($292) {
   _abort();
   // unreachable;
  }
  HEAP32[$287>>2] = $$1;
  $293 = ((($$1)) + 24|0);
  HEAP32[$293>>2] = $T$0;
  $294 = ((($$1)) + 12|0);
  HEAP32[$294>>2] = $$1;
  $295 = ((($$1)) + 8|0);
  HEAP32[$295>>2] = $$1;
  return;
 }
 else if ((label|0) == 127) {
  $296 = ((($T$0)) + 8|0);
  $297 = HEAP32[$296>>2]|0;
  $298 = HEAP32[(545960)>>2]|0;
  $299 = ($297>>>0)>=($298>>>0);
  $not$ = ($T$0>>>0)>=($298>>>0);
  $300 = $299 & $not$;
  if (!($300)) {
   _abort();
   // unreachable;
  }
  $301 = ((($297)) + 12|0);
  HEAP32[$301>>2] = $$1;
  HEAP32[$296>>2] = $$1;
  $302 = ((($$1)) + 8|0);
  HEAP32[$302>>2] = $297;
  $303 = ((($$1)) + 12|0);
  HEAP32[$303>>2] = $T$0;
  $304 = ((($$1)) + 24|0);
  HEAP32[$304>>2] = 0;
  return;
 }
}
function runPostSets() {
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
  }
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0 | 0, tempRet0 ^ $7$1 | 0, $7$0 | 0, $7$1 | 0) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0 | 0, HEAP32[$rem + 4 >> 2] ^ $1$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&31](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&31](a1|0,a2|0);
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&31](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return FUNCTION_TABLE_iiiiiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&31](a1|0,a2|0)|0;
}

function b0(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(0);return 0;
}
function b1(p0) {
 p0 = p0|0; nullFunc_vi(1);
}
function b2(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(2);
}
function b3(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(3);return 0;
}
function b4(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(4);return 0;
}
function b5(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(5);return 0;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_res0_inverse,b0,_res1_class,b0,_res1_inverse,_res2_class,b0,_res2_inverse,b0,b0,b0
,b0,b0,b0];
var FUNCTION_TABLE_vi = [b1,b1,b1,b1,_floor1_free_info,_floor1_free_look,b1,b1,b1,b1,_floor0_free_info,_floor0_free_look,b1,b1,b1,b1,_res0_free_info,_res0_free_look,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_vii = [b2,_floor1_pack,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_res0_pack,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2];
var FUNCTION_TABLE_iiiii = [b3,b3,b3,b3,b3,b3,b3,_floor1_inverse2,b3,b3,b3,b3,b3,_floor0_inverse2,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_vorbis_book_decodevs_add
,_vorbis_book_decodev_add,b3,b3];
var FUNCTION_TABLE_iiiiiiiii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_res1_forward,b4,b4,_res2_forward,b4,b4,b4,b4
,b4,b4,b4];
var FUNCTION_TABLE_iii = [b5,b5,_floor1_unpack,_floor1_look,b5,b5,_floor1_inverse1,b5,_floor0_unpack,_floor0_look,b5,b5,_floor0_inverse1,b5,_res0_unpack,_res0_look,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_apsort,_icomp,b5
,b5,b5,b5];

  return { _vorbis_analysis: _vorbis_analysis, _oggpack_write: _oggpack_write, _bitshift64Lshr: _bitshift64Lshr, _oggpack_writeinit: _oggpack_writeinit, _encoder_create_vbr: _encoder_create_vbr, _encoder_prepare_analysis_buffers: _encoder_prepare_analysis_buffers, _encoder_get_data_len: _encoder_get_data_len, _memset: _memset, _vorbis_info_clear: _vorbis_info_clear, _encoder_finish: _encoder_finish, _vorbis_analysis_headerout: _vorbis_analysis_headerout, _encoder_clear_data: _encoder_clear_data, _encoder_write_headers: _encoder_write_headers, _encoder_get_data: _encoder_get_data, _bitshift64Shl: _bitshift64Shl, _oggpack_bytes: _oggpack_bytes, _oggpack_look: _oggpack_look, _vorbis_info_init: _vorbis_info_init, _ogg_stream_flush: _ogg_stream_flush, _vorbis_comment_init: _vorbis_comment_init, _ogg_stream_init: _ogg_stream_init, _i64Add: _i64Add, _encoder_get_analysis_buffer: _encoder_get_analysis_buffer, _vorbis_analysis_buffer: _vorbis_analysis_buffer, _oggpack_adv: _oggpack_adv, _ogg_stream_clear: _ogg_stream_clear, _oggpack_read: _oggpack_read, _vorbis_encode_init_vbr: _vorbis_encode_init_vbr, _ogg_stream_pageout: _ogg_stream_pageout, _vorbis_comment_clear: _vorbis_comment_clear, _vorbis_comment_add_tag: _vorbis_comment_add_tag, _encoder_encode: _encoder_encode, _llvm_bswap_i32: _llvm_bswap_i32, _free: _free, _memcpy: _memcpy, _memmove: _memmove, _ogg_stream_packetin: _ogg_stream_packetin, _oggpack_get_buffer: _oggpack_get_buffer, _malloc: _malloc, _oggpack_writeclear: _oggpack_writeclear, _encoder_destroy: _encoder_destroy, _oggpack_writetrunc: _oggpack_writetrunc, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiii: dynCall_iiiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iii: dynCall_iii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__vorbis_analysis = asm["_vorbis_analysis"]; asm["_vorbis_analysis"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__vorbis_analysis.apply(null, arguments);
};

var real__oggpack_write = asm["_oggpack_write"]; asm["_oggpack_write"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__oggpack_write.apply(null, arguments);
};

var real__oggpack_writeinit = asm["_oggpack_writeinit"]; asm["_oggpack_writeinit"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__oggpack_writeinit.apply(null, arguments);
};

var real__encoder_encode = asm["_encoder_encode"]; asm["_encoder_encode"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__encoder_encode.apply(null, arguments);
};

var real__encoder_prepare_analysis_buffers = asm["_encoder_prepare_analysis_buffers"]; asm["_encoder_prepare_analysis_buffers"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__encoder_prepare_analysis_buffers.apply(null, arguments);
};

var real__encoder_get_data_len = asm["_encoder_get_data_len"]; asm["_encoder_get_data_len"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__encoder_get_data_len.apply(null, arguments);
};

var real__vorbis_comment_init = asm["_vorbis_comment_init"]; asm["_vorbis_comment_init"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__vorbis_comment_init.apply(null, arguments);
};

var real__vorbis_info_clear = asm["_vorbis_info_clear"]; asm["_vorbis_info_clear"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__vorbis_info_clear.apply(null, arguments);
};

var real__encoder_finish = asm["_encoder_finish"]; asm["_encoder_finish"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__encoder_finish.apply(null, arguments);
};

var real__vorbis_analysis_headerout = asm["_vorbis_analysis_headerout"]; asm["_vorbis_analysis_headerout"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__vorbis_analysis_headerout.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__encoder_get_data = asm["_encoder_get_data"]; asm["_encoder_get_data"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__encoder_get_data.apply(null, arguments);
};

var real__encoder_write_headers = asm["_encoder_write_headers"]; asm["_encoder_write_headers"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__encoder_write_headers.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real__oggpack_bytes = asm["_oggpack_bytes"]; asm["_oggpack_bytes"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__oggpack_bytes.apply(null, arguments);
};

var real__oggpack_look = asm["_oggpack_look"]; asm["_oggpack_look"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__oggpack_look.apply(null, arguments);
};

var real__vorbis_info_init = asm["_vorbis_info_init"]; asm["_vorbis_info_init"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__vorbis_info_init.apply(null, arguments);
};

var real__ogg_stream_flush = asm["_ogg_stream_flush"]; asm["_ogg_stream_flush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ogg_stream_flush.apply(null, arguments);
};

var real__oggpack_writeclear = asm["_oggpack_writeclear"]; asm["_oggpack_writeclear"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__oggpack_writeclear.apply(null, arguments);
};

var real__ogg_stream_init = asm["_ogg_stream_init"]; asm["_ogg_stream_init"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ogg_stream_init.apply(null, arguments);
};

var real__vorbis_encode_init_vbr = asm["_vorbis_encode_init_vbr"]; asm["_vorbis_encode_init_vbr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__vorbis_encode_init_vbr.apply(null, arguments);
};

var real__encoder_get_analysis_buffer = asm["_encoder_get_analysis_buffer"]; asm["_encoder_get_analysis_buffer"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__encoder_get_analysis_buffer.apply(null, arguments);
};

var real__vorbis_analysis_buffer = asm["_vorbis_analysis_buffer"]; asm["_vorbis_analysis_buffer"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__vorbis_analysis_buffer.apply(null, arguments);
};

var real__encoder_clear_data = asm["_encoder_clear_data"]; asm["_encoder_clear_data"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__encoder_clear_data.apply(null, arguments);
};

var real__ogg_stream_clear = asm["_ogg_stream_clear"]; asm["_ogg_stream_clear"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ogg_stream_clear.apply(null, arguments);
};

var real__oggpack_read = asm["_oggpack_read"]; asm["_oggpack_read"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__oggpack_read.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__oggpack_get_buffer = asm["_oggpack_get_buffer"]; asm["_oggpack_get_buffer"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__oggpack_get_buffer.apply(null, arguments);
};

var real__ogg_stream_pageout = asm["_ogg_stream_pageout"]; asm["_ogg_stream_pageout"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ogg_stream_pageout.apply(null, arguments);
};

var real__vorbis_comment_clear = asm["_vorbis_comment_clear"]; asm["_vorbis_comment_clear"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__vorbis_comment_clear.apply(null, arguments);
};

var real__vorbis_comment_add_tag = asm["_vorbis_comment_add_tag"]; asm["_vorbis_comment_add_tag"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__vorbis_comment_add_tag.apply(null, arguments);
};

var real__oggpack_adv = asm["_oggpack_adv"]; asm["_oggpack_adv"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__oggpack_adv.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_bswap_i32.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__ogg_stream_packetin = asm["_ogg_stream_packetin"]; asm["_ogg_stream_packetin"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ogg_stream_packetin.apply(null, arguments);
};

var real__encoder_create_vbr = asm["_encoder_create_vbr"]; asm["_encoder_create_vbr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__encoder_create_vbr.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__encoder_destroy = asm["_encoder_destroy"]; asm["_encoder_destroy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__encoder_destroy.apply(null, arguments);
};

var real__oggpack_writetrunc = asm["_oggpack_writetrunc"]; asm["_oggpack_writetrunc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__oggpack_writetrunc.apply(null, arguments);
};
var _vorbis_analysis = Module["_vorbis_analysis"] = asm["_vorbis_analysis"];
var _oggpack_write = Module["_oggpack_write"] = asm["_oggpack_write"];
var _oggpack_writeinit = Module["_oggpack_writeinit"] = asm["_oggpack_writeinit"];
var _encoder_encode = Module["_encoder_encode"] = asm["_encoder_encode"];
var _encoder_prepare_analysis_buffers = Module["_encoder_prepare_analysis_buffers"] = asm["_encoder_prepare_analysis_buffers"];
var _encoder_get_data_len = Module["_encoder_get_data_len"] = asm["_encoder_get_data_len"];
var _vorbis_comment_init = Module["_vorbis_comment_init"] = asm["_vorbis_comment_init"];
var _vorbis_info_clear = Module["_vorbis_info_clear"] = asm["_vorbis_info_clear"];
var _encoder_finish = Module["_encoder_finish"] = asm["_encoder_finish"];
var _vorbis_analysis_headerout = Module["_vorbis_analysis_headerout"] = asm["_vorbis_analysis_headerout"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _encoder_get_data = Module["_encoder_get_data"] = asm["_encoder_get_data"];
var _encoder_write_headers = Module["_encoder_write_headers"] = asm["_encoder_write_headers"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _oggpack_bytes = Module["_oggpack_bytes"] = asm["_oggpack_bytes"];
var _oggpack_look = Module["_oggpack_look"] = asm["_oggpack_look"];
var _vorbis_info_init = Module["_vorbis_info_init"] = asm["_vorbis_info_init"];
var _ogg_stream_flush = Module["_ogg_stream_flush"] = asm["_ogg_stream_flush"];
var _oggpack_writeclear = Module["_oggpack_writeclear"] = asm["_oggpack_writeclear"];
var _memset = Module["_memset"] = asm["_memset"];
var _ogg_stream_init = Module["_ogg_stream_init"] = asm["_ogg_stream_init"];
var _vorbis_encode_init_vbr = Module["_vorbis_encode_init_vbr"] = asm["_vorbis_encode_init_vbr"];
var _encoder_get_analysis_buffer = Module["_encoder_get_analysis_buffer"] = asm["_encoder_get_analysis_buffer"];
var _vorbis_analysis_buffer = Module["_vorbis_analysis_buffer"] = asm["_vorbis_analysis_buffer"];
var _encoder_clear_data = Module["_encoder_clear_data"] = asm["_encoder_clear_data"];
var _ogg_stream_clear = Module["_ogg_stream_clear"] = asm["_ogg_stream_clear"];
var _oggpack_read = Module["_oggpack_read"] = asm["_oggpack_read"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _oggpack_get_buffer = Module["_oggpack_get_buffer"] = asm["_oggpack_get_buffer"];
var _ogg_stream_pageout = Module["_ogg_stream_pageout"] = asm["_ogg_stream_pageout"];
var _vorbis_comment_clear = Module["_vorbis_comment_clear"] = asm["_vorbis_comment_clear"];
var _vorbis_comment_add_tag = Module["_vorbis_comment_add_tag"] = asm["_vorbis_comment_add_tag"];
var _oggpack_adv = Module["_oggpack_adv"] = asm["_oggpack_adv"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _ogg_stream_packetin = Module["_ogg_stream_packetin"] = asm["_ogg_stream_packetin"];
var _encoder_create_vbr = Module["_encoder_create_vbr"] = asm["_encoder_create_vbr"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _encoder_destroy = Module["_encoder_destroy"] = asm["_encoder_destroy"];
var _oggpack_writetrunc = Module["_oggpack_writetrunc"] = asm["_oggpack_writetrunc"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===




function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



    return Module;
}

// node.js Environment
var module;
if (module && module.exports) {
    makeVorbisEncoderModule({}, module);
}

// Web Worker Environment
if (!module && this.document === undefined) {
    VorbisWorkerScript.main(this);
}

